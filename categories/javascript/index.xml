<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript | Macro Life</title>
    <link>/categories/javascript/</link>
      <atom:link href="/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <description>JavaScript</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 11 May 2015 14:58:43 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>JavaScript</title>
      <link>/categories/javascript/</link>
    </image>
    
    <item>
      <title>JavaScript 7-11节笔记代码March28th</title>
      <link>/blog/2015/05/11/javascript-7-11%E8%8A%82%E7%AC%94%E8%AE%B0%E4%BB%A3%E7%A0%81march28th/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>/blog/2015/05/11/javascript-7-11%E8%8A%82%E7%AC%94%E8%AE%B0%E4%BB%A3%E7%A0%81march28th/</guid>
      <description>&lt;p&gt;function串讲笔记&lt;/p&gt;

&lt;p&gt;1：function是什么？
     JS的function类似于java和.Net的方法&lt;/p&gt;

&lt;p&gt;2：对比JS版本和Java版本的两个变量的求和，得出三个不同点。
JS版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function sum(num1,num2)
{
    var ret = num1+num2;
    return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;public int sum(int num1,int num2)
{
   int ret= num1+num2;
  return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相同点：
函数名字
参数列表
变量声明
返回值
不同点：
JS的函数声明没有修饰符
JS的函数声明没有返回值
JS的函数声明的参数列表没有变量类型&lt;/p&gt;

&lt;p&gt;由这三个不同点我们可以提出三个问题
为什么没有修饰符？
为什么没有返回值类型？
为什么参数列表没有变量类型？&lt;/p&gt;

&lt;p&gt;3：JS为什么没有修饰符？
Js不是面向对象的语言，虽然有对象但不是真正的对象。&lt;/p&gt;

&lt;p&gt;Js的对象是模拟出来的，没有封装的概念，所以不需要使用修饰符（修饰符只是针对于对象）&lt;/p&gt;

&lt;p&gt;4：JS为什么没有返回值类型和参数列表变量类型？
这两个问题是一样的道理，都是弱类型的原因
5：由参数列表引入一个arguments对象，what is it?
  在开始了解arguments对象之前，必须说明函数的四种定义方式，如下所示：
5.1最一般的函数定义方法：
有function
有函数名称sum
有参数列表 num1,num2
可有可无的return语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function sum(num1,num2)
{
    var ret = num1+num2;
    return ret
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.2最常见的匿名类函数调用方法：
有function
没有函数名称
有变量泪飚 num1,num2
可有可无的return语句
通过一个var sum函数类型变量获得该类型，并使得sum变量具有可调用的属性。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;var sum = function(num1,num2)
{
    var ret = num1+num2;
    return ret
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;规律：页面中的js代码执行之前，浏览器会先扫描全部的js代码，遇到一个函数声明，就把此函数的声明加到全局域，从上到下扫描，若函数名称一样，后声明的函数会覆盖掉前面。
5.3较特殊的匿名类函数的声明和使用：
两个括号()()
第一个括号是匿名类函数的声明
第二个括号是匿名类的函数实参&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;(function(num1,num2)
{
   var ret=num1+num2;
   return ret;
})(3,2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特点：只会执行一次。&lt;/p&gt;

&lt;p&gt;5.4较少用的Function类产生函数对象&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;var sum = new Function();形式
var sum = Function(&amp;quot;n1&amp;quot;,&amp;quot;n2&amp;quot;,&amp;quot;alert(n1+n2); var a=3;var b=4;alert(a+b);&amp;quot;)

sum(3,3);//和其他函数声明的调用一样。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也是为什么匿名函数可以赋值给一个变量的原因，因为Function类可以产生对象，对象可以赋值给一个变量（对象只是一个引用）。
特点：效率低效。&lt;/p&gt;

&lt;p&gt;上面的五种函数声明方式都涉及到参数列表，而JS使用arguments可以获得任意长度的参数列表。
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var sum = function()
{
    var ret=0;
   for(var i=0;i&amp;lt;arguments.length;i++)
  {
    ret = ret+arguments[i];  
   }
    return ret;
}

sum(1,2);
sum(1,5,68,98);
sum(4,45,7,8,3,23,7,9);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而正因为arguments的作用导致了js不能重载。&lt;/p&gt;

&lt;p&gt;6：JS为什么不能重载？
存在arguments对象，导致参数列表可以任意长度。
弱类型决定了参数列表的变量不需要类型修饰。&lt;/p&gt;

&lt;p&gt;7：函数调用的两种方式？
标签的事件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;button id =”btn” onclick=”alert(4);var  a =3; var b=4; alert(a+b);”)
复制代码

Dom的window.onload=function(){}方式，通过document的方法获得标签地址
Window.onload=function()
{
Window.document.getElementById(“btn”).onclick=function()
{
    Show();
}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>JavaScript1-6节笔记代码March26th</title>
      <link>/blog/2015/05/11/javascript1-6%E8%8A%82%E7%AC%94%E8%AE%B0%E4%BB%A3%E7%A0%81march26th/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>/blog/2015/05/11/javascript1-6%E8%8A%82%E7%AC%94%E8%AE%B0%E4%BB%A3%E7%A0%81march26th/</guid>
      <description>&lt;p&gt;js 常见 Events
属性        当以下情况发生时，出现此事件&lt;br /&gt;
onabort        图像加载被中断        元素失去焦点&lt;br /&gt;
onchange        用户改变域的内容
onclick        鼠标点击某个对象
ondblclick        鼠标双击某个对象&lt;br /&gt;
onerror        当加载文档或图像时发生某个错误&lt;br /&gt;
onfocus        元素获得焦点&lt;br /&gt;
onkeydown        某个键盘的键被按下&lt;br /&gt;
onkeypress        某个键盘的键被按下或按住&lt;br /&gt;
onkeyup        某个键盘的键被松开&lt;br /&gt;
onload        某个页面或图像被完成加载&lt;br /&gt;
onmousedown        某个鼠标按键被按下&lt;br /&gt;
onmousemove        鼠标被移动&lt;br /&gt;
onmouseout        鼠标从某元素移开&lt;br /&gt;
onmouseover        鼠标被移到某元素之上&lt;br /&gt;
onmouseup        某个鼠标按键被松开&lt;br /&gt;
onreset        重置按钮被点击&lt;br /&gt;
onresize        窗口或框架被调整尺寸&lt;br /&gt;
onselect        文本被选定&lt;br /&gt;
onsubmit        提交按钮被点击&lt;br /&gt;
onunload        用户退出页面&lt;br /&gt;
一、复习DOM
        1.对于JS来说，在Web中，最重要的应用之一就是DOM。
        2.Dom是针对HTML和XML操作的一个API。
        3.Dom将一个文档表示为一颗家族树（父，兄，子 节点）
        4.几个常用的API。
                getElementById 只能用document来使用，通过id查找一个节点。
                getElementsByTagName  返回的是一个数组，通过指定的标签名去寻找，不必作用于整个文档。
                hasChildNodes 调用的节点是否含有子节点。
        5.Dom中的节点有文本节点（Text），属性节点（Attribute），元素节点（Element）。
        6.以上3类节点中，都有如下属性：
                nodeName：只读，标识的是给定节点的名字，该节点为只读属性。对于文本节点返回的是 #text 的字符串。
                noteType：只读，返回值为int，标识节点的类型。元素节点 1，属性节点 2，文本节点 3。（从小到大的记忆顺序）
                nodeValue: 可读，可写。返回当前节点的值，属性节点返回属性的值，文本节点返回文本的值，元素节点啥都没有。
        7.Dom中常用方法：
                replaceChild()：返回值是一个指向新的或者旧的节点。（？）作用是吧一个父元素中的子节点替换为另外一个子节点。
                        ex:        var reference = element.replaceChild(newChild,oldChild);
                getAttribute(): 返回的是指定元素的给凌属性的值。
                        ex:        var attributeValue = element.getAttribute(attributeName);
                setAttribute(key,value)：为指定的元素添加某个属性，如果此属性已经存在就刷新，如果不存在就添加。
                        ex:      var para = document.createElement(“p”);           para.setAttribute(“id”,”fineprint”);
                createElement(eleName):通过指定的标签名字来创建一个元素节点。这个新创建的节点没实际添加到某个节点上。
                        ex:        var oP = document.createElement(&amp;ldquo;p&amp;rdquo;);
                createTextNode()：创建一个包含指定文本的文本节点。返回值为一个指向新建文本节点的指针。
                        ex: var oText=document.createTextNode(&amp;ldquo;HEllo world&amp;rdquo;);
                appendChild()：为指定的元素添加一个节点到最后一个节点后。
                insertBefore()：在指定的节点前面添加。
                        ex:        var reference = element.insertBefore(newNode,targetNode);
                        注：Dom没有提供insertAfter()方法：就是在插入节点的下一个节点之前添加，就是在指定节点的前面添加。
                removeChild()：在指定节点中的子节点删除一个节点。
                        注：一定要是父节点去调用然后括号里面是自己点。
                        ex： var message = document.getElementById(“fineprint”);
                                        var container = message.parentNode;
                                        container.removeChild(message);
        8.Dom中常用属性
                ChildNodes：返回的是指定父节点的所有子节点。
                        注：文本节点和属性节点，肯定不含有子节点了，如果调用这个属性，会返回空数组。
                firstChild:返回的是指定元素的第一个子节点。
                        ex:node.ChileNodes[0]和firstChild 是相同的。
                lastChild:和first想法，最后一个。
                nextSibling：指定节点的下一个子节点。
                previousSibling:指定节点的上一个子节点。
                parentNode：返回的是指定节点的父节点。
二、JavaScript练习总结
        1.window.onload=function(){&amp;hellip;}表示的是在页面加载完成后便开始运行。
        2.node.insertBefor(new node,null)。这样调用就可以在指定的前面添加了!
        3.如果网页乱码，可以在&lt;head&gt;&lt;/head&gt;之间加上：  &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
        4.特别说明：insertBefor这个方法。3个参数：  paraentNode.insertBefor(newNode,childNodeInParaNode);
                就是说哪个Node来调用insertBefore方法就是在那个Node的子节点中插入，其中第一个参数是要插入的节点，第二个参数是自己点中要在哪个指定的子元素前面。
                注：第二个节点可是是null，就表示在最后添加，同AppendChild。特别注意了。
        5.getElementByTagName(&amp;ldquo;标签&amp;rdquo;)，这个里面输入的是HTML的标签。
        6.对于元素节点的nodeName，其返回值永远是大小的标签。
        7.忘记nodeValue吧，使用value就够了，前面的需要区分下。
        8.value这个属性可读可写。
        9.对于使用firstChild和lastChild不是我们所见的第一个。这个特别注意了。
        10.通常来说firstNode和lastNode获取的是文本节点。
        11.对于文本节点，如果要设置他的值，需要使用nodeValue而不是value。比如说firstChild和lastChild获取的都是属于文本节点。
        12.为某一个节点添加 可以使用innderHtml也可以使用 创建一个TextNode然后添加到某个节点上去。
        13.对于replaceChild，parentNode.replaceChild(newChild，childInParane).这个方法的作用是父节点调用替换某个子节点，第一个节点一般都是新的节点，第二个节点
        14.几个不加括号的地方:
                window.onload=function myFunc(){&amp;hellip;}
        15.在JS中，方法带了括号表示运行。
        16.
三、问题
        2.innerHtml和innerText的区别？
        3.window.onload=function(){} 在一个页面只能写一次。
        4.关于parenNode和parentElement区别？&lt;/p&gt;

&lt;p&gt;2.innerHtml和innerText的区别？
从字面意义来讲 innerHtml操作标签内的html代码 , 而innerText操作标签内的文本 , 当标签内只有文本时这两个方法是一样的 , 区别就在标签内还要子标签时,写代码测试就知道了&lt;/p&gt;

&lt;p&gt;3.window.onload=function(){} 在一个页面只能写一次。
这个是&amp;rdquo;重量级&amp;rdquo;的加载完成事件 , 只能注册一次,jQuery的ready()就很方便&lt;/p&gt;

&lt;p&gt;4.关于parenNode和parentElement区别？
parentNode 是Node类的属性 , 而parentElement是Element类的属性 , 很多情况下可以通用,只是属于两个不同的体系,使用时尝试着看看效果就好&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;Html&amp;gt;
&amp;lt;Head&amp;gt;

&amp;lt;!--script 一定要小写--&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
//javascript内部注释使用//表示单行注释  /**/表示快注释
//javascript大小写敏感
//javascript可以用var表示所有数值类型，代替int,String,boolean等
//按F5刷新，进行调试
//变量和数组的定义
//变量定义


var name=&#39;字符串&#39;;
var age=39;

//数组定义
//一定要数组用  [] 进行定义，元素之间用逗号隔开   []吃过亏
//map数组用{} 定义 键值对之间用逗号隔开
var apples=[&#39;ap1&#39;,&#39;ap2&#39;];
var arr={&amp;quot;name&amp;quot;:&#39;张三&#39;,&#39;age&#39;:45};

//打印alert
alert(name);
alert(age);
for(var i=0;i&amp;lt;apples.length;i++)
{
    alert(apples[i]);
}

for(var key in arr)
{
    alert(key+&#39;===&#39;+arr[key]);
}

//数值类型的转换
var n = &#39;fsf&#39;;
if(isNaN(n))
  {
    alert(&#39;不能使用&#39;);
  }else
    {
      alert(&#39;可以使用&#39;);
    }
var num=&#39;100&#39;
var n = Number(num);
alert(n);

alert(parseFloat(&#39;100.3&#39;));//转小数
alert(parseInt(&#39;100&#39;))//转整数

//函数定义  及参数获取
// 在浏览器的源码窗口中 ，加入 断点，进行断点调试,单步调试(F8 快捷键 在Opera中）

function sum()
{
  var apple=0;
  //循环语句的使用
  //内置变量arguments的调用
  for(var i=0;i&amp;lt;arguments.length;i++)
  {
    apple+=arguments[i];
  }
  //不加入return 没有返回值 则sumofmoney=undefined
  return apple;
}

var sumOfMoney=sum(1,3,4,5,6,2);
alert(&#39;1+2+3+4+5+6+2==&#39;+sumOfMoney);


//注意转义字符
alert(&amp;quot;D:\\Program Files \\ok\\fd&amp;quot;);
alert(&#39;D:\\Program Files \\ok\\fd&#39;);


//匿名方法是需要着重学习的
//1
var ff = function()
{
  alert(&#39;go home!&#39;);
}
ff();

//一个易错点
//btn.onclick=function(){} onclick后面不能家少年宫()
//2
(function(n1,n2)
{
   alert(n1+n2);
}
)(1,2);
//3
onload=function()
{
  document.getElementById(&#39;btn&#39;).onClick=function()
  {
    alert(&amp;quot;You are clicking  the button&amp;quot;)
  }
};



//字符串的常用方法
alert(&#39;I am from the God&#39;.length);
alert(&#39;I am from the God&#39;.charAt(3));
alert(&#39;I am from the God&#39;.charAt(9));
alert(&#39;I am from the God&#39;.substring(3,9));
alert(&#39;I am from the God&#39;.indexOf(&#39;t&#39;));
var  names = &#39;I am from the God&#39;.split(&#39; &#39;);
for(var name in names)
  {
    alert(name+&#39;=&#39;+names[name]);
  }
for(var i=0;i&amp;lt;names.length;i++)
{
  alert(names[i]);
}

//杨老师练习1
alert(&#39;杨1&#39;);
window.onload=function()
{
  var buttons=document.getElementsByName(&#39;button1&#39;);
  for(var i=0;  i &amp;lt; buttons.length;i++)
  {
    //alert(buttons[i]   onclick不能写成onClick  大小写敏感
    buttons[i].onclick=function()
    {
        alert(i);
    };
  }
}
//杨老师练习2
alert(&#39;杨2&#39;);
function aa()
{
  alert(&#39;aaa&#39;);
  return function(){alert(&#39;bbb&#39;);};
}
alert(aa);
alert(aa());
// alert(aa());打印是aaa,和function(){alert(&amp;quot;bbb&amp;quot;);}以为执行函数方法题内容,返回的是一个匿名函数,返回的是函数体字符串. 
alert(aa()());
//alert(aa()());打印的是aaa,bbb,undefined ,先执行aa()，函数体内容aaa，返回字符串function(){alert(&amp;quot;bbb&amp;quot;);}，再执行function(){alert(&amp;quot;bbb&amp;quot;);}()，
//这时该方法名是：function(){alert(&amp;quot;bbb&amp;quot;);}，先打印bbb，在打印undefined，因为该方法名未定义， 
//杨老师练习3
alert(&#39;杨3&#39;);
//每隔1s重复的执行  烦人，注释掉
//setInterval(aa,1000);
//setInterval(aa(),1000);
//杨老师练习4
alert(&#39;杨4&#39;);
//setInterval(alert(&#39;a&#39;),1000); //每隔1s显示a
//setInterval(function(){alert(&amp;quot;a&amp;quot;);},1000);  //返回一个函数 因为未被执行，这个函数没有任何东西
//杨老师练习5
alert(&#39;杨5&#39;);
var s1=&amp;quot;aaa&amp;quot;;
var s2=new String(&amp;quot;aaa&amp;quot;);
alert(s1 instanceof Object); //false
alert(s2 instanceof Object);//true
alert(s1 instanceof String);//false
alert(s2 instanceof String);// true
alert(typeof(s1));  //string
alert(typeof(s2)); //object
//杨老师练习6
alert(&#39;杨6&#39;);
var x=1;
var y=0;
var z=0;
function add(n)
{
  n=n+1;
  return n;
}
y=add(x);
//js只会用最新的函数定义
function add(n)
{
  n=n+3;
  return n;
}

z=add(x);
alert(&#39;y=&#39;+y+&#39;z=&#39;+z);//y-4  z=4  只用最新的
//杨老师练习7
alert(&#39;杨7&#39;);
var add1=function(n)
{
   n = n+1;
   return n;
}
y=add1(x);
add1 =function(n)
{
  n= n +3;
  return n;
}
z= add1(x);
alert(&#39;y=&#39;+y+&#39; z=&#39;+z);
//杨老师练习8
alert(&#39;杨8&#39;);
var s1=&amp;quot;aaa&amp;quot;; // --------------------&amp;gt;是String类型 非对象
var s2= new String(&#39;aaa&#39;);
alert(s1 instanceof Object);
alert(s2 instanceof Object);
alert(s1 instanceof String);
alert(s2 instanceof String);
alert(typeof(s1));
alert(typeof(s2));


//杨老师练习9
alert(&#39;杨9&#39;);
alert(&#39;易错点： btn.onclick=function(){}  onclick后面别跟()&#39;)

&amp;lt;/script&amp;gt;

&amp;lt;/Head&amp;gt;

&amp;lt;Body&amp;gt;
  &amp;lt;Div&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮1&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮3&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮4&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮5&amp;quot;/&amp;gt;
  &amp;lt;/Div&amp;gt;
  &amp;lt;Div&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;click&amp;quot; id=&amp;quot;btn&amp;quot;/&amp;gt;
  &amp;lt;/Div&amp;gt;
  &amp;lt;Div&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;A href=&amp;quot;javascript:alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;显示时间&amp;lt;/A&amp;gt;
    &amp;lt;/Br&amp;gt;
    &amp;lt;A href=&amp;quot;javascript:void(0);&amp;quot;&amp;gt;显示时间&amp;lt;/A&amp;gt;
    &amp;lt;/Br&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;显示时间&amp;quot;,onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;/&amp;gt;
  &amp;lt;Div&amp;gt;
&amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么jquery.js有那么多的&lt;br /&gt;
name : function(){}, 的写法？ 他们是什么意思？&lt;/p&gt;

&lt;p&gt;JQuery.js中出现如下的书写方式：&lt;/p&gt;

&lt;p&gt;success：function(data){}
类似于function success(data){}
不过是面向对象的写法，把这个方法当成一个prototype对象&lt;/p&gt;

&lt;p&gt;引入JSON对象
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，易于阅读和编写，同时也易于机器解析和生成。{a:&amp;ldquo;a&amp;rdquo;}这就是一
个JSON数据。 JSON数据是用键值对的形式存储的。冒号（:）前面的是键，冒号后面的是值。JSON,的每一个值之间可以用分号（;）隔
开。大的类可以用{}大括号包围他其中的值，集合可以用[]中括号，包围值
&amp;ldquo;名称/值&amp;rdquo;对的集合 不同语言中，它被理解为对象(object)，记录(record)，结构(struct)，字典(dictionary)，哈希表(hash table)，键列表(keyed list)等
值的有序列表 多数语言中被理解为数组(array)&lt;/p&gt;

&lt;p&gt;使用：
JSON以一种特定的字符串形式来表示 JavaScript 对象。如果将具有这样一种形式的字符串赋给任意一个 JavaScript 变量，那么该变&lt;/p&gt;

&lt;p&gt;量会变成一个对象引用.
比如：
您可以使用以下JSON形式来表示User对象：
{&amp;ldquo;UserID&amp;rdquo;:11, &amp;ldquo;Name&amp;rdquo;:&amp;ldquo;tht&amp;rdquo;, &amp;ldquo;Email&amp;rdquo;:&amp;ldquo;18039010◎qq.com&amp;rdquo;};
然后如果把这一字符串赋予一个JavaScript变量，那么就可以直接使用对象的任一属性了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        var User={&amp;quot;UserId&amp;quot;:11,&amp;quot;Name&amp;quot;:&amp;quot;Ye Zhaoliang&amp;quot;,&amp;quot;Email&amp;quot;:&amp;quot;977962857@qq.com&amp;quot;};
        alert(User.Name);

        //利用JSon对象方式  定义两个User对象
        var User1={&amp;quot;UserId&amp;quot;:12,&amp;quot;Name&amp;quot;:{&amp;quot;FirstName&amp;quot;:&amp;quot;Ye&amp;quot;,&amp;quot;LastName&amp;quot;:&amp;quot;Zhaoliang&amp;quot;},&amp;quot;Email&amp;quot;:&amp;quot;977962857@qq.com&amp;quot;};
        var User2={&amp;quot;UserId&amp;quot;:13,&amp;quot;Name&amp;quot;:{&amp;quot;FirstName&amp;quot;:&amp;quot;Ye&amp;quot;,&amp;quot;LastName&amp;quot;:&amp;quot;Wangliang&amp;quot;},&amp;quot;Email&amp;quot;:&amp;quot;977962859@qq.com&amp;quot;};
        alert(User1.Name.LastName+&amp;quot; love you!&amp;quot;);

        //用数组存储一个用户列表
        var Users=[User1,User2];
        alert(Users.length);
        for(var i=0;i&amp;lt;Users.length;i++)
        {
          alert(Users[i].UserId+&amp;quot; &amp;quot;+Users[i].Name.LastName);
        }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;
  &amp;lt;Body&amp;gt;

  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由此引出面向对象的JavaScript编程。&lt;/p&gt;

&lt;p&gt;![./image/java/object.gif][JSON对象的格式描述，用逗号分隔开多个对象，一个对象用{}组合，每个对象的属性用:分隔，冒号前面表示属性 &amp;hellip;]&lt;/p&gt;

&lt;p&gt;![./image/java/array.gif][用[]表达多个数组元素，元素之间不分类型，用逗号分隔元素]&lt;/p&gt;

&lt;p&gt;1: JS中单引号和双引号有什么区别？为什么在字符串中用单引号括起来，而不是双引号？
           一方面因为Html代码的属性值一般是使用双引号。
           JSON的数据格式一般是使用双引号的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       再进行字符串拼接的一般原则是： 单引号的内部可包含双引号（如若包含则加转义字符），双引号的内部可包含单引号（如若包含则加转义字符）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以字符串如果用单引号修饰就可以内部引用Html的属性。
比如
&lt;Div class=&#34;global-notify&#34; id=&#34;global-message&#34;&gt;
var str=&amp;rsquo;&lt;Div class=&#34;global-notify&#34; id=&#34;global-message&#34;&gt;&amp;lsquo;
复制代码
更多的是考虑到前端，会使用HTML的属性值，而Html的属性值都是用双引号包裹，所以如果再用单引号括起来不需要进行转义。
另外可能就是大家习惯。&lt;/p&gt;

&lt;p&gt;2：Javascript也有事件编程&lt;/p&gt;

&lt;p&gt;button中的onclick=&amp;ldquo;js代码&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;input type=“button” onclick=“ js代码&#34; /&gt;
复制代码&lt;/p&gt;

&lt;p&gt;href超链接的特殊的调用事件的方法：&lt;/p&gt;

&lt;p&gt;&lt;a href=“javascript:js代码”&gt;热点文字&lt;/a&gt;
复制代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      只有超链接的href中的JavaScript中才需要加“javascript:”，因为它不是事件，而是把”javascript:”看成像“http:”、“ftp:”、“thunder://”、“ed2k://”、“mailto:”一样的网络协议，交             由js解析引擎处理。只有href中，这是一个特例。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3：数据类型
基本数据类型：
Boolean
Number   &amp;mdash;-&amp;gt;小数和整数
        &amp;mdash;-parseInt(&amp;ldquo;)
        &amp;mdash;-parseFloat(&amp;ldquo;)
String
Null  &amp;mdash;-&amp;gt;
Undefined &amp;mdash;&amp;gt;未定义(未初始化)
               var ul ;    &amp;mdash;&amp;gt;ul is undefined
                    typeof(ul) &amp;mdash;-&amp;gt;undefined
                    typeof(null)&amp;mdash;-&amp;gt;null&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  == 非严格等于
  ===严格等于
     null==undefined -----&amp;gt;true
     null===undefined-----&amp;gt;false
      为什么？
      ===先判断类型是否一致，再判断值
       null对象是有着特殊意义的值，此时变量的值是&amp;quot;已知状态&amp;quot;(这和mysql的null不太一样，mysql直接就是不知道，那肯定就是无法判断）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用数据类型：
Object &amp;mdash;-&amp;gt;函数
          &amp;mdash;-&amp;gt; new Date()
          &amp;mdash;-&amp;gt; 数组    var apple=[&amp;lsquo;shanxi&amp;rsquo;,&amp;lsquo;yantai&amp;rsquo;];
          &amp;mdash;-&amp;gt;null&lt;/p&gt;

&lt;p&gt;方法：
instanceof &amp;mdash;&amp;ndash;&amp;gt;属于某种类型？
typeof(object) &amp;mdash;&amp;mdash;-&amp;gt;是什么类型的？&lt;/p&gt;

&lt;p&gt;4：javascript中没有方法重载&lt;/p&gt;

&lt;p&gt;所以在运行时候会事先确定好函数，一般是最靠近调用函数的函数定义
        function f1()
        {
          alert(&amp;lsquo;ell&amp;rsquo;);
        }
        function f1(name)
        {
          alert(name);
        }
        // f1();  得到undefined  ，直接选择最新的当做 f1的函数
        //这点和java很不一样
        f1(&amp;lsquo;fd&amp;rsquo;); //得到fd
复制代码&lt;/p&gt;

&lt;p&gt;5：String  Boolean  Number 等可以拓展其方法，使用类的静态属性prototype进行设置
比如：
String.prototype.IseMaile = function ()
复制代码&lt;/p&gt;

&lt;p&gt;6：js文件引入javascript的好处是?      1:多文档共享  js
      2:减少网络流量&lt;/p&gt;

&lt;p&gt;使用方法 ： &amp;lt;Link src=&amp;rdquo;*.js&amp;rdquo; type=&amp;ldquo;text/javascript&amp;rdquo;&lt;/p&gt;

&lt;p&gt;存在疑问：Dom  and Bom的区别？&lt;/p&gt;

&lt;p&gt;Broser object model (BOM)
Document object model(Dom)
Bom模型有window对象  ，而Dom没有。&lt;/p&gt;

&lt;p&gt;Bom对象结构：&lt;/p&gt;

&lt;p&gt;Window  &amp;mdash; document  &amp;mdash;&amp;mdash;authors
                                  &amp;mdash;&amp;mdash;forms
                                  &amp;mdash;&amp;mdash;images
                                 &amp;mdash;&amp;mdash;-links
                                 &amp;mdash;&amp;mdash;-location &amp;hellip;
            &amp;mdash;- frames
            &amp;mdash;- history
            &amp;mdash;- location
            &amp;mdash;- navigator
            &amp;mdash;- screen
根节点是：window
      window对象是Bom模型的核心，包含6个对象，document,frames,history,location,navigator,screen对象&lt;/p&gt;

&lt;p&gt;Dom对象结构：&lt;/p&gt;

&lt;p&gt;document  &amp;mdash;&amp;mdash;authors
                &amp;mdash;&amp;mdash;forms
                &amp;mdash;&amp;mdash;images
                &amp;mdash;&amp;mdash;-links
                &amp;mdash;&amp;mdash;-location&amp;hellip;&lt;/p&gt;

&lt;p&gt;根节点是:document&lt;/p&gt;

&lt;p&gt;联系：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;document.write(&#39;test&#39;);
window.document.write(&#39;test&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;![./images/java/dom.png][某个dom的树状节点层次图（可以进行实例化]&lt;/p&gt;

&lt;p&gt;14.this事件
事件中的this。除了可以使用event.srcElement&lt;/p&gt;

&lt;p&gt;在事件响应函数中，this表示发生事件的控件。&lt;/p&gt;

&lt;p&gt;只有在事件响应函数才能使用this获得发生事件&lt;/p&gt;

&lt;p&gt;的控件，在事件响应函数调用的函数中不能使用&lt;/p&gt;

&lt;p&gt;（这里的this表示window对象），如果要使用则&lt;/p&gt;

&lt;p&gt;要将this传递给函数或者使用event.srcElement&lt;/p&gt;

&lt;p&gt;。(*)this和event.srcElement的语义是不一样&lt;/p&gt;

&lt;p&gt;的，this就是表示当前监听事件的这个对象，&lt;/p&gt;

&lt;p&gt;event.srcElement是引发事件的对象：事件冒泡&lt;/p&gt;

&lt;p&gt;。&lt;/p&gt;

&lt;p&gt;14.动态创建元素
Element(元素)
document.write只能在页面加载过程中才能动态&lt;/p&gt;

&lt;p&gt;创建。
可以调用document的createElement方法来创建&lt;/p&gt;

&lt;p&gt;具有指定标签的DOM对象，然后通过调用某个元素&lt;/p&gt;

&lt;p&gt;的appendChild();方法将新创建元素添加到相应&lt;/p&gt;

&lt;p&gt;的元素下。//父元素对象.removeChild(子元素&lt;/p&gt;

&lt;p&gt;对象);删除元素。
createElement(‘element’);创建一个节点
appendChild(node); 追加一个节点
removeChild(node);移除一个节点
replaceChild(new,old);替换一个节点
insertBefore(new,参照);把节点加到前面（插&lt;/p&gt;

&lt;p&gt;到某个节点前面）
方法：
属性：
firstChild
lastChild&lt;/p&gt;

&lt;p&gt;15.getElementsByTagName() 方法可返回带有指&lt;/p&gt;

&lt;p&gt;定标签名的对象的集合。
16.IE中body的事件范围
IE中如果在body上添加onclick、onmousemove等&lt;/p&gt;

&lt;p&gt;事件响应，那么如果页面没有满，则 “body 中&lt;/p&gt;

&lt;p&gt;最后一个元素以下（横向不限制）” 的部分是无&lt;/p&gt;

&lt;p&gt;法响应事件的，必须使用代码在document上监听&lt;/p&gt;

&lt;p&gt;那些事件，比如document.onmousemove =&lt;/p&gt;

&lt;p&gt;MovePic
document.body.onmousedown=function(){}
document.onmousedown=function(){}
注意加文档定义与不加文档定义的也不一样。
如果为整个文档注册事件可以使用：&lt;/p&gt;

&lt;p&gt;document.onxxxx事件。
17.onmouseover事件会在鼠标指针移动到指定的&lt;/p&gt;

&lt;p&gt;对象上时触发事件发生
element.setAttribute()        把指定属性设置或更&lt;/p&gt;

&lt;p&gt;改为指定值。
18. dvObj.style.width=&amp;lsquo;300px&amp;rsquo;;
   dvObj.style.height=&amp;lsquo;200px&amp;rsquo;;
   dvObj.style.border=&amp;lsquo;1px solid red&amp;rsquo;;
加&amp;rdquo;的是因为给变量赋值必须是一个正确的类型&lt;/p&gt;

&lt;p&gt;。数字就是数字字符串就是字符串
19.&lt;p&gt; 标签定义段落。
border:1px solid green; 边框：1像素，实心&lt;/p&gt;

&lt;p&gt;，绿色
20.form对象
document.getElementById(‘btn1’).click()&lt;/p&gt;

&lt;p&gt;。搜索引擎的，智能提示，点击后相当于点击了&lt;/p&gt;

&lt;p&gt;“搜索”按钮。
常用：click(),focus(),blur();//相当于通过&lt;/p&gt;

&lt;p&gt;程序来触发元素的单击、获得焦点以及失去焦点&lt;/p&gt;

&lt;p&gt;的事件。
form对象是表单的Dom对象。
方法：submit()提交表单，但是不会触发&lt;/p&gt;

&lt;p&gt;onsubmit事件。
实现autopost，也就是焦点离开控件以后页面立&lt;/p&gt;

&lt;p&gt;即提交，而不是只有提交submit按钮以后才提交&lt;/p&gt;

&lt;p&gt;，当光标离开的时候触发onblur事件，在onblur&lt;/p&gt;

&lt;p&gt;中调用form的submit方法。
在点击submit后form的onsubmit事件被触发，在&lt;/p&gt;

&lt;p&gt;onsubmit中可以进行数据校验，如果数据有问题&lt;/p&gt;

&lt;p&gt;，返回false即可取消提交&lt;/p&gt;

&lt;p&gt;21.不同浏览器的差异
&lt;form&gt; 标签用于为用户输入创建 HTML 表单。&lt;/p&gt;

&lt;p&gt;表单能够包含 input 元素，比如文本字段、复选&lt;/p&gt;

&lt;p&gt;框、单选框、提交按钮等等。表单还可以包含&lt;/p&gt;

&lt;p&gt;menus、textarea、fieldset、legend 和&lt;/p&gt;

&lt;p&gt;label 元素。表单用于向服务器传输数据。
onsubmit 事件会在表单中的确认按钮(Submit)被点击时发生。
submit() 提交表单。 是form中的一个方法
onsubmit 在提交表单之前调用。是一个事件&lt;/p&gt;

&lt;p&gt;1: js的for循环的var i = 0的再认识
经过var定义的是一个全局变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        //一个重要错误   var i =0 其实就是定义了一个全局变量i = 0
        //所有的js都可以调用
        for(var i=0;i&amp;lt;Users.length;i++)
        {
          alert(Users[i].UserId+&amp;quot; &amp;quot;+Users[i].Name.LastName);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是for之后alert(i)的值是 Users.length&lt;/p&gt;

&lt;p&gt;所以可以在for之前直接定义 var i = 0;即可&lt;/p&gt;

&lt;p&gt;2：以二进制读取，10进制输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        alert(parseInt(&#39;100&#39;,8));//以8进制
        alert(parseInt(&#39;100&#39;,2));// 以2进制读取，并10进制显示
        alert(parseInt(&#39;100&#39;,10));// 以10进制 默认方式
        alert(parseInt(&#39;100&#39;,16));// 以16进制

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3： onload在页面加载完后在加载的部分js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        //很重要  onload  只在页面加载完控件才执行，所以确保id有效！！
        //否则可能报错
        onload=function()
        {
          document.getElementById(&#39;btn&#39;).onclick=function()
          {
            alert(&#39;hello&#39;);
          };
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4：Html的事件在学习&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;      &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;time&amp;quot; value=&amp;quot;show current time&amp;quot; onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;/&amp;gt;
      &amp;lt;!--会跳转到最前面   #z只是一个页面最前面的一个锚--&amp;gt;
      &amp;lt;A href=&amp;quot;#&amp;quot; onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;百度&amp;lt;/A&amp;gt;
      &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;!--直接在当前位置打印出时间： javascript: 类似于http://  ftp://--&amp;gt;
&amp;lt;A href=&amp;quot;javascript:alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;网易&amp;lt;/A&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;A href=&amp;quot;javascript:void(0);&amp;quot; onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;新浪&amp;lt;/A&amp;gt;
&amp;lt;A href&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>javascript闭包训练</title>
      <link>/blog/2015/05/11/javascript%E9%97%AD%E5%8C%85%E8%AE%AD%E7%BB%83/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>/blog/2015/05/11/javascript%E9%97%AD%E5%8C%85%E8%AE%AD%E7%BB%83/</guid>
      <description>&lt;p&gt;javascript  闭包训练&lt;/p&gt;

&lt;p&gt;闭包其实就是保存着内部定义函数的一张表，该表保存着函数头、函数变量（变量当前状态的值）、函数实现。&lt;/p&gt;

&lt;p&gt;利用  一个outFun 和一个innerFun进行实验《Learning jQuery 4th edition》&lt;/p&gt;

&lt;p&gt;case 1:  闭包传递，内部函数可以被传递到外头&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;      $(function(){
        //函数被封在一个闭包中 可以像数据一样传来传去
        var globalInner;
        function outFun()
        {

          console.log(&#39;Inside the outFun&#39;);
          function innerFun()
          {
            console.log(&#39;inside the innerFun of the OutFun&#39;);
          }
          globalInner=innerFun;
          console.log(&#39;innerFun():&#39;);
          innerFun();
          console.log(&#39;return Begin&#39;)
          return innerFun;
        }

        console.log(&#39;outFun:&#39;)
        outFun();
        console.log(&#39;globalInner:&#39;);
        globalInner();
        console.log(&#39;Test outFun return&#39;);
        outFun()();

      }) ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;复制代码
测试结果：&lt;/p&gt;

&lt;p&gt;outFun:
TestCloser.html:12 Inside the outFun
TestCloser.html:18 innerFun():
TestCloser.html:15 inside the innerFun of the OutFun
TestCloser.html:20 return Begin
TestCloser.html:26 globalInner:
TestCloser.html:15 inside the innerFun of the OutFun
TestCloser.html:28 Test outFun return
TestCloser.html:12 Inside the outFun
TestCloser.html:18 innerFun():
TestCloser.html:15 inside the innerFun of the OutFun
TestCloser.html:20 return Begin
TestCloser.html:15 inside the innerFun of the OutFun
复制代码&lt;/p&gt;

&lt;p&gt;case 2:  内部变量 和外部变量的区别&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;      $(function(){
        console.log(&#39;测试InnerFunPig的局部变量&#39;);
        //局部变量是存在的
        //alert(&#39;hhell&#39;);
        function outFunPig()
        {

          function innerFunPig()
          {
            //局部变量 重新赋值
            var innerVar=1;
            console.log(&#39;innerVar:&#39;+innerVar);
            innerVar++;

          }
          return innerFunPig;
        }

        var out1= outFunPig();
        out1();
        out1();
        var out2= outFunPig();
        out2();
        out2();

        console.log(&#39;测试outFunCat的全局变量&#39;);
        //测试全局变量
        var globalVar=1;
        function outFunCat()
        {

          function innerFunCat()
          {
            //局部变量 重新赋值
            console.log(&#39;innerVar:&#39;+ globalVar);
            globalVar++;

          }
          return innerFunCat;
        }

        var out3= outFunCat();
        out3();
        out3();
        var out4= outFunCat();
        out4();
        out4();

        console.log(&#39;测试outFunDog的内部变量&#39;);
        //测试半全局变量
        function outFunDog()
        {

          //半全局变量
          var semiGlobalVar=1;
          function innerFunDog()
          {
            //局部变量 重新赋值
            console.log(&#39;innerVar:&#39;+ semiGlobalVar );
             semiGlobalVar++;

          }
          return innerFunDog;
        }

        var out5= outFunDog();
        out5();
        out5();
        var out6= outFunDog();
        out6();
        out6();



      });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果2：
测试InnerFunPig的局部变量
4TestCloser.html:44 innerVar:1
TestCloser.html:58 测试outFunCat的全局变量
TestCloser.html:67 innerVar:1
TestCloser.html:67 innerVar:2
TestCloser.html:67 innerVar:3
TestCloser.html:67 innerVar:4
TestCloser.html:81 测试outFunDog的内部变量
TestCloser.html:91 innerVar:1
TestCloser.html:91 innerVar:2
TestCloser.html:91 innerVar:1
TestCloser.html:91 innerVar:2
复制代码&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
