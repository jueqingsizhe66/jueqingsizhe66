<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>markdown | Macro Life</title>
    <link>https://jueqingsizhe66.github.io/categories/markdown/</link>
      <atom:link href="https://jueqingsizhe66.github.io/categories/markdown/index.xml" rel="self" type="application/rss+xml" />
    <description>markdown</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2019</copyright><lastBuildDate>Thu, 11 Jun 2015 12:30:13 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>markdown</title>
      <link>https://jueqingsizhe66.github.io/categories/markdown/</link>
    </image>
    
    <item>
      <title>pandoc markdown注意点</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/06/11/pandoc-mdzhu-yi-dian/</link>
      <pubDate>Thu, 11 Jun 2015 12:30:13 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/06/11/pandoc-mdzhu-yi-dian/</guid>
      <description>&lt;p&gt;pandoc是markdown升级版工具，用于制作幻灯片相当好用，然而使用过程需要注意以下几点。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;markdown文件  # 大标题不能跟上文本   ## 二标题才可以跟文本，且是一张幻灯
片。&lt;/li&gt;
&lt;li&gt;org文件使用 &amp;mdash;&amp;mdash;&amp;mdash;来强制执行创建新的幻灯片&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;markdown&#34;&gt;markdown&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% Ye Zhaoliang
% Openfoam Introduction
% 11th June,2015

# Openfoam简介

## 1求解器(Solver 数值结算)

  openfoam采用c++编写的类库，开源免费。所以可以把它当作一种类似于String的基本类来使用。
 openfoam框架从使用级别来看主要分为两类：

    - 流体计算
    - 化学反应
    - 换热
    - 结构动力学
    - 电磁场
    - 金融评估等

## 2工具(Utility)

    - 前处理
      + 建模
      + 网格
      + 边界条件
    - 后处理
      + 计算结果显示

## cavity case

cavity case的文件夹简介（等价于fluent的.cas,只不过fluent集成为一个文件，openfoam是一个文件夹)

# 这便使用代码快包裹
├── 0 (初始条件文件夹)
│   ├── p
│   └── U
├── constant
│   ├── polyMesh(网格文件夹)
│   │   └── blockMeshDict
│   └── transportProperties(流体物性参数 传热物性参数)
└── system
    ├── controlDict(控制字典)
    ├── fvSchemes(离散格式 更高级的运用)
    └── fvSolution(求解方法)

# 运用的三个级别[%]

## 三个级别

- [ ] 直接利用解释器(替代商业求解器 初始点)
- [ ] 自定义求解器(关注点)
      + 根据自己的求解流程组合求解器(类库调用)
      + 不需要关心对流项和扩散项是如何离散的
      + 也不需要关心湍流模型
- [ ] 更高级的运用:编写离散格式

## 自定义求解器

    按照自己的_求解流程_编写求解。

##不关心

    + 离散格式(时间项和对流项)
    + 大型代数方程的求解，如何加速等。

## 传热求解

这边使用代码快包裹
    开始
    |
    初始值
    |
    -----------------&amp;lt;------------------------------
    |                                              |
    用CFD进行室内温度计算                          |
    |                   |                          ^
    辐射传热计算Qri  导热计算Qcdi                  |
    |                   |                          |
    由热平衡求新的对流传热量Qcvi^(m+1)             |
    |                                              |
    收敛条件 --------&amp;gt;-----------------------------|
    |
    结束

## 自定义离散格式

   针对于研究离散格式和代数求解器的用户
   目的： 创造更高效更精确的离散方法
   操作： 修改finiteVolumn...
          尤其是对流项。openfoam 提供了NVD和TVD的模板（40以上）
          对流项离散依然是一种研究方向。

## cavity源码文件的主要构成部分

   +  location
     - &amp;quot;system&amp;quot;
     - &amp;quot;constant&amp;quot;
     - &amp;quot;0&amp;quot;
   + class
     - dictionary
     - volVectorField
     - volScalarField

##

   + object
     - dictionary
       + fvschemes对象
       + fvsolution对象
       + controldict对象
       + blockmeshdict
       + transportproperties
     - volVectorField
       + U对象
     - volScalarField
       + p对象



&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;org-mode&#34;&gt;org-mode&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;* Openfoam简介
  openfoam采用c++编写的类库，开源免费。所以可以把它当作一种类似于String的基本类来使用。

 openfoam框架从使用级别来看主要分为两类：
----------
** 1求解器(Solver 数值结算)
    - 流体计算
    - 化学反应
    - 换热
    - 结构动力学
    - 电磁场
    - 金融评估等
** 2工具(Utility)
    - 前处理
      + 建模
      + 网格
      + 边界条件
    - 后处理
      + 计算结果显示

----------------------
** cavity case
cavity case的文件夹简介（等价于fluent的.cas,只不过fluent集成为一个文件，openfoam是一个文件夹)

#+begin_src sh
├── 0 (初始条件文件夹)
│   ├── p
│   └── U
├── constant
│   ├── polyMesh(网格文件夹)
│   │   └── blockMeshDict
│   └── transportProperties(流体物性参数 传热物性参数)
└── system
    ├── controlDict(控制字典)
    ├── fvSchemes(离散格式 更高级的运用)
    └── fvSolution(求解方法)
#+end_src 


* 运用的三个级别[%]

- [ ] 直接利用解释器(替代商业求解器 初始点)
- [ ] 自定义求解器(关注点)

      + 根据自己的求解流程组合求解器(类库调用)
      + 不需要关心对流项和扩散项是如何离散的
      + 也不需要关心湍流模型

- [ ] 更高级的运用:编写离散格式

---------
** 自定义求解器
    按照自己的_求解流程_编写求解。

** 不关心
    + 离散格式(时间项和对流项)
    + 大型代数方程的求解，如何加速等。

----------
** 传热求解
#+begin_src sh
    开始
    |
    初始值
    |
    -----------------&amp;lt;------------------------------
    |                                              |
    用CFD进行室内温度计算                          |
    |                   |                          ^
    辐射传热计算Qri  导热计算Qcdi                  |
    |                   |                          |
    由热平衡求新的对流传热量Qcvi^(m+1)             |
    |                                              |
    收敛条件 --------&amp;gt;-----------------------------|
    |
    结束
#+end_src
--------------------------------
** 自定义离散格式

   针对于研究离散格式和代数求解器的用户
   目的： 创造更高效更精确的离散方法
   操作： 修改finiteVolumn...
          尤其是对流项。openfoam 提供了NVD和TVD的模板（40以上）
          对流项离散依然是一种研究方向。

-------
** cavity源码文件的主要组成部分

   +  location
     - &amp;quot;system&amp;quot;
     - &amp;quot;constant&amp;quot;
     - &amp;quot;0&amp;quot;
  
   + class
     - dictionary
     - volVectorField
     - volScalarField
-----------
   + object
     - dictionary
       + fvschemes对象
       + fvsolution对象
       + controldict对象
       + blockmeshdict
       + transportproperties
     - volVectorField
       + U对象
     - volScalarField
       + p对象


&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>markdown_learning</title>
      <link>https://jueqingsizhe66.github.io/blog/2014/05/13/md-learning/</link>
      <pubDate>Tue, 13 May 2014 16:43:37 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2014/05/13/md-learning/</guid>
      <description>&lt;p&gt;#markdown code part start&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;* emphasize
* seperate line
* auto link
* picture
*************

+ emphaize
  &amp;gt; __You__ are strong
    + **he** is strong
    + *she* is em
    + _it_ is em
  
  **********
  
  use the `printf()` function
  
  这是一个普通段落。

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

这是另一个普通段落。

&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.

I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &amp;quot;Google&amp;quot;
  [2]: http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [3]: http://search.msn.com/    &amp;quot;MSN Search&amp;quot;
  
  ![Alt text][4]
  [4]:   http://image.baidu.com/detail/newindex?col=%E5%A3%81%E7%BA%B8&amp;amp;tag=%E5%88%9B%E6%84%8F&amp;amp;pn=1&amp;amp;pid=9433162230&amp;amp;aid=329840961&amp;amp;from=1&amp;amp;tag3=%E6%8A%A4%E7%9C%BC&amp;amp;app_id=578130&amp;amp;user_id=851997103&amp;amp;is_album=0&amp;amp;sortlog=0&amp;amp;width=1280&amp;amp;height=800&amp;amp;ic=0
  
  ___________________
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;#code part end#&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;emphasize&lt;/li&gt;
&lt;li&gt;seperate line&lt;/li&gt;
&lt;li&gt;auto link&lt;/li&gt;

&lt;li&gt;&lt;p&gt;picture&lt;/p&gt;

&lt;hr /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;emphaize
&amp;gt; + &lt;strong&gt;You&lt;/strong&gt; are strong
&amp;gt; + &lt;strong&gt;he&lt;/strong&gt; is strong
&amp;gt; + &lt;em&gt;she&lt;/em&gt; is em
&amp;gt; + &lt;em&gt;it&lt;/em&gt; is em
&amp;gt; &amp;gt; - xinran comes from hebei
&amp;gt; &amp;gt; - xinran is a beautiful and smart girl&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;use the &lt;code&gt;printf()&lt;/code&gt; function&lt;/p&gt;

&lt;p&gt;这是一个普通段落。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;youxu&lt;/li&gt;
&lt;li&gt;lie&lt;/li&gt;
&lt;li&gt;biao&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;这是另一个普通段落。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the first level of quoting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is nested blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back to the first level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I get 10 times more traffic from &lt;a href=&#34;http://google.com/&#34; title=&#34;Google&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt; than from
&lt;a href=&#34;http://search.yahoo.com/&#34; title=&#34;Yahoo Search&#34; target=&#34;_blank&#34;&gt;Yahoo&lt;/a&gt; or &lt;a href=&#34;http://search.msn.com/&#34; title=&#34;MSN Search&#34; target=&#34;_blank&#34;&gt;MSN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://image.baidu.com/detail/newindex?col=%E5%A3%81%E7%BA%B8&amp;amp;tag=%E5%88%9B%E6%84%8F&amp;amp;pn=1&amp;amp;pid=9433162230&amp;amp;aid=329840961&amp;amp;from=1&amp;amp;tag3=%E6%8A%A4%E7%9C%BC&amp;amp;app_id=578130&amp;amp;user_id=851997103&amp;amp;is_album=0&amp;amp;sortlog=0&amp;amp;width=1280&amp;amp;height=800&amp;amp;ic=0&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
