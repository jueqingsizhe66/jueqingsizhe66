<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim | Macro Life</title>
    <link>/categories/vim/</link>
      <atom:link href="/categories/vim/index.xml" rel="self" type="application/rss+xml" />
    <description>vim</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 13 Aug 2017 17:35:21 +0800</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>vim</title>
      <link>/categories/vim/</link>
    </image>
    
    <item>
      <title>What Vim Teaches You?</title>
      <link>/blog/2017/08/13/what-vim-teaches-you/</link>
      <pubDate>Sun, 13 Aug 2017 17:35:21 +0800</pubDate>
      <guid>/blog/2017/08/13/what-vim-teaches-you/</guid>
      <description>

&lt;p&gt;vim真正教会了你什么？&lt;/p&gt;

&lt;p&gt;vim带给你激情，也给了你生活的智趣，从一开始你练习&lt;a href=&#34;http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&#34; target=&#34;_blank&#34;&gt; Learn-vim-progressively &lt;/a&gt;,并且现在还在练习macro和vim’s text object. 也在不断的学习marks and tags思想，让生活轨迹有迹可循，你使用CtrlSpace来保证你的workspace保存下来，并切换文件和buffer； 随着知识的增长，你使用vimwiki来管理你的知识，并结合&lt;a href=&#34;https://github.com/mattn/calendar-vim&#34; target=&#34;_blank&#34;&gt; calendar &lt;/a&gt;在vimwiki来管理你的日记。为了让文件查找，文件编辑更加方便，
你使用 &lt;a href=&#34;https://github.com/Shougo&#34; target=&#34;_blank&#34;&gt; shoudo &lt;/a&gt;的&lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34; target=&#34;_blank&#34;&gt; vimfiles &lt;/a&gt;来增强你的vim，使得你的vim变得更像一把瑞士军刀。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ctrl-Space Plugin&lt;/li&gt;
&lt;li&gt;Knowledge tool: Vimwiki&lt;/li&gt;
&lt;li&gt;Vimfiles: file operation&lt;/li&gt;
&lt;li&gt;Menu for your vim:Startify&lt;/li&gt;
&lt;li&gt;Attach File&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了多一点对称美，你使用高丽棒作者&lt;a href=&#34;https://github.com/junegunn&#34; target=&#34;_blank&#34;&gt; junegunn &lt;/a&gt;的&lt;a href=&#34;https://github.com/junegunn/vim-easy-align&#34; target=&#34;_blank&#34;&gt; vim-easy-align &lt;/a&gt; (Note: &lt;a href=&#34;https://github.com/junegunn/vim-easy-align/blob/master/EXAMPLES.md#formatting-yaml-or-json&#34; target=&#34;_blank&#34;&gt; many examples &lt;/a&gt;),为了少犯错误，
你加入了&lt;a href=&#34;https://github.com/chip/vim-fat-finger&#34; target=&#34;_blank&#34;&gt; vim-fat-finger &lt;/a&gt;,使用iabbrev来缩写你需要写的单词，或者修正错误的单词,为了编辑更加有效,
你甚至引入了&lt;a href=&#34;https://github.com/terryma/vim-multiple-cursors&#34; target=&#34;_blank&#34;&gt; vim-multiline-cursor &lt;/a&gt;.进一步的你引入了&lt;a href=&#34;https://github.com/tpope&#34; target=&#34;_blank&#34;&gt; tpope &lt;/a&gt;的&lt;a href=&#34;https://github.com/tpope/vim-surround&#34; target=&#34;_blank&#34;&gt; vim-surround &lt;/a&gt;让你在书写
racket(当然你也可以使用&lt;a href=&#34;https://github.com/ruanyl/bigvim&#34; target=&#34;_blank&#34;&gt; delimiteMate &lt;/a&gt;补全括号插件)或者lisp代码的时候更加方便一些，
并为了重复或者递归使用，你也引入他的&lt;a href=&#34;https://github.com/tpope/vim-repeat&#34; target=&#34;_blank&#34;&gt; vim-repeat &lt;/a&gt; (vim中的很多插件都是支持增强的，比如f的增强插件&lt;a href=&#34;https://rhysd.github.io/clever-f.vim/&#34; target=&#34;_blank&#34;&gt; clever-f &lt;/a&gt;);
为了更快捷的编辑文件行，除了使用vim text object, 你也引入了&lt;a href=&#34;https://github.com/matze/vim-move&#34; target=&#34;_blank&#34;&gt; vim-move &lt;/a&gt;和&lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34; target=&#34;_blank&#34;&gt; vim-easymotion &lt;/a&gt; (Very Good)来移动行,使得vim文本更加结构化。&lt;/p&gt;

&lt;p&gt;想着让你的vim运行得更快一些，你把你一直用的&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34; target=&#34;_blank&#34;&gt; vundle &lt;/a&gt;改为了的&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34; target=&#34;_blank&#34;&gt; junegunn&amp;rsquo;s vim-plug &lt;/a&gt;来管理你的插件,确没见得有太大的改进，简洁地使用plugins自然就快了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vim/fuckvim.png&#34; alt=&#34;fuckVim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到你也增加了 Startify 的配置。&lt;/p&gt;

&lt;p&gt;然而，上面这些都是你想让vim做的，下面要写的则是&lt;font color=&#34;red&#34;&gt;vim plugins带给你关于写作的新的概念和思想&lt;/font&gt;，这也才是本文的重点。&lt;/p&gt;

&lt;p&gt;刚开始接触vim的时候，你是用了scrooloose的&lt;a href=&#34;https://github.com/scrooloose/nerdtree&#34; target=&#34;_blank&#34;&gt; nerdtree &lt;/a&gt; ,&lt;a href=&#34;https://github.com/majutsushi/tagbar&#34; target=&#34;_blank&#34;&gt; tagbar &lt;/a&gt;,&lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34; target=&#34;_blank&#34;&gt; vim airline &lt;/a&gt;等，
你也使用了各种&lt;a href=&#34;https://github.com/WolfgangMehner/vim-plugins&#34; target=&#34;_blank&#34;&gt; language support vim plugins &lt;/a&gt;,也知道vim使用&lt;a href=&#34;https://github.com/tpope&#34; target=&#34;_blank&#34;&gt; tpope &lt;/a&gt;的&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34; target=&#34;_blank&#34;&gt; vim-gitgutter &lt;/a&gt;结合git管理code, 现在让我们来看第一个vim插件ctrl-space&lt;/p&gt;

&lt;h1 id=&#34;1-ctrl-space-plugin&#34;&gt;1.Ctrl-Space Plugin&lt;/h1&gt;

&lt;p&gt;Github Repo: Click &lt;a href=&#34;https://github.com/vim-ctrlspace/vim-ctrlspace&#34; target=&#34;_blank&#34;&gt; here &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vim help: :h ctrlspace&lt;/p&gt;

&lt;p&gt;核心概念:&lt;/p&gt;

&lt;p&gt;当你在vim中使用:h ctrlspace时候会搜索到这些资料，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;【1.vim desktop】: Let&#39;s imagine [ Vim ] is a writing desk. 
【2.projects draws】 : Your [ projects ] are like drawers. 
【3.Bookmark  favorite project】:  The [ Bookmark ] List simply displays your favorite projects.
【4.Buffer  paper】: A [ buffer ] is like a sheet of paper lying on the desk. 
        named buffers
        unsaved buffers
【5.workspace  an status snapshot of current project】:All your [ buffers ], [ tabs ], and [ tab ] layouts can be persisted as a workspace.
It&#39;s like taking a picture of your desk with an instant camera. You can
save multiple workspaces per project with Workspace List.
【6.workspace  session】 : The word &amp;quot;workspace&amp;quot; can be considered a synonym of a &amp;quot;session&amp;quot;. The
ability of having so many sessions available at hand creates a lot of
interesting use cases! For example, you can have a workspace for each task
or feature you are working on. It&#39;s very easy to switch from one workspace
to another.

然后以后可以使用大写的B，跳转到Bookmark标签栏，类似于CtrlSpace的哲学思想，会跳转到某个bookmark下的目录，通过C也可以，直接Enter《CR》键也是可以的。
删除觉得不需要了，就D一下即可。



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to think about tab pages in Vim is to consider them to be viewports, layouts, or workspaces&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
tags是一个在编程中经常会使用
而且在git的版本中也经常涉及到很多打tag的工作 (git tag  or  git tag  -a)   git checkout某个tag等

其实tags只不过是对事物的一种抽象，这也是你在现实当中经常看到的class field method 注释等等，其实都可以把他们理解为一种tag，一种convinience tag
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在vimwiki的wiki文件的简单实用方法(经常用！！！):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:标签名字:
[[文件名#标签名字]]即可

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相同vim tag概念&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;&amp;quot; tab encapsulation
&amp;quot; tab 操作
&amp;quot; http://vim.wikia.com/wiki/Alternative_tab_navigation
&amp;quot; http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim

&amp;quot; tab切换
map &amp;lt;leader&amp;gt;th :tabfirst&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tl :tablast&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;tj :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tk :tabprev&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tn :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tp :tabprev&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;te :tabedit&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;td :tabclose&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tm :tabm&amp;lt;cr&amp;gt;

&amp;quot; normal模式下切换到确切的tab
noremap &amp;lt;leader&amp;gt;1 1gt
noremap &amp;lt;leader&amp;gt;2 2gt
noremap &amp;lt;leader&amp;gt;3 3gt
noremap &amp;lt;leader&amp;gt;4 4gt
noremap &amp;lt;leader&amp;gt;5 5gt
noremap &amp;lt;leader&amp;gt;6 6gt
noremap &amp;lt;leader&amp;gt;7 7gt
noremap &amp;lt;leader&amp;gt;8 8gt
noremap &amp;lt;leader&amp;gt;9 9gt
noremap &amp;lt;leader&amp;gt;0 :tablast&amp;lt;cr&amp;gt;


&amp;quot; Toggles between the active and last active tab &amp;quot;
&amp;quot; The first tab is always 1 &amp;quot;
let g:last_active_tab = 1
&amp;quot; nnoremap &amp;lt;leader&amp;gt;gt :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
&amp;quot; nnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
&amp;quot; vnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;tt :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
autocmd TabLeave * let g:last_active_tab = tabpagenr()

&amp;quot; 新建tab  Ctrl+t
nnoremap &amp;lt;C-t&amp;gt;     :tabnew&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-t&amp;gt;     &amp;lt;Esc&amp;gt;:tabnew&amp;lt;CR&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;默认工作类型目录&#34;&gt;默认工作类型目录&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;Markers will be also used as a storage for `cs_workspaces` (workspaces of
the current project) and `cs_files` (cached files of the current project).

Default value: &amp;gt;

    let g:CtrlSpaceProjectRootMarkers = [
         \ &amp;quot;.git&amp;quot;,
         \ &amp;quot;.hg&amp;quot;,
         \ &amp;quot;.svn&amp;quot;,
         \ &amp;quot;.bzr&amp;quot;,
         \ &amp;quot;_darcs&amp;quot;,
         \ &amp;quot;CVS&amp;quot;
         \ ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;Summary:&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;   A buffer is the in-memory text of a file.
   A window is a viewport on a buffer.
   A tab page is a collection of windows.


A window is a viewport onto a buffer.  You can use multiple windows on one
buffer, or several windows on different buffers.

A buffer is a file loaded into memory for editing.  The original file remains
unchanged until you write the buffer to the file.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#2. Knowledge tool: Vimwiki
Github Repo: Click &lt;a href=&#34;https://github.com/vimwiki/vimwiki&#34; target=&#34;_blank&#34;&gt; here &lt;/a&gt;
vimwki setup in vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;• &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;  
• &amp;quot; vimwiki  
• let g:vimwiki_use_mouse = 1  
• let g:vimwiki_list_ignore_newline = 0  
• let g:vimwiki_hl_headers = 0  
• &amp;quot; vimwiki打开折叠  
• &amp;quot;let g:vimwiki_folding = 1  
• let g:vimwiki_camel_case = 0  
• let g:vimwiki_list_ignore_newline = 0  
• let g:vimwiki_CJK_length = 1  
•   
• &amp;quot;设定文件浏览器目录为当前目录  
• set bsdir=buffer      
• &amp;quot;set autochdir  
•   
• &amp;quot; 日历插件  
• map ca :Calendar&amp;lt;cr&amp;gt;  
•   
• map &amp;lt;S-Space&amp;gt; :&amp;lt;C-Space&amp;gt;  
•   
• &amp;quot; vimwiki  
• let g:vimwiki_list = [{&#39;path&#39;: &#39;~/Wiki/wiki/&#39;, &#39;path_html&#39;: &#39;~/Wiki/&#39;, &#39;auto_export&#39;: 1}]  
• &amp;quot; 转化为Html文件  
• map &amp;lt;S-F4&amp;gt; :Vimwiki2HTML&amp;lt;cr&amp;gt;  
•   
• &amp;quot; 设置颜色  
• hi VimwikiHeader1 guifg=#FF0000  
• hi VimwikiHeader2 guifg=#00FF00  
• hi VimwikiHeader3 guifg=#0000FF  
• hi VimwikiHeader4 guifg=#FF00FF  
• hi VimwikiHeader5 guifg=#00FFFF  
hi VimwikiHeader6 guifg=#FFFF00  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##vimwiki tagbar 集成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;------------------------------------------------------------------------------
Tagbar integration                                            *vimwiki-tagbar*

As an alternative to the Table of Contents, you can use the Tagbar plugin
(http://majutsushi.github.io/tagbar/) to show the headers of your wiki files
in a side pane.
Download the Python script from
https://raw.githubusercontent.com/vimwiki/utils/master/vwtags.py and follow
the instructions in it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vim/tagbar.png&#34; alt=&#34;TAGBAR&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;3-vimfiles-a-tool-for-file-operations&#34;&gt;3. Vimfiles: A tool for file operations&lt;/h1&gt;

&lt;p&gt;Github Repo: click  &lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34; target=&#34;_blank&#34;&gt; here &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vimfiler setup in vimrc&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;for vimfiler
let g:vimfiler_enable_auto_cd=1
&amp;quot;call vimfiler#set_execute_file(&#39;txt&#39;, &#39;notepad&#39;)
call vimfiler#set_execute_file(&#39;txt&#39;, &#39;gvim&#39;)
call vimfiler#set_execute_file(&#39;c&#39;, [&#39;gvim&#39;, &#39;notepad&#39;])

let g:vimfiler_as_default_explorer = 1

&amp;quot; Enable file operation commands.
&amp;quot; Edit file by tabedit.
&amp;quot;call vimfiler#custom#profile(&#39;default&#39;, &#39;context&#39;, {
&amp;quot;      \ &#39;safe&#39; : 0,
&amp;quot;      \ &#39;edit_action&#39; : &#39;tabopen&#39;,
&amp;quot;      \ })

&amp;quot; Like Textmate icons.
let g:vimfiler_tree_leaf_icon = &#39; &#39;
&amp;quot;let g:vimfiler_tree_closed_icon = &#39;▸&#39;
&amp;quot;let g:vimfiler_tree_opened_icon = &#39;▾&#39;
let g:vimfiler_file_icon = &#39;-&#39;
let g:vimfiler_marked_file_icon = &#39;*&#39;

let g:vimfiler_safe_mode_by_default=0 
  &amp;quot; Use trashbox.
  &amp;quot; Windows only and require latest vimproc.
let g:unite_kind_file_use_trashbox = 1
&amp;quot;&amp;quot;  you can create a .vim file, then source it
&amp;quot;need everything.exe
&amp;quot;nnoremap &amp;lt;Leader&amp;gt;f :Unite file buffer file_rec file_mru everything&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;f :VimFiler&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;l :Unite line&amp;lt;CR&amp;gt;
let g:unite_source_everything_limit = 100
let g:unite_source_everything_full_path_search = 1
let g:unite_source_everything_posix_regexp_search = 1
let g:unite_source_everything_async_minimum_length = 3
let g:unite_source_everything_cmd_path = &#39;C:\\Users\\YeZhao\\.vim\\es\\es.exe&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于vimfiler的使用也了解到了 &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34; target=&#34;_blank&#34;&gt; ag &lt;/a&gt;插件（一个特别好用的搜索插件,在ubuntu底下直接使用ag “expression” 找到当前文件夹所有文件内容 包含表达式的行数据 相当快速）&lt;/p&gt;

&lt;p&gt;Vimfiler常用快捷键&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;H作用打开shell  x打开文件夹的意思

L打开磁盘
Load
&amp;amp;回到project目录  那是相当有用的
~回到.vim目录

e编写文件
N 创建文件
K创建文件夹

#全选
*全部选？

c复制
d删除
m移动

先用m表示选定 然后d删除(重要操作)
m移动
c复制

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有意思的是,&lt;/p&gt;

&lt;p&gt;使用m然后r，可以跳出一个新的编辑窗口，进行文件名的修改，这是相当好的实现。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;
:Vimwiki2HTML – Convert current wiki page to HTML
:VimwikiAll2HTML – Convert all your wiki pages to HTML转化为HTML
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-startify-plugin&#34;&gt;4. Startify Plugin&lt;/h1&gt;

&lt;p&gt;Github Repo: click  &lt;a href=&#34;https://github.com/mhinz/vim-startify&#34; target=&#34;_blank&#34;&gt; here &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##vim 全屏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let w:full_screen=0
    map :call FullScreen()
func! FullScreen()
    if w:full_screen==1
    let w:full_screen=0
    :simalt ~R
    else
    :simalt ~X
    let w:full_screen=1
    endif
endfunc

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##vim-easy-align常用命令&lt;/p&gt;

&lt;p&gt;vim help: &lt;code&gt;:h easyalign&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;vip= Enter= EnterEnter=(居右，居中，居左对其选项 )&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;gaip=


 --------------+--------------------------------------------------------------------
 Delimiter key | Description/Use cases                                              ~
 --------------+--------------------------------------------------------------------
 &amp;lt;Space&amp;gt;       | General alignment around whitespaces
    `:`            | Suitable for formatting JSON or YAML
  `=`            | Operators containing equals sign ( `=` ,  `==,`  `!=` ,  `+=` ,  `&amp;amp;&amp;amp;=` , ...)
  `.`            | Multi-line method chaining
  `,`            | Multi-line method arguments
  `&amp;amp;`            | LaTeX tables (matches  `&amp;amp;`  and  `\\` )
  `#`            | Ruby/Python comments
  `&amp;quot;`            | Vim comments
 &amp;lt;Bar&amp;gt;         | Table markdown
 --------------+--------------------------------------------------------------------

  ------------------+------------------------------------+--------------------
 With visual map   | Description                        | Equivalent command ~
 ------------------+------------------------------------+--------------------
 &amp;lt;Enter&amp;gt;&amp;lt;Space&amp;gt;    | Around 1st whitespaces             | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign\
 &amp;lt;Enter&amp;gt;2&amp;lt;Space&amp;gt;   | Around 2nd whitespaces             | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign2\
 &amp;lt;Enter&amp;gt;-&amp;lt;Space&amp;gt;   | Around the last whitespaces        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign-\
 &amp;lt;Enter&amp;gt;-2&amp;lt;Space&amp;gt;  | Around the 2nd to last whitespaces | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign-2\
 &amp;lt;Enter&amp;gt;:          | Around 1st colon ( `key:  value` )   | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign:
 &amp;lt;Enter&amp;gt;&amp;lt;Right&amp;gt;:   | Around 1st colon ( `key : value` )   | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign:&amp;lt;l1
 &amp;lt;Enter&amp;gt;=          | Around 1st operators with =        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign=
 &amp;lt;Enter&amp;gt;3=         | Around 3rd operators with =        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign3=
 &amp;lt;Enter&amp;gt;*=         | Around all operators with =        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign*=
 &amp;lt;Enter&amp;gt;**=        | Left-right alternating around =    | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign**=
 &amp;lt;Enter&amp;gt;&amp;lt;Enter&amp;gt;=   | Right alignment around 1st =       | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign!=
 &amp;lt;Enter&amp;gt;&amp;lt;Enter&amp;gt;**= | Right-left alternating around =    | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign!**=
 ------------------+------------------------------------+--------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##vim-surround 常用命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;1. cs&amp;quot;&#39;
2. cs&#39;&amp;quot;
3. cs&#39;&amp;lt;q&amp;gt;
5. cs&amp;quot;t
4. cst&amp;quot;
6. ds&amp;quot;
7. ysiw&amp;quot;
8. yssb == yss)
9. S&amp;quot;  可视化模式选择快 然后大S，这点类似于Multiple-Cursor的Ctrl+N命令
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vim-copy-file-name&#34;&gt;vim copy file name&lt;/h2&gt;

&lt;p&gt;你使用&lt;a href=&#34;https://github.com/AdamWhittingham/vim-copy-filename&#34; target=&#34;_blank&#34;&gt; vim-copy-filename &lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;&amp;quot; for vim-copy-filename
nmap &amp;lt;leader&amp;gt;cp :CopyRelativePath&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cl :CopyRelativePathAndLine&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cP :CopyAbsolutePath&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cf :CopyFileName&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cd :CopyDirectoryPath&amp;lt;CR&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;额外一些插件的备注&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haya14busa&#34; target=&#34;_blank&#34;&gt; Haya14busa &lt;/a&gt; 提供的 &lt;a href=&#34;https://github.com/haya14busa/incsearch.vim&#34; target=&#34;_blank&#34;&gt; incsearch &lt;/a&gt; 增加了statusline的查找词当前数 和总个数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/vim-cursorword&#34; target=&#34;_blank&#34;&gt; Vim-cursorword &lt;/a&gt; 表示添加下划线。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AndrewRadev/splitjoin.vim&#34; target=&#34;_blank&#34;&gt; AndrewRadev/splitjoin.vim &lt;/a&gt;  是提供类似于perl的当行模式的插件[gS gJ]。在scheme估计比较少用到。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一直遗忘的一个快捷查看命令 &lt;code&gt;Ctrl+E&lt;/code&gt; 往下滚屏 &lt;code&gt;Ctrl+Y&lt;/code&gt; 往上滚屏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;运行的话,进入底线命令模式,用:!perl %就可以运行,或者可以绑定一个快捷键组合, %表示当前文件的意思
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，编辑器界面展示的应全是代码，不应该有工具条、菜单、滚动条浪费空间的元素，另外，编程是种精神高度集中的脑力劳动，不应出现闪烁光标、花哨鼠标这些分散注意力的东东&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
写到这边我去睡觉了，梦中梦到了前半辈子比较重要的三个女人，我妈以及另外两个从小长大的妇女(不说女生了),街道上偶遇她们正在端着一个冰盒沿街发送，也不像是生了孩子似的，但梦中是那么真实又带着虚的东西（所以人
是一个最精良的仪器，拥有最直觉的第六感，又拥有最会惹事的直觉），我妈骑着自行车从我们三身边走过，前方又出现一个特别活泼的&amp;quot;妇女&amp;quot;,在我的环境中还有篮球这一个概念，我的梦（由我的身体+癫痫的精神状态+疲惫产生的一种组合的事件）把我带到一个篮球场，后来我又去了

我一个哥们那边，终于有男的出现，我发现我走过的路总是不缺乏女生(所以我是趋向于好色之徒,本来也是), 我梦到了我儿时的
阴影我特别怕的一个男生，喜欢拿刀砍人，犯冲，特别好斗，但缺少脑子。我写出来了，因为我想克服它。梦向黄大仙一样，它放屁的效果具有致幻的效果，能让人陷入幻境中不得自拔，人每天晚上也像黄大仙附体一样坐着春秋大梦。

但从我身边路过的那些女生，都已经变得不真实，我身边有一个wife如胶似漆的黏着我，怎么我就不懂珍惜呢。时代的进步，需要梦的催化，世界上无德的传销机构也在利用着洗脑在铸造着同一类人，这些人把思维当作无趣，而非智趣。

匆匆而过三十载，岁月不饶人，也不等人(也就是你学会了用时间的非定常特性来观察人生）。乐观、不自信一直伴随着我成长，然而我却不知道痛苦才是生活的本源，享受
痛苦，才能拥有些许的快乐。Enjoy Painess!但我不想把pain带给亲人，身边的人。我是一个自私的人，没有团队精神，不太会
替别人考虑的人（当然自从有了她，我得替她考虑，但是考虑得还很少，我很对不起她）

也就是生活的智趣源于痛苦，痛苦的根源诞生了时代的进步，和智趣的发展。

写到这边，就先停笔把，继续回到vim当中，他也像人，能够感知到字符的变化，感知文本结构（你赋予了它思考的能力），能够
让你编辑得更顺畅些;vim像刀、人也可以像刀，磨砺你自己这把最重要的一把刀把！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必然对偶然，自由对随机，自由在必然中，随机在偶然中，原来这才是自由(&lt;a href=&#34;http://www.huzheng.org/geniusreligion/TheSourceCodeOfMyWorld.pdf&#34; target=&#34;_blank&#34;&gt; 胡正自由 &lt;/a&gt;是有代价的)。&lt;/p&gt;

&lt;h1 id=&#34;在终端使用vim编辑命令的方式&#34;&gt;在终端使用vim编辑命令的方式&lt;/h1&gt;

&lt;p&gt;在~目录下创建一个.inputrc文件，内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set editing-mode vi
Control-a: beginning-of-line
Control-b: backward-char
Control-d: delete-char
Control-e: end-of-line
Control-f: forward-char
Control-k: kill-line
Control-n: next-history
Control-p: previous-history
set keymap emacs-ctlx
v: vi-editing-mode
Control-v: &amp;quot;\C-xv\e&amp;quot;
Escape: &amp;quot;\C-xv\e&amp;quot;
set keymap emacs
$if Bash
  Control-w: unix-filename-rubout
$endif

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>批量修改pdf文件名以及创建wiki Links</title>
      <link>/blog/2017/07/05/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9pdf%E6%96%87%E4%BB%B6%E5%90%8D%E4%BB%A5%E5%8F%8A%E5%88%9B%E5%BB%BAwiki-links/</link>
      <pubDate>Wed, 05 Jul 2017 13:44:15 +0800</pubDate>
      <guid>/blog/2017/07/05/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9pdf%E6%96%87%E4%BB%B6%E5%90%8D%E4%BB%A5%E5%8F%8A%E5%88%9B%E5%BB%BAwiki-links/</guid>
      <description>&lt;p&gt;bash、awk、sed等的好处，就是可以专一的完成你的需求，但是也存在很多不足，借着批量重命令和批量导出链接到vimwiki的wiki中，形成[[local:文件名路径]]的过程，巩固学习linux命令, it is homework(learning process)。&lt;/p&gt;

&lt;h1 id=&#34;提取路径-用于vimwiki中-当作快速链接&#34;&gt;提取路径，用于vimwiki中，当作快速链接&lt;/h1&gt;

&lt;p&gt;如果IFS是”“，那么相当于一个文件名特别长会分成很多行显示，所以这边设置为 IFS=$‘\n’&lt;/p&gt;

&lt;p&gt;[a-z]star替换原先的star，目的是去除点号。
使用echo和管道命令传递信息给sed或者awk等
在sed中似乎用^$等位置字符进行替换,如果是文件夹则进行名字替换，并且遍历当前文件夹
使用双重for循环进行控制&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;IFS=$&#39;\n&#39;;
count=1;
countDir=1;
specialCharacter=&#39;pages&#39;;
generateChapter() # @Description : 对不同文件进行不同处理
                  # @usage       : generatechapter
{
    # 妙用find 得到当前目录的相对路径 不需要不断的进入目录
    for var2 in `find . -name &amp;quot;[a-z]*&amp;quot;`
    do
        if [[ -d  $var2 ]] # &amp;lt; cannot . Error
        then
            #echo &amp;quot;fuck&amp;quot;
            var=`echo $var2|sed &#39;s/^./F:\/ScienceBase.Attachments\/WindEnergy/g&#39;|sed &#39;s/^/[[local:/g&#39;|sed &#39;s/$/]]/g&#39;`
            printf &amp;quot;= $countDir. [ ] $var =\n&amp;quot; # 使用#号来删除之前的点号
            countDir=$(($countDir+1));

            for tempVar in `find $var2 -name &amp;quot;*.pdf&amp;quot;`
            do
                temp1=`echo $tempVar|sed &#39;s/^./F:\/ScienceBase.Attachments\/WindEnergy/g&#39;` 
    #            # echo ${var2} ${var2:0:$((${var2}-18))}.pdf  
                 varr=`echo $temp1|sed &#39;s/^/[[local:/g&#39;|sed &#39;s/$/]]/g&#39;`;
                #var=`echo $var2|sed &#39;s/^./F:\/ScienceBase.Attachments\/WindEnergy/g&#39;|sed &#39;s/^/[[local:/g&#39;|sed &#39;s/$/]]/g&#39;` 
                printf &amp;quot;\t$count. [ ] ${varr}\n&amp;quot; # 这边需要去除到第一个点号,这是才得到的处理方法
                count=$(($count+1));

            done
            count=1;
        fi
        

    done
}

generateChapter
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;删除不必要的名字特殊字符-重命名&#34;&gt;删除不必要的名字特殊字符，重命名&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;删除文件pdf名字不必要的（pages 110—30）等信息。&lt;/li&gt;
&lt;li&gt;使用awk printf产生逗号分隔字符串，使用xargs -d, mv提取以逗号分隔的字段， 并且对文件名进行重命名（在我找的多种方法中，就他有效）&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;xargs -n 2&lt;/code&gt; 表示按照空格划分的方式 提取两个参数，逐个进行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash -
#===============================================================================
#
#          FILE: b.sh
#
#         USAGE: ./b.sh
#
#   DESCRIPTION: 
#
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Ye Zhao Liang (Vimer), zhaoturkkey@163.com
#  ORGANIZATION: BrokenSun
#       CREATED: 2017/7/4 23:01:31
#      REVISION:  ---
#===============================================================================

IFS=$&#39;\n&#39;;
count=1;
countDir=1;
specialCharacter=&#39;pages&#39;;
generateChapter() # @Description : 对不同文件进行不同处理
              # @usage       : generatechapter
{
# 妙用find 得到当前目录的相对路径 不需要不断的进入目录
#for var2 in `find . -name &amp;quot;*&amp;quot;`
for var2 in `find . -name &amp;quot;windEnergy201*&amp;quot;`
do
    if [[ -d  $var2 ]] # &amp;lt; cannot . Error
    then
            cd $var2;
            for var in `find . -name &amp;quot;*&amp;quot;`;do echo $var|awk &#39;/pages/{printf(&amp;quot;%s,%s&amp;quot;,$0,substr($0,0,length($0)-22)&amp;quot;.pdf&amp;quot;)|&amp;quot;xargs -d, mv &amp;quot;;}&#39;;done 
            cd ..;
    fi

done
}

generateChapter

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意可以使用 ，学到技巧1中的检测工具，查看你的修改是否完全正确，如果出现文件名中有逗号的情况，通常pages没有删掉，原因是xargs也是按照，号进行分割，所以改进方法是使用分号输出&lt;/p&gt;

&lt;p&gt;改进代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for var in `find . -name &amp;quot;*&amp;quot;`;do echo $var|awk &#39;/pages/{printf(&amp;quot;%s;%s&amp;quot;,$0,substr($0,0,length($0)-22)&amp;quot;.pdf&amp;quot;)|&amp;quot;xargs -d; mv &amp;quot;;}&#39;;done 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;最终结果&#34;&gt;最终结果&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;= 1. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system]] =
  1. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch1.pdf]]
  2. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch10.pdf]]
  3. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch11.pdf]]
  4. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch12.pdf]]
  5. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch13.pdf]]
  6. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch14.pdf]]
  7. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch15.pdf]]
  8. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch16.pdf]]
  9. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch2.pdf]]
  10. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch3.pdf]]
  11. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch4.pdf]]
  12. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch5.pdf]]
  13. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch6.pdf]]
  14. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch7.pdf]]
  15. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch8.pdf]]
  16. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch9.pdf]]
  17. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/fmatter.pdf]]
  18. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/index.pdf]]
  19. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/scard.pdf]]
= 2. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/Offshore Wind Energy Generation Control, Protection, and Integration to Electrical Systems/offshoreWindEnergy]] =

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#学到的技巧&lt;/p&gt;

&lt;p&gt;awk两种表示判断,if判断得用分号 &lt;a href=&#34;http://blog.csdn.net/qq_31382921/article/details/55094907&#34; target=&#34;_blank&#34;&gt; 如果不用分号隔开会报错 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意分号！！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;awk &#39;{if ($1==1) print &amp;quot;A&amp;quot;; else if ($1==2) print &amp;quot;B&amp;quot;; else print &amp;quot;C&amp;quot;}&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应的bash使用的是if,then,else,fi的形式，且不用分号间隔语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
 for var in `find . -name &amp;quot;*&amp;quot;`
    do
        if [[ -d  $var ]] # &amp;lt; cannot . Error
        then
            printf &amp;quot;$var\n&amp;quot; # 使用#号来删除之前的点号
        else
            printf &amp;quot;\t${var}\n&amp;quot; # 这边需要去除到第一个点号,这是才得到的处理方法
        fi

    done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;awk的’/page/{}‘等效于’if($0~/dfd/){}’
下面的命令，也是一种检查上述程序正确与否的一种工具,可以看出哪些pdf文件依然有pages的字段&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;YeZhao@DESKTOP-YeZhao /cygdrive/f/ScienceBase.Attachments/WindEnergy
$ find . -name &amp;quot;*&amp;quot;|awk &#39;{if($0~/pages/){print $0}}&#39;
./windEnergy2009-i6/Characterizing future large, rapid changes in aggregated wind power using Numerical Weather Prediction spatial fields (pages 542–555).pdf
./windEnergy2012-i1/Modeling wake effects in large wind farms in complex terrain the problem, the methods and the issues (pages 161–182).pdf
./windEnergy2012-i2/The Betz–Joukowsky limit on the contribution to rotor aerodynamics by the British, German and Russian scientific schools (pages 335–344).pdf
./windEnergy2012-i3/Computational fluid dynamics simulation of the aerodynamics of a high solidity, small-scale vertical axis wind turbine (pages 349–361).pdf
./windEnergy2012-i3/Correction factors for NRG #40 anemometers potentially affected by dry friction whip characterization, analysis, and validation (pages 489–502).pdf
./windEnergy2012-i4/Analysis of wake measurements from the ECN Wind Turbine Test Site Wieringermeer, EWTW (pages 575–591).pdf
./windEnergy2012-i5/Atmospheric stability and turbulence fluxes at Horns Rev—an intercomparison of sonic, bulk and WRF model data (pages 717–731).pdf
./windEnergy2013-11/Modeling, simulation and control of a wind turbine with a hydraulic transmission system (pages 1259–1276).pdf
./windEnergy2013-8/Indicial lift response function an empirical relation for finite-thickness airfoils, and effects on aeroelastic simulations (pages 681–693).pdf
./windEnergy2013-8/Simulating the dynamics of wind turbine blades part I, model development and verification (pages 694–710).pdf
./windEnergy2013-8/Simulating the dynamics of wind turbine blades part鈥塈I, model validation and uncertainty quantification (pages 741–758).pdf
..l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#2. awk的&lt;a href=&#34;http://blog.csdn.net/panpan639944806/article/details/19932543&#34; target=&#34;_blank&#34;&gt; BEGIN &lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;function name()
{}

BEGIN{
}
{
    
}
END{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-awk-gsub-3&#34;&gt;3. awk &lt;a href=&#34;http://blog.sina.com.cn/s/blog_67e34ceb0100ybvg.html&#34; target=&#34;_blank&#34;&gt; gsub &lt;/a&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;echo &amp;quot;a b c 2011-11-22 a:d&amp;quot; | awk &#39;gsub(/-/,&amp;quot;&amp;quot;,$4)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#4. awk变量定义&lt;/p&gt;

&lt;p&gt;BEGIN中&lt;a href=&#34;http://blog.csdn.net/shangboerds/article/details/49449291&#34; target=&#34;_blank&#34;&gt; 定义1 &lt;/a&gt; , &lt;a href=&#34;http://jingyan.baidu.com/article/d45ad148fb46f269552b80cf.html&#34; target=&#34;_blank&#34;&gt; awk -v单行 &lt;/a&gt;定义变量&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.linuxidc.com/Linux/2015-04/115781.htm&#34; target=&#34;_blank&#34;&gt; awk内置变量 &lt;/a&gt;, 包括FS,OFS,NR,NFR,NF,$0,$1,$2,ARGC,ARGV1等。&lt;/p&gt;

&lt;p&gt;#5.awk定义函数&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bbs.chinaunix.net/thread-1424218-1-1.html&#34; target=&#34;_blank&#34;&gt; awk的函数定义 &lt;/a&gt;是在BEGIN{},{},END{}之外的，和他们平级的关系&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;#!/usr/bin/awk -f
#===============================================================================
#
#          File:  func.awk
# 
#   Description:  awk -f func.awk file
#           file内容为400
# 
#   VIM Version:  7.0+
#        Author:  Ye Zhao Liang (Vimer), zhaoturkkey@163.com
#  Organization:  BrokenSun
#       Version:  1.0
#       Created:  2017/7/5 16:06:33
#      Revision:  ---
#       License:  Copyright (c) 2017, Ye Zhao Liang
#===============================================================================
# 
function b()
{
print &amp;quot;b.in.$1=&amp;quot;$1;
}
{
v=100; y=200
print &amp;quot;a.in.v=&amp;quot;v;
print &amp;quot;a.in.y=&amp;quot;y;

a(y);
b();
print &amp;quot;a.out.v=&amp;quot;v;
print &amp;quot;a.out.y=&amp;quot;y;
}


function a(y)
{
print &amp;quot;(a)v=&amp;quot;v;
v=v+$1+y;
y=300;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;6-bash四种变量截取&#34;&gt;6.bash四种变量截取&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;${var#.*} 从左到右，满足#之后条件的最小长度
${var##.*} 从左到右，满足##之后条件的最大长度
${var%.*} 从右到左，满足%之后条件的最小长度
${var%%.*} 从右到左，满足%%之后条件的最小长度
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在awk中可以使用substr($1,0,length($1)–..)实现类似的功能。&lt;/p&gt;

&lt;p&gt;#7.bash中的包含关系&lt;/p&gt;

&lt;p&gt;包含： 即一个大的部分包含小的部分（member) 等价： 即两个东西等价(equal) 比较：一般是两个数，另外也可以是字符串。&lt;/p&gt;

&lt;p&gt;bash几种&lt;a href=&#34;http://www.cnblogs.com/ginsonwang/p/5525340.html&#34; target=&#34;_blank&#34;&gt; 包含关系用法  &lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;strA=&amp;quot;helloworld&amp;quot;
strB=&amp;quot;low&amp;quot;
if [[ $strA =~ $strB ]]
then
    echo &amp;quot;包含&amp;quot;
else
    echo &amp;quot;不包含&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#8.awk去除左右空格&lt;/p&gt;

&lt;p&gt;第5个知识点阐述了函数的定义方式,现在来运用一下， awk&lt;a href=&#34;http://www.cnblogs.com/ginsonwang/p/5525340.html&#34; target=&#34;_blank&#34;&gt; 去除左右空格 &lt;/a&gt;，再一次使用中发现所有的文件名后缀中多了一个空格，于是尝试消掉空格，想着用awk实现。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;function ltrim(s) { sub(/^[ \t\r\n]+/, &amp;quot;&amp;quot;, s); return s }
function rtrim(s) { sub(/[ \t\r\n]+$/, &amp;quot;&amp;quot;, s); return s }
function trim(s) { return rtrim(ltrim(s)); }
BEGIN{
        FS=&amp;quot;,&amp;quot;
}

{
        $0 = rtrim($0);
        if($2!=&amp;quot;-&amp;quot; &amp;amp;&amp;amp; $3==&amp;quot;-&amp;quot;)
                a[$4]++;
        {
        if($4!=&amp;quot;-&amp;quot;)
                b[$4]++;
        else
                b[$5]++;
        }
}

END{
        print &amp;quot;   client    incr_num_day&amp;quot;;
        for(i in a) printf(&amp;quot;%10s   %d\n&amp;quot;,i,a[i])
        print &amp;quot;\n\n   client    all_num&amp;quot;;                                                                                                                                                     
        for(j in b) printf(&amp;quot;%10s   %d\n&amp;quot;,j,b[j]);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#9.awk调用系统命令&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/cy_cai/article/details/41908921&#34; target=&#34;_blank&#34;&gt; MEthod &lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ready:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;touch c.txt
touch d.txt&lt;/p&gt;

&lt;p&gt;II. a.txt:&lt;/p&gt;

&lt;p&gt;c.txt
d.txt&lt;/p&gt;

&lt;p&gt;III. code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;awk &#39;{cmd=&amp;quot;rm &amp;quot;$0;system(cmd)}&#39; a.txt   
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;10-awk重定向和管道&#34;&gt;10.awk重定向和管道&lt;/h1&gt;

&lt;p&gt;有时候直接可以在awk使用管道，提供给shell,比如print|Sort,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;
awk &#39;{print $1, $2 | &amp;quot;sort&amp;quot; }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#11.windows下的cygwin使用脚本&lt;/p&gt;

&lt;p&gt;必须得使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dos2unix.exe *脚本名字
dos2unix.exe a.sh
dos2unix.exe func.awk


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样执行shell才有效。&lt;/p&gt;

&lt;h1 id=&#34;12-awk性能比shell更高&#34;&gt;12.awk性能比shell更高&lt;/h1&gt;

&lt;p&gt;参考&lt;a href=&#34;http://www.cnblogs.com/chengmo/archive/2010/10/04/1842073.html&#34; target=&#34;_blank&#34;&gt; 链接 &lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
性能比较

[chengmo@localhost nginx]# time (awk &#39;BEGIN{ total=0;for(i=0;i&amp;lt;=10000;i++){total+=i;}print total;}&#39;)
50005000

real    0m0.003s
user    0m0.003s
sys     0m0.000s
[chengmo@localhost nginx]# time(total=0;for i in $(seq 10000);do total=$(($total+i));done;echo $total;)
50005000

real    0m0.141s
user    0m0.125s
sys     0m0.008s 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结论：在awk中执行算术运算，比在bash中执行更好一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vim的乐趣</title>
      <link>/blog/2016/02/18/vim%E7%9A%84%E4%B9%90%E8%B6%A3/</link>
      <pubDate>Thu, 18 Feb 2016 02:55:43 +0800</pubDate>
      <guid>/blog/2016/02/18/vim%E7%9A%84%E4%B9%90%E8%B6%A3/</guid>
      <description>&lt;p&gt;vim有很多基础教程，我看过比较好的是&lt;a href=&#34;http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&#34; target=&#34;_blank&#34;&gt;learn vim progressively&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;% : Go to the corresponding (, {, [&lt;/li&gt;
&lt;li&gt;* (resp. #) : go to next (resp. previous) occurrence of the word under the cursor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;abstract&#34;&gt;Abstract：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;1）在屏幕中移动光标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;2）在行内移动光标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;3）屏幕滚动&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#4&#34;&gt;4）多屏操作&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#4.1&#34;&gt;4.1 启动时候分屏 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.2&#34;&gt;4.2 运行期间分屏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.3&#34;&gt;4.3 运行期间光标移屏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.4&#34;&gt;4.4 运行期间屏幕切换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.5&#34;&gt;4.5 运行期间调整窗口大小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.6&#34;&gt;4.6 运行期间关闭窗口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &amp;amp; vim 有编译模式与命令模式，下述光标移动操作均为命令模式下操作；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下文中以 ^ 符表示 Ctrl 键被按下，如 ^F 标示 Ctrl 与 F 键被同时按下；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下文中以 + 号表示按下某键后再按另外按键，如 z + Enter 表示先按下 z 键，再按下 Enter 键；&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1&#34;&gt;1，在屏幕中移动光标：&lt;/h2&gt;

&lt;p&gt;vi &amp;amp; vim 命令行模式操作移动光标位置都是指移动到要编辑单词、字母的前面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    按键                                           操作描述
    h                                           光标左移一个字符；
    j                                           光标下移一行；
    k                                           光标上移一行；
    l                                           光标右移一个字符；

    数值  +  G                                  光标移至“数值”所指行的行首；
    ^H                                          光标移至当前屏幕显示首行的行首；
    ^M                                          光标移至当前屏幕显示的中间行的行首；
    ^L                                          光标移至当前屏幕显示的最后一行的行首；
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2&#34;&gt;2，在文件行内移动光标：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    vi &amp;amp; vim 命令行模式操作光标行内移动，单词间以空格作为分隔字符，标点符号看作一个单词。

    按键                                          操作描述
    0    （数字零）                             光标移动到光标所在行的行首；
    $                                           光标移动到光标所在行的行末；
    w                                           光标移动到下一个单词的首字母前；
    b                                           光标移动到上一个单词的首字母前；
    e                                           光标移动到当前光标所在单词的最后字符前；
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3&#34;&gt;3，屏幕滚动：&lt;/h2&gt;
        

&lt;pre&gt;&lt;code&gt;    按键                                            操作描述
    ^F                                            屏幕向下滚动一屏；==&amp;gt;屏
    ^B                                            屏幕向上滚动一屏；
    ^D                                            屏幕向下滚动半屏；==&amp;gt;半屏
    ^U                                            屏幕向上滚动半屏；
    ^E                                            屏幕向下滚动一行；==&amp;gt;行
    ^Y                                            屏幕向上滚动一行；
    z + Enter                                     滚动屏幕，使当前光标所在行处于屏幕第一行；
    z + .                                         滚动屏幕，使当前光标所在行处于屏幕中间行；
    z + -                                         滚动屏幕，使当前光标所在行处于屏幕最后一行；
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4&#34;&gt;4, 多屏操作&lt;/h2&gt;

&lt;h3 id=&#34;4.1&#34;&gt; 4.1 启动时候分屏 &lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;vim -on/-On filename1 filename2....
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;小写的o表示水平拆分，&lt;/li&gt;
&lt;li&gt;大写的O表示垂直拆分，&lt;/li&gt;
&lt;li&gt;n表示需要拆分的个数，最后面跟上拆分后需要打开的文件名称&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4.2&#34;&gt; 4.2 运行期间分屏 &lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     按键                                         操作描述
    :sp [filename]                              水平拆分出一个窗格，后面可以接要打开的文件名，如果没有则将当前窗口进行拆分
    :vsp [filename]                             垂直拆分出一个窗格
    :new [filename]                             水平拆分
    ^w+s                                        等效于:sp不带filename效果
    ^w+v                                        等效于:vsp不带filename效果
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4.3&#34;&gt; 4.3 运行期间光标移屏 &lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     按键                                         操作描述
    ^w+h                                        光标移动到左边窗口
    ^w+j                                        光标移动到下面窗口
    ^w+k                                        光标移动到上面窗口
    ^w+l                                        光标移动到右边窗口
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4.4&#34;&gt; 4.4 运行期间屏幕切换 &lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     按键                                         操作描述
    ^w+H                                        将当前窗口移动到最左边
    ^w+J                                        将当前窗口移动到最下面
    ^w+K                                        将当前窗口移动到最上面
    ^w+L                                        将当前窗口移动到最右边
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4.5&#34;&gt; 4.5 运行期间调整窗口大小 &lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     按键                                        操作描述
    ^w+=                                        一样大高度
    ^w+-                                        减小高度
    ^w++                                        增加高度

    ^w+&amp;lt;                                        减小宽度      ==&amp;gt;后来才知道分着这么细
    ^w+&amp;gt;                                        增大宽度
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4.6&#34;&gt; 4.6 运行期间关闭屏幕 &lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     按键                                        操作描述
    ^w+o                                        只留下当前窗口,其他窗口都进行关闭   ===&amp;gt;改命令很有作用！
    ^w+c                                        关闭当前窗口，若是最后一个 提示是否关闭
    ^w+q                                        关闭当前窗口，若是最后一个 仍然不提是关闭


    ^w+&amp;lt;                                        减小宽度
    ^w+&amp;gt;                                        增大宽度
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>My own customed vim</title>
      <link>/blog/2014/05/14/my-own-customed-vim/</link>
      <pubDate>Wed, 14 May 2014 13:54:05 +0800</pubDate>
      <guid>/blog/2014/05/14/my-own-customed-vim/</guid>
      <description>&lt;p&gt;#Installation#&lt;/p&gt;

&lt;p&gt;###Backup your old vim configuration files:####&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    mv ~/.vim ~/.vim.orig
    mv ~/.vimrc ~/.vimrc.orig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Clone and install this repo:###&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    到我的百度盘[下载][1].vim，复制到 ~主目录下，即可,已经有vundle了。
    ln -s ~/.vim/vimrc ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Install bundles ###
Launch vim(ignore the errors and they will disappear after installing needed plugins)and run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;    :BundleInstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Thst&amp;rsquo;s it!###&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
