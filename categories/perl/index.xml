<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>perl | Macro Life</title>
    <link>https://jueqingsizhe66.github.io/categories/perl/</link>
      <atom:link href="https://jueqingsizhe66.github.io/categories/perl/index.xml" rel="self" type="application/rss+xml" />
    <description>perl</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2019</copyright><lastBuildDate>Wed, 08 Feb 2017 17:25:49 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>perl</title>
      <link>https://jueqingsizhe66.github.io/categories/perl/</link>
    </image>
    
    <item>
      <title>perl读取mysql数据库</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/02/08/perldu-qu-mysqlshu-ju-ku/</link>
      <pubDate>Wed, 08 Feb 2017 17:25:49 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/02/08/perldu-qu-mysqlshu-ju-ku/</guid>
      <description>&lt;p&gt;perl中常见的文件打开关闭有open和IO模块等，而有时候涉及大量的
数据保存和打开的时候，就得借助数据库的使用，提供缓存的功能，并
使得保存的数据占用量最少，访问更快捷。下面就perl的mysql数据库访问
做一个简要的介绍。&lt;/p&gt;

&lt;h2 id=&#34;perldbi&#34;&gt;1. 数据库访问原理&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;加载对应数据库驱动&lt;/li&gt;
&lt;li&gt;获得相应的连接&lt;/li&gt;
&lt;li&gt;准备需要的查询数据 删除数据 更新数据&lt;/li&gt;
&lt;li&gt;执行sql语句&lt;/li&gt;
&lt;li&gt;获得相应的结果&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;perldbi&#34;&gt;2. perl DBI mysql实现&lt;/h2&gt;

&lt;p&gt;What is DBI?
    &amp;ldquo;The DBI is the standard database interface module for Perl.
    It defines a set of methods, variables and conventions that provide a
    consistent database interface independent of the actual database being used.&amp;rdquo;
    &amp;ndash; Tim Bunce&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装perl dbi&lt;/li&gt;
&lt;li&gt;安装perl dbd:mysql驱动&lt;/li&gt;
&lt;li&gt;加载数据库驱动dsn&lt;/li&gt;
&lt;li&gt;从dsn获取相应的链接connect方法&lt;/li&gt;
&lt;li&gt;执行相应的sql语句&lt;/li&gt;
&lt;li&gt;注意，处理完毕最好做一个关闭操作(&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;这是一个技术问题，也是德行问题和习惯问题，编程的很多技术都是需要打开和关闭两个过程配对呈现&lt;/strong&gt;&lt;/font&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体可以参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dbi.perl.org/&#34; target=&#34;_blank&#34;&gt;perl dbi官网手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://log4think.com/perl_and_dbi/&#34; target=&#34;_blank&#34;&gt;Perl与数据库DBI快速入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.perl.com/pub/1999/10/DBI.html&#34; target=&#34;_blank&#34;&gt;A short guid of the dbi programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/homezzm/archive/2011/07/22/2113618.html&#34; target=&#34;_blank&#34;&gt;perl DBI 总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sina.com.cn/s/blog_54dd80920102v8f5.html&#34; target=&#34;_blank&#34;&gt;perl dbi链接mysql中文乱码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jb51.net/article/65791.htm&#34; target=&#34;_blank&#34;&gt;使用Perl DBI操作MySQL的一些建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://log4think.com/perl_fast_tutorial/&#34; target=&#34;_blank&#34;&gt;perl快速入门&lt;/a&gt;&lt;font color=&#34;red&#34;&gt;** 给出了所有的技术语言都可以由main函数引出很多其他的, 把技术当成你的习惯**&lt;/font&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/ah8r1yUxop3dO&#34; target=&#34;_blank&#34;&gt;一本perl参考书: Programming_the_Perl_DBI &lt;/a&gt;
该建议使用binmode解决乱码问题，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use utf8;
binmode(STDOUT, &#39;:encoding(utf8)&#39;);
binmode(STDIN, &#39;:encoding(utf8)&#39;);
binmode(STDERR, &#39;:encoding(utf8)&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/zzq900503/article/details/14454963&#34; target=&#34;_blank&#34;&gt;perl DBI使用详解&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也可以直接在命令行使用&lt;code&gt;perldoc dbi&lt;/code&gt; 查看dbi文档信息&lt;/p&gt;

&lt;h2 id=&#34;perltest&#34;&gt; 3. 技术解决方案&lt;/h2&gt;

&lt;p&gt;feiji.txt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;汽车在高速行驶时，根据空气动力学原理，在行驶过程中会遇到空气阻力，围绕汽车重心同时产生纵向、侧向和垂直上升的三个方向的空气动力量，其中纵向为空气阻力。
为了有效地减少并克服汽车高速行驶时空气阻力的影响，人们设计使用了汽车尾翼，其作用就是使空气对汽车产生第四种作用力，即产生较大的对地面的附着力，它能抵消一部分升力，有效控制汽车上浮，使风阻系数相应减小，使汽车能紧贴在道路地面行驶，从而提高行驶的稳定性能。

工作原理
汽车尾翼作用
汽车尾翼的作用，就是在汽车高速行驶时，使空气阻力形成一个向下的压力，尽量抵消升力，有效控制气流下压力，使风阻系数相应减小，增加汽车的高速行驶稳定性；由于尾翼能降低汽车的空气阻力，因此高速汽车加装尾翼对于节省燃油也有一定的帮助；同时也使汽车的外形更加美观，起到一定的装饰作用。
汽车尾翼分类
玻璃钢尾翼：这类尾翼造型多样，有鸭舌状的、机翼状的，也有直板式的．比较好做造型，不过玻璃钢材质比较脆，韧性和刚性都较差，价格比较便宜。
铝合金尾翼：这类尾翼导流和散热效果不错，而且价格适中，不过重量要比其他材质的尾翼稍重些。
碳纤维尾翼：碳纤维尾翼刚性和耐久性都非常好．不仅重量轻而且也是最美观的一种尾翼．现在广泛被F1赛车采用不过价格比较昂贵。[1] 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;source code for perl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/env perl 
#===============================================================================
#
#         FILE: testdbi.pl
#
#        USAGE: ./testdbi.pl  
#
#  DESCRIPTION: 
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#    Author:  Ye Zhaoliang
# ORGANIZATION: 
#      VERSION: 1.0
#      CREATED: 2016/12/31 1:44:24
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
use utf8;

use CGI::Carp &amp;quot;fatalsToBrowser&amp;quot;;
use strict;
use warnings;
use DBI;
use CGI qw (:standard escapeHTML escape);
my ($driver_name, $db_name, $db_host, $db_sock, $db_port, $db_user, $db_pswd, $dsn);
$driver_name = &#39;mysql&#39;;
$db_name = &#39;mysql&#39;; # database name
$db_host = &#39;localhost&#39;;
$db_sock = &#39;/tmp/mysql.sock&#39;;
$db_port = &#39;3306&#39;;
$db_user = &#39;root&#39;;
$db_pswd = &#39;root&#39;;
# data source
$dsn = &amp;quot;dbi:mysql:database=${db_name};hostname=${db_host};mysql_socket=${db_sock};port=${db_port}&amp;quot;;
# ... set up connection to database (not shown) ...
# connect mysql database
my $dbh = DBI -&amp;gt; connect ($dsn, $db_user, $db_pswd,
{ RaiseError =&amp;gt; 1, PrintError =&amp;gt; 0 });
# put out initial part of page
my $title = &amp;quot;$db_name Database Browser&amp;quot;;
# html header and start_html h1
print header ();
print start_html (-titlk =&amp;gt; $title, -bgcolor =&amp;gt; &amp;quot;white&amp;quot;);
print h1 ($title);
# parameters to look for in URL
my $tbl_name = param (&amp;quot;tbl_name&amp;quot;);
my $sort_col = param (&amp;quot;sort_col&amp;quot;);
# If $tbl_name has no value, display a clickable list of tables.
# Otherwise, display contents of the given table. $sort_col, if
# set, indicates which column to sort by.

!defined ($tbl_name) ? display_table_names ($dbh, $db_name) : display_table_contents ($dbh, $tbl_name, $sort_col);
print end_html ();
sub display_table_names
{
my ($dbh, $db_name) = @_;

## html p paragraph
print p (&amp;quot;Select a table by clicking on its name:&amp;quot;);
# retrieve reference to single-column array of table names
my $ary_ref = $dbh -&amp;gt; selectcol_arrayref (qq{ SHOW TABLES FROM $db_name });
# Construct a bullet list using the ul() (unordered list) and
# li() (list item) functions. Each item is a hyperlink that
# re-invokes the script to display a particular table.
my @item;
foreach my $tbl_name (@{$ary_ref})
{
my $url = sprintf (&amp;quot;%s?tbl_name=%s&amp;quot;, url (), escape ($tbl_name));
my $link = a ({-href =&amp;gt; $url}, escapeHTML ($tbl_name));
push (@item, li ($link));
}
## list control
print ul (@item);
}
sub display_table_contents
{
my ($dbh, $tbl_name, $sort_col) = @_;
my @rows;
my @cells;
# if sort column not specified, use first column
$sort_col = &amp;quot;1&amp;quot; if !defined ($sort_col);
# present a link that returns user to table list page
# p control widget
print p (a ({-href =&amp;gt; url ()}, &amp;quot;Show Table List&amp;quot;));
print p (strong (&amp;quot;Contents of $tbl_name table:&amp;quot;));
## select from database
my $sth = $dbh -&amp;gt; prepare (qq{
SELECT * FROM $tbl_name ORDER BY $sort_col
LIMIT 200
});
$sth -&amp;gt; execute ();
# Use the names of the columns in the database table as the
# headings in an HTML table. Make each name a hyperlink that
# causes the script to be reinvoked to redisplay the table,
# sorted by the named column.
foreach my $col_name (@{$sth -&amp;gt; {NAME}})
{
my $url = sprintf (&amp;quot;%s?tbl_name=%s;sort_col=%s&amp;quot;,
url (),
escape ($tbl_name),
escape ($col_name));
my $link = a ({-href =&amp;gt; $url}, escapeHTML ($col_name));
push (@cells, th ($link));
}
push (@rows, Tr (@cells));
# display table rows
while (my @ary = $sth -&amp;gt; fetchrow_array ())
{
@cells = ();
foreach my $val (@ary)
{
# display value if non-empty, else display non-breaking space
if (defined ($val) &amp;amp;&amp;amp; $val ne &amp;quot;&amp;quot;)
{
$val = escapeHTML ($val);
}
else
{
$val = &amp;quot; &amp;quot;;
}
push (@cells, td ($val));
}
push (@rows, Tr (@cells));
}
# display table with a border
print table ({-border =&amp;gt; &amp;quot;1&amp;quot;}, @rows);
}

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>perl中文乱码问题</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/02/08/perlzhong-wen-luan-ma-wen-ti/</link>
      <pubDate>Wed, 08 Feb 2017 17:23:58 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/02/08/perlzhong-wen-luan-ma-wen-ti/</guid>
      <description>&lt;p&gt;binmode可以很好的解决perl中问题，采用&lt;a href=&#34;http://blog.chinaunix.net/uid-20735106-id-3438892.html&#34; target=&#34;_blank&#34;&gt;Encode1&lt;/a&gt;,&lt;a href=&#34;http://www.jb51.net/article/16041.htm&#34; target=&#34;_blank&#34;&gt;Encode&lt;/a&gt;等方式不管用&lt;/p&gt;

&lt;p&gt;PerlFile.pl测试源码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/env perl 
#===============================================================================
#
#         FILE: perlFile.pl
#
#        USAGE: ./perlFile.pl  
#
#  DESCRIPTION: 
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: YOUR NAME (), 
# ORGANIZATION: 
#      VERSION: 1.0
#      CREATED: 2017/2/8 9:49:51
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
use utf8;



binmode(STDIN,&amp;quot;:encoding(gb2312)&amp;quot;);
binmode(STDOUT,&amp;quot;:encoding(gb2312)&amp;quot;);

while ( &amp;lt;&amp;gt; ) {
    chomp;
    print $_,&amp;quot;\n&amp;quot;;
    last if $_ =~ m/q/xm;
}

open(FEIJI,&amp;quot;E:\\feiji.txt&amp;quot;) or die &amp;quot;can&#39;t open the file \n&amp;quot;;
my $car =&amp;quot;尾翼&amp;quot;;

	• binmode(FEIJI,&amp;quot;:encoding(gb2312)&amp;quot;);
# binmode( STDIN,  &#39;:encoding(gbk2312)&#39; );
 #binmode( FEIJI,  &#39;:encoding(utf8)&#39; );
 #binmode( STDOUT, &#39;:encoding(gbk2312)&#39; );   
 #binmode( STDERR, &#39;:encoding(gbk2312)&#39; ); 
#while( my $line = &amp;lt;FEIJI&amp;gt;){
#my $re = Encode::decode(&#39;GB2312&#39;,&#39;汽车&#39;);
 my $count=1;
 while( &amp;lt;FEIJI&amp;gt;){
     #print &amp;quot;$_ \n&amp;quot; ;
    #     print &amp;quot;$_ \n&amp;quot; if $_ =~ /.*$re.*/;
#    Encode::_utf8_on($_);
    #    Encode::decode_utf8($_);
    #print &amp;quot;$_\n&amp;quot; ;#if $_ =~ m/$car/xm;
    #print &amp;quot;$count: $_\n&amp;quot; if $_ =~ m/$car/xm;
    #$count +=1;

     s/汽车/风力机/g;
    print;
    }

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Perl_Summary</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/01/22/perl-summary/</link>
      <pubDate>Sun, 22 Jan 2017 19:18:50 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/01/22/perl-summary/</guid>
      <description>&lt;p&gt;why need perl? If you need strong text regex processing ,use perl!&lt;/p&gt;

&lt;p&gt;One paragraph I copied from &lt;code&gt;perldoc perlintro&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;The language is intended to be &lt;font color=&#34;red&#34;&gt;practical&lt;/font&gt; (easy to use, efficient,
complete) rather than beautiful (tiny, elegant, minimal). Its major
features are that it&amp;rsquo;s easy to use, supports both procedural and
object-oriented (OO) programming, has powerful built-in support for text
processing, and has one of the world&amp;rsquo;s most impressive collections of
third-party modules.&lt;/p&gt;

&lt;p&gt;To me, perl means a report programmer with practical experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/leezx/p/5607753.html&#34; target=&#34;_blank&#34;&gt;perl基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/leezx/p/5755237.html&#34; target=&#34;_blank&#34;&gt;perl语法速查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/leezx/p/5617239.html&#34; target=&#34;_blank&#34;&gt;perl高级特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/leezx/p/5589602.html&#34; target=&#34;_blank&#34;&gt;some difference between -&amp;gt; and =&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://storagebar.blog.51cto.com/211112/70680&#34; target=&#34;_blank&#34;&gt;How to Program Perl&lt;/a&gt;
You need to practice ,think, and share(your final target).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://storagebar.blog.51cto.com/211112/70718&#34; target=&#34;_blank&#34;&gt;Teach yourself Programming in ten years&lt;/a&gt;
You need to talk to other programmer, they are all good people(Just think they are).&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
