<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Images | Macro Life</title>
    <link>/images/</link>
      <atom:link href="/images/index.xml" rel="self" type="application/rss+xml" />
    <description>Images</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language>
    <image>
      <url>/img/icon-192.png</url>
      <title>Images</title>
      <link>/images/</link>
    </image>
    
    <item>
      <title></title>
      <link>/images/fortrandebug/fortrandebug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/images/fortrandebug/fortrandebug/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://nwtc.nrel.gov/FAST8&#34; target=&#34;_blank&#34;&gt;NREL FAST&lt;/a&gt;的调试一直存在问题，关键是不知道怎么设置选项，查阅了Visual Studio和一些基本知识整理了
NREL项目的调试方法。&lt;/p&gt;

&lt;h2 id=&#34;fortran工作路径问题&#34;&gt;fortran工作路径问题&lt;/h2&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;&lt;strong&gt;工作路径对于任何的可执行文件都很重要。&lt;/strong&gt;&lt;/font&gt;
    当然事先可能得了解一下软件编译链接的过程（即编写源代码&amp;ndash;调用编译器编译源代码&amp;ndash;
    &amp;gt;调用链接器连接相关代码块生成可执行文件&amp;ndash;&amp;gt;运行可执行文件）(IDE隐藏了上述过程)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果不带任何路径，则被认为是当前路径(&lt;font color=&#34;green&#34;&gt;&lt;strong&gt;working directory&lt;/strong&gt;&lt;/font&gt;)。&lt;/li&gt;
&lt;li&gt;如果带相对路径，则以当前路径为基准。&lt;/li&gt;
&lt;li&gt;通过命令行执行，当前路径一般在提示符上(或&lt;font color=&#34;red&#34;&gt;pwd&lt;/font&gt;命令查看)&lt;/li&gt;
&lt;li&gt;直接&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;双击&lt;/strong&gt;&lt;/font&gt;,当前路径在exe所在的文件夹。&lt;/li&gt;
&lt;li&gt;通过&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;IDE&lt;/strong&gt;&lt;/font&gt;方式运行，当前路径一般在&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;工程所在文件夹&lt;/strong&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;一些IDE还允许设置当前路径(只对IDE方式运行有效)。&lt;/li&gt;
&lt;li&gt;右键exe名字也是可以指定运行路径的（这样就可以加载对应的配置文件)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如:&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/fortrandebug/idewd.png&#34; alt=&#34;IDE working directory&#34; /&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;代码层级改变文件路径&#34;&gt;代码层级改变文件路径&lt;/h2&gt;

&lt;p&gt;在程序中可以通过一些手段，动态的更改当前路径。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IVF: changeDirQQ&lt;/li&gt;
&lt;li&gt;gfortran: ChDir&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也可以通过一些手段，获得当前路径，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IVF/gforran: GetCWD&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;
program testDir
Implicit none
CHARACTER(len=512) ::  working_path
call GET_COMMAND_ARGUMENT(0 , working_path);
write(*,&#39;(a,/,a)&#39;) &#39;exe path: &#39;, trim(working_path);
call GETCWD(working_path)
write(*,&#39;(a,/,a)&#39;) &#39;Working Directory: &#39;, trim(working_path);
end program testDir

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;输出:&lt;br\&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exe path:

D:\testCWD\Debug\test_cwd.exe

working directory:
D:\testCWD
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;调试fast&#34;&gt;调试FAST&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;/images/fortrandebug/fast.jpg&#34; alt=&#34;fast&#34; /&gt;
最关键的是一个对应两个设置&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个对应指的是第二步的Linker的output File的exe名字和第三步的General底下的TargetName对应上&lt;/li&gt;
&lt;li&gt;两个设置是指在Debuging对Command Arguments和Working Directory的设置。Command Argument指定文件名字
Working Directory指定文件路径。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>/images/fortrandebug/%E4%B8%80%E7%AF%87%E6%9C%89%E8%B6%A3%E7%9A%84fortran%E9%9D%99%E6%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/images/fortrandebug/%E4%B8%80%E7%AF%87%E6%9C%89%E8%B6%A3%E7%9A%84fortran%E9%9D%99%E6%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</guid>
      <description>&lt;p&gt;一张来自&lt;a href=&#34;http://fcode.cn/&#34; target=&#34;_blank&#34;&gt;fcode&lt;/a&gt;的有趣的静态和动态链接的比喻图，
&lt;img src=&#34;/images/fortrandebug/usb.png&#34; alt=&#34;staticdy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;静态库是需要直接和exe文件打包在一起的，而动态库则是需要运行的时候才执行dll文件，
dll文件也是一个exe文件，只不过只能由对应的exe文件执行，无法人工执行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#static&#34;&gt;1. 静态链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dynamic&#34;&gt;2. 动态链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compare&#34;&gt;3. 两者比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hun&#34;&gt;4. fortran与c混编&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;static&#34;&gt;静态链接&lt;/h2&gt;

&lt;p&gt;静态库lib,实际上是obj文件的集合，可认为是打包在一起的若干obj，&lt;/p&gt;

&lt;p&gt;因此他的编译过程为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;font color=&#34;red&#34;&gt;编译子程序(f90)源代码，得到若干obj文件&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;red&#34;&gt;打包这些obj文件，成为&lt;strong&gt;lib静态库&lt;/strong&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;他的使用比较简单：&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;编译主程序(或其他子程序),链接时，&lt;strong&gt;带上lib&lt;/strong&gt;文件即可&lt;/font&gt;。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/font&gt;&lt;br/&gt;
在上面的f90源代码中可能包含了module片段。若干静态库中使用了module,那么编译还会产生mod内件。
&lt;font color=&#34;green&#34;&gt;每一个module对应一个同名的mod文件。&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;mod是什么？
mod文件可认为是module的&amp;rdquo;概述&amp;rdquo;,与c语言的&amp;rdquo;头文件&amp;rdquo;的做哟个相似，但与C语言需要自己书写头文件不同，
fortran的mod文件由编译器&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;自动生成&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;

&lt;p&gt;也就是说，当&lt;code&gt;use Module&lt;/code&gt;时，编译器需&lt;strong&gt;能够&lt;/strong&gt;找到对应的mod文件。因此有必要把静态库里产生的mod文件
保存起来，以便使用静态库时加载(&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;mod文件一定得在lib目录下,这点很容易被遗忘。&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;提前准备公用的源代码:&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;sub.90:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;Subroutine sub()
  write(*,*) &#39;Xueqiu is a good man!&#39;
End Subroutine sub

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;func.f90:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MODULE FUNCMOD
  IMPLICIT NONE

CONTAINS

  INTEGER FUNCTION FUNC()
    WRITE(*,*) &#39;THIS IS A FUNC!&#39;
    FUNC = 1
  END FUNCTION FUNC
END MODULE FUNCMOD

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.f90:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Program testLib
  use funcmod
  Implicit None
  integer :: i
  i = func()
  call sub()
End Program testLib

&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;h3&gt; gfortran技术解决方案&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步: 编译生成obj[和mod] 文件,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gfortran -c sub.f90 func.90
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成文件列表如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;funcmod.mod
func.o
sub.o
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第二步: 然后再打包obj文件到lib文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ar rv my.lib func.o sub.o
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后你现在就可以删掉func.o sub.o了(&lt;code&gt;rm -rf func.o sub.o&lt;/code&gt;),
因为他们包含在my.lib中.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第三步: 编译主文件，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gfortran -c main.f90
gfortran main.o my.lib -o main.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样就会生成对应的main.exe了。&lt;/p&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;h3&gt; vs2015+ivf2017的技术解决方案:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;第一步:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新建一个static library项目,并添加sub.f90,func.f90到source文件夹下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/fortrandebug/static/1.png&#34; alt=&#34;static&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第二步: 生成解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/images/fortrandebug/static/2.png&#34; alt=&#34;static2&#34; /&gt;
这样就在debug目录下得到*.lib文件&lt;/p&gt;

&lt;p&gt;注意：链接需要二个文件*.obj
和*.mod文件，而myfirstLib.lib仅仅是把*.obj打包了一下，所以
还得再ivf的&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;Additional Include&lt;/strong&gt;&lt;/font&gt;中添加mod文件路径&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第三步:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新建一个testLib  console(/subsystem:console )的项目 用于测试myfirstlib&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/fortrandebug/static/3.png&#34; alt=&#34;test&#34; /&gt;
注意由于在一个解决方案中存在多个项目所以得把test(包含主程序)设置为&lt;font color=&#34;red&#34;&gt;启动项目&lt;/font&gt;。
&lt;img src=&#34;/images/fortrandebug/static/4.png&#34; alt=&#34;启动&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第四步:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;编译，生成解决方案。&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;报错了&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;。
&lt;img src=&#34;/images/fortrandebug/static/5.png&#34; alt=&#34;error&#34; /&gt;
原因是没有找到*.o(func.o)包含的mod文件，解决方法是&lt;font color=&#34;red&#34;&gt;添加mod路径到additional include directories &lt;/font&gt;
&lt;img src=&#34;/images/fortrandebug/static/6.png&#34; alt=&#34;correct&#34; /&gt;&lt;/p&gt;

&lt;p&gt;还有一个问题，我一般还需要&lt;font color=&#34;red&#34;&gt;生成的lib文件放在source目录下&lt;/font&gt;，才可以编译成功，这点也需要小心。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/font&gt;
设置lib路径的时候，在存在mod文件时候，一定得一同存在，否则未可能报符号丢失的错误。&lt;/p&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;h2 id=&#34;dynamic&#34;&gt; 动态链接&lt;/h2&gt;

&lt;p&gt;动态库DLL,实际上也是可执行文件，与exe本质上是一样的。只不过dll通常
没有主程序而已（自己不能运行，只能由对应的主程序运行),他必须由exe在运行以后调用。&lt;/p&gt;

&lt;p&gt;DLL的好处?
具有良好的可维护性，节约内存等特点。在windows(dll)，linux(so),mac等操作系统上，都
大量使用了DLL动态库。&lt;/p&gt;

&lt;p&gt;动态链接库dll的编译过程是:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;编译子程序源代码，得到若干obj文件。&lt;/li&gt;
&lt;li&gt;链接这些obj文件，得到dll文件（有可能带lib文件，如果是静态加载则无lib，如果是动态加载则有lib）&lt;/li&gt;
&lt;li&gt;部分平台的编译器会得到导入库lib&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;他的使用由两种方法(显示调用(动态),隐式调用(静态)):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;编译主程序(或其他子程序),链接时，带上导入库lib文件。&lt;/li&gt;
&lt;li&gt;动态的利用系统函数加载DLL,如windows下的LoadLibrary和GetProcAddress。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr/&gt;

&lt;hr/&gt;

&lt;p&gt;提前准备好公用的fortran源代码：&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;sub.f90:&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;Subroutine sub()
  !DEC$ ATTRIBUTES DLLEXPORT,ALIAS:&amp;quot;sub&amp;quot;::sub
  write(*,*) &#39;Xueqiu is a good man!&#39;
End Subroutine sub

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意，!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:&amp;ldquo;sub&amp;rdquo;::sub，是有用的exe间的符号对接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;func.f90:&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;
Module funcmod
  Implicit none

contains

  Integer Function func()
    !DEC$ ATTRIBUTES DLLEXPORT,ALIAS:&amp;quot;func&amp;quot;::func
    write(*,*) &#39;This is a func!&#39;
    func = 1
  End Function func
End Module funcmod

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意，!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:&amp;ldquo;func&amp;rdquo;::func，是有用的exe间的符号对接。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;main.f90:&lt;/font&gt;&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;Program testDll
  use funcmod
  Implicit None
  integer :: i
  i = func()
  call sub()
End Program testDll

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt; gfortran的技术解决方案:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步: 生成so文件(linux下面)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gfotran sub.f90 func.f90 -shared -fPIC -o libmy.so
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二步: 直接引用即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gfortran main.f90 libmy.so -o main.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三步:直接运行main.exe
有可能报错，在linux下可能需要 &lt;code&gt;export LD_LIBRARY_PATH=./&lt;/code&gt;
也就是把当前目录也当作查找so文件的一个地方。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt; vs2015+ivf2017的技术解决方案:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;第一步：新建一个Dll project
然后类似静态的方法，把func.f90,sub.f90当作一个项目，再新建一个testDll项目，并添加lib等，也要include进来目录
比如，
&lt;img src=&#34;/images/fortrandebug/dll/main.png&#34; alt=&#34;main&#34; /&gt;再次基础上，在添加include路径（把mod文件添加进来）
&lt;img src=&#34;/images/fortrandebug/dll/include.png&#34; alt=&#34;include&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在运行的时候有可能出现运行错误&lt;img src=&#34;/images/fortrandebug/dll/error.png&#34; alt=&#34;error&#34; /&gt;,这时候需要在Working Directory添加
运行dll路径，
&lt;img src=&#34;/images/fortrandebug/dll/dll.png&#34; alt=&#34;dll&#34; /&gt;,&lt;/p&gt;

&lt;h2 id=&#34;compare&#34;&gt; 动态链接的静态加载和动态加载&lt;/h2&gt;

&lt;p&gt;&lt;font color=&#34;blue&#34;&gt;总之，静态库lib和动态库dll，是很多第三方库的主要形式。因此他们是学习第三方
函数库的基础知识，也是学习多种语言混编的基础。&lt;/font&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态加载和动态加载的区别:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;静态加载:不依赖ifort的运行库（可以到没有安装ifort的机器 上运行dll文件）  dll文件比较大&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dll加载 :则会依赖ifort的运行库（dll比较小，但是如果没有ifort运行库 则会报dll错误（所以一般拷贝到别的机子的dll都是静态加载的
可采用depends walker这个软件，查看内部的dll信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而我们可以用一张十分perfect的比较图，看出动态链接库的两种加载方式的不同，以及动态和静态的区别(10元)
&lt;img src=&#34;/images/fortrandebug/dynamicstatic.png&#34; alt=&#34;dynamicstatic&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意动态函数(subroutine)比静态多了一行&lt;code&gt;!DEC$ ATTRIBUTE DLLEXPORT,ALIAS:...&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;动态加载例子
&lt;img src=&#34;/images/fortrandebug/dll/load.png&#34; alt=&#34;动态加载&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;Module LoadDLL
Implicit None
Interface
FUNCTION GetProcAddress( hModule, lpProcName)
  !DEC$ ATTRIBUTES DEFAULT, STDCALL, DECORATE, ALIAS:&#39;GetProcAddress&#39; :: GetProcAddress
  use ISO_C_Binding
  type( C_FUNPTR ) :: GetProcAddress
  integer hModule
  character(C_CHAR) , dimension(*) :: lpProcName
END FUNCTION GetProcAddress
    
Integer Function F_func()
End Function F_func
    
Subroutine F_Sub()
End Subroutine F_Sub
End Interface
  
End Module LoadDLL
  
Program www_fcode_cn
use LoadDLL
use ISO_C_Binding
use Kernel32 , only : LoadLibrary
Implicit None
Procedure(F_func) , pointer :: func
Procedure(F_sub ) , pointer :: sub
type( C_FUNPTR ) :: c_pointer
integer :: hDLL , i
character(len=32) :: dllname , funcname
Do
write(*,*) &#39;您要调用哪个DLL？&#39;
read(*,*) dllname
hDLL = LoadLibrary( trim(dllname)//c_null_char )
if ( hDLL &amp;lt;= 0 ) then
  write(*,*) &#39;对不起，我好像无法找到 &#39;//trim(dllname)//&#39; 哦~~！^_^&#39;
else
  exit
end if
End Do
Do
write(*,*) &#39;您要调用哪个函数？&#39;
read(*,*) funcname
if ( funcname==&amp;quot;quit&amp;quot; ) exit
c_pointer = GetProcAddress( hDLL , trim(funcname)//c_null_char )
if ( .not.C_ASSOCIATED(c_pointer) ) then
  write(*,*) trim(dllname)//&#39; 里面好像没有 &#39;//trim(funcname)//&#39; 函数哦~~！^_^&#39;
  cycle
end if
If ( funcname==&amp;quot;func&amp;quot; ) then
  call C_F_ProcPointer( c_pointer , func )
  i = func()
Else if ( funcname==&amp;quot;sub&amp;quot; ) then
  call C_F_ProcPointer( c_pointer , sub )
  call sub()
End If
End Do  
End Program www_fcode_cn

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hun&#34;&gt; fortran与c混编&lt;/h2&gt;

&lt;p&gt;源于此:&lt;a href=&#34;http://bbs.fcode.cn/thread-1117-1-1.html&#34; target=&#34;_blank&#34;&gt;http://bbs.fcode.cn/thread-1117-1-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/fortrandebug/hunbian/main.png&#34; alt=&#34;混编主界面&#34; /&gt;
混编时候注意两点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;c 和 fortran 混编不需要 include&lt;/li&gt;
&lt;li&gt;c/c++ 里面没有 module&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外注意vc项目也得添加引用目录
&lt;img src=&#34;/images/fortrandebug/hunbian/vcinclude.png&#34; alt=&#34;引用目录&#34; /&gt;&lt;/p&gt;

&lt;p&gt;你也可能运行错误
&lt;img src=&#34;/images/fortrandebug/hunbian/error.png&#34; alt=&#34;errorV&#34; /&gt;
注意上面红色的部分。
第一处：如果你强调必须 stdcall 协定，那么你需要在 fortran 中声明。（这个声明不是规范的，是IVF扩展的写法）
第二处：你的 C++ 里的 lens 是通过 strlen 计算出来的，而不是指针。所以 fortran 中必须加 value 修饰符，表示它是传值，而不是传址。（这是导致cpp_main.exe 中的 0x5d7005a9 (vlhm.dll) 处最可能的异常: 0xC0000005: 读取位置 0x00000021 时发生访问冲突）的原因。&lt;/p&gt;

&lt;p&gt;最终正确结果如下:
&lt;img src=&#34;/images/fortrandebug/hunbian/final.png&#34; alt=&#34;correctV&#34; /&gt;&lt;/p&gt;

&lt;p&gt;源码信息如下:&lt;/p&gt;

&lt;p&gt;TestFortranCpp.cpp&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// TestFortranCpp.cpp : 定义控制台应用程序的入口点。
//

#include &amp;quot;stdafx.h&amp;quot;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

extern &amp;quot;C&amp;quot; {void _stdcall   vlhm(char *, int); }
//extern &amp;quot;C&amp;quot; {void vlhm(char *,int); }
int _tmain(int argc, _TCHAR* argv[])
{
	char *inputfile = &amp;quot;E:\\phase6-power.opj&amp;quot;;
	//char *inputfile;
	//char str[] = &amp;quot;C:\\Users\\www\\Desktop\\\\31005700.tem&amp;quot;;
	//inputfile=&amp;amp;str[0];
	vlhm(inputfile, strlen(inputfile));
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fileNameCheck.f90:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;subroutine vlhm(pfilename, lens) Bind(C,Name=&amp;quot;vlhm&amp;quot;)
!DEC$ ATTRIBUTES STDCALL,DLLEXPORT::vlhm

  use,  Intrinsic :: ISO_C_Binding
!character(len=*)::filename            !c++主程序中传递进来的“Inputfile”变量
!write(*,*)&amp;quot;dll里的filename值是：&amp;quot;
!write(*,*)filename

  type(C_PTR) , value :: pfilename !c++主程序中传递进来的“Inputfile”变量，是C语言的指针
  integer, value::lens                                      !传入的字符串长度
  character(len=lens), target :: filename_a
  !character(len=lens) :: filename_a !pointer &amp;amp; target
  character(len=lens),pointer::filename                     !这是Fortran的字符串

  call c_f_pointer( pfilename , filename )                   !把c语言的指针转换成fortran字符串

  filename_a = filename
  write(*,*)filename
  write(*,*)filename_a

  
  write(*,*) &#39;fine ok&#39;

end subroutine vlhm

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进一步的细节资料可参考&lt;a href=&#34;http://v.fcode.cn/video-library_dll.html&#34; target=&#34;_blank&#34;&gt;fcode视频官网&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
