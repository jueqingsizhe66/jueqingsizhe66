<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方法 | 突然的~自我~</title>
    <link>https://jueqingsizhe66.github.io/category/%E6%96%B9%E6%B3%95/</link>
      <atom:link href="https://jueqingsizhe66.github.io/category/%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <description>方法</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2022</copyright><lastBuildDate>Sat, 19 Feb 2022 01:41:00 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>方法</title>
      <link>https://jueqingsizhe66.github.io/category/%E6%96%B9%E6%B3%95/</link>
    </image>
    
    <item>
      <title>perl diamond</title>
      <link>https://jueqingsizhe66.github.io/post/perl-diamond/</link>
      <pubDate>Sat, 19 Feb 2022 01:41:00 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/post/perl-diamond/</guid>
      <description>&lt;h2 id=&#34;我的perl直觉&#34;&gt;我的perl直觉&lt;/h2&gt;
&lt;p&gt;diamond &amp;ldquo;&amp;lt;&amp;gt;&amp;rdquo; is a very important operator in perl, which can input the file,such as &amp;ldquo;&amp;lt;STDIN&amp;gt;&amp;rdquo;,&amp;quot;&amp;lt;STDOUT&amp;gt;&amp;quot;,&amp;quot;&amp;lt;&amp;hellip;&amp;gt;&amp;quot; (源自intermediate perl)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;$&amp;quot;,蛇杖,象征着权管，在perl所有操作最后都可以归结到reference, 包括subroutine reference, file reference, object reference, hash reference, array reference(源自intermediate perl)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;%&amp;quot;,禅杖,一种hash散列字典，一种数据结构(源自唐玄奘)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;[]&amp;rdquo;, 立方体，cube, &amp;ldquo;@&amp;ldquo;array对象的具体内容(源自黑客帝国)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;{}&amp;rdquo;, 万花筒，，&amp;rdquo;%&amp;ldquo;禅杖对象的具体内容&lt;/p&gt;
&lt;p&gt;perl万事万物模式的匹配均从&amp;rdquo;/ /&amp;ldquo;双斜杠开始(第一,首先)，python一般简化为字符串或者regex字符串(源自pattern胡晖)&lt;/p&gt;
&lt;h2 id=&#34;所有语言的正则&#34;&gt;所有语言的正则&lt;/h2&gt;
&lt;p&gt;正则在任何语言均有实现，他是一个内语言，具有自己的一套语法，perl中从双斜杠开始(源自Mr Wang)。&lt;/p&gt;
&lt;p&gt;在双斜杠&amp;rdquo;//&amp;ldquo;内部包含五类对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;字符内容，比如 &amp;ldquo;\d&amp;quot;等效于[0-9] ,&amp;quot;\w&amp;rdquo; 等效于 [a-zA-Z0-9], &amp;ldquo;\s&amp;rdquo;, &amp;ldquo;\D&amp;quot;等效于[^0-9],&amp;quot;\W&amp;quot;等效于[^a-zA-Z0-9],&amp;quot;§&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元字符，具备特殊意义, &amp;ldquo;\&amp;rdquo;,&amp;rdquo;.&amp;rdquo;,&amp;rdquo;*&amp;rdquo;,&amp;quot;?&amp;quot;,&amp;quot;{3,}&amp;quot;,&amp;quot;{3,12}&amp;quot;((?#注意:1和2可以组合))&lt;/p&gt;
&lt;p&gt;为了获得真正的元字符需要转义,&amp;quot;\\&amp;quot;,&amp;quot;\.&amp;quot;,&amp;quot;\*&amp;quot;,&amp;quot;\?&amp;quot;,&amp;quot;\{&amp;quot;,&amp;quot;\(&amp;quot;,&amp;quot;\)&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位置符，&amp;quot;^&amp;quot;,&amp;quot;$&amp;quot;,&amp;quot;(?&amp;lt;=&amp;hellip;)&amp;quot;, &amp;ldquo;(?&amp;lt;!&amp;hellip;)&amp;rdquo;, &amp;ldquo;\b&amp;rdquo;,&amp;quot;(?=&amp;hellip;)&amp;quot;, &amp;ldquo;(?!&amp;hellip;)&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组和反引用， &amp;ldquo;(?&amp;lt;=&amp;lt;(\w+)&amp;gt;).*(?=&amp;lt;\/\1&amp;gt;)&amp;rdquo;,&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开始于左零宽断言(或者叫&amp;quot;^&amp;quot;),结束语右零宽断言(或者叫&amp;quot;\(&amp;quot;),经典应用囊括着1、2、3、4所有内容，隐含这所有正则表达式，最终归结于0！或者perl的&amp;quot;\)&amp;quot;(具备)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分支，&amp;quot;?(group)yes|no&amp;quot; 如果存在分组group，则继续执行yes，否则no
&amp;ldquo;\w+|\d+&amp;rdquo; 分支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;(?&amp;lt;groupname&amp;gt;\w+)\b\s+\k&amp;lt;groupname&amp;gt;\b&amp;rdquo;  其中groupname指定情况下，需要使用&amp;quot;\k&amp;quot;
把捕获的内容命名为groupname中,并压入堆栈（以为着还可以弹出来），(?&amp;lt;-groupname&amp;gt;)弹出groupname捕获内容，如果groupname不存在则匹配失败（出错）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;(?&amp;lsquo;groupName&amp;rsquo;\w+)\b\s+\k&amp;rsquo;groupname&amp;rsquo;\b&amp;rdquo;  其中groupname指定情况下，需要使用&amp;quot;\k&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;                   &lt;span style=&#34;color:#75715e&#34;&gt;#最外层的左括号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#f92672&#34;&gt;^&amp;lt;&amp;gt;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#它后面非括号的内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (?&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;#左括号，压入&amp;#34;Open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          [&lt;span style=&#34;color:#f92672&#34;&gt;^&amp;lt;&amp;gt;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;#左括号后面的内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (?&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-Open&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#右括号，弹出一个&amp;#34;Open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          [&lt;span style=&#34;color:#f92672&#34;&gt;^&amp;lt;&amp;gt;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;#右括号后面的内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (?(Open)(?&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;))     &lt;span style=&#34;color:#75715e&#34;&gt;#最外层的右括号前检查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;#若还有未弹出的&amp;#34;Open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;#则匹配失败&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;#最外层的右括号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的&amp;lt;div&amp;gt;标签：&amp;lt;div[^&amp;gt;]*&amp;gt;[^&amp;lt;&amp;gt;]*(((?&amp;#39;Open&amp;#39;&amp;lt;div[^&amp;gt;]*&amp;gt;)[^&amp;lt;&amp;gt;]*)+((?&amp;#39;-Open&amp;#39;&amp;lt;/div&amp;gt;)[^&amp;lt;&amp;gt;]*)+)*(?(Open)(?!))&amp;lt;/div&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#===============================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         FILE: testRegex.pl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        USAGE: ./testRegex.pl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  DESCRIPTION:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#      OPTIONS: ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# REQUIREMENTS: ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         BUGS: ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        NOTES: ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       AUTHOR: Ye Zhaoliang (Ye Zhaoliang), zl_ye@qny.chng.com.cn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ORGANIZATION:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#      VERSION: 1.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#      CREATED: 2022-02-19 0:36:50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     REVISION: ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#===============================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;qw(experimental::vlb)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## PerlSupport is very good vim pluasn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## \ra 可以设置命令行参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## \rs 执行语法检查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## \ry 格式化程序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## \rr执行程序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## \rt save buffer to file with timestamp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## \rk显示配置信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#my  $arg=shift @_;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;command line argument is $arg \n&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $he &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc df jje&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello regex\n&amp;#34;&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $he &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/\b\d{2}\b/xm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello regex \\w works\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $he &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/\b\w{2}\b/xm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;head&amp;gt;nothing&amp;lt;/head&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#print &amp;#34;label is &amp;#34; if $html=~m/(?&amp;lt;=&amp;lt;(\w{0,20})&amp;gt;).{0,20}(?=&amp;lt;\/\1)/;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;label is $1    content is $2\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                (?&amp;lt;=&amp;lt;(\w{0,20})&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                (.{0,20})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                (?=&amp;lt;\/\1&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                /x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labe2 is $1  content is $2\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                (?&amp;lt;=&amp;lt;(?&amp;lt;groupname&amp;gt;\w{0,20})&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                (.{0,20})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                (?=&amp;lt;\/\k&amp;lt;groupname&amp;gt;&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                                /x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Score = 161 bits (409), Expect = 1e-43, Method: Compositional matrix adjust.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Identities = 141/471 (29%), Positives = 227/471 (48%), Gaps =41/471 (8%)&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $line1 &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;m/Score\s*=\s*([\d\.\,]+)\s*(?:bits|Bits)\s*\(\d+\)\,\s*Expect\s*=\s*(\d+e-\d+)\.*/xm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$1 \t $2\n&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $line2 &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;m/Identities\s*=\s*([\d\,\.]+)(?#141)\/([\d\,\.]+)\s*\((\S+)\%\).*/xm&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$1 \t $2 \t $3\n&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>python常用函数学习总结</title>
      <link>https://jueqingsizhe66.github.io/post/python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 16 Jan 2022 23:02:00 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/post/python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h2 id=&#34;1-dot-如何使用递归&#34;&gt;1.如何使用递归？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;怎么递归？ natural recursion&lt;/li&gt;
&lt;li&gt;什么时候结束? 终止条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;a href=&#34;https://jueqingsizhe66.github.io/blog/2015/05/18/the-little-scheme-and-part-of-tss/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the little scheme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;已有的结论是函数名字可以调用
新的结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数名字可以赋值，&lt;/li&gt;
&lt;li&gt;函数可以嵌套,于是出现了高阶函数！&lt;/li&gt;
&lt;li&gt;也就是函数名字作为函数参数，可以作为返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; init;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;letlei&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fun();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;letlei()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibo(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;fibo(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(fibo(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;2-dot-python-filter的使用&#34;&gt;2. python filter的使用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;结论：filter可以过滤一个容器的元素，但不会改变元素内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;迭代器批次把内容从容器放出来(使用一个，则倒出一个到内存)，列表全部把内容从容器倒出来（都放入内存中)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun2filter&lt;/span&gt;(str):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( str &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(fun2filter, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; filter Object is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ret&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; force change to list Object is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;list(ret)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;3-dot-python-map的使用&#34;&gt;3. python map的使用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;结论：map可以处理一个容器的数据,会改变元素内容&lt;/strong&gt;
很关键，fitler只会过滤数据，而不会修改元素，map则可以逐个修改数据!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun2map&lt;/span&gt;(str):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;added&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(fun2map,[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ret1 = filter(fun2map,[&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;]) 不会起作用的！！！！他只会过滤，不会修改！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;map object is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ret1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2022-01-16 周日 22:38&amp;gt;&lt;/span&gt;&lt;/span&gt;测试通过&lt;/p&gt;
&lt;h2 id=&#34;4-dot-python-reduce使用&#34;&gt;4. python reduce使用&lt;/h2&gt;
&lt;p&gt;结论： reduce只返回序列（或者列表）的求和运算？ 把一个序列变为一个值，一个结论！
reduce只会返回最终解！阶乘也很好用！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;reduce本质就是斐波那契数列&lt;/strong&gt;
计算阶乘也很方便&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reduce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun2reduce&lt;/span&gt;(x,y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;funM2reduce&lt;/span&gt;(x,y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reduce(fun2reduce,[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reduce(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x,y: x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reduce(funM2reduce,[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reduce(funM2reduce,range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reduce function f is  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sum1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   pk  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sum2&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; pk &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sum3&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;阶乘：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(reduce((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x,y:x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y),range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;5-dot-什么是闭包&#34;&gt;5. 什么是闭包?&lt;/h2&gt;
&lt;p&gt;结论： inner是一个闭包,符合两个条件，1. inner是一个内部函数，2. inner调用外部环境的一个变量
&lt;strong&gt;即 闭包=内部函数+内部函数定义时的环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outer&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt;(): &lt;span style=&#34;color:#75715e&#34;&gt;## 1. 内部函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(x) &lt;span style=&#34;color:#75715e&#34;&gt;## 2. 调用内部函数外部环境变量x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; inner
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer()()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fout2inner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outer()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;测试闭包的功能 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;fout2inner()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;结论：基于闭包思想 及装饰器思想解决代码重复问题&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-dot-python抽样&#34;&gt;6. python抽样&lt;/h2&gt;
&lt;p&gt;结论：通过choice,sample,randrange,randint函数实现抽样功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;random.random() = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;随机生成1个值random.randint(1,8) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;随机生成1个值random.randrange(1,8) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;随机选取序列1个值 choice(序列)=sampe(序列,1)：random.choice(&amp;#39;hello&amp;#39;) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;随机选取序列1个值：random.choice([&amp;#39;123&amp;#39;,4,[12,3,4]]) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]])&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;随机选取序列多个值,sampe(序列，个数)：random.sample([&amp;#39;123&amp;#39;,4,[12,3,4]],2,&amp;#39;34&amp;#39;) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sample([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]],&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v_code&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;## choice形成序列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;## choice很有用的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       add&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice([random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),chr(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)),chr(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;))])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;## 转换为string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       code &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; str(add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(code)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# def v_codes(sampleNum):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# bug因为random出来的是一个结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# print(random.sample([random.randrange(10),chr(random.randrange(65,90)),chr(random.randrange(97,122))],sampleNum))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v_code()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;7-dot-什么是生成器-什么是迭代器&#34;&gt;7. 什么是生成器？ 什么是迭代器？&lt;/h2&gt;
&lt;p&gt;结论：生成器(列表 list, tuple, string, dict)都是迭代器(满足两个条件：1. 有iter方法，2. 有next方法)，迭代器不一定是生成器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列表生成器 方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 迭代器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;  x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(next(b))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(next(b))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(next(b))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;8-dot-yield的作用&#34;&gt;8. yield的作用?&lt;/h2&gt;
&lt;p&gt;结论： 只要有yield的都是迭代器函数对象 foo()(不加载到内存）,如果没有就是普通函数加载到内存了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok2&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foo()  &lt;span style=&#34;color:#75715e&#34;&gt;## foo() 带括号是生成器对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 调用生成器函数对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(next(g))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 可以控制执行次数！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(next(g))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结论：迭代写法和同时写法有所不同, 要注意一句话写完和两句话写完是不一样的，以为before的值已经发生了修改！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 0 1 1 2 3 5 8 13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 同时和并行什么区别？ 同时就是同一条语句(有点并行线程的感觉，并发执行）, 保证before不更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 不同时就是分成两部执行,分成先后，有迭代顺序, 先后写before会更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(max):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n,before,after&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;max:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;n&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, before=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;before&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; after=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;after&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# before=after&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(before) &lt;span style=&#34;color:#75715e&#34;&gt;## 变成生成器对象函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# after=before+after  ## 实际上after ={before}+after before不能更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        before,after&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;after,before&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;after
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fib(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;max&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;after&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fib(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结论：改造为生成器函数对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(max):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n,before,after&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;max:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;n&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, before=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;before&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; after=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;after&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# before=after&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# after=before+after  ## 实际上after ={before}+after before不能更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(after) &lt;span style=&#34;color:#75715e&#34;&gt;## 变成生成器对象函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        before,after&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;after,before&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;after
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fib(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;max&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;after&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fib(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(g)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;结论： yield可以通过send方法进行函数变量赋值控制，&lt;/strong&gt;
第一次必须先进性赋值next(b) 或者通过b.send(None), b.send(None)等效于next(b)&lt;/p&gt;
&lt;p&gt;一次send等效于一次next,即执行一次yield&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ok1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      print(count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      count2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;count
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ok3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;count2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;far()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#df.send(None) ## 第一次必须是df.send(None) 或者先执行一次next(df)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2----&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# next(df)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;9-dot-如何使用os模块&#34;&gt;9.如何使用OS模块&lt;/h2&gt;
&lt;p&gt;结论： 文件目录相关操作可以参考OS模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathsep)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep) &lt;span style=&#34;color:#75715e&#34;&gt;## 路径分割附&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c:/testRandom.py&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c:/testRandom.py&amp;#39;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;10-dot-如何使用hashlib&#34;&gt;10. 如何使用hashlib&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;结论: 通过hashlib创建解密和加密&lt;/em&gt;
1、什么叫hash:hash是一种算法（不同的hash算法只是复杂度不一样）（3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法），该算法接受传入的内容，经过运算得到一串hash值
2、hash值的特点是(hash值/产品有三大特性：)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  md52&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(md52)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  md52&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hell word&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  md52&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hell word&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;## python3只有unicode和 ,默认不是utf-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  md52&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  md52&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;11-dot-如何扩平台编码&#34;&gt;11. 如何扩平台编码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;结论： 扩平台运行可以参考sys模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; sys.argv= &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sys.path = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sys.platform = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;platform&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sys.maxsize = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxsize&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sys.stdout.write(&amp;#39;Please:&amp;#39;) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#正常退出，不执行下面代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# print (sys.exit(0))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# if sys.platform==&amp;#39;win32&amp;#39;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     os.system(&amp;#39;dir&amp;#39;) ## 执行系统命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# else:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     os.system(&amp;#39;ls&amp;#39;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;12-dot-如何使用re模块&#34;&gt;12. 如何使用RE模块&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;结论:通过re模块进行正则匹配&lt;/em&gt;
&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/re.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.python.org/zh-cn/3/library/re.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要明确常用的正则元素、字母、数值、元数据( * + ? \d{3,} [abA-Z] ||| . \d \s \S \w \W )等！
要注意正则零宽断言和捕获方面的使用&lt;/p&gt;
&lt;p&gt;如果在python中使用正则，想要直接使用正则语法则注意在模式表达式前面加小写r，如果不加小写r，表示先试用python解析字符串，然后再把解析后的内容传给正则表达式进行解析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## 返回所有匹配对象,并放在一个列表中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;df&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## \元字符在python中有特殊用途&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;df&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## search 返回第一个匹配对象，并且可以通过group进行调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#ret=re.search(r&amp;#39;(?P&amp;lt;id&amp;gt;\d{3})/(?P&amp;lt;name&amp;gt;\w{3})&amp;#39;,&amp;#39;weekdydtt123/ooo&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(?P&amp;lt;id&amp;gt;\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)/(?P&amp;lt;name&amp;gt;\w&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weekdydtt123/ooo&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## match 返回第一个匹配对象，并且可以通过group进行调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## 但是从第一个字符开始找, 如果第一个字符就不匹配就返回None, 不继续匹配. 用于判断字符串开头或整个字符串是否匹配,速度快。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## match 自带^光环，所以速度很快&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# ret=re.match(r&amp;#39;(?P&amp;lt;id&amp;gt;\d{2})/(?P&amp;lt;name&amp;gt;\w{3})&amp;#39;,&amp;#39;weekdydtt123/ooo&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# print(ret.group(&amp;#39;id&amp;#39;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# print(ret.group(&amp;#39;name&amp;#39;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## re.compile 编译生成Pattern对象 可重复使用Pattern，pattern对象可调用findall, search and match&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;## 提出一般模式, 基于该模式可运用到不同的场景下！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ret1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcd abc gd&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ret2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;acd abc gd&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ret3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abc db ab&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ret4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abc db ab&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(ret4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;13-dot-如果有配置文件&#34;&gt;13. 如果有配置文件？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;结论：通过configparser模块生成和读取配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写入文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt;  configparser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;configparser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ConfigParser()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEFAULT&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ServerAliveInterval&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;45&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Compression&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CompressionLevel&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bitbucket.org&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bitbucket.org&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hg&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# config[&amp;#39;bitbucket.org&amp;#39;]={&amp;#39;user&amp;#39;:&amp;#39;hg&amp;#39;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;topsecret.server.com&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;topsecret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;topsecret.server.com&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;topsecret[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Host Port&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;50222&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ForwardX11&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.ini&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; configfile:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(configfile)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt;  configparser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;configparser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ConfigParser()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.ini&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;defaults())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sections())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bitbucket.org&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bitbucket.org&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Compression&amp;#39;&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>totalCommand结合quicklook</title>
      <link>https://jueqingsizhe66.github.io/post/totalcommand%E7%BB%93%E5%90%88quicklook/</link>
      <pubDate>Sun, 09 Jan 2022 22:26:00 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/post/totalcommand%E7%BB%93%E5%90%88quicklook/</guid>
      <description>&lt;p&gt;最近使用totalCommand的space键重定义功能，连接&lt;a href=&#34;https://github.com/QL-Win/QuickLook/wiki/Total-Commander&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; quicklook &lt;/a&gt;快速预览效果很好&lt;/p&gt;
&lt;p&gt;总结来说，windows上必不可少的几个工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;everything&lt;/li&gt;
&lt;li&gt;totalCommand&lt;/li&gt;
&lt;li&gt;Clover(类似tc,也方便管理文件夹）&amp;ndash;多标签可视化模式(tc用alt+mouse down)&lt;/li&gt;
&lt;li&gt;quicklook(打通tc 默认打通clover)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>阅读source Code of My World</title>
      <link>https://jueqingsizhe66.github.io/archives/yue-du-source-code-of-my-world/</link>
      <pubDate>Sun, 13 Aug 2017 22:15:41 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/yue-du-source-code-of-my-world/</guid>
      <description>&lt;p&gt;识贤者，戒游戏，做贡献，时而等闲,工程化行之。&lt;/p&gt;
&lt;h1 id=&#34;贤者&#34;&gt;贤者&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;可以读读有智慧的朋友 &lt;a href=&#34;http://home.wangjianshuo.com/cn/cat_aecccc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 王建硕 &lt;/a&gt;(比如很多话都是&lt;a href=&#34;http://home.wangjianshuo.com/cn/20090307_aeaecaeaeec.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 你以为，我以为更加接近现实,奥巴马也曾经以为 &lt;/a&gt;,当知道 了太多的你以为之后，你才能成长，成熟地感受痛苦。所以最应该送上&lt;a href=&#34;http://www.huzheng.org/geniusreligion/TheSourceCodeOfMyWorld.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 批斗场 &lt;/a&gt;的词语应该是”以为”) When thinking changes your mind, that’s philosophy. When God changes your mind, that’s faith. When facts change your mind, that’s science.
That’s the soul of &lt;a href=&#34;https://www.edge.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; edge.org &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;去&lt;a href=&#34;https://www.edge.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; edge.org &lt;/a&gt;看看thinking(比如 &lt;a href=&#34;https://www.edge.org/conversation/tania_lombrozo-learning-by-thinking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 解释的力量 &lt;/a&gt; ) 大项目(一个项目，具有独特性、渐进明细行、临时性，最终得到一个产品、成果、服务)和
小项目智慧 参加体检的时候，会有很多项目要进行，而先排队做花时间长的大项目的人会最先体检完，
因为等你把大项目做完，再去进行小项目的时候，你会发现小项目早空了，没人排队了，而
那些先排队做小项目的人现在正排着比你开始更长的队伍进行着大项目的体检，所以你轻松
检查完小项目就可以先走了。去游乐园玩也是这样， 上午先排队玩大项目会是最优的选择，
因为虽然一开始排大项目的人会很多，但你会发现到了下午，排大项目的人的队伍会变得更
长，而那些小项目已经基本没什么人排队了，这样你轻松就最先玩完了大多数想玩的项目。
人生的学习排队也会是有这样的最佳策略，年轻的时候先把那些要花四五年时间才能精通的
大项目做完（比如Linux操作系统，软件开发技术），再去学习着装打扮这些几个月就能学
会的小项目，你就会最先达到你的人生目标了。而那些开始没学大项目的人，青春过后，会
发现再就很难拿出四五年的时间去学习大项目了，而他/她们以前学的那些小项目，别人会
很快也学会，而且因为别人有了坚实的基础，会做得比他/她们更 好。这就是抓住重点先进
行突破的秘诀了。就像往罐子里装石头和沙子一样，先放大石子，再灌沙子会充实得很满，
而先装沙子再放石头就会有很多空隙不能填满了，而且有的石头也就再也放不进去了。可见，
人生的学习排队策略也应该这样安排，这样才是有智慧的体现&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Top-down &lt;/a&gt;思想(书读厚)和Bottom-up(书读薄)深入思想,and recursive the procedure in your life(life is one book)，去理解&lt;a href=&#34;http://blog.csdn.net/pongba/article/details/2412144&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 思考的背后 &lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;跨情境运用：思维法则也是知识记忆，是问题解决策略。既然是记忆，就受到提取线索的制约，
这就是为什么当波利亚告诉你要“注意未知数”之后你还是不能真正在所有需要你“注意未知数”
的地方都能提醒自己“注意未知数”。很多时候未知数是很隐蔽的，未知数并不会总是头顶一个
大帽子上面写着“我是未知数”。所以很多时候缺乏对这个策略的“提醒”线索，这也是为什么你
学会了在解决数学问题的时候“注意未知数”却不一定能在解决现实生活中的问题中时刻都能
“注意你的未知数”（《你的灯亮着吗？》整本书的价值便在于此）

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;游戏&#34;&gt;游戏&lt;/h1&gt;
&lt;p&gt;游戏的乐趣，而致瘾，则是对快乐的超前消费、透支消费，不得不说游戏的虚拟社会由对抗、暴力和欲望主宰，玩家们因此急功近利、恩怨分明、派系林立、残酷冷漠，模拟人物的性格弱点。所谓爽，很High，只不过是提前消费快乐罢了，从第二天的疲劳你就会了解得到。就像办了信用卡，可以提前消费，但并不是增加了你的财富。如果随意刷卡，或者太过度玩乐，就 会导致麻烦(由浪费而产生缺乏)，而得不偿失&lt;/p&gt;
&lt;p&gt;#贡献&lt;/p&gt;
&lt;p&gt;万事即使无回报也得多做点贡献。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
比如历史上有一个伟大的发明家（或许是最伟大的发明家之一），却鲜为人知。他就是
Nikola Tesla。他发现或者开发了一系列伟大创新的基础技术，从无线电信号传输，到交流
电，从特斯拉变压器到X光，荧光灯直到现代电网。他和爱迪生一起工作，却相比之下，却
回报寥寥。不但老年穷困潦倒，也很少有人听说过他。1943年，这位为人类迎来电力时代
的天才去世的时候，身边只有几只他捡来的病鸽子
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;等闲&#34;&gt;等闲&lt;/h1&gt;
&lt;p&gt;等闲，让自己有一些时间来让内心寂静, 等闲也是你的&lt;a href=&#34;http://mindhacks.cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 暗时间 &lt;/a&gt;,带着你关心的问题进行思考。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
寂静指的不是外部环境，而是人的内心。渴望智慧、力量或者任何取得不朽成就的人，都会
在内在世界中找到这些。内在世界会不断为你揭示各样的奥秘。那些粗心 大意的人可能会
认为，“寂静”非常简单而且容易实现,所以要记住，只有在绝对寂静的状态下，你才能够触摸
到神本身，才能领悟到永恒不变的法则并且受益。
怎样获取智慧？ 集中精神；它将为你开启智慧之门，智慧来源于内在
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;工程&#34;&gt;工程&lt;/h1&gt;
&lt;p&gt;一个工程一个项目的去干，书要干，也要写！多书则书呆，少书则没文化，书在古代也有写的意思。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu17.04 Install FAST8.16</title>
      <link>https://jueqingsizhe66.github.io/archives/ubuntu17-dot-04-install-fast8-dot-16/</link>
      <pubDate>Fri, 19 May 2017 19:31:22 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/ubuntu17-dot-04-install-fast8-dot-16/</guid>
      <description>&lt;p&gt;Something Noted in the process of installation FAST8.16 in the 32bit ubuntu17.04 system.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download  &lt;a href=&#34;https://nwtc.nrel.gov/FAST8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Fast8.16 &lt;/a&gt; and decompress&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
mkdir FAST-816
cd FAST-816
mv FAST*.tar.gz FAST-816
tar -xvf FAST*.tar.gz

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Download  &lt;a href=&#34;https://nwtc.nrel.gov/system/files/MAP_v1.20.10.tar.gz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Map &lt;/a&gt; for generating map.so and decompress&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;FAST_DIR 告诉MAP FAST项目存在哪里&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
cd FAST-816
mkdir LIBMAP
cd LIBMAP
mv ../../*.MAP*.tar.gz .
tar -xvf *MAP*.tar.gz

cd compiling
vim driver_makefile&amp;lt;&amp;lt;EOF

----- FAST_DIR     = ../Source
+++++ FAST_DIR     = /paper/FAST-816/

EOF

cd ../src/

vim makefile&amp;lt;&amp;lt;EOF

----- BITS = -m64
+++++ BITS = -m32  32bit系统

EOF

make#################something error here


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;make Libmap.so something error here&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;a.o mapinit.o maperror.o lineroutines.o numeric.o outputstream.o mapapi.o lmroutines.o jacobian.o residual.o  -lm -llapacke 
/usr/bin/ld: 找不到 -llapacke
/usr/bin/ld: 找不到 -llapacke
collect2: error: ld returned 1 exit status
makefile:81: recipe for target &#39;all&#39; failed
make: *** [all] Error 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; fixed it &lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
apt-get install lapacke-dev*

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;make again&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make ### OK generate libmap-1.2.so

mkdir /paper/FAST-816/bin
cp libmap-1.20.10.so /paper/FAST-816/bin


&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Now Install FAST&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;
cd /paper/FAST-816/compiling/
make 
make -f makefile_DISCON_DLL ## for Test18-26.fst case


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;gcc -fbacktrack FAST_Subs&lt;/code&gt; 可能再gcc-6会有点问题，部分f90文件得删除该选项 删掉-fbacktrace测试通过&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
 2 &amp;gt; make
gfortran -I Obj_lin32 -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -DNO_LibLoad -DUSE_DLL_INTERFACE -c ../Source/FAST_Subs.f90 -o Obj_lin32/FAST_Subs.o -J Obj_lin32 -B Obj_lin32
gfortran: internal compiler error: 已杀死 (program f951)
Please submit a full bug report,
with preprocessed source if appropriate.
See &amp;lt;file:///usr/share/doc/gcc-6/README.Bugs&amp;gt; for instructions.
makefile:416: recipe for target &#39;FAST_Subs.o&#39; failed
make: *** [FAST_Subs.o] Error 4
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Run Test1-18.fst&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can go to /paper/FAST-816/bin to check whether FAST_Glin32 and libmap.so have been generated or not&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /paper/FAST-816/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
❯ ./FAST_glin32 ../CertTest/Test02.fst

 **************************************************************************************************
 FAST (v8.16.00a-bjj, 27-Jul-2016)

 Copyright (C) 2016 National Renewable Energy Laboratory

 This program comes with ABSOLUTELY NO WARRANTY. See the &amp;quot;license.txt&amp;quot; file distributed with this
 software for details.
 **************************************************************************************************

  Running FAST (v8.16.00a-bjj, 27-Jul-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.09.00, 23-Jul-2016)

  Heading of the FAST input file:
    FAST Certification Test #02: AWT-27CR2 with many DOFs with startup and shutdown and steady wind

  Running ElastoDyn (v1.04.00a-bjj, 26-Jul-2016).

  Running AeroDyn (v15.03.00, 27-Jul-2016).

  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).

  Running BEM (v1.02.00, 29-Jun-2016).

  Running InflowWind (v3.03.00, 26-Jul-2016).
  Opening InflowWind input file:  ../CertTest/AWT27/Test02_InflowWind.dat

  Running ServoDyn (v1.06.00a-bjj, 26-Jul-2016).
  Timestep: 0 of 20 seconds.

 Timestep: 2 of 20 seconds. Estimated final completion at 16:05:13.                               
 Timestep: 4 of 20 seconds. Estimated final completion at 16:05:12.    


&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;Modify the ServoData for servo module
&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DISON_DLL running &lt;/a&gt; 因为FAST在运行Test18-26.fst的case时候会去读取5MW_BASELINE[只针对的是5MW]底下的ServoData的文件, 所以对应dll-filename得修改一下。&lt;/p&gt;
&lt;p&gt;make DISCON SO file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;❯ make -f makefile_DISCON_DLL
gfortran  -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -C -DIMPLICIT_DLLEXPORT -fPIC -c ../CertTest/5MW_Baseline/ServoData/Source/DISCON.f90 -o Obj_lin32/DISCON.obj -J Obj_lin32 -B Obj_lin32
gfortran -shared -O2 -m32 -fbacktrace -fPIC -I Obj_lin32 -o ../CertTest/5MW_Baseline/ServoData/DISCON_glin32.so \
 Obj_lin32/DISCON.obj
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Change DLL_FileName in the configure data file
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /paper/FAST-816/CertTest/5MW_Baseline
vim NRELOffshrBsline5MW_Onshore_ServoDyn.dat 

修改DLL_FileName为 ServoData/DISCON_glin32.so
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test RESULT:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
  Running BeamDyn (v1.01.04, 26-Jul-2016).

  Running AeroDyn (v15.03.00, 27-Jul-2016).

  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).

  Running BEM (v1.02.00, 29-Jun-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3

  Running InflowWind (v3.03.00, 26-Jul-2016).
  Opening InflowWind input file:  ../CertTest/5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat

    Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
    speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
    07-Jan-2014 at 12:50:45.

    Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).

  Running ServoDyn (v1.06.00a-bjj, 26-Jul-2016).

  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).
  Timestep: 0 of 20 seconds.

 FAST_Solution0:CalcOutputs_And_SolveForInputs:SolveOption2:SrvD_CalcOutput:Running with torque
 and pitch control of the NREL offshore 5MW baseline wind turbine from DISCON.dll as written by J.
 Jonkman of NREL/NWTC for use in the IEA Annex XXIII OC3 studies.


 Timestep: 1 of 20 seconds. Estimated final completion at 16:20:36.                               

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, All things have been done.&lt;/p&gt;
&lt;p&gt;Happy FAST programming.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Physics and Maths</title>
      <link>https://jueqingsizhe66.github.io/archives/physics-and-maths/</link>
      <pubDate>Thu, 29 Sep 2016 03:27:34 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/physics-and-maths/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://baike.baidu.com/link?url=EAjClF31Nh45czy0-8dYscX-hkcI8qOxCzsmWWiXN6yDdhQh18-Avf_UAiwFBNk9F3vKh0dKTSBzitXzqYgmvn6w5e9hwmZ5_yvYP7g9ARnJbDG8vH9jEkSDwL7y8rIK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;濮祖荫&lt;/a&gt;(歌手朴树的父亲):&amp;ldquo;数学背后有物理，物理需要通过数学来表达&amp;rdquo;。数学方程(表达式)需要你通过物理直觉去思考，去书写。&lt;/p&gt;
&lt;p&gt;濮说做研究的过程都是提出一个模型，找到问题的本质，针对围绕本质的几个变量进行研究，来近似替代现实的复杂模型（这个简化的思想对我有帮助）&lt;/p&gt;
&lt;p&gt;Only some links for physics and maths,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://product.dangdang.com/22704132.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数学物理方程 张鲁明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhidao.baidu.com/share/ffccde3e883cc1bfe96567f02492e004.html%e3%80%80&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数学物理方程 复旦&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/uGXsmIpCxv5Ow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数学物理 微盘丛书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wenku.baidu.com/link?url=zGOuK59qswS4oDW1W9aqndBgisaitwkHxeix_5_O7Elp3rBH3pidQd1V8KEubrCXeuE8p0Aw_P-FbfOK2stL3uraiUOoZiUCIcBHKUpLeHq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;空间物理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://v.youku.com/v_show/id_XNzYwMDgyNjg=.html?spm=a2h0j.8191423.module_basic_relation.5~5!2~5~5!8~5!2~1~3~A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;梁灿彬老师的微分流形和相对论&lt;/a&gt;, &amp;ldquo;以不变应万变，找出不变量(心领神会学科技术的不变量)，从而应问题领域中变化的东西,抓住不变的东西，反复琢磨(为什么还要反复琢磨)&amp;rdquo;. &amp;ldquo;相似矩阵的trace迹不变(矩阵对角元不变)&amp;rdquo;
也就是需要通过不变的东西把所有变化的独立体（关系）都连接起来，形成一条链。&lt;/p&gt;
&lt;p&gt;学任何东西，都得首先明确他的重点和意义（当然首先得基于你得有大局观，大的方向，大的框架 也就是不变的东西）。&lt;/p&gt;
&lt;p&gt;从数学物理过程去解释现实中的现象，从大的误差逐步缩小他，直到能够清楚的解释现实中的现象，从理论上去解释实际的问题，也就是梁灿彬老师说的
天地连通(天:定义特别清楚地(并矢:张量积运算, ) 地:实际(现实)发生的现象,不清晰的，定义不明(并矢:两个矢量并排在一起,他是一个二阶张量,9个分量v1u1 v1u2 v1u3 v2u1 v2u2 v2u3 v3u1 v3u2 v3u3 列举出来)。 也就是说不清晰的版本肯定能够存在清晰的版本)。&lt;/p&gt;
&lt;p&gt;更要紧的是，还得考虑&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/09/28/jump-out-of-ontology/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;物理之内和物理之外&lt;/a&gt;的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jump Out of Ontology</title>
      <link>https://jueqingsizhe66.github.io/archives/jump-out-of-ontology/</link>
      <pubDate>Wed, 28 Sep 2016 23:21:06 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/jump-out-of-ontology/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Tool&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;工具&lt;/a&gt;(进一步可以参考&lt;a href=&#34;https://zhidao.baidu.com/share/4ee9bd642cdd8cc40d654d3e6096b35d.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The design of everyday things&lt;/a&gt;)之内，讲究的是如何设计这个东西(制作者角度)，可能更多讲的是设计的东西，而不是完成的功能，更多用于写技术路线
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/inner.png&#34; alt=&#34;inner1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;工具之外，讲究的是从工具的外头看这个东西（眼睛放在工具外面,使用者角度），从工具外看黑夹子的工具，看他在不同的工况下能够实现什么功能？ 所以更多用于写软件说明书。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/outer.png&#34; alt=&#34;outer&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Language&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;语言&lt;/a&gt;之内和语言之外（站在一个本不存在逻辑体之外）&lt;/p&gt;
&lt;p&gt;语言之内 说的是语言如何创造出来，如何写一个解释器，怎么设计这门语言，添加那些语言特性&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/27/the-fourth-interpreter-about-the-traceproc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(参考EOPL语言特性)&lt;/a&gt;，语言的语法怎么样等等&lt;/p&gt;
&lt;p&gt;语言之外是指运用这门语言 我能够解决某个工况问题，某个实际问题，某个数值问题，&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Problem_solving&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题&lt;/a&gt;之内是指解决这个问题，问题之外是指解决了这个问题之后还可以解决其他什么问题。&lt;/p&gt;
&lt;p&gt;内是指内部链接，外是指外部链接&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;领域&lt;/a&gt;之内和领域之外， 领域之内是指从专业的角度进行介绍，领域之外是平民（不懂专业知识）的角度进行解释。&lt;/p&gt;
&lt;p&gt;工具、语言、问题、领域等都可以归结为本体&lt;a href=&#34;https://en.wikipedia.org/wiki/Ontology&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ontology&lt;/a&gt;论的&lt;a href=&#34;https://en.wikipedia.org/wiki/Knowledge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知识&lt;/a&gt;(进一步参考&lt;a href=&#34;https://en.wikipedia.org/wiki/Knowledge_Graph&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;knowledge_graph&lt;/a&gt;以及 &lt;a href=&#34;https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;knowledge-presentation and reasoning&lt;/a&gt;)。
&lt;a href=&#34;https://en.wikipedia.org/wiki/Ontology_%28information_science%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ontology (information science)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/ontology.jpg&#34; alt=&#34;ontology&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中，亚里斯多德指出本体论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what it is (its &amp;lsquo;whatness&amp;rsquo;, quidditas or essence)&lt;/li&gt;
&lt;li&gt;how it is (its &amp;lsquo;howness&amp;rsquo; or qualitativeness)&lt;/li&gt;
&lt;li&gt;how much it is (quantitativeness)&lt;/li&gt;
&lt;li&gt;where it is, its relatedness to other beings&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/27/the-fourth-interpreter-about-the-traceproc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3&lt;/a&gt; &amp;ndash;组合，环境下的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;whatness指的是individuals from class(这边是指类 不是指&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/09/28/machine-learning-some-search-record/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;贝叶斯概率&lt;/a&gt;中的class-predictor键值对，其中class指目标值，而predictor是指属性值，或者叫做表征值,比如表征天气情况：晴天 下雨天 多云)
也就是说whatness解决的是存在的&lt;a href=&#34;https://en.wikipedia.org/wiki/Reason&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原因&lt;/a&gt;(whyness).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经常我们会这样描述&lt;code&gt;What is A&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;明确主谓宾(忌讳缺乏主谓宾)

A是一种***技术，解决了***问题，帮助我们实现了***，帮助我们简化了
****。第一***，第二****，第三***；
首先****，其次***,最后***,

总的来说，A****

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是我们需要&lt;a href=&#34;https://en.wikipedia.org/wiki/Statement_%28logic%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;说明&lt;/a&gt;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Declarative_programming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;声明式语言&lt;/a&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保主谓宾&lt;/li&gt;
&lt;li&gt;说明它的功能，解决了什么问题(现实都是问题驱动 problem-driven),好处是什么？&lt;/li&gt;
&lt;li&gt;可能的话在细化分析，第一，第二，第三，首先，其次等.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任何一项技术的学习其实都有一个思路，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这门技术是什么？&lt;/li&gt;
&lt;li&gt;怎么使用这门技术？&lt;/li&gt;
&lt;li&gt;使用过程中需要注意些什么？&lt;/li&gt;
&lt;li&gt;这门技术和其他的优缺点？&lt;/li&gt;
&lt;li&gt;这门技术的主要场所是在哪里？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最好能够熟练地自己提问自己上面的5个问题。并反复运用说明方式组织好自己的逻辑语言。这大概是whatness该注意的大部分内容。&lt;/p&gt;
&lt;p&gt;howness是从定性的角度分析该存在体，而howmuchness则是从定量的角度对存在体进行分析。&lt;/p&gt;
&lt;p&gt;由于存在体有很多个，于是需要确定他们的存在关系，于是选用了whereness(也就是空间维度，每加一层维度都可以确定一个y=ax+b的关系，可以参考&lt;a href=&#34;https://en.wikipedia.org/wiki/Support_vector_machine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SVM&lt;/a&gt;,
所有的算法问题都最终可以归结为&lt;a href=&#34;https://en.wikipedia.org/wiki/Reduction_%28mathematics%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;降阶&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/Mathematical_optimization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;优化&lt;/a&gt;（优化只是一种思想）问题，而&lt;a href=&#34;https://en.wikipedia.org/wiki/Least_squares&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小二乘法&lt;/a&gt;却是贯穿始终，最小二乘法进一步其实original from y=ax+b)&lt;/p&gt;
&lt;p&gt;关于最小二乘法的总结如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/leastSquare1.jpg&#34; alt=&#34;leastsquare1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/leastSquare2.jpg&#34; alt=&#34;leastsquare2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/leastSquare3.jpg&#34; alt=&#34;leastsquare3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/ontology/leastSquare4.jpg&#34; alt=&#34;leastsquare4&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最小二乘法另外一些描述&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/emanlee/archive/2011/08/03/2125712.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小二乘法 least square method &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mathworld.wolfram.com/LeastSquaresFitting.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;least_squares fitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jean-pierre.moreau.pagesperso-orange.fr/f_lstsqr.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小二乘法fortran实现 from 熊叉叉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/monoSLAM/p/5252917.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小二乘法介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;紧接着whereness，我觉得还需要引入一个时间维度也就是whenness，我觉得他很重要，因为机器学习的很多算法都是需要通过时间不断的训练，需要明确whenness,
现实当中约会、上课、上班、吃饭、睡觉等都有一个whenness，我们都生活在时间的单项维度当中，放眼在&lt;a href=&#34;https://en.wikipedia.org/wiki/History&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;历史&lt;/a&gt;的时间尺度来说，我们一个人真的是微不足道，而放眼到我们自己的局部时间尺度来说，我们却需要细细的
品味时光的间隙，体味其中的变化，记录可能需要表征的一类变化量，进一步可能会影响到其他的量的变化（所以任何东西是不是都有着&lt;a href=&#34;https://en.wikipedia.org/wiki/Causality&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;因果论&lt;/a&gt;,也就是说在历史的长河中，我们是渺小的一粒沙子，跌跌撞撞的前行。&lt;/p&gt;
&lt;p&gt;某某美国总统&lt;a href=&#34;https://en.wikipedia.org/wiki/Franklin_D._Roosevelt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;罗斯福&lt;/a&gt;曾说:&amp;ldquo;Joint and separate ,which is the problem&amp;rdquo;. 本体论就是用于解决个体之间的分类和具体关系。&lt;/p&gt;
&lt;p&gt;所以最终，本体之外和本体之内？&lt;/p&gt;
&lt;p&gt;那是你对自己的定位(在历史长河微不足道，在局部时间，精打细算。秉着科学的精神，踏实生活；挣点小钱，养家糊口; 钱不多，只求闲的时候可以写写岁月中的一些趣事)和取舍(保留需要的东西，舍弃糟粕), 以及你对&lt;a href=&#34;https://en.wikipedia.org/wiki/World&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;世界&lt;/a&gt;或者&lt;a href=&#34;https://en.wikipedia.org/wiki/Cosmos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宇宙&lt;/a&gt;的定位(要不然，不想了，想点当下)。&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-gnuplot&#34;&gt;//fdp -Tpdf ontology.dot -o ontology.pdf 

digraph G{
    ontology[label=&amp;quot;Ontology&amp;quot;, shape=box,style=rounded] ;   

    node[style=&amp;quot;rounded,filled&amp;quot;,fillcolor=chartreuse];

    whatness[label=&amp;quot;whatness&amp;quot;];
    howness[label=&amp;quot;howness&amp;quot;];
    howmuchness[label=&amp;quot;howmuchness&amp;quot;];
    whereness[label=&amp;quot;whereness&amp;quot;];
    whenness[label=&amp;quot;whenness&amp;quot;];

    ontology{ whatness howness howmuchness whereness whenness};
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/09/28/graphviz-notebook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;graphviz reference&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prolog小游戏</title>
      <link>https://jueqingsizhe66.github.io/archives/prologxiao-you-xi/</link>
      <pubDate>Tue, 19 Jul 2016 19:35:37 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/prologxiao-you-xi/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/prolog/games.png&#34; alt=&#34;games&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;prolog 作为一门logic programming language,逻辑推理是它的强项。游戏也是一个逻辑推理的过程，prolog照样可以，通过该游戏的写作可以让你熟悉&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事实和规则。&lt;/li&gt;
&lt;li&gt;built-in predicates.&lt;/li&gt;
&lt;li&gt;IO&lt;/li&gt;
&lt;li&gt;cut-fail操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;游戏源代码如下，进一步参考&lt;a href=&#34;http://tieba.baidu.com/p/128101598&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prolog教程&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;:-dynamic here/1.

room(kitchen).
room(office).
room(hall). 
room(&#39;dining room&#39;).
room(cellar). 
door(office, hall).
door(kitchen, office).
door(hall, &#39;dining room&#39;).
door(kitchen, cellar).
door(&#39;dining room&#39;, kitchen).

location(desk, office).
location(apple, kitchen). 
location(flashlight, desk). 
location(&#39;washing machine&#39;, cellar).
location(nani, &#39;washing machine&#39;).
location(broccoli, kitchen).
location(crackers, kitchen).
location(knife, kitchen).
location(computer, office).

location(envelope, desk). 
location(stamp, envelope).
location(key, envelope). /* more interesting thing*/

edible(apple).
edible(crackers).
tastes_yucky(broccoli).

/* You are here now in the  game.*/
here(kitchen). 
where_food(X,Y) :- location(X,Y),edible(X).
where_food(X,Y) :- location(X,Y),tastes_yucky(X).

connect(X,Y):-door(X,Y).
connect(X,Y):-door(Y,X).


/*list all things in the correspondign room*/
list_things(Place) :- location(X,Place),tab(2),write(X),nl,fail.

list_things(_).  /* always correct  AnyPlace&#39;s value we don&#39;t care, 只能用_ underscore)*/


list_things_to_eat(Place) :- where_food(X,Place),tab(2),write(X),nl,fail.
list_things_to_eat(_) .


list_connections(Place) :- connect(X,Place),tab(2),write(X),nl,fail.
list_connections(_).


look:- here(Place), write(&#39;You are in the &#39;),write(Place),write(&#39; now!&#39;),nl,write(&#39;You can see:&#39;),nl,
list_things(Place),write(&#39;what the things you can eat  are below:&#39;),nl,list_things_to_eat(Place),
write(&#39;You can also go to &#39;),nl,list_connections(Place).






c_to_f(C,F):- F is C*9/5+32.
freezeing(F):-F=&amp;lt;32.

goto(Place) :- can_go(Place),move(Place),look.
can_go(Place) :- here(X),connect(X,Place).
can_go(_) :- write(&#39;You can&#39;&#39;t get there from here.&#39;),nl,fail.
move(Place):- retract(here(Y)),asserta(here(Place)).


take(X):- can_take(X),take_object(X).

can_take(Thing) :-here(Place),location(Thing,Place).
can_take(Thing) :- write(&#39;There is no &#39;),write(Thing),write(&#39; Here&#39;),nl,fail.

take_object(X):- retract(location(X,_)),asserta(hava(X)),write(&#39;taken&#39;),nl.


backtracking_assert(X):- asserta(X). 
backtracking_assert(X):- retract(X),fail. 


is_contained_in(T1,T2) :- location(T1,T2).
is_contained_in(T1,T2) :- location(X,T2),is_contained_in(T1,X).


object(candle,red   ,small,1).
object(apple ,red   ,small,1).
object(apple ,green ,small,1).
object(apple ,blue  ,big,50).
object(desk,brwon,dimension(6,3,3),90).
object(desk,color(brwon),size(dimension(6,3,3)),weight(90)).
object(desk,color(brwon),size(large),weight(90)).

location_s(object(candle,red    ,small,1),kitchen).
location_s(object(apple ,bluired ,small,1),kitchen).
location_s(object(apple ,green   ,small,1),kitchen).
location_s(object(apple ,blue  ,big,50),kitchen).


can_take_s(Thing) :- here(Room),location_s(object(Thing,_,small,_),Room).
can_take_s(Thing) :- here(Room),location_s(object(Thing,_,big,_),Room),write(&#39;The &#39;),write(Thing),
                write(&#39; is too big to carry!&#39;),nl,fail.
can_take_s(Thing) :- here(Room),not(location_s(object(Thing,_,_,_),Room)),write(&#39;There is no &#39;),
                write(Thing),write(&#39;Here.&#39;),nl,fail.

list_things_s(Place) :- location_s(object(Thing,Color,Size,Weight),Place),
    write(&#39;A &#39;),write(Size),tab(1),write(Color),tab(1),write(Thing),write(&#39;,weighing &#39;),
    write_weight(Weight),nl,fail.
list_things_s(_).

write_weight(1):-write(&#39;1 pound&#39;).
write_weight(W):-W&amp;gt;1,write(W),write(&#39; pounds&#39;).


loc_list([apple,broccoil,crackers],kitchen).
loc_list([desk,computer],office).
loc_list([flashlight,envelope],desk).
loc_list([stamp,key],envelope).
loc_list([&#39;Washing machine&#39;],cellar).
loc_list([nani],&#39;Washing machine&#39;).
loc_list([],hall). /* empty list*/

/*length1([zha,df,gs],H).*/
length1([],0).
length1([H|T],N) :- length1(T,M),N is M+1.

member(X,[X|List]).
member(X,[Element|List]) :- member(X,List).

prefix([],List).
prefix([X|Prefix],[X|List]):- prefix(Prefix,List).

suffix(Suffix,Suffix).
prefix(Suffix,[X|List]) :- suffix(Suffix,List).

vowel(X) :- member(X,[a,e,i,o,u]).
digit(D) :- member(D,[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;]).

/*reverse([ ],[ ]).
reverse([X|L],Rev) :- reverse(L,RL), append(RL,[X],Rev).*/

/*reverse([a,b,v],Rl).*/
reverse([ ],[ ]).
reverse(L,RL) :- reverse(L,[ ],RL).

reverse([ ],RL,RL).
reverse([X|L],PRL,RL) :- reverse(L,[X|PRL],RL).

/* isort([6,3,6,2,4,64,234],Sl) */

isort([ ],[ ]).
isort([X|UnSorted],AllSorted) :- isort(UnSorted,Sorted),
                                 insert(X,Sorted,AllSorted).

insert(X,[ ],[X]).
insert(X,[Y|L],[X,Y|L]) :- X =&amp;lt; Y.
insert(X,[Y|L],[Y|IL]) :-  X &amp;gt; Y, insert(X,L,IL).


facTail(0,1).
facTail(N,F) :- N &amp;gt; 0, facTail(N,1,F).

facTail(1,F,F).
facTail(N,PP,F) :- N &amp;gt; 1, NPp is N*PP, M is N-1, 
       facTail(M,NPp,F). 


fibTail(0,1).
fibTail(1,1).
fibTail(N,F) :- N &amp;gt; 1, fibTail(N,1,1,F).

fibTail(2,F1,F2,F) :- F is F1 + F2.
fibTail(N,F1,F2,F) :- N &amp;gt; 2, N1 is N - 1, NF1 is F1 + F2,
    fibTail(N1,NF1,F1,F).

/*
primes(PL) :- natlist(2,L2), sieve(L2,PL).

sieve([ ],[ ]).
sieve([P|L],[P|IDL]) :- sieveP(P,L,PL), sieve(PL,IDL).

sieveP(P,[ ],[ ]). 
sieveP(P,[N|L],[N|IDL]) :- N mod P  &amp;gt;  0, sieveP(P,L,IDL).
sieveP(P,[N|L],   IDL)  :- N mod P =:= 0, sieveP(P,L,IDL).
*/
/*
merge( List1, List2, List3 ) :-
 ( List1 = [], !, List3 = List2 );
 ( List2 = [], !, List3 = List1 );
 ( List1 = [X|L1], List2 = [Y|L2 ),
((X &amp;lt; Y, ! Z = X, merge( L1, List2, L3 ) );
( Z = Y, merge( List1, L2, L3 ) )),
  List3 = [Z|L3].
*/

merge([],List2,List2).
merge(List1,[],List1).

merge([X|List1],[Y|List2],[Z|List3]) :- X&amp;lt;Y,!,merge(List1,List2,List3).
merge(List1,[Y|List2],[Y|List3]) :- merge(List1,List,List3).
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>能真正教会你编程能力的是重写</title>
      <link>https://jueqingsizhe66.github.io/archives/neng-zhen-zheng-jiao-hui-ni-bian-cheng-neng-li-de-shi-zhong-xie/</link>
      <pubDate>Fri, 15 Apr 2016 21:50:10 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/neng-zhen-zheng-jiao-hui-ni-bian-cheng-neng-li-de-shi-zhong-xie/</guid>
      <description>&lt;p&gt;写了很多的matlab，感觉就那样！
编了那么多数值fortran代码，也不见自己编程有多厉害！
练了那么多的java项目，也感觉自己的技术还不见飞涨！
用c语言摸索了好几年，也没见得有太深的见地！&lt;/p&gt;
&lt;p&gt;真正决定你对程序的深入理解，需要你去认识&lt;a href=&#34;http://www.eopl3.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EOPL&lt;/a&gt;或者&lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%25_toc_start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SICP&lt;/a&gt;，亦或者更简单的&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/BTLS/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS&lt;/a&gt;.
他们也许不能教你们做大的项目，却真切教会你编写程序，思考程序。&lt;/p&gt;
&lt;p&gt;回想起之前写的java项目，反反复复就为了构造一门解释器语言，用来输送数据到数据库进行操作，不断
在中间进行验证，保证传递数据的有效性，为了搭上这样的一个平台，反复重构了代码，采用了新技术，
不断采用接口来抽象，割分具体的关系，防止数据的污染。&lt;/p&gt;
&lt;p&gt;而这样做是为何？ 我之前没理解，后来做了一阶段程序语言设计方面的工作，写了多个解释器之后，我才发现总是基于
存在（任意）某一变量某一程序供你使用，你的目的就是使用这个程序或者变量来实现他的能力！然而为了懒惰，
你创建了很多工具（其实，应该是重构，重写）来不断让你的写的东西少点，同时能够达到更多的功能。&lt;/p&gt;
&lt;p&gt;这过程不好经历，也不好做，很多人也很少做，有些人不需要做，更多人没想做。大部分的企业级程序也不会教你去实现这一过程，
也不会跟你从程序理论去介绍。架空程序理论，完成一系列的工程项目成为了很多人编程的主要目的。减少深入思考的时间，
追逐敏捷性编程方式，忽略了闲暇的编程时间，一味着实现需求，个人感觉不是一个好的归宿、目的、追求，但却是一种好的生活手段、工作方式、效率实现。&lt;/p&gt;
&lt;p&gt;编程在我眼里是慢工出细活，所谓的快速开发的提出，我就不好奇，因为我不合适它。真正能够进一步提供自己对于写过程序理解，应该要自己能够写出一个解释器解释你写的程序，这个可以体现在&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/BTLS/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS&lt;/a&gt;,  &lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/BTSS/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TSS&lt;/a&gt;  &lt;a href=&#34;http://www.eopl3.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EOPL&lt;/a&gt;,  &lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%25_toc_start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SICP&lt;/a&gt;等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;let解释器&lt;/li&gt;
&lt;li&gt;letrec解释器&lt;/li&gt;
&lt;li&gt;proc解释器&lt;/li&gt;
&lt;li&gt;state解释器&lt;/li&gt;
&lt;li&gt;cps解释器&lt;/li&gt;
&lt;li&gt;type解释器&lt;/li&gt;
&lt;li&gt;oo解释器&lt;/li&gt;
&lt;li&gt;typeoo解释器&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu15.10-32bit-安装FastV8.15</title>
      <link>https://jueqingsizhe66.github.io/archives/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/</link>
      <pubDate>Fri, 15 Apr 2016 14:46:04 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/</guid>
      <description>&lt;p&gt;Fast8.15在4-15又发布了新版本，增加了相关功能，具体参考&lt;a href=&#34;https://nwtc.nrel.gov/FAST8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FastV8.15&lt;/a&gt;.
下面就32bit ubuntu机子的安装过程做简要记录。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行fast源文件下的Compling 的makefile&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gfortran: error: ../bin/libmap-1.20.10.so: 没有那个文件或目录
makefile:733: recipe for target &#39;../bin/FAST_glin32&#39; failed
make:  [../bin/FAST_glin32] Error 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接运行make，缺少libmap,可以参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fast安装&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装LibMap&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把libMap-1的Compling底下的driver_makefile修改一下你的FAST本地路径。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#FAST_DIR     = ../Source
#FAST_DIR     = C:/Users/bjonkman/Documents/DATA/DesignCodes/simulators/FAST/SVNdirectory/branches/BJonkman/Source
FAST_DIR     = /paper/FAST_8.15/ 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接定位到MapDir/src的makefile，进行make一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/ld: cannot find -llapacke
/usr/bin/ld: cannot find -llapacke
collect2: error: ld returned 1 exit status
makefile:81: recipe for target &#39;all&#39; failed
make: *** [all] Error 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个原因是因为缺少lapacke开发者库,参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAST安装&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install lapacke-dev*

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就可以make，并把生成的libmap-1.2.so放入到fastdir的bin文件夹，没有则创建。
这样就完成了&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Test02.fst&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;./FAST_glin32 Test02.fst 

 **************************************************************************************************
 FAST (v8.15.00a-bjj, 12-Apr-2016)

 Copyright (C) 2016 National Renewable Energy Laboratory

 This program comes with ABSOLUTELY NO WARRANTY. See the &amp;quot;license.txt&amp;quot; file distributed with this
 software for details.
 **************************************************************************************************

  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)

  Heading of the FAST input file:
    FAST Certification Test #02: AWT-27CR2 with many DOFs with startup and shutdown and steady wind

  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).

  Running AeroDyn (v15.02.03, 12-Apr-2016).

  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).

  Running BEM (v1.01.00a, 12-Apr-2016).

  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./AWT27/Test02_InflowWind.dat

  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).
  Timestep: 0 of 20 seconds.

 Timestep: 2 of 20 seconds. Estimated final completion at 15:12:15.                               
 Timestep: 4 of 20 seconds. Estimated final completion at 15:12:14.                               
 Timestep: 6 of 20 seconds. Estimated final completion at 15:12:14.                               
 Timestep: 8 of 20 seconds. Estimated final completion at 15:12:14.                               
 Timestep: 10 of 20 seconds. Estimated final completion at 15:12:14.                              
 Timestep: 12 of 20 seconds. Estimated final completion at 15:12:14.                              
 Timestep: 14 of 20 seconds. Estimated final completion at 15:12:14.                              
 Timestep: 16 of 20 seconds. Estimated final completion at 15:12:14.                              
 Timestep: 18 of 20 seconds. Estimated final completion at 15:12:14.                              
 Timestep: 20 of 20 seconds. Estimated final completion at 15:12:14.                              
                                                                                                  
  Total Real Time:       9.788 seconds
  Total CPU Time:        9.708 seconds
  Simulation CPU Time:   9.636 seconds
  Simulated Time:        20 seconds
  Time Ratio (Sim/CPU):  2.0756

  FAST terminated normally.

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Test26.fst&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不通过的原因是没有编译DISCON_DLL.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➞ ./FAST_glin32 Test26.fst 

 **************************************************************************************************
 FAST (v8.15.00a-bjj, 12-Apr-2016)

 Copyright (C) 2016 National Renewable Energy Laboratory

 This program comes with ABSOLUTELY NO WARRANTY. See the &amp;quot;license.txt&amp;quot; file distributed with this
 software for details.
 **************************************************************************************************

  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)

  Heading of the FAST input file:
    FAST Certification Test #26: NREL 5.0 MW Baseline Wind Turbine (Onshore)

  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).

  Running BeamDyn (v1.01.03, 12-Apr-2016).

  Running BeamDyn (v1.01.03, 12-Apr-2016).

  Running BeamDyn (v1.01.03, 12-Apr-2016).

  Running AeroDyn (v15.02.03, 12-Apr-2016).

  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).

  Running BEM (v1.01.00a, 12-Apr-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3

  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat

    Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
    speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
    07-Jan-2014 at 12:50:45.

    Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).

  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).

  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).

 FAST_InitializeAll:SrvD_Init:BladedInterface_Init:The dynamic library
 ./5MW_Baseline/ServoData/DISCON_win32.dll could not be loaded. Check that the file exists in the
 specified location and that it is compiled for 32-bit applications.

 FAST encountered an error during module initialization.
  Simulation error level: FATAL ERROR

  Aborting FAST.


&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;解决Test26无法运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，定位到Fast的Compling目录，基本尚不修改，测试make（默认32bit）,通过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make -f makefile_DISCON_DLL 
gfortran  -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -C -DIMPLICIT_DLLEXPORT -fPIC -c ../CertTest/5MW_Baseline/ServoData/Source/DISCON.f90 -o Obj_lin32/DISCON.obj -J Obj_lin32 -B Obj_lin32
gfortran -shared -O2 -m32 -fbacktrace -fPIC -I Obj_lin32 -o ../CertTest/5MW_Baseline/ServoData/DISCON_glin32.so \
 Obj_lin32/DISCON.obj

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意一定得把 生成的DISCON_glin32.so路径写入到对应的NREL5MW Servodata的配置文件，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Test26.fst文件：

&amp;quot;5MW_Baseline/NRELOffshrBsline5MW_Onshore_ServoDyn.dat&amp;quot;    ServoFile       - Name of file containing control and electrical-drive input parameters (quoted string)

&amp;quot;unused&amp;quot;      HydroFile       - Name of file containing hydrodynamic input parameters (quoted string)

NRELOffshrBsline5MW_Onshore_ServoDyn.dat 更改对应的DLL_FileName 为 ServoData/DISCON_glin32.so

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意还是得按照FAST 非windows平台的编译顺序把register编译好,然后一次MAP++ 和FAST，以及DISCONDLL.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;─➞ ../bin/FAST_glin32 Test26.fst 

 **************************************************************************************************
 FAST (v8.15.00a-bjj, 12-Apr-2016)

 Copyright (C) 2016 National Renewable Energy Laboratory

 This program comes with ABSOLUTELY NO WARRANTY. See the &amp;quot;license.txt&amp;quot; file distributed with this
 software for details.
 **************************************************************************************************

  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)

  Heading of the FAST input file:
    FAST Certification Test #26: NREL 5.0 MW Baseline Wind Turbine (Onshore)

  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).

  Running BeamDyn (v1.01.03, 12-Apr-2016).

  Running BeamDyn (v1.01.03, 12-Apr-2016).

  Running BeamDyn (v1.01.03, 12-Apr-2016).

  Running AeroDyn (v15.02.03, 12-Apr-2016).

  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).

  Running BEM (v1.01.00a, 12-Apr-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3

  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat

    Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
    speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
    07-Jan-2014 at 12:50:45.

    Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).

  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).

  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).
  Timestep: 0 of 20 seconds.

 FAST_Solution0:CalcOutputs_And_SolveForInputs:SolveOption2:SrvD_CalcOutput:Running with torque
 and pitch control of the NREL offshore 5MW baseline wind turbine from DISCON.dll as written by J.
 Jonkman of NREL/NWTC for use in the IEA Annex XXIII OC3 studies.


 Timestep: 1 of 20 seconds. Estimated final completion at 16:45:58.                               
 Timestep: 2 of 20 seconds. Estimated final completion at 16:45:53.                               
 Timestep: 3 of 20 seconds. Estimated final completion at 16:45:58.                               
 Timestep: 4 of 20 seconds. Estimated final completion at 16:45:57.                               
 Timestep: 5 of 20 seconds. Estimated final completion at 16:45:57.                               
 Timestep: 6 of 20 seconds. Estimated final completion at 16:45:53.                               

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>program-as-data</title>
      <link>https://jueqingsizhe66.github.io/archives/program-as-data/</link>
      <pubDate>Wed, 30 Mar 2016 13:23:21 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/program-as-data/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/HtDP2e/part_three.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A program is like an essay. The first version is a draft, and drafts demand editing.&lt;/a&gt;
Program is also can be seen as data.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直觉认识proc,提取body。&lt;/li&gt;
&lt;li&gt;对比识别。&lt;/li&gt;
&lt;li&gt;加壳。&lt;/li&gt;
&lt;li&gt;三行表格，n列迭代。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;
(value-of (proc (var body)) env)
 = (value-of (proc-exp (procedure (var body env)) val) env)

 = (value-of body ([var=val] env))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数其实也是expression，它可以被consume也可以被produce.凭着这个脑中的
印象是否可以帮助你继续理解abstration和程序即数据的思想。&lt;/p&gt;
&lt;p&gt;所有的函数和数据犹如花生的壳和仁的关系。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/lisp/peanut.jpeg&#34; alt=&#34;peanut&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;只有加壳就相当于是创建一层抽象，把类似的东西包裹起来，或者也可以换着一种思路
（每个壳里面都包着类似的花生仁，只不过可能存在些许不同）&lt;/p&gt;
&lt;h3 id=&#34;two-similar-functions&#34;&gt;Two similar functions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;; Los -&amp;gt; Boolean
; does l contain &amp;quot;dog&amp;quot;
(define (contains-dog? l)
  (cond
    [(empty? l) #false]
    [else
     (or
       (string=? (first l) &amp;quot;dog&amp;quot;)
       (contains-dog?
         (rest l)))]))

	
; Los -&amp;gt; Boolean
; does l contain &amp;quot;cat&amp;quot;
(define (contains-cat? l)
  (cond
    [(empty? l) #false]
    [else
     (or
       (string=? (first l) &amp;quot;cat&amp;quot;)
       (contains-cat?
         (rest l)))]))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;加壳&#34;&gt;加壳&lt;/h3&gt;
&lt;p&gt;加上一个函数皮，并封上一层。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;; String Los -&amp;gt; Boolean
; determines whether l contains the string s
(define (contains? s l)
  (cond
    [(empty? l) #false]
    [else (or (string=? (first l) s)
              (contains? s (rest l)))]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后我们就可以类似的改写了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;; Los -&amp;gt; Boolean
; does l contain &amp;quot;dog&amp;quot;
(define (contains-dog? l)
  (contains? &amp;quot;dog&amp;quot; l))
	
	
; Los -&amp;gt; Boolean
; does l contain &amp;quot;cat&amp;quot;
(define (contains-cat? l)
  (contains? &amp;quot;cat&amp;quot; l))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个典型的过程就是函数抽象。进一步可以参考&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/HtDP2e/part_three.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HowToDesginProgram&lt;/a&gt;和&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/BTLS/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TheLittleScheme&lt;/a&gt;.
Note: 你需要解析的其实是花生仁，但是你不得不先把壳打开或者通过另外一种方式，比如红外线等技术把它识别出来。&lt;/p&gt;
&lt;p&gt;也就是说进一步归纳的话，你首先得recognise识别出来，然后才能进行解析（提取其中的蛋白质、脂肪、热量等）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/lisp/baby.png&#34; alt=&#34;mybaby&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;保护它的壳，给它提供营养，防止它受到感染和伤害。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pressbin.com/tools/excel_to_html_table/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;表格转换链接&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
      &lt;tr&gt;
                &lt;td&gt;index&lt;/td&gt;
                &lt;td&gt;0&lt;/td&gt;
                &lt;td&gt;1&lt;/td&gt;
                &lt;td&gt;2&lt;/td&gt;
                &lt;td&gt;…&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
                &lt;td&gt;M&lt;/td&gt;
                &lt;td&gt;a+S&lt;/td&gt;
                &lt;td&gt;a+1*W+S&lt;/td&gt;
                &lt;td&gt;a+2*W+S&lt;/td&gt;
                &lt;td&gt;…&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
                &lt;td&gt;f at M&lt;/td&gt;
                &lt;td&gt;f(a+S)&lt;/td&gt;
                &lt;td&gt;f(a+1*W+S)&lt;/td&gt;
                &lt;td&gt;f(a+2*W+S)&lt;/td&gt;
                &lt;td&gt;…&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
                &lt;td&gt;Area&lt;/td&gt;
                &lt;td&gt;W*f(a+S)&lt;/td&gt;
                &lt;td&gt;W*f(a+1*W+S)&lt;/td&gt;
                &lt;td&gt;W*f(a+2*W+S)&lt;/td&gt;
                &lt;td&gt;…&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
                &lt;td&gt;residual&lt;/td&gt;
                &lt;td&gt;60.00%&lt;/td&gt;
                &lt;td&gt;50.00%&lt;/td&gt;
                &lt;td&gt;40.00%&lt;/td&gt;
                &lt;td&gt;…&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;慢工才能出细活，通过三行表格n列迭代的形式(也可以进一步加大计算量变成n行表格n列迭代)理解递归迭代的过程,在一定的时间，进行一系列的列计算，并让时间推进，直到满足你想要的结果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some notations in the design of the language</title>
      <link>https://jueqingsizhe66.github.io/archives/some-notations-in-the-design-of-the-language/</link>
      <pubDate>Fri, 26 Feb 2016 15:35:17 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/some-notations-in-the-design-of-the-language/</guid>
      <description>&lt;p&gt;What does it mean by Kleene star? What can it be used for?
It is not so important,but a good tools to record the grammer
of the language.目的就是如何更简洁地定义语法。&lt;/p&gt;
&lt;h2 id=&#34;几个基本字符&#34;&gt;几个基本字符&lt;/h2&gt;
&lt;h3 id=&#34;nonterminal-symbols&#34;&gt;Nonterminal Symbols&lt;/h3&gt;
&lt;p&gt;指代被定义的集合名字(These are the names of the sets being defined)，比如List-of-Int,List-of-Char&amp;hellip;,
这些集合有时候也被叫做语义分类(syntactic categories)&lt;/p&gt;
&lt;p&gt;而且一般是of连接词是小写，其他表征类型的是大写(capitalized)。
这是一个习惯，当然如果指引某个单一的元素的时候我们会用小写字母，
比如 Expression is a nonterminal, 可以写成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  e &amp;lt;- Expression  or
  e is an expression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然我们也可以写成更为简单的形式，叫做Backus-Naur Form(BNF),即用尖括号包裹小写字母表达式，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;expression&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;terminal-symbols&#34;&gt;Terminal Symbols:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;left parenthesis 左括号 &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;right parenthesis 右括号 &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;period 句号 点号  &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;productionthe-rules&#34;&gt;Production(The rules)&lt;/h3&gt;
&lt;p&gt;The rules are called productions.每一个Production包含left-handside（lhs),right-handside(rhs),并用&lt;code&gt;::=&lt;/code&gt;来连接
lhs和rhs，&lt;code&gt;::=&lt;/code&gt;也被读作&lt;em&gt;is or can be&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lhs一般是nonterminal symbol,表征的是语义类(syntactic category)&lt;/li&gt;
&lt;li&gt;rhs一般是由terminal symbols(比如left and right parenthesis ,or period)和nonterminal symbols 组合起来。&lt;/li&gt;
&lt;li&gt;rhs的主要作用是用来按照其他语义分类(每一行都叫做一种语义分类）和Terminal symbolsl指定(specify)对应语义类
的构造成员的方法(a method of constructing the members of the syntactic category)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Int ::= (1 2 3 ....)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Double ::= (1.11246 1.2 1.3 ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Char ::= (a b c ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Float ::= (1.1 1.2 1.3 ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List-of-Int ::= ()&lt;/code&gt;
&lt;code&gt;List-of-Int ::= (Int . List-of-Int)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Lists ::= ()|(Scheme Val . List)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然有时候我们也可以忽略第二个语义类的List-of-Int,比如&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ()&lt;/code&gt;
&lt;code&gt;            ::= (Int . List-of-Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然我们也可以只用一行来表示语义类（归一为一条语义）：使用vertical bar(| ),也被读作or&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ()|(Int . List-of-Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外我们也可以使用一种更为简洁的形式： 使用 Kleene Star利用大括号(flower braces), &lt;code&gt;{}*&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ({Int}*)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中&lt;code&gt;*&lt;/code&gt;表示的是0个或者0个以上，也可以变换为&lt;code&gt;+&lt;/code&gt;。
&lt;code&gt;+&lt;/code&gt;:表示的是一个或者一个以上.&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ({Int}+)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然我们也可以规定Int之间的分割标志,利用seperation list&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ({Int}*(,))  &lt;/code&gt;
表示的是&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;8
1,2
3,4,6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List-of-Int ::= (&lt;code&gt;{Int}*(;)&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8
1;2
3;4;6
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;语义推导syntactic-derivation练习&#34;&gt;语义推导(Syntactic derivation)练习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(14 . ()) is a List-of-Int?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;List-of-Int
=&amp;gt; (Int . (List-of-Int))
=&amp;gt; (14  . (List-of-Int))
=&amp;gt; (14  . ())

so, it is true.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(-7 . (3 . (14 . ()))) is a List-of-Int?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;List-of-Int
=&amp;gt; (Int . (List-of-Int))
=&amp;gt; (-7  . (List-of-Int))
=&amp;gt; (-7  . (3 . (List-of-Int)))
=&amp;gt; (-7  . (3 . (14 . (List-of-Int))))
=&amp;gt; (-7  . (3 . (14 . ())))

so, it is true.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(a b c) is a S-list?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;S-list = ({S-exp}(`*`))
S-exp  = Symbol | S-list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;S-list
=&amp;gt; ({S-exp}(*))
=&amp;gt; {Symbol | S-list}(*)
=&amp;gt; {a | S-list}(*)
=&amp;gt; {a b |S-list}(*)
=&amp;gt; {a b c}

so, it is S-list
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(bar (biz 4 6) (foo 1 2)) is a binary tree?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树是非常重要的数据结构，它的定义形式是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Bintree ::= Int| (Symbol Bintree Bintree)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以我们可以这样解析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Bintree
=&amp;gt;(Int|(Symbol Bintree Bintree))
=&amp;gt;(bar (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree)))
=&amp;gt;(bar (biz (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree))) 
       (foo (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree))))
=&amp;gt;(bar (biz 4 6) 
       (foo (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree))))
=&amp;gt;(bar (biz 4 6) 
       (foo 1 2))

So,it is true

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(lambda (x) (+ x 6)) is a lambda calculus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lambda calculus 是程序语言设计中十分重要的小型语言。该门语言仅仅包含&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量引用(varient references)&lt;/li&gt;
&lt;li&gt;单参过程(procedures that takes a single argument)&lt;/li&gt;
&lt;li&gt;过程调用(procedure calls)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定义如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   LcExp ::= Identifier
         ::= (lambda (Identifier) LcExp)
         ::= (LcExp LcExp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以我们可以判断如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; LcExp
=&amp;gt; Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)
=&amp;gt; (lambda (Identifier) LcExp)
=&amp;gt; (lambda (x) Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp))
=&amp;gt; (lambda (x) (LcExp LcExp))
=&amp;gt; (lambda (x) (+ Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)
                  Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)))
=&amp;gt; (lambda (x) (+ x
                  Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)))
=&amp;gt; (lambda (x) (+ x
                  6))

So, it is true.


&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;上米那说的List-of-Int,Bintree，Lambda calculus等都可以叫做一种语义类，是一门语言
包含的原始类型。上面的syntatic derivation也可以被用来当作理论证明的一种入门，本质是递归理论。&lt;/p&gt;
&lt;p&gt;而其实他们都可以当作最为基本的解释器，因为他们在不断的解析他们所识别的expressions，上面的LcExp,
List-exp等都叫做expressions，也是解释器的元素。&lt;/p&gt;
&lt;p&gt;而假如我们有一个函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nth-element : List * Int -&amp;gt; SchemeVal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他说明的是nth-element是一个接受List和Int作为形参并返回SchemeVal的过程，也就是它属于LcExp范畴。&lt;/p&gt;
&lt;h2 id=&#34;subst采用kleene-star进行书写&#34;&gt;subst采用kleene star进行书写&lt;/h2&gt;
&lt;p&gt;subst的定义是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subst : Sym * Sym * S-list -&amp;gt; S-list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面的实现过程从最为原始的只能处理lat的形式变为能够处理任意嵌套的expressions形式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;#lang racket

;;替换在slist中old值出现的值为new值（引用值）
(define subst-original
  (lambda (new old slist)
    (if (null? slist)
	&#39;()
	(cons
	       (if (eqv? (car slist) old)
               new
               (car slist))
	 (subst new old (cdr slist))))))

;;map改进失败
(define subst-wrong
  (lambda (new old lst)
    (map (lambda (x) (if (eq? x old) new old)) lst)))
;;通过map 简化subst-original的原始写法
(define subst-map
  (lambda (new old lst)
    (map (lambda (x) (if (eq? x old) new x)) lst)))

;;;通过subst改进S-expression to list-expression
(define subst
  (lambda (new old slist)
    (if (null? slist)
	&#39;()
	(cons
	 (let ((sexp (car slist)))
	   (if (symbol? sexp)
	       (if (eqv? sexp old)
               new
               sexp)
	       (subst new old sexp)))
	 (subst new old (cdr slist))))))

;;;通过map 改进subst
(define subst-map-improve
  (lambda (new old lst)
    (map (lambda (x) (if (symbol? x) (if (eq? x old) new x) (subst-map new old x))) lst)))

(subst-original  &#39;a &#39;b &#39;(a b c (b b) d b))
;&#39;(a a c (a a) d a)
(subst-map &#39;a &#39;b &#39;(a b c (b b) d b))
;&#39;(a a c (b b) d a)
(subst-wrong &#39;a &#39;b &#39;(a b c (b b) d b))  ;;;错误在于所有的非old值都替换为old值了
;&#39;(b a b b b a)
(subst &#39;a &#39;b &#39;(a b c (b b) d b))
;;&#39;(a a c (a a) d a)
(subst-map-improve &#39;a &#39;b &#39;(a b c (b b) d b))
;&#39;(a a c (a a) d a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个拓展的例子虽然和表达式的注释主题关系不大，但是确是对于递归递归理论的进一步阐述。递归要求满足两个条件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;递归出口(null? slt)  (zero? (car lst)) &amp;hellip;&lt;/li&gt;
&lt;li&gt;逐渐朝向递归出口的算子 (cdr lst) (- n 1) &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;define-datatype的运用&#34;&gt;define-datatype的运用&lt;/h2&gt;
&lt;p&gt;具体实现可以查看&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Implementation of Define-datatype&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;lc-exp-和s-list的具体实现&#34;&gt;Lc-Exp 和S-list的具体实现&lt;/h3&gt;
&lt;p&gt;上文所提记得Lc-Exp的定义为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    lc-exp  ::=identifier
            ::=(lambda (identifier) Lc-exp
            ::=(lc-exp lc-exp)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它使用define-datatype的实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-datatype lc-exp lc-exp?
    (var-exp (var identifier?))
    (lambda-exp (bound-var identifier?)
                (body lc-exp?))
    (app-exp (rator lc-exp?)
             (rand lc-exp?))
)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而S-list的定义再现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   S-list   ::=({S-exp}*) 
   S-exp:=Symbol|S-list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他对应的实现如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-datatype s-list s-list?
    (empty-s-list)
    (non-empty-s-list
        (first s-exp?)
        (rest s-list?))
)
(define-datatype s-exp s-exp?
    (symbol-s-exp (sym symbol?))
    (s-list-s-exp (slst s-list?))
)

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expression-和-expval的具体定义和实现&#34;&gt;expression 和 expval的具体定义和实现&lt;/h3&gt;
&lt;p&gt;在Interpreter的过程中肯定涉及到expression的设计和value值的表现（&lt;strong&gt;把exp和val的键值对叫做解释器的字典&lt;/strong&gt;）
expression的具体定义是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expression ::= (var-exp ())
           ::= (const-exp ())
           ::= (zero?-exp ())
           ::= (if-exp ())
           ::= (diff-exp ())
           ::= (cons-exp ())
           ::= (car-exp ())
           ::= (cdr-exp ())
           ::= (null?-exp ())
           ::= (emptylist-exp)
           ::= (list-exp ())
           ::= (let-exp ())
           ::= (proc-exp ())
           ::= (call-exp ())
           ::= (letrec-exp ())  ;;并未再此体现
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体实现如下所示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;; datatype ;;;
(define-datatype expression expression?
  (var-exp
   (id symbol?))
  (const-exp
   (num number?))
  (zero?-exp
   (expr expression?))
  (if-exp
   (predicate-exp expression?)
   (true-exp expression?)
   (false-exp expression?))
  (diff-exp
   (exp1 expression?)
   (exp2 expression?))
  (emptylist-exp)
  (cons-exp
   (exp1 expression?)
   (exp2 expression?))
  (car-exp
   (body expression?))
  (cdr-exp
   (body expression?))
  (null?-exp
   (body expression?))
  (list-exp
   (args (list-of expression?)))
  (let-exp
   (vars (list-of symbols?))
   (vals (list-of expression?))
   (body expression?))
  (proc-exp
   (var (list-of symbol?))
   (body expression?))
  (call-exp
   (rator expression?)
   (rand (list-of expression?))))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;expval的定义(主要是用于scheme value)如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; expval ::= (num-val ())
        ::= (bool-val ())
        ::= (proc-val ())
        ::= (pair-val ())
        ::= (emptylist-val)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体实现如下 所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;; an expressed value is either a number, a boolean or a procval.
(define-datatype expval expval?
  (num-val
   (value number?))
  (bool-val
   (boolean boolean?))
  (proc-val
   (proc proc?))
  (pair-val
   (car expval?)
   (cdr expval?))
  (emptylist-val))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;proc的具体定义如下，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  proc ::= (procedure ())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;proc的实现如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; proc? : SchemeVal -&amp;gt; Bool
;; procedure : Var * Exp * Env -&amp;gt; Proc
(define-datatype proc proc?
  (procedure
   (var (list-of symbol?))
   (body expression?)
   (env environment?)))


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然具体的Define-datatype的定义还得配合&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cases的作用&lt;/a&gt;进行实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>斯基摩斯的乐园schemers</title>
      <link>https://jueqingsizhe66.github.io/archives/si-ji-mo-si-de-le-yuan-schemers/</link>
      <pubDate>Sun, 14 Feb 2016 14:11:54 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/si-ji-mo-si-de-le-yuan-schemers/</guid>
      <description>&lt;p&gt;作为一个schemer，你得去学习，编程，社交，工作，保持畅通等,
当然你最不该错过的是&lt;a href=&#34;http://www.schemers.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;斯基摩斯的乐园&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;学习&#34;&gt;学习&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;textbooks书本&lt;/li&gt;
&lt;li&gt;videos&lt;/li&gt;
&lt;li&gt;blogs&lt;/li&gt;
&lt;li&gt;standards 标准手册&lt;/li&gt;
&lt;li&gt;tutorials 入门书籍&lt;/li&gt;
&lt;li&gt;bibliography 参考文献&lt;/li&gt;
&lt;li&gt;other documents 其他文档&lt;/li&gt;
&lt;li&gt;education 教育&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上几个部分可以完成你学习的过程。&lt;/p&gt;
&lt;h2 id=&#34;编程&#34;&gt;编程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;implementation 通过实现一门语言&lt;/li&gt;
&lt;li&gt;libraries 通过调用库&lt;/li&gt;
&lt;li&gt;environments 通过搭建环境 了解环境&lt;/li&gt;
&lt;li&gt;Scheme Requests for Implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;社交&#34;&gt;社交&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;中国lisp组织&lt;/li&gt;
&lt;li&gt;google讨论组&lt;/li&gt;
&lt;li&gt;开发者邮箱&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;从工作中获得消息&lt;/p&gt;
&lt;h2 id=&#34;保持畅通&#34;&gt;保持畅通&lt;/h2&gt;
&lt;p&gt;从一些具体的新闻事件中获取消息&lt;/p&gt;
&lt;h2 id=&#34;斯基摩斯清单&#34;&gt;斯基摩斯清单&lt;/h2&gt;
&lt;p&gt;具体下面的事项参看&lt;a href=&#34;http://www.schemers.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;首页&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(case (what-would-you-like-to-do?)
  ((learn)
   (choose-from FAQ
                textbooks
                videos
                blogs
                standards
                tutorials
                bibliography
                other documents
                education))
  ((program)
   (choose-from implementations
                libraries
                environments
                SRFIs))
  ((socialize)
   (choose-from ABQ Lisp/Scheme - Albuquerque, NM, USA
                Chinese Lisp Users Group - China
                Bay Area Lisp &amp;amp; Scheme - Bay Area, CA, USA
                Scheme Boston and Boston Lisp Announce - Boston, MA, USA
                Denver Lispers - Denver, CO, USA
                Scheme UK - London, UK
                munich-lisp - Munich, Germany
                CRACL - Los Angeles, CA, USA
                Lambdaheads - Vienna, Austria
                FringeDC - Washington, DC, USA))
  ((work)
   (choose-from jobs))
  ((stay-informed)
   (choose-from events))
  (else
   (choose-from the lighter side
                wares
                other resources)))
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>基于现实，抽象现实，模拟现实</title>
      <link>https://jueqingsizhe66.github.io/archives/ji-yu-xian-shi-chou-xiang-xian-shi-mo-ni-xian-shi/</link>
      <pubDate>Mon, 05 Oct 2015 10:04:47 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/ji-yu-xian-shi-chou-xiang-xian-shi-mo-ni-xian-shi/</guid>
      <description>&lt;p&gt;信息与知识的不同在于，信息是暂时不被理解的知识，而当它被理解，并被组织，他也就成了知识。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;你的课题是什么&#34;&gt;你的课题是什么？&lt;/h2&gt;
&lt;p&gt;不再是老师布置的题目，而是基于现实，充分调研，提取你需要的信息，
进行分布式抽象，合理分类，构建知识系统，从而模拟你所expected的现实，
来论证理论……&lt;/p&gt;
&lt;p&gt;知识的存在就因为被interpreted or made sense,namely some what happened
have been interpreted and compared ,finnalys tored into your knowledge
system in the memory(in your head not in the world),更进一步可以阅读
《The Design of Everyday Things》.&lt;/p&gt;
&lt;h2 id=&#34;获取知识的途径&#34;&gt;获取知识的途径？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A goal &amp;ndash;&amp;gt;    Your expected things.What do you want?&lt;/li&gt;
&lt;li&gt;B plan &amp;ndash;&amp;gt;    what&amp;rsquo;s your actions to get what you want&lt;/li&gt;
&lt;li&gt;C specify  &amp;ndash;&amp;gt; what action can I do now? Design a conceptual model&lt;/li&gt;
&lt;li&gt;D perform  &amp;ndash;&amp;gt; How do I do it! Get affordance to execute the action&lt;/li&gt;
&lt;li&gt;E perceive &amp;ndash;&amp;gt; What happened after you done the action?&lt;/li&gt;
&lt;li&gt;F interpret &amp;ndash;&amp;gt; explain what happened?&lt;/li&gt;
&lt;li&gt;G compare   &amp;ndash;&amp;gt; it is okay? is it what you want? compare with what you want?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;BCD&lt;/code&gt; is called the stage of execute while &lt;code&gt;EFG&lt;/code&gt; is called the stage of evaluation. Also ,you can call &lt;code&gt;BCD&lt;/code&gt; stage as FeedForward which aid in understanding the process of what can you do.And &lt;code&gt;EFG&lt;/code&gt; stage can be also looked at as FeedBack stage which aid in understanding the process of what happened.&lt;/p&gt;
&lt;p&gt;In the stage of perceive, you can use some signifiers such as light,colors etc in order to communicate with people sucessfully.
In the stage of interpret, it means mapping the knowledge.&lt;/p&gt;
&lt;h2 id=&#34;大量文章的阅读方法&#34;&gt;大量文章的阅读方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前言（引言）的第三段讲述作者为什么要进行这项工作、依据、方法（可能一些结果）&lt;/li&gt;
&lt;li&gt;文章中的图表（提出的表征方法和性能变化）&amp;ndash;技术手段&amp;ndash;研究路线&lt;/li&gt;
&lt;li&gt;结论（这些表征方法是否实现了既定的目标以及是否还需要优化（产物的性能怎么样？模拟的精度？未发现的自然现象？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;摘要的阅读方法&#34;&gt;摘要的阅读方法&lt;/h2&gt;
&lt;p&gt;一般分为三句话。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一句话对应引言第一段。比如说某个东西多NB。&lt;/li&gt;
&lt;li&gt;第二句化对应引言第二段。这个NB东西的工作机理激发了我们设计新的方案的灵感&lt;/li&gt;
&lt;li&gt;第三句话对应Here we report。。回答四个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;我们到底做了什么？&lt;/li&gt;
&lt;li&gt;怎么做的?&lt;/li&gt;
&lt;li&gt;为什么能做到？&lt;/li&gt;
&lt;li&gt;结果怎么样？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想把一个研究工作讲成一个好故事，最关键式该工作取得好的结果。上述过程也满足
SQCA原则，SQCA（situations&amp;mdash;conflict&amp;ndash;Questions&amp;mdash;Answers),很多人针对situations和conflicts基本上都不按章出牌。&lt;/p&gt;
&lt;p&gt;这些都是前人的一些经验，加油你的topic。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TurbSim 8个湍流模型的对比</title>
      <link>https://jueqingsizhe66.github.io/archives/turbsim-8ge-tuan-liu-mo-xing-de-dui-bi/</link>
      <pubDate>Mon, 10 Aug 2015 01:00:47 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/turbsim-8ge-tuan-liu-mo-xing-de-dui-bi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://nwtc.nrel.gov/TurbSim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TurbSim&lt;/a&gt;,是NREL提供的一个小的开源工具， 用于产生湍流风，设置的时候可能对于不同模型会有不同的参数，基于范本进行了一番分析。当然测试文件在TurbSim的Test文件下的inp文件夹下。&lt;/p&gt;
&lt;p&gt;如果对那些湍流模型做一个对比，那样是否可以更加清晰的看出不同呢？
于是就有了下面的shell分析脚本。&lt;/p&gt;
&lt;p&gt;TurbSim产生的风力机一圈的入流截面模型（仅仅一个截面，全场是因为捕捉了很多个截面）&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/fast/turbsim.png&#34; alt=&#34;Turbsim&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;shell解析脚本&#34;&gt;Shell解析脚本&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash - 
#===============================================================================
#
#          FILE: a.sh
# 
#         USAGE: ./a.sh 
# 
#   DESCRIPTION: 
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Ye Zhaoliang (), zhaoturkkey@163.com
#  ORGANIZATION: YZL
#       CREATED: 2015年08月10日 00:26
#      REVISION:  ---
#===============================================================================

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  _repeat1
#   DESCRIPTION:  优化版本
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
_repeat1()
{
    #@ 使用方式： _repeat 要重复的字符串  重复次数
    #@  Usage : _repeat string number
    _REPEAT1=$1  #set and not empty, or unlimit recycle
    while [[ ${#_REPEAT1} -lt $2 ]]
    do
        _REPEAT1=$_REPEAT1$_REPEAT1$_REPEAT1 ## 3次优化
    done
    _REPEAT1=${_REPEAT1:0:$2} ##Trim到我们需要的长度
}

alert() #@ Description    产生一个方框的注释
{       #@ Usage    alert &amp;quot;话语&amp;quot;
    _repeat1 &amp;quot;${2:-#}&amp;quot; $(( ${#1} + 8 )) ## ${2:-#} 如果$2未定义则使用#
    printf &#39;%s\n&#39; &amp;quot;$_REPEAT1&amp;quot; ## \a=BEL
    printf &#39;%2.2s %s %2.2s\n&#39; &amp;quot;$_REPEAT1&amp;quot; &amp;quot;$1&amp;quot; &amp;quot;$_REPEAT1&amp;quot; ## \a=BEL
    printf &#39;%s\n&#39; &amp;quot;$_REPEAT1&amp;quot;
}


#alert &amp;quot;Do you really want to delete all the files?&amp;quot;


## RandSeed1 在不同湍流模型配置的不同
{
alert  &amp;quot;RandSeed1&amp;quot; 
grep -n &amp;quot;RandSeed1&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;RandSeed2&amp;quot; 
grep -n &amp;quot;RandSeed2&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrBHHTP&amp;quot; 
grep -n &amp;quot;WrBHHTP&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrFHHTP&amp;quot; 
grep -n &amp;quot;WrFHHTP&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrADHH&amp;quot; 
grep -n &amp;quot;WrADHH&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrADFF&amp;quot; 
grep -n &amp;quot;WrADFF&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrBLFF&amp;quot; 
grep -n &amp;quot;WrBLFF&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrADTWR&amp;quot; 
grep -n &amp;quot;WrADTWR&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrFMTFF&amp;quot; 
grep -n &amp;quot;WrFMTFF&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WrACT&amp;quot; 
grep -n &amp;quot;WrACT&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;NumGrid_Z&amp;quot; 
grep -n &amp;quot;NumGrid_Z&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;NumGrid_Y&amp;quot; 
grep -n &amp;quot;NumGrid_Y&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;HubHt&amp;quot; 
grep -n &amp;quot;HubHt&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;GridHeight&amp;quot; 
grep -n &amp;quot;GridHeight&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|sed &#39;/HubHt/d&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;GridWidth&amp;quot; 
grep -n &amp;quot;GridWidth&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|sed &#39;/HubHt/d&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;VFlowAng&amp;quot; 
grep -n &amp;quot;VFlowAng&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;HFlowAng&amp;quot; 
grep -n &amp;quot;HFlowAng&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;TurbModel&amp;quot; 
grep -n &amp;quot;TurbModel&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;IECstandard&amp;quot; 
grep -n &amp;quot;IECstandard&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;IECturbc&amp;quot; 
grep -n &amp;quot;IECturbc&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;IEC_WindType&amp;quot; 
grep -n &amp;quot;IEC_WindType&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;ETMc&amp;quot; 
grep -n &amp;quot;ETMc&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;WindProfileType&amp;quot; 
grep -n &amp;quot;WindProfileType&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;RefHt&amp;quot; 
grep -n &amp;quot;RefHt&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;URef&amp;quot; 
grep -n &amp;quot;URef&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;ZJetMax&amp;quot; 
grep -n &amp;quot;ZJetMax&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;PLExp&amp;quot; 
grep -n &amp;quot;PLExp&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;Z0&amp;quot; 
grep -n &amp;quot;Z0&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;RICH_NO&amp;quot; 
grep -n &amp;quot;RICH_NO&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;ZI&amp;quot; 
grep -n &amp;quot;ZI&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;PC_UW&amp;quot; 
grep -n &amp;quot;PC_UW&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;PC_UV&amp;quot; 
grep -n &amp;quot;PC_UV&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;PC_VW&amp;quot; 
grep -n &amp;quot;PC_VW&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;CohExp&amp;quot; 
grep -n &amp;quot;CohExp&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;CTEventPath&amp;quot; 
grep -n &amp;quot;CTEventPath&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;CTEventFile&amp;quot; 
grep -n &amp;quot;CTEventFile&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;Randomize&amp;quot; 
grep -n &amp;quot;Randomize&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;DistScl&amp;quot; 
grep -n &amp;quot;DistScl&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;CTLy&amp;quot; 
grep -n &amp;quot;CTLy&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;CTLz&amp;quot; 
grep -n &amp;quot;CTLz&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
alert  &amp;quot;CTStartTime&amp;quot; 
grep -n &amp;quot;CTStartTime&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
} &amp;gt; summary.out

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;改进&#34;&gt;改进&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;去除无用的Turbulence and Boundary&lt;/li&gt;
&lt;li&gt;增加了对GridWidth and GridHeight的处理&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;grep -n &amp;quot;GridHeight&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|sed &#39;/HubHt/d&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t
grep -n &amp;quot;GridWidth&amp;quot; *.inp|awk -F: &#39;{print $1,$3}&#39;|sed &#39;/HubHt/d&#39;|awk &#39;{print substr($1,0,length($1)-4),&amp;quot;\t\t&amp;quot;,$2}&#39;|column -t

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;shell产生的结果如下&#34;&gt;shell产生的结果如下：&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#################
## RandSeed1 ##
#################
GPLLJ        234516
HYDRO_TIDAL  2318573
Kaimal_15    123456
Kaimal       123456
KHtest       123456
smooth       4433456
vonKarm_15   123456
vonKarm      123456
#################
## RandSeed2 ##
#################
GPLLJ        789012
HYDRO_TIDAL  RANLUX
Kaimal_15    789012
Kaimal       789012
KHtest       &amp;quot;RanLux&amp;quot;
smooth       &amp;quot;RanLux&amp;quot;
vonKarm_15   789012
vonKarm      789012
###############
## WrBHHTP ##
###############
GPLLJ        False
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       True
vonKarm_15   False
vonKarm      False
###############
## WrFHHTP ##
###############
GPLLJ        True
HYDRO_TIDAL  True
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   True
vonKarm      True
##############
## WrADHH ##
##############
GPLLJ        False
HYDRO_TIDAL  True
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   True
vonKarm      True
##############
## WrADFF ##
##############
GPLLJ        True
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   False
vonKarm      False
##############
## WrBLFF ##
##############
GPLLJ        False
HYDRO_TIDAL  True
Kaimal_15    False
Kaimal       False
KHtest       True
smooth       True
vonKarm_15   False
vonKarm      False
###############
## WrADTWR ##
###############
GPLLJ        False
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   False
vonKarm      False
###############
## WrFMTFF ##
###############
GPLLJ        False
HYDRO_TIDAL  False
Kaimal_15    True
Kaimal       True
KHtest       False
smooth       False
vonKarm_15   False
vonKarm      False
#############
## WrACT ##
#############
GPLLJ        True
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       True
smooth       True
vonKarm_15   False
vonKarm      False
#################
## NumGrid_Z ##
#################
GPLLJ        5
HYDRO_TIDAL  5
Kaimal_15    5
Kaimal       5
KHtest       5
smooth       5
vonKarm_15   5
vonKarm      5
#################
## NumGrid_Y ##
#################
GPLLJ        5
HYDRO_TIDAL  5
Kaimal_15    5
Kaimal       5
KHtest       5
smooth       5
vonKarm_15   5
vonKarm      5
#############
## HubHt ##
#############
GPLLJ        90.00
HYDRO_TIDAL  10
Kaimal_15    37.00
Kaimal       37.00
KHtest       37.00
smooth       84.00
vonKarm_15   37.00
vonKarm      37.00
##################
## GridHeight ##
##################
GPLLJ        80.00
HYDRO_TIDAL  9.00
Kaimal_15    30.00
Kaimal       30.00
KHtest       50.00
smooth       70.00
vonKarm_15   30.00
vonKarm      30.00
#################
## GridWidth ##
#################
GPLLJ        600.0
GPLLJ        90.0
GPLLJ        80.00
HYDRO_TIDAL  600
HYDRO_TIDAL  40
HYDRO_TIDAL  9.00
Kaimal_15    600.0
Kaimal_15    55.8
Kaimal_15    30.00
Kaimal       600.0
Kaimal       55.8
Kaimal       30.00
KHtest       600.0
KHtest       100.0
KHtest       50.00
smooth       600.0
smooth       100.0
smooth       70.00
vonKarm_15   600.0
vonKarm_15   55.8
vonKarm_15   30.00
vonKarm      600.0
vonKarm      55.8
vonKarm      30.00
################
## VFlowAng ##
################
GPLLJ        0
HYDRO_TIDAL  0
Kaimal_15    5
Kaimal       5
KHtest       0
smooth       0
vonKarm_15   5
vonKarm      0
################
## HFlowAng ##
################
GPLLJ        0
HYDRO_TIDAL  0
Kaimal_15    10
Kaimal       10
KHtest       0
smooth       0
vonKarm_15   10
vonKarm      0
#################
## TurbModel ##
#################
GPLLJ        &amp;quot;GP_LLJ&amp;quot;
HYDRO_TIDAL  &amp;quot;TIDAL&amp;quot;
Kaimal_15    &amp;quot;IECKAI&amp;quot;
Kaimal       &amp;quot;IECKAI&amp;quot;
KHtest       &amp;quot;NWTCUP&amp;quot;
smooth       &amp;quot;SMOOTH&amp;quot;
vonKarm_15   &amp;quot;IECVKM&amp;quot;
vonKarm      &amp;quot;IECVKM&amp;quot;
###################
## IECstandard ##
###################
GPLLJ        1
HYDRO_TIDAL  &amp;quot;1-ED3&amp;quot;
Kaimal_15    &amp;quot;1-ED2&amp;quot;
Kaimal       1
KHtest       1
smooth       1
vonKarm_15   1
vonKarm      1
################
## IECturbc ##
################
GPLLJ        &amp;quot;A&amp;quot;
HYDRO_TIDAL  &amp;quot;A&amp;quot;
Kaimal_15    &amp;quot;18.0&amp;quot;
Kaimal       &amp;quot;C&amp;quot;
KHtest       &amp;quot;KHtest&amp;quot;
smooth       &amp;quot;A&amp;quot;
vonKarm_15   16.0
vonKarm      &amp;quot;A&amp;quot;
####################
## IEC_WindType ##
####################
GPLLJ        NTM
HYDRO_TIDAL  &amp;quot;NTM&amp;quot;
Kaimal_15    NTM
Kaimal       NTM
KHtest       NTM
smooth       NTM
vonKarm_15   NTM
vonKarm      NTM
############
## ETMc ##
############
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
#######################
## WindProfileType ##
#######################
GPLLJ        default
HYDRO_TIDAL  &amp;quot;H2L&amp;quot;
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
#############
## RefHt ##
#############
GPLLJ        85.00
HYDRO_TIDAL  18
Kaimal_15    10.00
Kaimal       10.00
KHtest       37.00
smooth       84.00
vonKarm_15   10.00
vonKarm      10.00
############
## URef ##
############
GPLLJ        12.0
HYDRO_TIDAL  18
HYDRO_TIDAL  1.2
Kaimal_15    15.0
Kaimal       6.0
KHtest       13.0
smooth       17.0
vonKarm_15   15.0
vonKarm      6.0
###############
## ZJetMax ##
###############
GPLLJ        350
HYDRO_TIDAL  default
Kaimal_15    350
Kaimal       350
KHtest       350
smooth       350
vonKarm_15   350
vonKarm      260
#############
## PLExp ##
#############
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       1.527
vonKarm_15   default
vonKarm      default
##########
## Z0 ##
##########
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
###############
## RICH_NO ##
###############
GPLLJ        0.05
HYDRO_TIDAL  0.05
Kaimal_15    0.05
Kaimal       0.05
KHtest       0.02
smooth       0.05
vonKarm_15   0.05
vonKarm      0.05
##########
## ZI ##
##########
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
#############
## PC_UW ##
#############
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
#############
## PC_UV ##
#############
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
#############
## PC_VW ##
#############
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
##############
## CohExp ##
##############
GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default
###################
## CTEventPath ##
###################
GPLLJ        &amp;quot;.\EventData&amp;quot;
HYDRO_TIDAL  &amp;quot;/home/lkilcher/work/nwtc/turbsim/trunk/Test/EventData/&amp;quot;
Kaimal_15    &amp;quot;.\EventData&amp;quot;
Kaimal       &amp;quot;.\EventData&amp;quot;
KHtest       &amp;quot;.\EventData&amp;quot;
smooth       &amp;quot;.\EventData&amp;quot;
vonKarm_15   &amp;quot;.\EventData&amp;quot;
vonKarm      &amp;quot;.\EventData&amp;quot;
###################
## CTEventFile ##
###################
GPLLJ        LES
HYDRO_TIDAL  &amp;quot;Random&amp;quot;
Kaimal_15    random
Kaimal       random
KHtest       &amp;quot;les&amp;quot;
smooth       &amp;quot;les&amp;quot;
vonKarm_15   random
vonKarm      random
#################
## Randomize ##
#################
GPLLJ        true
HYDRO_TIDAL  true
HYDRO_TIDAL  1.0
HYDRO_TIDAL  0.5
HYDRO_TIDAL  0.5
Kaimal_15    true
Kaimal       true
KHtest       true
smooth       true
vonKarm_15   true
vonKarm      true
###############
## DistScl ##
###############
GPLLJ        1.0
HYDRO_TIDAL  1.0
Kaimal_15    1.0
Kaimal       1.0
KHtest       1.0
smooth       1.0
vonKarm_15   1.0
vonKarm      1.0
############
## CTLy ##
############
GPLLJ        0.5
HYDRO_TIDAL  0.5
Kaimal_15    0.5
Kaimal       0.5
KHtest       0.5
smooth       0.5
vonKarm_15   0.5
vonKarm      0.5
############
## CTLz ##
############
GPLLJ        0.5
HYDRO_TIDAL  0.5
Kaimal_15    0.5
Kaimal       0.5
KHtest       0.5
smooth       0.5
vonKarm_15   0.5
vonKarm      0.5
###################
## CTStartTime ##
###################
GPLLJ        30.0
HYDRO_TIDAL  30.0
Kaimal_15    30.0
Kaimal       30.0
KHtest       0.0
smooth       10.0
vonKarm_15   30.0
vonKarm      30.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进一步的细节可以参考&lt;a href=&#34;https://nwtc.nrel.gov/system/files/TurbSim.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbsim UserGuide&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Incompact3d的Makefile及DNS算法</title>
      <link>https://jueqingsizhe66.github.io/archives/incompact3dde-makefileji-dnssuan-fa/</link>
      <pubDate>Mon, 22 Jun 2015 16:52:20 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/incompact3dde-makefileji-dnssuan-fa/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/incompact3d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Incompact3d&lt;/a&gt;是一个开源的基于fortran语言编写的DNS求解器，也是我研究生期间使用的开源源代码。
Incompact3d整体框架的介绍可以参考软件的&lt;a href=&#34;https://code.google.com/p/incompact3d/downloads/detail?name=user_guide_incompact3d_V1-1.pdf&amp;amp;can=2&amp;amp;q=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;user-guide&lt;/a&gt;和文献&lt;a href=&#34;http://www.imperial.ac.uk/media/imperial-college/research-centres-and-groups/turbulence-mixing-and-flow-control-group/2009_LAIZET_JCP.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;High-order-compact schemes for incompressible flows: a simple and effcient method with the quasi-spectral accuary&lt;/a&gt;,还可以搜索&lt;a href=&#34;http://www.imperial.ac.uk/tmfc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sylvain Laziet&lt;/a&gt; 相关的文章 ，只不过他并不是成熟的软件，很多的编译和后处理都可能出现问题，下面是我使用过程遇到的一些问题。
当然主要过程是，通过makefile编译，然后运行incompact3d，最后处理计算结果。&lt;/p&gt;
&lt;p&gt;#1 如何模拟？&lt;/p&gt;
&lt;p&gt;以周期性槽道流动(当然我也就会这么一种，其他都只是走了一小半）为例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先是得到(不得不说，我也有点忘记)一个完全发展的旋转槽道流动(注意旋转源项的添加) (一般设置20000步可以了，只要收敛即可 大概一天)&lt;/li&gt;
&lt;li&gt;然后是获得完全发展槽道流动(也就是不加上旋转源项)(估计得三万步以上 大概一天)&lt;/li&gt;
&lt;li&gt;最后是获得统计的完全发展槽道流动.因为DNS获得的结果是非定常的，所以你得进行时均处理(当然时均程序得打开时均统计项 umean等)(我统计了20万步，大概花了4天时间。)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;步骤就是这样,大概一个较小的流程需要一周左右。&lt;/p&gt;
&lt;p&gt;Incompact3d比较特殊的是收敛性判定问题，上面的几个过程都需要使用实时&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/05/31/u-plus-y-plus/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监控小程序&lt;/a&gt;
来观看速度散度和质量流量(质量流量是周期性槽道流动所特有的，所以最好进行实时显示)的收敛情况.另外你可以通过python的一个小脚本
来获得实时显示的图片，这样就能看到程序模拟得怎么样了，具体查看&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/06/11/ji-yu-pythonde-ju-yu-wang-wen-jian-gong-xiang-ruan-jian-simplehttpserverwithupload/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python局域网上传和下载&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;#2 后处理方法
参考我的&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/06/22/incompact3dru-he-tong-guo-jie-guo-chu-li-chu-ji-xian&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pathline处理方法&lt;/a&gt;
一定要注意(real 8) 否则得到的结果肯定是错误的，这也是困扰我几星期的问题。&lt;/p&gt;
&lt;p&gt;#3 关于Makefile编译&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;#=======================================================================
# Makefile for Imcompact3D
#=======================================================================

# Choose pre-processing options
#   -DSHM	   - enable shared-memory implementation
#   -DDOUBLE_PREC  - use double-precision
OPTIONS = -DDOUBLE_PREC

# Choose an FFT engine, available options are:
#   essl       - IBM Blue Gene ESSL Library
#   fftw3      - FFTW version 3.x
#   generic    - A general FFT algorithm (no 3rd-party library needed)
#FFT= essl # I ignore
FFT = generic

# Paths to FFTW 3
FFTW3_PATH=   # full path of FFTW installation if using fftw3 engine above
FFTW3_INCLUDE = -I$(FFTW3_PATH)/include
FFTW3_LIB = -L$(FFTW3_PATH)/lib -lfftw3 -lfftw3f

# Paths to ESSL
ESSL_PATH=/bgsys/drivers/ppcfloor/comm/xl
ESSL_INCLUDE =
ESSL_LIB = -L$(ESSL_PATH)/lib -L/opt/ibmmath/lib64 -lesslbg

# Specify Fortran and C compiler names and flags here
# Normally, use MPI wrappers rather than compilers themselves 
# Supply a Fortran pre-processing flag together with optimisation level flags
# Some examples are given below:

#FC =  
#OPTFC = 
#CC = 
#CFLAGS = 

# PGI
#FC = ftn
#OPTFC = -fast -O3 -Mpreprocess
#CC = cc
#CFLAGS = -O3

# PathScale
#FC = ftn
#OPTFC = -Ofast -cpp
#CC = cc
#CFLAGS = -O3

# GNU 选用mpif90进行编译
FC = mpif90
OPTFC = -O0 -g  -fdefault-real-8 -fdefault-double-8 -funroll-loops -ftree-vectorize -fcray-pointer -cpp
CC = mpicc
CFLAGS = -O0
PLATFORM=gnu

#Blue Gene/Q : EDF R&amp;amp;D
#PREP=/bgsys/drivers/ppcfloor/comm/xl/bin/
#FC = $(PREP)mpixlf95_r
#OPTFC= -O3 -qsuffix=cpp=f90 -qinitauto -qautodbl=dbl4
##OPT_LK= -O3 -qinitauto -qautodbl=dbl4
#CFLAGS= -O3 -qinitauto -qautodbl=dbl4
#CC=$(PREP)mpixlc_r
#PLATFORM=bgq_xlf

# Cray
#FC = ftn
#OPTFC = -e Fm
#CC = cc
#CFLAGS = 

#-----------------------------------------------------------------------
# Normally no need to change anything below

# include PATH 
ifeq ($(FFT),generic)
  INC=
else ifeq ($(FFT),fftw3)
  INC=$(FFTW3_INCLUDE)
else ifeq ($(FFT),essl)
  INC=$(ESSL_INCLUDE)
endif

# library path
ifeq ($(FFT),generic)
   LIBFFT=
else ifeq ($(FFT),fftw3)
   LIBFFT=$(FFTW3_LIB)
else ifeq ($(FFT),essl)
   LIBFFT=$(ESSL_LIB)
endif

# List of source files
# 注意这边编译的模块，一般是需要的mod生成放在前面首先编译，如果不放前面会报错，解决办法 就是文件名放在前面即可,具体可以查看关于Makefile Fortran
SRC = decomp_2d.f90 glassman.f90 fft_$(FFT).f90 module_param.f90 io.f90 variables.f90 poisson.f90 schemes.f90 implicit.f90 convdiff.f90 user_module.f90 incompact3d.f90 navier.f90 derive.f90 parameters.f90 tools.f90 visu.f90

#-----------------------------------------------------------------------
# Normally no need to change anything below

ifneq (,$(findstring DSHM,$(OPTIONS)))
SRC := FreeIPC.f90 $(SRC)  
OBJ =	$(SRC:.f90=.o) alloc_shm.o FreeIPC_c.o
else
OBJ =	$(SRC:.f90=.o)
endif	

OPTION=$(OPTIONS)
from:=-D
to:=-WF,-D
TMP=$(subst $(from),$(to),$(OPTIONS))
ifeq ($(PLATFORM),bgp_xlf)
   OPTION=$(TMP)
endif
ifeq ($(PLATFORM),bgq_xlf)
   OPTION=$(TMP)
endif

all: incompact3d

alloc_shm.o: alloc_shm.c
	$(CC) $(CFLAGS) -c $&amp;lt;

FreeIPC_c.o: FreeIPC_c.c
	$(CC) $(CFLAGS) -c $&amp;lt;

incompact3d : $(OBJ)
	$(FC) -O0 -g -o $@ $(OBJ) $(LIBFFT)

%.o : %.f90
	$(FC) $(OPTFC) $(OPTION) $(INC) -c $&amp;lt;

.PHONY: clean 
clean:
	rm -f *~ *.o *.mod incompact3d

.PHONY: realclean
realclean: clean
	rm -f *~ \#*\#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行方式:
我的电脑刚好是8线程，就用8线程运行，你也可以选用4或者更多.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mpirun -np 8  incompact3d  &amp;gt; tail.out &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#4 The Algorithm of the DNS in Incompact3d&lt;/p&gt;
&lt;p&gt;Incompact3d的执行流程基本上是下面几个(当然得仔细阅读，并反复比对).我写得这段英文大体能够对得上.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;1. Initial the velocity field with noise(init subroutine).
2. Start the iterative process by guessing the pressure field. First we use convdiff subroutine take convection and diffusion of the flow into consideration.And then use pre_correc subroutine to correction the velocity value with the specified boundary condition.
3. Use the values of u,v,and w to get the initialize of the pp3 in the spectral space from subroutine divergence(…pp3,1…)(first sign to turbulent spot).Then we use poisson solver decomp_2d_poisson_stag to get the value of the pp3 in the spectral space.
4. Since they were obtained from the guessed values of u,v,w,the values pp3,when substituted into the divergence equation,will not necessarily satisfy that that equation.Hence ,using the gradp subroutine,get the pressure gradients in the physics space,then using corgp subroutine ,get the velocity correction by the pressure gradient in the physics space.Use subroutine divergence(…dv3,2…) to do another monitor for turbulent spot(second sign to turbulent spot) .At the end of the current step, we go to step2 again until the simulation have been fully developed.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Incompact3d如何通过结果处理出迹线</title>
      <link>https://jueqingsizhe66.github.io/archives/incompact3dru-he-tong-guo-jie-guo-chu-li-chu-ji-xian/</link>
      <pubDate>Mon, 22 Jun 2015 16:20:48 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/incompact3dru-he-tong-guo-jie-guo-chu-li-chu-ji-xian/</guid>
      <description>&lt;p&gt;Incompact3D获得的数据都是二进制的数据文件，为了获得内部的文件
需要进一步通过编程获得，下面是一个获得pathline的源代码。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 module.f90文件读取 nx ny nz的值&lt;/li&gt;
&lt;li&gt;把下面的源代码编译并放在ux uy uz所在的文件夹当中&lt;/li&gt;
&lt;li&gt;进一步的相关信息，可以参考注释。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;PROGRAM b
IMPLICIT NONE
Integer,parameter :: nx=128,ny=129,nz=84 
INTEGER :: I,J,K,COUNT,LN=128,COL=129,VOL=84
REAL(8),DIMENSION(nx,ny,nz) :: ux,uy,uz
CHARACTER(len=12)::NAME1=&amp;quot;Incompact3d&amp;quot;,NAME2=&amp;quot;ux&amp;quot;,NAME3=&amp;quot;uy&amp;quot;,NAME4=&amp;quot;uz&amp;quot;
character(len=15) :: temp,temp1,temp2,temp3
CHARACTER(len=20) :: CFILEux
integer :: num

real,dimension(nx):: y1
real,dimension(ny):: y2
real,dimension(nz):: y3

!generation of the mesh
do i=1,nx
   y1(i)=(i-1)*0.098174770425 !0.8 is DX ! incompact3d.prm的配置长度除以网格尺度即可。
enddo


do j=1,ny
   y2(j)=(j-1)*0.015503875968992248 !0.8 is DY
enddo


do k=1,nz
   y3(k)=(k-1)*0.04986655005702381!0.8 is DZ
enddo


! 下面只是对于读取文件进行的一个后处理，只是为了方便批处理而已
22 format(I1)
23 format(I2)
DO num=1,30
    if(num .lt. 10) then
        write(temp,22) num
        temp1 =trim(NAME2)//trim(&#39;00&#39;)//trim(temp)
        temp2 =trim(NAME3)//trim(&#39;00&#39;)//trim(temp)
        temp3 =trim(NAME4)//trim(&#39;00&#39;)//trim(temp)
    else 
        write(temp,23) num
        temp1 =trim(NAME2)//trim(&#39;0&#39;)//trim(temp)
        temp2 =trim(NAME3)//trim(&#39;0&#39;)//trim(temp)
        temp3 =trim(NAME4)//trim(&#39;0&#39;)//trim(temp)
    end if
    
! 产生实际的文件名
CFILEux=trim(&#39;./pathchange/&#39;)//trim(temp1)//&#39;.dat&#39;
!read the ux 读取ux00*的数据
OPEN(10,FILE=temp1,FORM=&#39;UNFORMATTED&#39;,&amp;amp;
ACCESS=&#39;DIRECT&#39;, RECL=8, STATUS=&#39;OLD&#39;)

! read the uy
OPEN(11,FILE=temp2,FORM=&#39;UNFORMATTED&#39;,&amp;amp;
ACCESS=&#39;DIRECT&#39;, RECL=8, STATUS=&#39;OLD&#39;)
!read the uz
OPEN(12,FILE=temp3,FORM=&#39;UNFORMATTED&#39;,&amp;amp;
ACCESS=&#39;DIRECT&#39;, RECL=8, STATUS=&#39;OLD&#39;)

! 新建一个结果文件，并添加上tecplot的数据头

OPEN(20,FILE=CFILEux,FORM=&#39;FORMATTED&#39;)
WRITE (20,&#39;(A6,A12)&#39;)               &#39;TITLE=&#39;,TRIM(ADJUSTL(NAME1))
 WRITE (20,&#39;(A36)&#39;)    &#39;VARIABLES=&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;,&amp;quot;Z&amp;quot;,&amp;quot;VX&amp;quot;,&amp;quot;VY&amp;quot;,&amp;quot;VZ&amp;quot;&#39;
      WRITE (20,&#39;(A7,I4,A1,A2,I4,A1,A2,I4,A1,A7)&#39;) &#39;ZONE I=&#39;,LN,&#39;,&#39;,&#39;J=&#39;,COL,&#39;,&#39;,&#39;K=&#39;,VOL,&#39;,&#39;,&#39;F=POINT&#39;

COUNT = 1
DO K=1,nz
    DO J=1,ny
        DO I=1,nx
            READ(10,REC=COUNT) ux(I,J,K)
            READ(11,REC=COUNT) uy(I,J,K)
            READ(12,REC=COUNT) uz(I,J,K)
        !    WRITE(20,30) I,J,K,ux(I,J,K),uy(I,J,K),uz(I,J,K)
             WRITE(20,30) y1(i),y2(j),y3(k),ux(I,J,K),uy(I,J,K),uz(I,J,K)
            30 format(I3,1X,I3,1X,I3,1X,E11.4,1x,E11.4,1x,E11.4)
            COUNT = COUNT + 1
        ENDDO
    ENDDO
ENDDO
ENDDO
CLOSE(10)
CLOSE(11)
CLOSE(10)
CLOSE(20)
END PROGRAM b
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>积累和重写对于程序员很重要</title>
      <link>https://jueqingsizhe66.github.io/archives/ji-lei-he-zhong-xie-dui-yu-cheng-xu-yuan-hen-zhong-yao/</link>
      <pubDate>Mon, 22 Jun 2015 15:35:19 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/ji-lei-he-zhong-xie-dui-yu-cheng-xu-yuan-hen-zhong-yao/</guid>
      <description>&lt;p&gt;积累，你才能厚积而薄发。
重写，你才能进一步认识你的积累.
重写有时候会带来对于知识的进一步深入的理解.&lt;/p&gt;
&lt;p&gt;今天听了&lt;a href=&#34;http://www.fcode.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fcode&lt;/a&gt;的一个视频讲座，一个立志于开源的非营利小团队，还有一个专门的Fortran Coder的qq群。听完感觉，自己真的很有缺点，之前上过一个java培训班，其实套路都一样，写代码，重复写，直到你睡觉醒来还能写，喝了半斤52度二锅头还能写。&lt;/p&gt;
&lt;p&gt;并且需要在一定的时间内回顾，重写之前你写过的东西，虽然听起来很简单，可是我经常也是忘记了这个该做的工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;积累&lt;/li&gt;
&lt;li&gt;重写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两项对于学习任何一个科目都至关重要和必不可少。武功再高,也要练操。&lt;/p&gt;
&lt;p&gt;fortran是简单，而且是基于解决数学、物理问题,擅长科学计算，而不是利用它做一个漂亮的界面。基本上fortran的很多算法都可以通过网络资源搜索得到，并进行适当修改，这也需要你去积累。但是fortran给你思维层次的改造不是特别明显，所以从这个角度来说，我并不觉得他是一门好的语言，但是他的计算能力还真的不错，特别是矩阵计算能力。也许我也该经常整理fortran相关的编程知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>人的赌徒心理</title>
      <link>https://jueqingsizhe66.github.io/archives/ren-de-du-tu-xin-li/</link>
      <pubDate>Thu, 18 Jun 2015 16:35:30 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/ren-de-du-tu-xin-li/</guid>
      <description>&lt;p&gt;大多数人不会觉得自己的判断是错误的,他们觉得自己能够赢下不确定性。
我们很多人对自己的行为真的无法做到清楚的解释,生活中的很多问题都是
概率性问题，真品还是赝品？需要还是不需要？等。不确定性总是我们生活中
不可缺少的自演，而很多赌徒却是相信自己的运气，而赌场却相信科学。见好就收
能够舍军保帅的人永远是少数。所以很多情况下是，房价长的时候，好好地，房价
跌的时候，经常就会有跳楼事件（股市也是如此）。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/dubo.jpg&#34; alt=&#34;gambling&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;http://blog.csdn.net/sw2wolf/article/details/7086230&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;孙惟微：《赌客信条：你不可不知的行为经济学》&lt;/a&gt;。这是一本相当有趣的人类行为学方面的书籍。
　“固守现状”并非现状真的多么吸引人，根本原因在于人们害怕懊悔，厌恶悔恨。你觉得自己害怕懊悔和厌恶悔恨？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;人生而需要面对未来，而未来总有诸多的不确定性。需要我们不断地作出选择。因而人生而为“赌客”。

　　不确定性的来源主要有两种：自然的不确定性与其他赌客采取行动的不确定性。

　　大部分生活中最重要的问题，都只是概率的问题。

　　你是个“见好就收”的人吗?投资时，多数人的表现是“赔则拖，赢必走”。在股市中，普遍有一种“卖出效应”，也就是投资者卖出获利的意向，要远远大于卖出亏损股票的意向。这与“对则持，错即改”的投资核心理念背道而驰。

　　买彩票是赌自己会走运，买保险是赌自己会倒霉。这是两种很少发生的事情，但人们却十分热衷。

　　何谓小概率事件?就是几乎不可能发生的事件。

　　房地产公司拍下“地王”，就如同一个百货公司开一家奢侈品店，赚不赚钱其实不重要，关键是提升这个百货公司的档次。

　　如果你活在一个不太规则的商业氛围里，就要通晓梁实秋老先生的杀价艺术------要有杀人的胆量、钓鱼的耐心、政治家的脸皮。

　　收入本来就不多的“月光族”，反而严重烧包，这也就是孟子说的“无恒产者无恒心”。

　　人们在赢钱之后，就愿意冒更大的风险。

　　多吃不宜健康，这道理谁都懂，可是在自助餐厅吃八分饱的人还是少数。

　　赌场之所以存在，就是因为大批概率盲的存在。

　　赌博业本质上是娱乐业。从本质上认识了赌场，就如同接种了赌博疫苗，从此有了抗病态赌博的免疫能力。

　　赌家相信的是运气，赌场相信的是数学。

　　大数法则是保险公司、赌场、撞骗的骗徒，赖以存在的基础。

　　千金难买早知道。

　　房价上涨的时候不会死人，但房价下跌的时候却一定会死人。

　　自负的疯子常常能够吸引追随者，内省的智者缺乏吸引力。

　　“固守现状”并非现状真的多么吸引人，根本原因在于人们害怕懊悔，厌恶悔恨。

　　别无选择与选择过多皆是烦恼。

　　绝对理性，其实是一种非理性。

　　远见太远，也是一种贪婪。

　　不仅货币有时间价值，社会行为也有时间价值。

　　声誉有时间价值，张爱玲呼吁：成名要趁早。

　　感情有时间价值，民谚早总结：衣不如新，人不如旧。

　　冯仑曾有妙语：时间决定一件事情的性质：赵四小姐16岁去大帅府跟张学良，她去一年，是作风问题;去三年，是瞎搅和;一去三十年，那就是爱情。

　　当下的快乐要比将来的快乐有价值。

　　人们愿意消费分散到各个时期，而不是集中在一个时期。人们更愿意在30分钟内慢慢吃掉一串葡萄，而不是一分钟全干掉。

　　“傻瓜力量大”，是有一定道理的。在自然选择的过程中，“自欺”可以给人勇气，可以“欺骗”对手，从而在斗争中存活下来。

　　其实，过多的资讯对投资者来说并无帮助，有时反而更象一种噪音。

　　只有将不确定性变为确定性，人类才能获得安全感，才能睡得香，这是亘古不变的思维习惯。

　　高手，就是对自己诚实的人。

　　预测准确度越高的人，越少出现过度自信的现象。

　　正所谓：“一瓶子不满，半瓶子晃荡”。顶级交易员、桥牌高手、专业赌徒很少会表现出过度自信。尤其投资新手，刚刚上手时，那种自信，溢于言表。

　　人类的终极追求是幸福，而不是金钱。

　　曾有一个富人触犯刑律，要被剥夺生命。最后他自愿捐出价值数百亿美元的油田，以求免死。在生命面前，其他的东西真的很廉价。

　　“行动的懊悔”多是短期的，可是该做的事情没有做，就长期来看却更为痛苦。

　　概率法则，是偶然中的必然。

　　可是，有些人就是不肯承认运气。把运气视为唯心主义的人，才是真正的唯心主义者。

　　绝大多数人都是概率盲，就如同有些人天生就是路痴一样。
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>阅读openfoam源代码的小工具</title>
      <link>https://jueqingsizhe66.github.io/archives/yue-du-openfoamyuan-dai-ma-de-xiao-gong-ju/</link>
      <pubDate>Wed, 10 Jun 2015 23:19:42 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/yue-du-openfoamyuan-dai-ma-de-xiao-gong-ju/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;当你阅读源代码你是否厌倦了cd来cd去，于是想把他们堆在一个文件内&lt;/li&gt;
&lt;li&gt;而堆起来又不好看，于是想要打扮一下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是写了下面的小程序，估计对于阅读有帮助，主要用到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shell变量处理&lt;/li&gt;
&lt;li&gt;shell变量长度&lt;/li&gt;
&lt;li&gt;find显示相对全路经&lt;/li&gt;
&lt;li&gt;==两边__不能有__空格，然而在赋值的时候必须没有空格&lt;/li&gt;
&lt;li&gt;利用函数思想，封装小寒数&lt;/li&gt;
&lt;li&gt;美观，把一个文件当作一个夹子进行显示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意针对每一个版本都需要进行适当的修改&lt;/strong&gt;.在getFile中有一个sed命令一定要注意，那是删除行首的7行，针对不同文件，需要适当修改.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash - 
#===============================================================================
#
#          FILE: browser.sh
# 
#         USAGE: ./browser.sh 
# 
#   DESCRIPTION:  注意针对每一个版本都需要进行适当的修改
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Ye Zhaoliang (), zhaoturkkey@163.com
#  ORGANIZATION: YZL
#       CREATED: 2015年06月10日 21:50
#      REVISION:  ---
#===============================================================================
#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  generateChapter
#   DESCRIPTION:  针对不同额文件采用不同的处理方法，判断目录 和判断脚本是一个重要的操作
#                 但是更为重要的是 find获得文集拿的绝对路径(相对于当前文件)
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------

generateChapter()
{
    # 妙用find 得到当前目录的相对路径 不需要不断的进入目录
    for var in `find . -name &amp;quot;*&amp;quot;`
    do
        if [[ -d  $var ]] # &amp;lt; cannot . Error
        then
            echo &amp;quot;${currentDir}${var#.}是一个目录&amp;quot; # 使用#号来删除之前的点号
        elif [[ &amp;quot;${var##*/}&amp;quot; == &amp;quot;${0}&amp;quot; ]] # 一定要注意等式两边有空格
        then
            echo &amp;quot;${currentDir}${var#.} ${0} 脚本文件不处理&amp;quot;
        else
            getFile ${currentDir}${var#.}
        fi

    done
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getFile
#   DESCRIPTION:  在每个文件的头部添加一些信息
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
getFile()
{
    startString=&amp;quot;# -------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;quot;$1&amp;quot; started&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------#&amp;quot;
    endString=&amp;quot;# --------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;quot;$1&amp;quot; ended &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------#&amp;quot;
       #echo &amp;quot;&amp;quot; &amp;gt;&amp;gt;summary.sh
    #echo -e &amp;quot;\033[44;37m -------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;quot;$1&amp;quot; started&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------\033[0m&amp;quot; &amp;gt;&amp;gt;summary.sh
    #echo  &amp;quot;# -------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;quot;$1&amp;quot; started&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo $startString &amp;gt;&amp;gt; summary.sh
    echo &amp;quot;#`printf &amp;quot;%$(( ${#startString}-2 ))s&amp;quot; &amp;quot; &amp;quot;`#&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo &amp;quot;#`printf &amp;quot;%$(( ${#startString}-2 ))s&amp;quot; &amp;quot; &amp;quot;`#&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo &amp;quot;#`printf &amp;quot;%$(( ${#startString}-2 ))s&amp;quot; &amp;quot; &amp;quot;`#&amp;quot; &amp;gt;&amp;gt;summary.sh ### 不加上$反而不行
   # echo &amp;quot;#&amp;quot; &amp;gt;&amp;gt;summary.sh
   # echo &amp;quot;#&amp;quot; &amp;gt;&amp;gt;summary.sh
    sed &#39;1,7d&#39; $1 &amp;gt;&amp;gt; summary.sh
    echo &amp;quot;#`printf &amp;quot;%$(( ${#endString}-2 ))s&amp;quot; &amp;quot; &amp;quot;`#&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo &amp;quot;#`printf &amp;quot;%$(( ${#endString}-2 ))s&amp;quot; &amp;quot; &amp;quot;`#&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo &amp;quot;#`printf &amp;quot;%$(( ${#endString}-2 ))s&amp;quot; &amp;quot; &amp;quot;`#&amp;quot; &amp;gt;&amp;gt;summary.sh
    #echo &amp;quot;#&amp;quot; &amp;gt;&amp;gt;summary.sh
    #echo &amp;quot;#&amp;quot; &amp;gt;&amp;gt;summary.sh
    #echo -e &amp;quot;\033[43;37m --------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;quot;$1&amp;quot; ended &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------\033[0m&amp;quot; &amp;gt;&amp;gt; summary.sh
    #echo &amp;quot;# --------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;quot;$1&amp;quot; ended &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------&amp;quot; &amp;gt;&amp;gt; summary.sh
    echo $endString &amp;gt;&amp;gt; summary.sh
    echo &amp;quot;&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo &amp;quot;&amp;quot; &amp;gt;&amp;gt;summary.sh
    echo &amp;quot;&amp;quot; &amp;gt;&amp;gt;summary.sh
    
}

currentDir=`pwd`

# 如果存在 summary.sh 证明已经存在了，就先把删掉， 因为这里是
# 采用追加的方式，而不是写入。
if [[ -e ./summary.sh ]]
then 
    rm -rf ./summary.sh
fi
# 调用产生所有的文件夹内的数据到一个文件中

generateChapter

#sed -i &#39;/C++/d&#39; summary |sed &#39;/=========/d&#39;|sed &#39;/OpenFOAM/d&#39; | sed &#39;/Version/d&#39; | sed &#39;/Web/d&#39;|sed &#39;/anipulation/d&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结果显示&#34;&gt;结果显示&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# -------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;/openfoamF708/tutorials/incompressible/icoFoam/cavity/system/fvSolution started&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------#
#                                                                                                                                        #
#                                                                                                                                        #
#                                                                                                                                        #
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    &amp;quot;system&amp;quot;;
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    p
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0;
    }

    U
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-05;
        relTol          0;
    }
}

PISO
{
    nCorrectors     2;
    nNonOrthogonalCorrectors 0;
    pRefCell        0;
    pRefValue       0;
}


#                                                                                                                                        #
#                                                                                                                                        #
#                                                                                                                                        #
# --------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;/openfoamF708/tutorials/incompressible/icoFoam/cavity/system/fvSolution ended &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------#



# -------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;/openfoamF708/tutorials/incompressible/icoFoam/cavity/system/fvSchemes started&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-------------------#
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>U&#43;-Y&#43;</title>
      <link>https://jueqingsizhe66.github.io/archives/u-plus-y-plus/</link>
      <pubDate>Sun, 31 May 2015 09:31:05 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/u-plus-y-plus/</guid>
      <description>&lt;p&gt;这个gnuplot脚本是我用于处理Incompact3d产生出来的统计结果(如何统计部分，暂时未写)的画图脚本。&lt;/p&gt;
&lt;h2 id=&#34;数据段&#34;&gt;数据段&lt;/h2&gt;
&lt;p&gt;注意gnuplot处理数据文件按照空行划分index部分。所以下面的部分总共有四个index，调用方式是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot &amp;ldquo;文件名&amp;rdquo; index 0   第一部分文件信息的打印&lt;/li&gt;
&lt;li&gt;plot &amp;ldquo;文件名&amp;rdquo; index 1&lt;/li&gt;
&lt;li&gt;plot &amp;ldquo;文件名&amp;rdquo; index 2&lt;/li&gt;
&lt;li&gt;plot &amp;ldquo;文件名&amp;rdquo; index 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体看gnuplot脚本部分。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;0 2.9684e-24
0.7369 0.73552
1.4746 1.4677
2.2139 2.195
2.9556 2.915
3.7005 3.6242
4.4495 4.3184
5.2034 4.9934
5.9631 5.6455
6.7295 6.2713
7.5034 6.8686
8.2859 7.4358
9.078 7.9722
9.8806 8.4777
10.695 8.9528
11.522 9.3986
12.363 9.8162
13.219 10.207
14.092 10.573
14.983 10.916
15.894 11.236
16.825 11.537
17.779 11.819
18.759 12.084
19.764 12.334
20.799 12.569
21.864 12.791
22.963 13.001
24.099 13.201
25.273 13.391
26.49 13.572
27.753 13.745
29.065 13.911
30.431 14.071
31.855 14.225
33.343 14.374
34.899 14.52
36.529 14.661
38.24 14.8
40.04 14.936
41.936 15.07
43.936 15.202
46.052 15.333
48.292 15.464
50.669 15.594
53.196 15.725
55.887 15.856
58.756 15.989
61.819 16.124
65.096 16.262
68.603 16.402
72.361 16.544
76.389 16.69
80.706 16.838
85.33 16.988
90.276 17.139
95.557 17.288
101.18 17.434
107.14 17.572
113.42 17.7
120 17.813
126.85 17.906
133.91 17.975
141.11 18.017
148.4 18.03


5 0
5 20


30 0
30 20


120 0
120 20

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gnuplot处理部分&#34;&gt;gnuplot处理部分&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-gnuplot&#34;&gt;set ter &#39;png&#39;
set out &#39;fit1.png&#39;

set xlabel &amp;quot;Y+&amp;quot;
set ylabel &amp;quot;U+&amp;quot;
set xtics font &#39;Times-Roman, 15&#39;
f(x)=a*x+b
g(x)=1/k*log(x)+B
fit [0:5] f(x) &amp;quot;umfit.dat&amp;quot; index 0 via a,b
print &amp;quot;a:=&amp;quot;,a,&amp;quot;b=&amp;quot;,b
fit [30:148] g(x) &amp;quot;umfit.dat&amp;quot; index 0 via k,B
print &amp;quot;k=&amp;quot;,k,&amp;quot;B=&amp;quot;,B
set xtics 20
set samples 1280
set key right bottom box
set arrow from 20,5 to  5,2 
set label  sprintf(&amp;quot;viscous sub-layer fit:\n f(x)=%g*x +%g&amp;quot;, a,b)  at 20,6 
set arrow from 90,12 to  70,16
set label sprintf(&amp;quot;logarithm range fit:\n f(x)=1/%g*log(x) +%g&amp;quot;,k,B) at 90,11 

#set logscale x
#set xrange
#set yrange [0:0.5]
#[0:220][0:0.04]   # the most important place is here
plot  [0:148][0:20]  &amp;quot;umfit.dat&amp;quot; index 0 w lp pt 1  t &amp;quot;U+--Y+&amp;quot;,f(x) w l lt -1 lw 2 t &amp;quot;linear-fit&amp;quot;,g(x)  w  l lt 3 lw 2 t &amp;quot;log-fit&amp;quot;,\
 &amp;quot;&amp;quot; index 1 w l lt 0 t &amp;quot;linear-fit-end&amp;quot;,&amp;quot;&amp;quot; index 2 w l lt 0 t &amp;quot;log-law-start&amp;quot;,&amp;quot;&amp;quot; index 3 w l lt 0 t &amp;quot;log-law-end&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;处理结果&#34;&gt;处理结果&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/incompact3d/fit1.png&#34; alt=&#34;处理结果&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;一些实时监测部分&#34;&gt;一些实时监测部分&lt;/h2&gt;
&lt;h3 id=&#34;执行部分&#34;&gt;执行部分：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a.sh&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mpirun -np 8  incompact3d  &amp;gt;&amp;gt; tail.out &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取信息部分&#34;&gt;获取信息部分&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;image.sh&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;more tail.out | grep DIV | grep U* |grep Max|sed &#39;/final/d&#39;| awk -F&#39;=&#39; &#39;{print $2}&#39; |sed &#39;1,3d&#39;&amp;gt; divu
more tail.out | grep UT | awk  &#39;{print $4}&#39;|sed &#39;1,2d&#39; &amp;gt; flow-rate-correction-factor

#more tail.out | grep zhao | awk &#39;{print $2,$3,$4}&#39; &amp;gt; stretching

more tail.out | grep PHI | grep max|awk -F&#39;=&#39; &#39;{print $2}&#39; &amp;gt; PHImax

more tail.out | grep PHI|grep MOYEN | awk  -F&amp;quot;:&amp;quot; &#39;{print $2*10^4}&#39;&amp;gt; PHImoyen
#gnuplot monitorFLOWRATE.gnu

bash monitor.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打印部分&#34;&gt;打印部分&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;monitor.sh&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash
#===============================================================================
#
#          FILE:  monitor.sh
# 
#         USAGE:  ./monitor.sh 
# 
#   DESCRIPTION:  
# 
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Ye Zhaoliang (YZL), zhaoturkkey@163.com
#       COMPANY:  NCEPU
#       VERSION:  1.0
#       CREATED:  2014年10月28日 09时42分15秒 CST
#      REVISION:  ---
#===============================================================================

# set yrange [0:2]
# set xlabel
# set ylabel
function mainpoint()
{
 #   echo $0;
#    echo $1;
gnuplot&amp;lt;&amp;lt;EOF
set ter &#39;png&#39;
set out &#39;$1.png&#39;
set grid
plot &#39;$1&#39; w p pt 2
EOF

}

function mainline()
{
 #   echo $0;
 #   echo $1;
gnuplot&amp;lt;&amp;lt;EOF
set ter &#39;png&#39;
set out &#39;$1.png&#39;
set grid
set yrange [0:2]
plot &#39;$1&#39; w l lt 2
EOF


}

#mainpoint ux2
#mainpoint uy2
#mainpoint uz2
#mainpoint ux5
#mainpoint uy5
#mainpoint uz5
#mainline uy2
mainpoint divu
mainpoint flow-rate-correction-factor
#mainpoint stretching
mainpoint PHImax
mainpoint PHImoyen
#mainpoint averageux2
#mainpoint averageux5
#mainpoint rxx2
#mainpoint rxx5
#mainpoint dudy_bottom_spatial_only
#mainpoint dudy_top_spatial_only
#mainpoint dudy_bottom_spatial_time
#mainpoint dudy_top_spatial_time

#new add  stress
#mainpoint umean
#mainpoint vmean
#mainpoint wmean
##mainpoint uu
##mainpoint vv
#mainpoint ww

#mainpoint stressu
#mainpoint stressv
#mainpoint stressw
#mainpoint stressuv
#mainpoint stressuw
#mainpoint stressvw
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;整合部分&#34;&gt;整合部分&lt;/h3&gt;
&lt;p&gt;cut -c的目的是获取具体对应的时间步,然后把所有的png相关信息 放到对应时间步文件夹中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /home/Cedric/diric/src &amp;amp;&amp;amp; more tail.out |grep Time|awk &#39;{print $4}&#39; |tail -1|cut -c 1-6 |awk &#39;{cmd=&amp;quot;mkdir step&amp;quot;$1;system(cmd);system(&amp;quot;sh image.sh&amp;quot;);cmd2=&amp;quot;mv *.png step&amp;quot;$1;system(cmd2);} &#39;

# END{cmd3=&amp;quot;mv dudy* umean stress step&amp;quot;$1;system(cmd3)}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实时浏览&#34;&gt;实时浏览&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;切换到对应的文件夹
$ python -m SimpleHTTPServer 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就可以打开 127.0.0.1:8000进行浏览了。&lt;/p&gt;
&lt;h3 id=&#34;you-can-also-use-crontab-to-execute-program-in-real-time&#34;&gt;You can also use crontab to execute program in real time&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can copy the info below,but modified the datatime.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 23 19 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 23 19 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 0 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 0 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 1 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 1 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 2 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 2 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 3 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 3 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 4 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 4 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 5 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 5 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 6 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 6 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
0 7 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
30 7 20 6 * sh /home/simulation2_128-117-128Re4200/main.sh 
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Haskell在脑海里的踪迹</title>
      <link>https://jueqingsizhe66.github.io/archives/haskellzai-nao-hai-li-de-zong-ji/</link>
      <pubDate>Fri, 29 May 2015 14:59:44 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/haskellzai-nao-hai-li-de-zong-ji/</guid>
      <description>&lt;p&gt;基于范畴理论，在每一个范畴里面都包含一个objects和fmap关系，利用functor映射到不同的category。
可以继续思考的是一个fmap:(*-&amp;gt;*)
一个fmap是可以充当形参的，因为他正如在一个&lt;a href=&#34;https://www.haskell.org/onlinereport/list.html#sect17.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;List module&lt;/a&gt;中
一个一个的破折号和箭头构成的map关系被放进List这个category中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module List ( 
    elemIndex, elemIndices,
    find, findIndex, findIndices,
    nub, nubBy, delete, deleteBy, (\\), deleteFirstsBy,
    union, unionBy, intersect, intersectBy,
    intersperse, transpose, partition, group, groupBy,
    inits, tails, isPrefixOf, isSuffixOf,
    mapAccumL, mapAccumR,
    sort, sortBy, insert, insertBy, maximumBy, minimumBy,
    genericLength, genericTake, genericDrop,
    genericSplitAt, genericIndex, genericReplicate,
    zip4, zip5, zip6, zip7,
    zipWith4, zipWith5, zipWith6, zipWith7,
    unzip4, unzip5, unzip6, unzip7, unfoldr,

    -- ...and what the Prelude exports
    -- []((:), []), -- This is built-in syntax
    map, (++), concat, filter,
    head, last, tail, init, null, length, (!!),
    foldl, foldl1, scanl, scanl1, foldr, foldr1, scanr, scanr1,
    iterate, repeat, replicate, cycle,
    take, drop, splitAt, takeWhile, dropWhile, span, break,
    lines, words, unlines, unwords, reverse, and, or,
    any, all, elem, notElem, lookup,
    sum, product, maximum, minimum, concatMap, 
    zip, zip3, zipWith, zipWith3, unzip, unzip3
    ) where
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们所看到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data  Bool  =  False | True deriving 
                             (Read, Show, Eq, Ord, Enum, Bounded)
data Int = -65532|...|-1|0|1|2|...|65532
data Integer = ...-2|-1|0|1|2|3|4|...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从这边我们可以看到False ，True， 1，2，3，4&amp;hellip;.叫做Data constructor
而Bool,Integer叫做Type Constructor,所以你完全可以把类型当作数据，而这个类型包含表达式、函数、数据。&lt;/p&gt;
&lt;p&gt;类也包含&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子类型 Integer  Char   Integer-&amp;gt;Char(functions mapping from Integer to Char)&lt;/li&gt;
&lt;li&gt;结构类型 [Integer] 数字列表 (Integer,Char)数字字符tuple&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;1::Int
inc::Integer-&amp;gt;Integer
[1]::[Integer]
(&#39;b&#39;,4)::[Char,Integer]

::可以读作 has type类型为
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;我们也会看到很多类的继承&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;  class Foo a =&amp;gt; Bar a where ...
  
  instance (Eq a, Show a) =&amp;gt; Foo [a] where ...
  
  instance Num a =&amp;gt; Bar [a] where ...


  class (Eq a) =&amp;gt; Ord a where
    (&amp;lt;),(&amp;lt;=),(&amp;gt;=),(&amp;gt;)::a-&amp;gt;a-&amp;gt;Bool
    max,min          ::a-&amp;gt;a-&amp;gt;a
    ----此时Eq叫做Ord的子类
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实更多的可以参考&lt;a href=&#34;https://www.haskell.org/onlinereport/standard-prelude.html#sect8.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Haskell 98 Report&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然你事先得知道类的定义&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;class cx =&amp;gt; C u where { cbody }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;class 方法被叫做haskell里的顶层声明。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;而有一些比较有趣的lambda转换&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;\x-&amp;gt;\y-&amp;gt;(+) x  y ---&amp;gt;  \x y -&amp;gt; (+) x  y

(x+) --&amp;gt; \y-&amp;gt;x+y
(+y) --&amp;gt; \x-&amp;gt;x+y
(+)  --&amp;gt; \x y -&amp;gt; x+y

(.) :: (b-&amp;gt;c) -&amp;gt;(a-b)-&amp;gt;(a-&amp;gt;c)
f.g  = \x-&amp;gt; f (g x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在你编写函数的时候：
一个数据组和可以变为(x:xs) == x+xs完整的数据组和 ，只不过x代表这个数据组和的head部分，而xs表示tail部分
而如果 s@(x:xs) 其中的s代表就是整个数据组和了，这是一个不错的技巧。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;f (x:xs) = x❌xs
f s@(x:xs) = x:s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然你也可能遇到Wild-cards情况&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;head (x:_) = x
head (_:xs) = xs
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;另外一个分支关于模式匹配的相似效果是case定义
f p11 &amp;hellip; p1k = e1
&amp;hellip;
f pn1 &amp;hellip; pnk = en
其中pij是模式组合，&lt;/p&gt;
&lt;p&gt;如果你使用case进行书写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;f x1 x2 ... xk = case (x1,...,xk) of (p11,...,p1k) -&amp;gt; e1
                                        ...
                                      (pn1,...,pnk)-&amp;gt;en
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比如下面：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;--采用模式匹配方式
take _ [] = []
take 0 [] = []
take n (x:xs) = x:take (n-1) xs


--采用case方式
take m ys = case (m,ys) of
    (0,_) -&amp;gt; []
    (_,[]) -&amp;gt; []
    (n,x:xs) -&amp;gt; x:take (n-1) xs
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;一个比较重要的functor的定义，因为它用于范畴之间的链接，主要是一个Functor类的实现和fmap函数的定义&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;class Functor f where
    fmap :: (a-&amp;gt;b) -&amp;gt; f a-&amp;gt;f b


对应的Functor实例是
instance Functor Tree where
    fmap f (Leaf x) = Leaf (f x)
    fmap f (Branch t1 t2) = Branch (f t1) (f t2)

之所以写上这个你会发现，我们使用
Date Tree a= Leaf a| Branch a a
只是定义了类型，但是该类型（或者说大点，叫做范畴）并没有定义fmap，基本上所有的calss类型定义完之后都需要使用instance Functor进行fmap的
定义,这样对象和映射的组合才够成了范畴。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可能一直在用，但是并未知晓。当然上面需要特别注意的是实例声明额时候使用的是Tree，而不是Tree a.
也就是haskell和c++\java不同的是类型变量和methods的定义是分开的。
Haskell类类似于java的interface，定义的是一个协议，而不是一个定义一个对象本身。而且最重要的一个区别是haskell没有访问控制
修饰符比如public 、private。取而代之的是使用module模块系统用来隐藏和显示一个类的组成。&lt;/p&gt;
&lt;p&gt;其实写到这边，模块系统你可能有所理解，当然模式匹配在函数定义中也是训练的很多，参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/05/21/haskellku-wen-dang-jie-gou/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Haskell库文档结构&lt;/a&gt;
但是关于instance，你接触、练习还是有点少，所以这部分内容可以继续探索，包括IOMonad（一个新的IO范畴，可以当做一种抽象数据类型）
也包括图形化的制作等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>梁公-问题的专注者</title>
      <link>https://jueqingsizhe66.github.io/archives/liang-gong-wen-ti-de-zhuan-zhu-zhe/</link>
      <pubDate>Thu, 28 May 2015 12:57:00 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/liang-gong-wen-ti-de-zhuan-zhu-zhe/</guid>
      <description>&lt;p&gt;为什么要想到要写关于&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/%E6%A2%81%E6%BC%B1%E6%BA%9F&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;梁公&lt;/a&gt;的故事和著作，因为他真的是以
一个学者的心态在思考着社会、国家、学问等事情。从14岁起，
他的脑袋就开始因为一个又一个问题链，有了问题就开始解决问题。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/liang.jpg&#34; alt=&#34;梁簌溟&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;梁公是一个哲学家、儒家大师、思想家，曾有一个外国人专程过来找他来讨论哲学问题，并著书。其实我本不该写这篇，因为我做的功课不够，写的没质感，也缺乏深度。
我只是想把脑袋里对老先生的一点印象写出来，当然文章写出来不应该像是橡皮擦一样，就直接忘记了，而是当做一种回忆，也算一种传播。下面是梁公的基本著作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/znhJhEISjWFXk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我生有涯愿无尽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/CROEYjOwnFec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中国文化要义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/znhJhEISk7Wi3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;人心与人生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vdisk.weibo.com/s/sVlSCa34QXkZ0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;东西文化及其哲学&lt;/a&gt;
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/liangsu1.jpg&#34; alt=&#34;梁簌溟2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一次，看到梁公一脸的严肃，都让我宁静了一些，多了一些思考。写得不多当作是一点回忆。&lt;/p&gt;
&lt;p&gt;然而我倒是清楚一点，博客、微博、广告之类的作用，应该跟&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/08/influence_the_psychology_of_persuasion.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;公共的承认和承诺&lt;/a&gt;一样，能让人去遵守，所以当你写出来，你就会尽量想着去贴合他。&lt;/p&gt;
&lt;p&gt;从小到大，你是不是有点好高骛远，偷奸耍滑，其实踏实、认真、专注点就好。
梁公提到的&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/09/liang_shuming.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;八大境界&lt;/a&gt;：&lt;/p&gt;
&lt;h2 id=&#34;第一层境界形成主见&#34;&gt;第一层境界：形成主见&lt;/h2&gt;
&lt;p&gt;用心想一个问题，便会对这个问题有主见，形成自己的判断.无论多浅。别太把自己
和自己的观点当一回事&lt;/p&gt;
&lt;h2 id=&#34;第二层境界发现不能解释的事情&#34;&gt;第二层境界：发现不能解释的事情&lt;/h2&gt;
&lt;p&gt;冲突中找到自己。
有主见，才有你自己；有自己，才有旁人，才会发觉前后左右都是与我意见不同的人。&lt;/p&gt;
&lt;h2 id=&#34;第三层境界融汇贯通&#34;&gt;第三层境界：融汇贯通&lt;/h2&gt;
&lt;p&gt;你看到与自己想法相同的，感到亲切；看到与自己想法不同的，感到隔膜。有不同，就非求解决不可；有隔膜，就非求了解不可。于是，古人今人所曾用过的心思，慢慢融汇到你自己。&lt;/p&gt;
&lt;h2 id=&#34;第四层境界知不足&#34;&gt;第四层境界：知不足&lt;/h2&gt;
&lt;p&gt;。因为自己觉得不懂，就可以除去一切浮见，完全虚心地先求了解它&lt;/p&gt;
&lt;h2 id=&#34;第五层境界以简御繁&#34;&gt;第五层境界：以简御繁&lt;/h2&gt;
&lt;p&gt;学问浅的人说话愈多，思想不清楚的人名词越多(但是刚开始必须多说多讲)&lt;/p&gt;
&lt;h2 id=&#34;第六层境界运用自如&#34;&gt;第六层境界：运用自如+&lt;/h2&gt;
&lt;h2 id=&#34;第七层境界一览众山小&#34;&gt;第七层境界：一览众山小+&lt;/h2&gt;
&lt;h2 id=&#34;第八层境界通透&#34;&gt;第八层境界：通透+&lt;/h2&gt;
&lt;p&gt;插句刚刚听到的话(也许我的写作也像插话一样，喜欢跳跃性，这是逻辑上的一种缺陷)，现在的社会是既让马儿跑，又想让马儿吃上草。在这个社会跑着，可是跑的多了，草也没了，又不种草，马儿身心疲累。问题在哪里？
&lt;a href=&#34;http://res.chinapostdoctor.org.cn/BshWeb/bgxz.action?id=683d9fe7-590f-4961-ae58-280b142729e7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中国博士后站&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给自己写作的提醒</title>
      <link>https://jueqingsizhe66.github.io/archives/gei-zi-ji-xie-zuo-de-ti-xing/</link>
      <pubDate>Wed, 27 May 2015 16:31:32 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/gei-zi-ji-xie-zuo-de-ti-xing/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;为什么写作？&lt;/li&gt;
&lt;li&gt;该写什么？&lt;/li&gt;
&lt;li&gt;还需要什么？
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/xinran/lake.png&#34; alt=&#34;湖泊给你宁静&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;为什么写作&#34;&gt;为什么写作？&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;反思自己的所作所为，记得有一个生活培训教程，提出了一个问题方案，来提醒自己每天的记录。

- What did I enjoy doing today? 今天我做了什么开心的事情
- What would I like to more of? 我愿意继续做？
- What would I like to do less of? 我不想继续做什么？
- What did I learn today?   今天我学到了什么？
- What will I do differently tomorrow?  明天我将做什么不同的？
- Thought for the day
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/xinran/enjoy.png&#34; alt=&#34;享受&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

写作的目的就是让你理解自己，理解问题，理解规律，理解科学，理解自然界。&lt;/p&gt;
&lt;h1 id=&#34;该写什么&#34;&gt;该写什么？&lt;/h1&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/xinran/dance.png&#34; alt=&#34;银杏&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

问题分为很多种，暂时你可以知道的科学问题，关注的是某种事物关于某个因素的
变化规律;而工艺问题则更加关注的我从几种方案中，选择一种比较符合生产需求和利益需求的方案，而不一定是科学问题;当然还有社会问题。
给你自己的枷锁是从问题的角度触发,注重直观解释（也就是你对这个问题的看法）。 讲清楚采用这个方法的背景是什么，解决问题背后的思维过程是什么？
+ 当时是遇到什么问题？
+ 然后几个人是怎么分析的？
+ 我们经过争辩，调查，推理
+ 最后发现目前所使用的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;比如我采用定常计算风力机30度偏航角的时候，当达到收敛的时候，得到的结果根本就不对，于是我们几个人讨论这个问题（结果不符合实际）。我们从方法的角度，按道理说定常只不过是非定常的平均不应该存在那么多的偏差，但是方法角度,你又无法通过剖析源码，于是我们从网格角度继续讨论，定常采用的是冻结转子法，这种方法是采用某个点做一个截面得到的混合平均的结果，而不像非定常采用的是滑移网格法。所以如果是均匀来流情况下，定常和非定常基本上一样，但是如果是大偏航角的情况下，由于是某个点平面，可能不准确，所以误差很大。最终选择非定常计算。(当然还得进一步说明偏航是什么？ 冻结转子法是什么？ 滑移网格法是什么？ 定常和非定常又都是什么？)
这样你的文章才会是对别人的一种帮助。一定要写出方法背后的直观思想。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;不该写什么&#34;&gt;不该写什么？&lt;/h1&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/xinran/cow.png&#34; alt=&#34;最终你会得到&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

一上来扑上太多的细节，虽然刚接触新的东西都是一堆新的杂的东西，但是也会让人胆却。列出我定义什么？ 我们分为以下步骤,完全不提问题所在(这其实也是一个问题)。
但是一开始的信息的爆炸性吸取还是必要的，一定要听过这一节（在你知道问题的情况下）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一些引申的东西，能够体现出你对这个问题的理解和调研的深度，但是过于发散，彰显自己NB的时候，也在左2B的事情，抓不到重点，不要过于泛滥(当然一定要多加联想，这是大脑的本性，关系学)。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;还需要什么&#34;&gt;还需要什么？&lt;/h1&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/xinran/jump.png&#34; alt=&#34;跳跃&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

参考 &lt;a href=&#34;http://mindhacks.cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;刘未鹏&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;带着问题，思考，阅读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提出自己可能的解决方案，去验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把一本好书分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题是什么？&lt;/li&gt;
&lt;li&gt;方案是什么？&lt;/li&gt;
&lt;li&gt;例子是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把一个现象分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现象是什么？&lt;/li&gt;
&lt;li&gt;解释是什么？&lt;/li&gt;
&lt;li&gt;支撑这个解释的理由是什么&lt;/li&gt;
&lt;li&gt;例子是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你还可以做什么，让事情做的更好更高效？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你在那个情况下（环境） ，该干什么事？ 为什么这么干？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一定要阅读经典，阅读好作者相关的书籍。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;把知识嚼碎httpmindhackscn20150127escape-from-your-shawshank-part5-2-platos-cave&#34;&gt;&lt;a href=&#34;http://mindhacks.cn/2015/01/27/escape-from-your-shawshank-part5-2-platos-cave/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;把知识嚼碎&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;别人的文章是一扇又一扇的窗户，通向外在的世界.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/windows_thumb.jpg&#34; alt=&#34;窗户&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tecplot的云图</title>
      <link>https://jueqingsizhe66.github.io/archives/tecplotde-yun-tu/</link>
      <pubDate>Wed, 27 May 2015 15:55:21 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/tecplotde-yun-tu/</guid>
      <description>&lt;p&gt;Tecplot 是工程绘图的神器。 下面是一种格式，导入tecplot即可。
前面三列是x y z后面分别是ux ，udx，一定要写好文件头。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;TITLE=      qvalue 
VARIABLES=&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;,&amp;quot;Z&amp;quot;,  ux,udx 
ZONE I=  1000,J= 10,K= 20,F=POINT 
    1  1  1     0.4160     0.0009 
    2  1  1     0.4160     0.0036 
    3  1  1     0.4161     0.0081 
    4  1  1     0.4162     0.0144 
    5  1  1     0.4164     0.0225 
    6  1  1     0.4166     0.0324 
    7  1  1     0.4170     0.0441 
    8  1  1     0.4175     0.0576 
    9  1  1     0.4182     0.0729 
   10  1  1     0.4190     0.0900 
   11  1  1     0.4200     0.1089 
   12  1  1     0.4212     0.1296 
   13  1  1     0.4226     0.1521 
   14  1  1     0.4242     0.1764 
   15  1  1     0.4261     0.2025 
   16  1  1     0.4283     0.2304 
   17  1  1     0.4307     0.2601 
   18  1  1     0.4335     0.2916 
   19  1  1     0.4366     0.3249 
   20  1  1     0.4400     0.3600 
   21  1  1     0.4438     0.3969 
   22  1  1     0.4479     0.4356 
   23  1  1     0.4525     0.4761 
   24  1  1     0.4575     0.5184 
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>伟大的范畴理论</title>
      <link>https://jueqingsizhe66.github.io/archives/wei-da-de-fan-chou-li-lun/</link>
      <pubDate>Thu, 21 May 2015 20:56:51 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/wei-da-de-fan-chou-li-lun/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://yogsototh.github.io/Category-Theory-Presentation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;范畴理论&lt;/a&gt;是数学上的一种新的语言和框架结构.
对于程序员来说，它是另一种思考方式，一种极度有效的方式来提取规律(Extremely
efficient for generalization)
Programming is doing Math.编成的工作其实就是数学的工作。&lt;/p&gt;
&lt;p&gt;范畴是一种表达事物(things) 和路径(ways)  to go between things.
这可以参考&lt;a href=&#34;http://think-like-a-git.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;thinking like a git&lt;/a&gt;，因为他也是一种基于范畴理论，
而延伸出来的实际产物，方便程序员对于development的管理。&lt;/p&gt;
&lt;p&gt;A Category C is defined by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects ob(C),&lt;/li&gt;
&lt;li&gt;Morphisms hom(C),&lt;/li&gt;
&lt;li&gt;a Composition law (∘)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functor : (ob-&amp;gt;ob)
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://yogsototh.github.io/Category-Theory-Presentation/categories/img/mp/functor.png&#34; alt=&#34;Functor part1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Functor : (hom-&amp;gt;hom)
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://yogsototh.github.io/Category-Theory-Presentation/categories/img/mp/functor-morphism.png&#34; alt=&#34;Functor part2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Endofunctors:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://yogsototh.github.io/Category-Theory-Presentation/categories/img/mp/functor-morphism.png&#34; alt=&#34;自指&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://yogsototh.github.io/Category-Theory-Presentation/categories/img/fractalcat.jpg&#34; alt=&#34;一只可爱的猫&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;categories-and-functors-form-a-category-cat&#34;&gt;Categories and functors form a category: Cat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ob(Cat) are categories&lt;/li&gt;
&lt;li&gt;hom(Cat) are functors&lt;/li&gt;
&lt;li&gt;∘ is functor composition&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-haskell-functor-is-a-type-f------which-belong-to-the-type-class-functor--thus-instantiate-fmap--a---b---f-a---f-b&#34;&gt;A Haskell Functor is a type F :: * -&amp;gt; * which belong to the type class Functor ; thus instantiate fmap :: (a -&amp;gt; b) -&amp;gt; (F a -&amp;gt; F b).&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;F: ob(Hask)→ob(Hask)&lt;/li&gt;
&lt;li&gt;&amp;amp; fmap: hom(Hask)→hom(Hask)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-couple-ffmap-is-a-hasks-functor-if-for-any-x--f-a&#34;&gt;The couple (F,fmap) is a Hask&amp;rsquo;s functor if for any x :: F a:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;fmap id x = x
fmap (f.g) x= (fmap f . fmap g) x
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>HaskellModule</title>
      <link>https://jueqingsizhe66.github.io/archives/haskellmodule/</link>
      <pubDate>Wed, 20 May 2015 13:49:57 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/haskellmodule/</guid>
      <description>&lt;p&gt;Reference &lt;a href=&#34;http://www.shuklan.com/haskell/lec05.html#/0/21&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模块化，这样才能方便构建较大型的项目，解决更加复杂的问题。
其中MyData.hs是模块文件
注意，模块中添加类型时候使用(..);
添加函数时候直接使用函数名
TestMyData.hs是测试模块文件&lt;/p&gt;
&lt;p&gt;##基本语法结构：
module MyData
(  类型(..) &amp;hellip;.
函数名 &amp;hellip;)
where
类型声明 &amp;hellip;
函数声明 &amp;hellip;&lt;/p&gt;
&lt;p&gt;注意 MyData.hs一定是和module后面的MyData一样的！&lt;/p&gt;
&lt;h2 id=&#34;调用方式&#34;&gt;调用方式&lt;/h2&gt;
&lt;p&gt;import MyData&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;MyData.hs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module MyData
(MetricUnit(..),
    ImperialUnit(..),
    Measurement(..),
    convert
) where
-- How to use this module
-- new File Test.hs  
--    import MyData
--    reportMeasurement :: Measurement-&amp;gt;String
--    reportMeasurement (MyData.MetricMeasurement x u)
--    = (show  x) ++ &amp;quot; &amp;quot; ++ (show u)
--    reportMesuarement m
--    =reportMeasurement (convert m)
-- N.B. If there are another file use Meter type,it will fail
-- 1
data MetricUnit = Meter|Liter|KiloGram deriving (Show,Eq)
-- 2
data ImperialUnit = Yard
                    | Gallon
                    | Pound 
                    deriving (Show,Eq)
-- 3
data Measurement = MetricMeasurement Double MetricUnit
                    | ImperialMeasurement Double ImperialUnit
                   deriving (Show)   --If not,it will not show,Only
                            --in the type defition,but not function

-- 4
convert :: Measurement-&amp;gt; Measurement
-- Take attention for the () brace
convert (MetricMeasurement x u)
        | u == Meter  = ImperialMeasurement (1.0936*x) Yard
        | u == Liter  = ImperialMeasurement (0.2642*x) Gallon
        | u == KiloGram = ImperialMeasurement (2.2046*x) Pound
--wrong!
--        | u == &amp;quot;Meter&amp;quot;  = ImperialMeasurement (1.0936*x) Yard
--        | u == &amp;quot;Liter&amp;quot;  = ImperialMeasurement (0.2642*x) Gallon
--        | u == &amp;quot;KiloGram&amp;quot; = ImperialMeasurement (2.2046*x) Pound
convert (ImperialMeasurement x u)
        | u == Yard  = MetricMeasurement (0.9144*x) Meter
        | u == Gallon  = MetricMeasurement (3.7854*x) Liter
        | u == Pound = MetricMeasurement (0.4536*x) KiloGram


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TestMyData.hs
&lt;em&gt;注意，一定不要把Measurement-写成了  Mesuarement等错误的文字&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import MyData
reportMeasurement :: Measurement-&amp;gt;String
reportMeasurement (MyData.MetricMeasurement x u)
                = (show x) ++ &amp;quot; &amp;quot; ++ (show u)
reportMeasurement m =reportMeasurement (convert m)
--reportMeasurement (MyData.ImperialMeasurement x u)
--                = (show x) ++ &amp;quot; &amp;quot; ++ (show u)
---if imperial    let m = MetricMeasuremnt 2 Meter ...



&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;运行结果&#34;&gt;运行结果&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--Main&amp;gt; reportMeasurement (convert (ImperialMeasurement 5 Pound))
--&amp;quot;2.268 KiloGram&amp;quot;
 
*Main&amp;gt; let m = ImperialMeasurement 5 Pound
*Main&amp;gt; reportMeasurement m
&amp;quot;2.268 KiloGram&amp;quot;

*Main&amp;gt; reportMeasurement (MetricMeasurement 5 Meter)
&amp;quot;5.0 Meter&amp;quot;

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>加法之后也需减法</title>
      <link>https://jueqingsizhe66.github.io/archives/jia-fa-zhi-hou-ye-xu-jian-fa/</link>
      <pubDate>Sun, 17 May 2015 22:46:35 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/jia-fa-zhi-hou-ye-xu-jian-fa/</guid>
      <description>&lt;p&gt;老子道德经说&lt;a href=&#34;http://www.jdon.com/46727&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;道生一，一生二，二生三，三生万物&lt;/a&gt;，这句话符合构造定律Constructal Law.&lt;/p&gt;
&lt;p&gt;学习过&lt;a href=&#34;http://www.cnblogs.com/haippy/archive/2012/06/04/2535197.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git&lt;/a&gt;的人知道(可以参考&lt;a href=&#34;http://www.berlinix.com/it/git.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git入门&lt;/a&gt;)，git体现的本质其实就是分支的思想,他就像是一块一块的&lt;a href=&#34;http://www.programblings.com/2008/06/07/the-illustrated-guide-to-recovering-lost-commits-with-git/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;积木&lt;/a&gt;一样。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://think-like-a-git.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thinking like a git&lt;/a&gt;教会我们 Facebook其实也是范畴的集合&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/tree.png&#34; alt=&#34;十分漂亮的树形图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/city.jpg&#34; alt=&#34;城市的树形图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The greatest weapons</title>
      <link>https://jueqingsizhe66.github.io/archives/the-greatest-weapons/</link>
      <pubDate>Sun, 17 May 2015 19:01:59 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/the-greatest-weapons/</guid>
      <description>&lt;p&gt;Everything in Haskell has a Type
Here are some Type declarations.&lt;/p&gt;
&lt;p&gt;These are your greatest weapons.&lt;/p&gt;
&lt;p&gt;head :: [a] -&amp;gt; a &amp;ndash; gets the first element of a list&lt;/p&gt;
&lt;p&gt;tail :: [a] -&amp;gt; [a] &amp;ndash; gets everything but the first element&lt;/p&gt;
&lt;p&gt;last :: [a] -&amp;gt; a &amp;ndash; gets the last element of a list&lt;/p&gt;
&lt;p&gt;init :: [a] -&amp;gt; [a] &amp;ndash; gets everything but the last element&lt;/p&gt;
&lt;p&gt;(++) :: [a] -&amp;gt; [a] -&amp;gt; [a] &amp;ndash; concatenates two lists together&lt;/p&gt;
&lt;p&gt;(:) :: a -&amp;gt; [a] -&amp;gt; [a] &amp;ndash; prepends an element to a list&lt;/p&gt;
&lt;p&gt;fst  :: (a,b) -&amp;gt; a &amp;ndash; gets the first element of a tuple&lt;/p&gt;
&lt;p&gt;snd  :: (a,b) -&amp;gt; b &amp;ndash; gets the second element of a tuple&lt;/p&gt;
&lt;p&gt;(!!) :: [a]-&amp;gt;Int a&lt;/p&gt;
&lt;h3 id=&#34;数学中λ-calculus的表示法为&#34;&gt;数学中λ-calculus的表示法为：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;λx.t&lt;/li&gt;
&lt;li&gt;λx[t]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“λ”不具有任何特殊意思，标识着其表达式中的可取一数值x带入。
t是表达式（例如x+3、x^2+2x+1等）。&lt;/p&gt;
&lt;h3 id=&#34;代入数值p的表示法为&#34;&gt;代入数值p的表示法为：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;(λx.t)p&lt;/li&gt;
&lt;li&gt;(λx[t])p&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lispscheme的λ表示法与数值代入&#34;&gt;Lisp|scheme的λ表示法与数值代入：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(lambda (x) (+ x 1))
((lambda (x) (+ x 1) 10))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;haskell&#34;&gt;Haskell：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;\x -&amp;gt; x+1
(\x -&amp;gt; x+1)10

Prelude&amp;gt; map (\x-&amp;gt;x+1) [1..10]
[2,3,4,5,6,7,8,9,10,11]

\ para1 para2-&amp;gt;(return value) 
\ (para1,para2) -&amp;gt; (return value)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;lambda-calculus&#34;&gt;Lambda Calculus&lt;/h3&gt;
&lt;p&gt;前面提到了Haskell是基于__Lambda Calculus__的，所以在学习Haskell之前，我们有必要了解一下Lambda Caculus的一些基本的内容，方便我们后面正式介绍Haskell。其实，Lambda Calculus是所有函数式语言的基础，要学习FP，最好都了解一下Lambda Calculus。下面对Lambda Calculus做一个简单的介绍：&lt;/p&gt;
&lt;h4 id=&#34;基本的语法lambda-calculus的核心是表达式expression用fp语言写的程序执行的过程本质上就是对表达式求值的过程&#34;&gt;基本的语法：Lambda Calculus的核心是表达式(Expression)，用FP语言写的程序执行的过程，本质上就是对表达式求值的过程&lt;/h4&gt;
&lt;p&gt;expression := variable | function | application
funciton := λvariable.expression (.前面部分为定义(definition)，后面部分为函数体(body))
application := expression expression&lt;/p&gt;
&lt;p&gt;另外一种表述方法:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;lt;expr&amp;gt; ::= &amp;lt;identifier&amp;gt; 
&amp;lt;expr&amp;gt; ::= lambda &amp;lt;identifier-list&amp;gt;. &amp;lt;expr&amp;gt; 
&amp;lt;expr&amp;gt; ::= (&amp;lt;expr&amp;gt; &amp;lt;expr&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前两条语法用于生成lambda表达式（lambda函数），如：
lambda x y. x + y
haskell里面为了简洁起见用“\”来代替希腊字母lambda，它们形状比较相似。故而上面的定义也可以写成：
\ x y. x + y&lt;/p&gt;
&lt;h4 id=&#34;变量的bound与free&#34;&gt;变量的bound与free:&lt;/h4&gt;
&lt;p&gt;λx.xy →x is bound, y is free&lt;/p&gt;
&lt;h4 id=&#34;表达式化简reduction的基本法则&#34;&gt;表达式化简（Reduction)的基本法则:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;α−reduction: λx.E→λy.E[y/x]
β−reduction:((λx.E)z)→E[z/x]
η−reduction(if x is not free in E): λx.(Ex)→E
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alpha转换公理：例如，“lambda x y. x + y”转换为“lambda a b. a + b”。换句话说，函数的参数起什么名字没有关系，可以随意替换，只要函数体里面对参数的使用的地方也同时注意相应替换掉就是了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beta转换公理：例如，“(lambda x y. x + y) 2 3”转换为“2 + 3”。这个就更简单了，也就是说，当把一个lambda函数用到参数身上时，只需用实际的参数来替换掉其函数体中的相应变量即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://mindhacks.cn/2006/10/15/cantor-godel-turing-an-eternal-golden-diagonal/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;软件工程里面的一条黄金定律：“任何问题都可以通过增加一个间接层来解决&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;变量替换&#34;&gt;变量替换&lt;/h4&gt;
&lt;p&gt;[y/x]E →  substitute  all occurrences of x in E to y&lt;/p&gt;
&lt;p&gt;以上是Lambda Calculus的一些基础知识，读者朋友现在不理解没有关系，等后面讲到Haskell中相关的部分就可以理解了。对于抑制不住自已的好奇心的朋友，可以在这里：&lt;a href=&#34;http://en.wikipedia.org/wiki/Lambda_calculus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://en.wikipedia.org/wiki/Lambda_calculus&lt;/a&gt;做进一步的了解。&lt;/p&gt;
&lt;p&gt;在之前做的&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/05/17/cong-lambdadao-simple-plus-complexjie-shi-qi-zai-dao-shu-xing-chou-xiang/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lambda的推导&lt;/a&gt;其实都只是针对单个参数，包括&lt;a href=&#34;http://shuklan.com/haskell/lec03.html#/0/15&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Haskell也是强调单参数的调用&lt;/a&gt;，如果多惨数那就是用curry来解决(funny多参数)
关于多参数的lambda推到比较少见，但是多参数都是可以通过curry实现。&lt;/p&gt;
&lt;p&gt;比如Haskell的实现:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;Prelude&amp;gt; :type take
take :: Int -&amp;gt; [a] -&amp;gt; [a]
Prelude&amp;gt; let takeFive = take 5
Prelude&amp;gt; :type takeFive
takeFive :: [a] -&amp;gt; [a]
Prelude&amp;gt; takeFive [1..]
[1,2,3,4,5]
	   
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Haskell几个基本概念--学而无用--无以为用</title>
      <link>https://jueqingsizhe66.github.io/archives/haskellji-ge-ji-ben-gai-nian-xue-er-wu-yong-wu-yi-wei-yong/</link>
      <pubDate>Sat, 16 May 2015 21:11:50 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/haskellji-ge-ji-ben-gai-nian-xue-er-wu-yong-wu-yi-wei-yong/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;模式匹配
= +起着一种模式匹配，=不要翻译成等于 最好翻译为如果匹配前面+ 则他的值为后面.-&amp;gt; 也起着一种类型的模式匹配。&lt;/li&gt;
&lt;li&gt;分支
|在创建函数的时候 体现着一种分支的效果。
if-else  这其实是一种控制语句，不能说Haskell放掉了控制语句，而应该是循环语句。&lt;/li&gt;
&lt;li&gt;一切都是函数。
根据monad的内置结构，函数可以组合生成类似于数学的组合函数（埋藏内部的lambda结构）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;函数只是关系的表示可以说它是过程变换运动从泛函的角度解释&#34;&gt;函数只是关系的表示，可以说它是过程、变换、运动（从泛函的角度解释）&lt;/h3&gt;
&lt;p&gt;本来函数式变成是不考虑空间的， 而面向对象则是引入不必要的空间问题，来挂上函数，最终都是为了实现函数变换或者函数过程，或者统称为运动。
假如宇宙存在根节点，越靠近根节点的肯定越抽象，我们现在是工作在底层的具象节点下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面向对象属于分解，函数编程属于组合。有以为 利，通过面向对象我们将一分解为多个，数量多了，“有”，而函数编程则是将多个组合成一个，数量少了  ，“无”，无才能用，只有忽略事物内部的细节，我们才 能用它，否则陷入细节迷失方向。换句话说：数学分数考得好，不代表在实际中用数学用的好，牛    顿没有发明几何学，但是用了几何学，创造了微积分，用它们推导 出万有引力；爱因斯坦用了非几何学推导了相对论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简洁才能落地！&lt;/p&gt;
&lt;p&gt;###从有至无方为用，有乃分，无乃合，宇宙的起点源于无&lt;/p&gt;
&lt;p&gt;学习是一种分解能力，使用是一种组合能力，这是两种不同的能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再看看老子道德经的一段：三十幅共一毂，当其无，有车之用。埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之   以为用。
这段话意思是：三十根棍子做成的圆轱辘，只有忽视圆轱辘内部这种结构，着眼于圆轱辘外部，才会发现它原来是可以做车的轮子这一用处，两个轱辘与车    架组合成一辆车。比如门窗，只有忽视其内部如何结构的构建，才会从外部想到用它在房间组合中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;树形结构抽象细节&#34;&gt;树形结构抽象细节&lt;/h3&gt;
&lt;p&gt;我们之所以使用树形结构，用一个根节点代表其聚合群体，用组长代表所有组员，用名字代表人的全部，等等这些组合抽象的办法就是让我们大脑去除大量   对象内部的细节，用一个符号代替它们，这样我们才能基于这个树的根节点再组合成新的树形结构。&lt;/p&gt;
&lt;h2 id=&#34;范畴理论-交际的互联网&#34;&gt;范畴理论-交际的互联网&lt;/h2&gt;
&lt;p&gt;范畴理论(Category)总是鼓励我们从对象内部细节中转移开来，在范畴理论中 一个对象是一个抽象模糊的实体，你所有需要知道的只是它如何和其他对象交互(关系)，它是怎么使用箭头和其他对象连接的，这就是为什么互联网搜索引擎 Google Baidu等能够通过分析链入和链出的链接来排名网站一样。&lt;/p&gt;
&lt;h2 id=&#34;无以为用--组合思想&#34;&gt;无以为用&amp;ndash;组合思想&lt;/h2&gt;
&lt;p&gt;归根到底，还是“无以为用”这个范畴的组合本质很多人都没有搞清楚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有忘记对象的细节才能用好它。两个原因总结一下：
&lt;ul&gt;
&lt;li&gt;首先，首先人脑短时记忆有限，如果大量对象内部细节占据大脑，而我们需要从对象外部组合它们，    这些细节是干扰。&lt;/li&gt;
&lt;li&gt;其次，范畴也认为组合对象只要将对象看成模糊实体，注重它们之间关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;忘记学习对象的细节才能用好它，无以为用，事物的制造者都不一定能用好它，除非事先有目标制造它。
因此，学并不能致用，数理化学得好不一定用得好，博士给老板打工，老板赚大头。因为他把你的学问用处发挥了。自己学自己用因为智力限制也不可能。&lt;/li&gt;
&lt;li&gt;中国教育的典型
在学生阶段,中国学生数理化很好，但是毕业后诺贝尔奖获得者几乎没有，世界自然科学领军人物很少，那些高考状元 学神都哪儿去了？学得好不      一定用得好，中国教育制度是以学习能力评价学生，各种考试充斥大量 知识细节，让学生耗费18年于这些可能以后无用的细节中，最终他们已经没有智力空间来思考如何使用这些大量的知识细节了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向对象的分解能力是强，但是组合能力很弱！
实际上从函数运算的角度，不存在单纯的“值”，1应该是=&amp;amp; gt;1，或者说，所谓的常量值也是函数，只是每次不管输入什么都输出同样的结果。这样世界就只有运算，值是没必&amp;gt;要的，更没有状态。但这是神的视角，而一 旦人开始思考时，由于不具备神的无限的能力，只能在每个瞬间试图去把握世界，就看到了值和状态以及状态呈现时的context/stage/&amp;gt;舞台。但人希 望能像神一样去理解世界，就只好从这每个瞬间呈现的一切中去寻找变与不变的东西，当他们历尽艰辛找到“不变”的“变换”时就迫不及待地将之命名为定律。&lt;/p&gt;
&lt;p&gt;关于上述思想，计算机邀请Haskell带领领略（Haskell可以学习，但是需要投入很多时间，坚持&amp;hellip;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zhihu.com/question/20193745&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;综合性帖子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jdon.com/47271&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这边也有一些课程介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;dev.stephendiehl.com/hask/&#34;&gt; What I Wish I Knew When Learning Haskell 2.2 ( Stephen Diehl )&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://acm.wustl.edu/functional/haskell.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to learn haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnyouahaskell.com/chapters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;相当棒的趣味指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;从现实世界走入计算机经过计算机思考再从计算机走出并融入现实世界这就是-函数式思维httpwwwjdoncom45608&#34;&gt;从现实世界走入计算机，经过计算机思考，再从计算机走出并融入现实世界，这就是&lt;a href=&#34;http://www.jdon.com/45608&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 函数式思维&lt;/a&gt;。&lt;/h3&gt;
&lt;p&gt;函数的context引入了时间的关系。&lt;a href=&#34;http://www.jdon.com/45608&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 我们思考逻辑的时候，定义已经是确定的了。也正因为是确定的，才可以逻辑思考&lt;/a&gt;。
函数不存在状态，所以计算机加入了一个特殊的东西：时钟。值++时间=状态++，在可以忽视时序问题时，可以直接有值=状态。忽视时序问题，就相当于我们平时说的异步。若果单单使用锁，只是一种耗费资源手段。而我们看到无论是唤醒线程，还是延时读取，都是依赖时钟
##+ 小结：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/desk.jpg&#34; alt=&#34;桌子&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

一张桌子为案例，分解思维的人看到后首先想到这张桌子由什么构成，长宽高和材质，这些都是桌子的内部细节；而组合思维的人看到后，环顾四周，看看其处于什么环境，如果放在教室中，他判断这是一张课桌，如果放在食堂，他判断这是一张饭桌。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;从这个例子可以看出组合是从行为（运动、变化、时间）角度看待 世界的，“课桌”、“饭桌”中的“课”和“饭”在这里是动词，意为“上课用”、“吃饭用”的意思，“用”是动词，同一个桌子出现在不同的环境中发挥不同的 作用。而分解思维只研究空间，只研究桌子的空间结构是什么，甚至不研究为什么是四条腿，为什么每条腿长度相同，分解思维根本不考虑这些，不用考虑任何桌子 之外的世界，在分解思维中没有万有引力、没有地面的水平、没有书房和餐厅，只有空间，分解只考虑空间的组成结构。看来分解和组合是相互依存的，分解时研究 的是空间，组合时研究的是行为，把桌子放进餐厅的意义是期待使用它吃饭这样一种运动[组合运动？]。 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范畴英文是Category，也是++分类++的意思，打个比喻，Google能根据哪些网站引用你的网站这个外部信息进行PageRank评分，从而对你的网站权重进行排序，这个道理和我们评价一个人有些类似，看一个不认识的人怎么样，那就看看他交往的什么朋友，什么环境，近墨者黑，人以群分，物以类聚，这些都是从事物所在的分类类别中判断其价值，而不是从事物内部细节。（评判个人的价值标准跟不同的人在一起，意味着你的价值不一样.）&lt;/p&gt;
&lt;h3 id=&#34;monad-隐藏lambda&#34;&gt;monad 隐藏lambda&lt;/h3&gt;
&lt;p&gt;Monad是一种结构，这种结构能够将一个值放入一个可计算的上下文中。因为Lambda是一个和上下文环境有关的表达式，所以，这里对Monad的上下文理解就比较容易。
monad是从范畴论引入， 范畴其实就是一个集合，只不过对这个集合有一些约束定义，如果 熟悉业务建模的人可能对这种思维方式不陌生，经常我们会对抽象的事物进行定义，数学上基本就是用集合概念，实际上从罗素悖论拯救了数学开始，数学离不开集合，对于一个国家社会，个人与社会也是不同的概念，社会是一个++集合++概念，从++集合角度++考虑问题和从__个人元素角度__考虑问题是两种截然不同的思路，如果你平时注 重这种区别，你可能会有两种人生观。祝你脑洞大开。&lt;/p&gt;
&lt;h3 id=&#34;函数式替代sql&#34;&gt;函数式替代sql？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jdon.com/44842&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;函数的逻辑性&lt;/a&gt;与关系数据库的是一致的，而逻辑在不同语言之间是自然贯穿的，也就是说若果所有都用函数来表达的，可以使sql消失，那么由于sql引发的问题自然就消失。
数据库 = 一个集合,这就是面向集合，mongodb就是这样的思想&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>language limits the world of you</title>
      <link>https://jueqingsizhe66.github.io/archives/language-limits-the-world-of-you/</link>
      <pubDate>Sat, 16 May 2015 16:17:39 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/language-limits-the-world-of-you/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;语言可以削尖我们的思维[进行思维锐化：思维锐化工具有哪些？ 鱼骨图找因果]。&lt;/li&gt;
&lt;li&gt;语言也会限制我们的世界。&lt;/li&gt;
&lt;li&gt;好的语言一定会影响你的思维方式,haskell,scheme,lisp&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Language shapes the way we think, and determines what we can think about.
Benjamin Lee Whorf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;The limits of my language mean the limits of my world.
Ludwig Wittgenstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;A language that doesn’t affect the way you think about programming, is not worth knowing.
Alan Perlis&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;##Who uses Haskell?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T : automate form processing&lt;/li&gt;
&lt;li&gt;Bank of America Merril Lynch  : data transformation and loading&lt;/li&gt;
&lt;li&gt;Bump :   Haskell-based server&lt;/li&gt;
&lt;li&gt;Facebook :   manipulating PHP code base&lt;/li&gt;
&lt;li&gt;Google :   internal IT infrastructure&lt;/li&gt;
&lt;li&gt;MITRE :   cryptographic protocol analysis&lt;/li&gt;
&lt;li&gt;NVIDIA :    in-house tools&lt;/li&gt;
&lt;li&gt;Qualcomm, Inc  :   generate Lua bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;types&#34;&gt;Types&lt;/h2&gt;
&lt;p&gt;Every function in haskell has a Type signature.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;foo :: Int -&amp;gt; String
	    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&amp;rsquo;t know what foo means,but I know what it does!&lt;/p&gt;
&lt;p&gt;Haskell引进了很多模块化思想，比如module,import导包的，下面的这些书都可以在
&lt;a href=&#34;http://vdisk.weibo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;新浪微盘&lt;/a&gt;找到:
###书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Book1: Books for Learning Haskell&lt;/li&gt;
&lt;li&gt;Book2: Learn You a Haskell for Great Good! (&lt;em&gt;Important&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Book3: Real World Haskell(&lt;em&gt;Important&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Book4: Beginning Haskell&lt;/li&gt;
&lt;li&gt;Book5: Thinking Functionally with Haskell&lt;/li&gt;
&lt;li&gt;Book6: Parallel and Concurrent Programming in Haskell&lt;/li&gt;
&lt;li&gt;Book7: Programming in Haskell&lt;/li&gt;
&lt;li&gt;Book8: Haskell: The Craft of Functional Programming (&lt;em&gt;Important&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Book9: The Haskell School of Music&lt;/li&gt;
&lt;li&gt;Book10:Developing Web Applications with Haskell and Yesod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##Functional:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell, Lisp, ML, Scheme, Erlang
Focuses on the high-level &lt;em&gt;&amp;ldquo;what&amp;rdquo;&lt;/em&gt;(Math thinking)
##Imperative:&lt;/li&gt;
&lt;li&gt;C++, Java, Python, Pascal
Focuses on the low-level &lt;em&gt;&amp;ldquo;how&amp;rdquo;&lt;/em&gt;(Computer Thinking)
&lt;a href=&#34;http://shuklan.com/haskell/lec01.html#/0/30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Haskell Learning Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>语言抽象</title>
      <link>https://jueqingsizhe66.github.io/archives/yu-yan-chou-xiang/</link>
      <pubDate>Thu, 14 May 2015 10:21:48 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/yu-yan-chou-xiang/</guid>
      <description>&lt;p&gt;我们每天都在做的事情
1.打开电脑，找到我们要做的事情，保存我们做完的事情，提交,我们可能挨训，也可能加班
2.我们可能去打球，我们可能跟朋友、亲人聊天
3.我们可能在周末的时候，跟女朋友、家人去看电影，去郊游
4.我们可能去参加一些团体活动……&lt;/p&gt;
&lt;p&gt;我们把我们要在电脑、生活上做的事情可以抽象化，虽然我们不知不觉的做着这些事情，
但是这是第一步叫做事件抽象（过程抽象）。随着发展，我们可以进行逻辑抽象，并最终达到&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html#%25_chap_4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;语言抽象&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;我们会发现我们所使用的计算机语言包含着主要的东西是
1. 变量
2. 函数
3. 调用&lt;/p&gt;
&lt;p&gt;可以参看&lt;a href=&#34;http://developer.51cto.com/art/201208/352423_2.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;王垠的计算器&lt;/a&gt;,里面第三节中提到Lambda Calculus是什么
1. 变量: x
2. 函数: (lambda (x) e)
3. 调用: (e1 e2)&lt;/p&gt;
&lt;p&gt;这是任何一门语言不可缺少的逻辑语言抽象部件，就好像数学家很早就认识到序列求和中的&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_sec_1.3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;抽象模式&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;语言本身其实就是一个&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html#%25_chap_4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;求值器&lt;/a&gt;
&amp;gt; The evaluator, which determines the meaning of expressions in a programming language, is just another program.
所以事实上，可以几乎把任何程序看作是某个语言的求值器，它本身不过就是另一个程序而已。&lt;/p&gt;
&lt;p&gt;而为了更好地操作这些语言的元素，进行大型的系统模块化设计，我们还需要引进&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%25_chap_3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;两种模式&lt;/a&gt;
1.对象实现(以不变的世界坐标系来说，其实对象是不断变化的，比如位置；此时坐标系是全局的)
2.流实现(以变化固体的角度来说，其实他是不变的；此时坐标系是局部的)&lt;/p&gt;
&lt;p&gt;关于scheme的部分以后再补上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>找出函数的不动点--Navier-Stokes方程</title>
      <link>https://jueqingsizhe66.github.io/archives/zhao-chu-han-shu-de-bu-dong-dian-navier-stokesfang-cheng/</link>
      <pubDate>Tue, 12 May 2015 03:13:50 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/zhao-chu-han-shu-de-bu-dong-dian-navier-stokesfang-cheng/</guid>
      <description>&lt;p&gt;##Beautiful code!&lt;/p&gt;
&lt;p&gt;数x为函数的f的不动点（f可以代表N-S方程），如果满足f(x)=x,则称x
为函数f的不动点。
性质 f(x),f(f(x)),f(f(f(x)))&amp;hellip;., change the x&amp;rsquo;s value if f(x)=x,then
you found!&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define tolerance 0.000001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (&amp;lt; (abs (-  v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
         next
         (try next))))
  (try first-guess))

;;;solve cos(x)=x
(fixed-point cos 1.0)


;;(cos 0.7390855263619245)
;;0.7390848683867142
;;(abs (-  (cos 0.7390855263619245) 0.7390855263619245))
;;6.579752103164083e-07


;;;solve y=siny+cosy   x=f(x) ====&amp;gt; Navier Stokes equation
(fixed-point (lambda (y) (+ (sin y) (cos y))) 1.0)

;;It is what we want!!!
;;;(abs (- ((lambda (y) (+ (sin y) (cos y))) 1.2587277968014188) 1.2587277968014188)) 
;;6.26112570678572e-07


;;;;One method to calculate the square value
;;because x^2 = y  so x = y/x (x =f (x) next we  will use the fixed-point thinking) we should continue change the x&#39;s value!
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
     guess
     (sqrt-iter (improve guess x)
               x)))

(define (square x)
  (* x x))
;;;good-enough? is similar to close-enough？
(define (good-enough? x y)
  (&amp;lt; (abs (- (square x) y)) 0.00001))

;;x^2=y   x=y/x   x+x=y/x+x  x=(y/x+x)/2
(define (improve guess x)
  (average guess (/ x guess)))

(define (mysqrt x)
  (sqrt-iter 1.0 x))


;;(mysqrt 4)
;;2.0000000929222947

;;;Use fixed-point thinking 

(define (mysqrt_death_fixed x)
  (fixed-point (lambda (y) (/ x y))
              1.0))

;;(mysqrt_death_fixed 4)
;;;wrong !!!  can not convenge!!!! why?

;;because   y2= x/y1  y3=x/y2=x/(x/y1)=y1 ====&amp;gt;death recycle===&amp;gt; so we use average

(define (mysqrt_fixed x)
  (fixed-point (lambda (y) (average y (/  x y)))
              1.0))

(mysqrt_fixed 4)

;;;ok fine
;;2.000000000000002====&amp;gt;这也叫做平均阻尼定义！常用于数值计算当中
;;在不动点的搜寻中，作为帮助收敛的手段！！！！
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 7-11节笔记代码March28th</title>
      <link>https://jueqingsizhe66.github.io/archives/javascript-7-11jie-bi-ji-dai-ma-march28th/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/javascript-7-11jie-bi-ji-dai-ma-march28th/</guid>
      <description>&lt;p&gt;function串讲笔记&lt;/p&gt;
&lt;p&gt;1：function是什么？
JS的function类似于java和.Net的方法&lt;/p&gt;
&lt;p&gt;2：对比JS版本和Java版本的两个变量的求和，得出三个不同点。
JS版本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function sum(num1,num2)
{
    var ret = num1+num2;
    return ret;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Java版本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;public int sum(int num1,int num2)
{
   int ret= num1+num2;
  return ret;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相同点：
函数名字
参数列表
变量声明
返回值
不同点：
JS的函数声明没有修饰符
JS的函数声明没有返回值
JS的函数声明的参数列表没有变量类型&lt;/p&gt;
&lt;p&gt;由这三个不同点我们可以提出三个问题
为什么没有修饰符？
为什么没有返回值类型？
为什么参数列表没有变量类型？&lt;/p&gt;
&lt;p&gt;3：JS为什么没有修饰符？
Js不是面向对象的语言，虽然有对象但不是真正的对象。&lt;/p&gt;
&lt;p&gt;Js的对象是模拟出来的，没有封装的概念，所以不需要使用修饰符（修饰符只是针对于对象）&lt;/p&gt;
&lt;p&gt;4：JS为什么没有返回值类型和参数列表变量类型？
这两个问题是一样的道理，都是弱类型的原因
5：由参数列表引入一个arguments对象，what is it?
在开始了解arguments对象之前，必须说明函数的四种定义方式，如下所示：
5.1最一般的函数定义方法：
有function
有函数名称sum
有参数列表 num1,num2
可有可无的return语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function sum(num1,num2)
{
    var ret = num1+num2;
    return ret
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.2最常见的匿名类函数调用方法：
有function
没有函数名称
有变量泪飚 num1,num2
可有可无的return语句
通过一个var sum函数类型变量获得该类型，并使得sum变量具有可调用的属性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;var sum = function(num1,num2)
{
    var ret = num1+num2;
    return ret
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;规律：页面中的js代码执行之前，浏览器会先扫描全部的js代码，遇到一个函数声明，就把此函数的声明加到全局域，从上到下扫描，若函数名称一样，后声明的函数会覆盖掉前面。
5.3较特殊的匿名类函数的声明和使用：
两个括号()()
第一个括号是匿名类函数的声明
第二个括号是匿名类的函数实参&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;(function(num1,num2)
{
   var ret=num1+num2;
   return ret;
})(3,2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特点：只会执行一次。&lt;/p&gt;
&lt;p&gt;5.4较少用的Function类产生函数对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;var sum = new Function();形式
var sum = Function(&amp;quot;n1&amp;quot;,&amp;quot;n2&amp;quot;,&amp;quot;alert(n1+n2); var a=3;var b=4;alert(a+b);&amp;quot;)

sum(3,3);//和其他函数声明的调用一样。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这也是为什么匿名函数可以赋值给一个变量的原因，因为Function类可以产生对象，对象可以赋值给一个变量（对象只是一个引用）。
特点：效率低效。&lt;/p&gt;
&lt;p&gt;上面的五种函数声明方式都涉及到参数列表，而JS使用arguments可以获得任意长度的参数列表。
比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var sum = function()
{
    var ret=0;
   for(var i=0;i&amp;lt;arguments.length;i++)
  {
    ret = ret+arguments[i];  
   }
    return ret;
}

sum(1,2);
sum(1,5,68,98);
sum(4,45,7,8,3,23,7,9);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而正因为arguments的作用导致了js不能重载。&lt;/p&gt;
&lt;p&gt;6：JS为什么不能重载？
存在arguments对象，导致参数列表可以任意长度。
弱类型决定了参数列表的变量不需要类型修饰。&lt;/p&gt;
&lt;p&gt;7：函数调用的两种方式？
标签的事件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;button id =”btn” onclick=”alert(4);var  a =3; var b=4; alert(a+b);”)
复制代码

Dom的window.onload=function(){}方式，通过document的方法获得标签地址
Window.onload=function()
{
Window.document.getElementById(“btn”).onclick=function()
{
    Show();
}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>模块分割--工厂机制</title>
      <link>https://jueqingsizhe66.github.io/archives/mo-kuai-fen-ge-gong-han-ji-zhi/</link>
      <pubDate>Thu, 15 May 2014 22:27:07 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/mo-kuai-fen-ge-gong-han-ji-zhi/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;deploy(by makefile)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#map&amp;mdash;do   or map&amp;ndash;action#&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;FC=gfortran
FFLAGS=-O3
split : ./f90split.f90 ./output/cmd.sh
    $(FC) $(FFLAGS) $^ -o $@
    mv $@ ./output/
    /bin/sh ./output/cmd.sh

.PHONY: clean
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;不是不适合是超级适合只不过你不会而已&#34;&gt;不是不适合，是超级适合，只不过你不会而已&lt;/h2&gt;
&lt;p&gt;#makefile:(负责让对应的文件夹去做对应的事情)#&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;FC=gfortran
FFLAGS=-O3
split : ./f90split.f90 ./output/cmd.sh
    $(FC) $(FFLAGS) $&amp;lt; -o $@                # 造出一个工人出来！
    cp $@ ./output/          # 把一个高级技术工人调到现场 去干活去！  最好用cp 这样就可以派到其他工厂去了
    cd ./output/ &amp;amp;&amp;amp;sh cmd.sh#切换到对应目录下 去做他该做的事情就可以了（而不是原先你想的

    # sh .output/cmd.sh 这样是在当前的目录下产生所有的东西 而不是对应的目录）
.PHONY: clean

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#在我的output目录下新建了一个#
##cmd.sh:(他只做本目录下的内容)##&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
# sh cmd.sh

for i in `ls -l /home/incompact3dNew/channel|grep f90|awk &#39;{print $NF}&#39;`;
do
    file=/home/incompact3dNew/channel/$i;
#    echo $file;
     ./split $file
done;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>poisson</title>
      <link>https://jueqingsizhe66.github.io/archives/poisson/</link>
      <pubDate>Wed, 14 May 2014 02:09:00 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/poisson/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;
module decomp_2d_poisson

  use decomp_2d
  use decomp_2d_fft

  use param
  use variables

  implicit none

  private        ! Make everything private unless declared public

!  real(mytype), private, parameter :: PI = 3.14159265358979323846_mytype
!                                   This 0.0_mytype!!!!!!!!!!!!!1111

#ifdef DOUBLE_PREC
  real(mytype), parameter :: epsilon = 1.e-16
#else
  real(mytype), parameter :: epsilon = 1.e-8
#endif

  ! boundary conditions
  integer, save :: bcx, bcy, bcz

  ! decomposition object for physical space
  TYPE(DECOMP_INFO), save :: ph
 
  ! decomposition object for spectral space
  TYPE(DECOMP_INFO), save :: sp

  ! store sine/cosine factors
  real(mytype), save, allocatable, dimension(:) :: az,bz
  real(mytype), save, allocatable, dimension(:) :: ay,by
  real(mytype), save, allocatable, dimension(:) :: ax,bx

  ! wave numbers
  complex(mytype), save, allocatable, dimension(:,:,:) :: kxyz
  !wave numbers for stretching in a pentadiagonal matrice
  complex(mytype), save, allocatable, dimension(:,:,:,:) :: a,a2,a3
  ! work arrays,
  ! naming convention: cw (complex); rw (real);
  !                    1 = X-pencil; 2 = Y-pencil; 3 = Z-pencil
  real(mytype), allocatable, dimension(:,:,:) :: rw1,rw1b,rw2,rw2b,rw3
  complex(mytype), allocatable, dimension(:,:,:) :: cw1,cw1b,cw2,cw22,cw2b,cw2c

  ! underlying FFT library only needs to be initialised once
  logical, save :: fft_initialised = .false.

  public :: decomp_2d_poisson_stg, decomp_2d_poisson_init, &amp;amp;
       decomp_2d_poisson_finalize

  ! For staggered mesh where main variables are defined in the centre of
  ! control volumes while boundary conditions are defined on interfaces
  interface decomp_2d_poisson_stg
     module procedure poisson
  end interface
contains



  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Initialise Poisson solver for given boundary conditions
  !                               given
  !                               given
  !   just for init
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine decomp_2d_poisson_init(bcx1, bcy1, bcz1)

    implicit none

    integer, intent(IN) :: bcx1, bcy1, bcz1
    integer :: nx, ny, nz, i

    bcx = bcx1
    bcy = bcy1
    bcz = bcz1

    nx = nx_global
    ny = ny_global
    nz = nz_global

    ! pressure-grid having 1 fewer point for non-periodic directions
    if (bcx==1) nx=nx-1
    if (bcy==1) ny=ny-1
    if (bcz==1) nz=nz-1

    allocate(ax(nx),bx(nx))
    allocate(ay(ny),by(ny))
    allocate(az(nz),bz(nz))
    call abxyz(ax,ay,az,bx,by,bz,nx,ny,nz,bcx,bcy,bcz)
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Initialise the ax bx
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Initialise the ay by
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Initialise the az bz
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1


    call decomp_info_init(nx, ny, nz, ph)
    call decomp_info_init(nx, ny, nz/2+1, sp)

    ! allocate work space
    if (bcx==0 .and. bcy==0 .and. bcz==0) then
       allocate(cw1(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
            sp%xst(3):sp%xen(3)))
       allocate(kxyz(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
            sp%xst(3):sp%xen(3)))
       allocate(a(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a2(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a3(sp%yst(1):sp%yen(1),ny,sp%yst(3):sp%yen(3),5))
       ! (000)  ^c  ^kxyz ^a
    else if (bcx==1 .and. bcy==0 .and. bcz==0) then
       allocate(cw1(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
                 sp%xst(3):sp%xen(3)))
       allocate(cw1b(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
                 sp%xst(3):sp%xen(3)))
       allocate(rw1(ph%xst(1):ph%xen(1),ph%xst(2):ph%xen(2), &amp;amp;
            ph%xst(3):ph%xen(3)))
       allocate(rw1b(ph%xst(1):ph%xen(1),ph%xst(2):ph%xen(2), &amp;amp;
            ph%xst(3):ph%xen(3)))
       allocate(rw2(ph%yst(1):ph%yen(1),ph%yst(2):ph%yen(2), &amp;amp;
            ph%yst(3):ph%yen(3)))
       allocate(kxyz(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
            sp%xst(3):sp%xen(3)))
       allocate(a(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a2(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a3(sp%yst(1):sp%yen(1),ny,sp%yst(3):sp%yen(3),5))
       !(100)      consist :: cw1 cw1b   rw1   rw1b   rw2    ^a
    else if (bcx==0 .and. bcy==1 .and. bcz==0) then
       allocate(rw2(ph%yst(1):ph%yen(1),ph%yst(2):ph%yen(2), &amp;amp;
            ph%yst(3):ph%yen(3)))
       allocate(rw2b(ph%yst(1):ph%yen(1),ph%yst(2):ph%yen(2), &amp;amp;
            ph%yst(3):ph%yen(3)))
       allocate(cw1(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
                 sp%xst(3):sp%xen(3)))
       allocate(cw2(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
                 sp%yst(3):sp%yen(3)))
       allocate(cw22(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
            sp%yst(3):sp%yen(3)))
       allocate(cw2b(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
                 sp%yst(3):sp%yen(3)))
       allocate(cw2c(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
                 sp%yst(3):sp%yen(3)))
       allocate(kxyz(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
            sp%yst(3):sp%yen(3)))
       allocate(a(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a2(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a3(sp%yst(1):sp%yen(1),ny,sp%yst(3):sp%yen(3),5))
       !(010)  rw2 rw2b cw2 cw22 cw2b cw2c kxyz  ^a
    else if (bcx==1 .and. bcy==1) then
       allocate(cw1(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
                 sp%xst(3):sp%xen(3)))
       allocate(cw1b(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
                 sp%xst(3):sp%xen(3)))
       allocate(cw2(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
                 sp%yst(3):sp%yen(3)))
       allocate(cw22(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
            sp%yst(3):sp%yen(3)))
       allocate(cw2b(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
                 sp%yst(3):sp%yen(3)))
       allocate(cw2c(sp%yst(1):sp%yen(1),sp%yst(2):sp%yen(2), &amp;amp;
                 sp%yst(3):sp%yen(3)))
       allocate(rw1(ph%xst(1):ph%xen(1),ph%xst(2):ph%xen(2), &amp;amp;
            ph%xst(3):ph%xen(3)))
       allocate(rw1b(ph%xst(1):ph%xen(1),ph%xst(2):ph%xen(2), &amp;amp;
            ph%xst(3):ph%xen(3)))
       allocate(rw2(ph%yst(1):ph%yen(1),ph%yst(2):ph%yen(2), &amp;amp;
            ph%yst(3):ph%yen(3)))
       allocate(rw2b(ph%yst(1):ph%yen(1),ph%yst(2):ph%yen(2), &amp;amp;
            ph%yst(3):ph%yen(3)))
        !(11*) cw1 cw1b cw2 cw2b  cw2c  rw1 rw1b rw2b
       if (bcz==1) then  
          allocate(rw3(ph%zsz(1),ph%zsz(2),ph%zsz(3)))
       end if
       allocate(kxyz(sp%xst(1):sp%xen(1),sp%xst(2):sp%xen(2), &amp;amp;
            sp%xst(3):sp%xen(3)))    
       allocate(a(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a2(sp%yst(1):sp%yen(1),ny/2,sp%yst(3):sp%yen(3),5))
       allocate(a3(sp%yst(1):sp%yen(1),nym,sp%yst(3):sp%yen(3),5))      
       !(111) rw3  kxyz  ^a
    end if

    call waves()

    return
  end subroutine decomp_2d_poisson_init


  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Release memory used by Poisson solver
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine decomp_2d_poisson_finalize

    implicit none

    deallocate(ax,bx,ay,by,az,bz)

    call decomp_info_finalize(ph)
    call decomp_info_finalize(sp)

    call decomp_2d_fft_finalize
    fft_initialised = .false.

    deallocate(kxyz)

    if (bcx==0 .and. bcy==0 .and. bcz==0) then
       deallocate(cw1)
       ! (000) cw1
    else if (bcx==1 .and. bcy==0 .and. bcz==0) then
       deallocate(cw1,cw1b,rw1,rw1b,rw2)
       ! (100)   cw1 cw1b rw1 rw1b rw2
    else if (bcx==0 .and. bcy==1 .and. bcz==0) then
       deallocate(cw1,cw2,cw2b,rw2,rw2b)
       ! (010)   cw1 cw2  cw2b  rw2 rw2b
    else if (bcx==1 .and. bcy==1) then
       deallocate(cw1,cw1b,cw2,cw2b,rw1,rw1b,rw2,rw2b)
       ! (11*)   cw1,cw1b,cw2,cw2b,rw1,rw1b,rw2,rw2b
       if (bcz==1) then
          deallocate(rw3)
        !(111)    rw3
       end if
    end if

    return
  end subroutine decomp_2d_poisson_finalize


  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Top level wrapper
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine poisson(rhs, bcx, bcy, bcz)

    implicit none

    real(mytype), dimension(:,:,:), intent(INOUT) :: rhs
    integer, intent(IN) :: bcx, bcy, bcz  ! boundary conditions
    integer :: i

    if (bcx==0 .and. bcy==0 .and. bcz==0) then
       call poisson_000(rhs)
    else if (bcx==1 .and. bcy==0 .and. bcz==0) then
       call poisson_100(rhs)
    else if (bcx==0 .and. bcy==1 .and. bcz==0) then
       call poisson_010(rhs)
    else if (bcx==1 .and. bcy==1) then   ! 110 &amp;amp; 111
       call poisson_11x(rhs, bcz)
    else
       stop &#39;boundary condition not supported&#39;
    end if

    return
  end subroutine poisson


  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Solving 3D Poisson equation with periodic B.C in all 3 dimensions
  !                                                      3
  !                                                      3
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine poisson_000(rhs)

    use derivX
    use derivY
    use derivZ

    ! right-hand-side of Poisson as input
    ! solution of Poisson as output
    real(mytype), dimension(:,:,:), intent(INOUT) :: rhs

    integer, dimension(3) :: fft_start, fft_end, fft_size

    complex(mytype) :: xyzk

    complex(mytype) :: ytt,xtt,ztt,yt1,xt1,yt2,xt2
    complex(mytype) :: xtt1,ytt1,ztt1,zt1,zt2


    real(mytype) :: tmp1, tmp2,x ,y, z
    
    integer :: nx,ny,nz, i,j,k

    nx = nx_global
    ny = ny_global
    nz = nz_global

    if (.not. fft_initialised) then
       call decomp_2d_fft_init(PHYSICAL_IN_Z)
       fft_initialised = .true.
    end if

    ! compute r2c transform   r2c:real to complex by zhaoliang
    ! cw1 is 3dim data structrue
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!! only fft to transform the real data to complex data while (100) twice
    !!!!! one is tranform and then fft  (you can see poisson100
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    call decomp_2d_fft_3d(rhs,cw1)
    

    ! normalisation
    !  why this below is called normalisation ??????  just divide 3dim grid number
    cw1 = cw1 / real(nx, kind=mytype) /real(ny, kind=mytype) &amp;amp;
         / real(nz, kind=mytype)

    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)

             ! post-processing in spectral space

             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!post-processing in 3-direction can be
             !!!!!!!!!!!!!!!!! set in the same cycle,because they are
             !!!!!!!!!!!!!!!!!! similar
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

             ! POST PROCESSING IN Z
             tmp1 = real(cw1(i,j,k), kind=mytype)   !  get the real number of cw1
             tmp2 = aimag(cw1(i,j,k))               !  get the imagenumber of cw1
             cw1(i,j,k) = cmplx(tmp1*bz(k)+tmp2*az(k), &amp;amp;
                  tmp2*bz(k)-tmp1*az(k), kind=mytype)   ! modify the cw1 in the spectral space Z
                                                    !  bz  az
                                                    !  by  ay
                                                    !  bx  ax

             ! POST PROCESSING IN Y
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*by(j)+tmp2*ay(j), &amp;amp;
                  tmp2*by(j)-tmp1*ay(j), kind=mytype)
             if (j.gt.(ny/2+1)) cw1(i,j,k)=-cw1(i,j,k)   ! why should be axisymmetry!

             ! POST PROCESSING IN X
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bx(i)+tmp2*ax(i), &amp;amp;
                  tmp2*bx(i)-tmp1*ax(i), kind=mytype)
             if (i.gt.(nx/2+1)) cw1(i,j,k)=-cw1(i,j,k)

             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!! Solve Poisson
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

             tmp1=real(kxyz(i,j,k), kind=mytype)
             tmp2=aimag(kxyz(i,j,k))
             ! CANNOT DO A DIVISION BY ZERO
             !  Yes ! division  by zero is impossible!!!-----------------------------------&amp;lt;
             if ((tmp1.lt.epsilon).or.(tmp2.lt.epsilon)) then   !epsilon?  what does it mean?
                cw1(i,j,k)=0._mytype
!                print *,&#39;DIV 0&#39;,i,j,k,epsilon
             else
                cw1(i,j,k)=cmplx( real(cw1(i,j,k), kind=mytype) / (-tmp1), &amp;amp;
                     aimag(cw1(i,j,k))/(-tmp2), kind=mytype)
             end if

           !Print result in spectal space after Poisson
      !     if (abs(out(i,j,k)) &amp;gt; 1.0e-4) then
      !        write(*,*) &#39;AFTER&#39;,i,j,k,out(i,j,k),xyzk
      !     end if


             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             ! post-processing backward
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             
             ! POST PROCESSING IN Z
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)-tmp2*az(k), &amp;amp;
                  -tmp2*bz(k)-tmp1*az(k), kind=mytype)
              !                                          bz    az
              !                                          by    ay
              !                                          bx    ax

             ! POST PROCESSING IN Y
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*by(j)+tmp2*ay(j), &amp;amp;
                  tmp2*by(j)-tmp1*ay(j), kind=mytype)
             if (j.gt.(ny/2+1)) cw1(i,j,k)=-cw1(i,j,k)

             ! POST PROCESSING IN X
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bx(i)+tmp2*ax(i), &amp;amp;
                  -tmp2*bx(i)+tmp1*ax(i), kind=mytype)
             if (i.gt.(nx/2+1)) cw1(i,j,k)=-cw1(i,j,k)

          end do
       end do
    end do
             
    ! compute c2r transform
    call decomp_2d_fft_3d(cw1,rhs)    !  from complex  to real!
    
 !   call decomp_2d_fft_finalize

    return
  end subroutine poisson_000


  subroutine poisson_100(rhs)
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      !!!! get the rhs and then modify rhs ,at last return the rhs
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    implicit none

    real(mytype), dimension(:,:,:), intent(INOUT) :: rhs

    complex(mytype) :: xyzk
    real(mytype) :: tmp1, tmp2, tmp3, tmp4
    real(mytype) :: xx1,xx2,xx3,xx4,xx5,xx6,xx7,xx8
    
    integer :: nx,ny,nz, i,j,k, itmp
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!  8 transform   from x --&amp;gt;y --&amp;gt;z then z--&amp;gt; y ---&amp;gt;x at the beginning
    !!!!!!!!!!!!!!!!!!from x --&amp;gt;y --&amp;gt;z then z--&amp;gt; y ---&amp;gt;x at the endding
    !!!!!  (100 add 8 more transform than 000) while 000 is 0 transform
    !!!!!  so rhs is in the z pencil ,no there are not z pencil at all!
    !!!!!   the program is  2-dim pm*pn decomp !  so only  xpencil and y pencil
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                   !!!!!!!!!!!!!!twice real to complex
                     !!!!!!!!!!! 1: transform rhs-rw2-rw1
                     !!!!!!!!!!! 2: fft       rhs-----rw1
                   !!!!!!!!!!!!!!twice complex to real
                     !!!!!!!!!!! 1: transfrom rw1-rw2--rhs
                     !!!!!!!!!!! 2: fft       rw1------rhs
                   !!!!!!!!!!!!! post-processing operations is under the complex condition
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!   input real rhs(:.:,:) in the z pencil
    !!!!!!!!!!!!   2+2 transform    |destination: modify the rhs
    !!!!!!!!!!!!   1 normalisation
    !!!!!!!!!!!!   1 FFT forward
    !!!!!!!!!!!!   3 post-processing   z--&amp;gt;y---&amp;gt;x  direction not pencil
    !!!!!!!!!!!!   1 poisson solver
    !!!!!!!!!!!!   3 post-processing backward  x---&amp;gt;y----&amp;gt;z  direction
    !!!!!!!!!!!!   1 FFT backward
    !!!!!!!!!!!!   2+2 transform    |destination: modify the rhs
    !!!!!!!!!!!!   output real rhs(:,:,:)  in the z pencil
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

100 format(1x,a8,3I4,2F12.6)

    nx = nx_global - 1
    ny = ny_global
    nz = nz_global

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
    ! rhs is in Z-pencil(wrong!There isn&#39;t Z pencil)(wrong
      !again, there is Z pencil))but requires global operations in X
    ! why should do the transpose!!!!!!!!!!!!!!
       ! why in the poisson_000 is not needed!???????????????
    !   two steps to change from z to x
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1

    call transpose_z_to_y(rhs,rw2,ph)  ! z pencil in y pencil but in the physical space
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!rw2 is the complex 3-dim data the same as rw1
    call transpose_y_to_x(rw2,rw1,ph)
    do k=ph%xst(3),ph%xen(3)
       do j=ph%xst(2),ph%xen(2)
          do i=1,nx/2
              !!! rw1  rw1b   1 means  x pencil   
              !!! rw2  rw2b   2 means  y pencil
             rw1b(i,j,k)=rw1(2*(i-1)+1,j,k)  ! the odd terms  is for the half before
          enddo
          do i=nx/2+1,nx
             rw1b(i,j,k)=rw1(2*nx-2*i+2,j,k)  ! the reverse terms is for the half after
          enddo
       enddo
    end do

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
    !!!!3 layers data
    !!!! rw1b is the top lay data  xpencil     physical space
    !!!! rw2  is in the middle lay data   y pencil   physical space
    !!!! rw1 rhs  is in the outer lay data    z pencil  spectral space
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11

    call transpose_x_to_y(rw1b,rw2,ph)    ! let x pencil rw1b to y pencil
    call transpose_y_to_z(rw2,rhs,ph)     ! let y pencil rw2 to  z pencil&#39;s rhs
    !!!!!!!!!!!!first time get what we want

    if (.not. fft_initialised) then
       call decomp_2d_fft_init(PHYSICAL_IN_Z,nx,ny,nz)
       fft_initialised = .true.
    end if

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! compute r2c transform
    !           why should force the before pre-posting   ------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;
    !!!!!!!!!the most key operation :::: the fft operator: decomp_2d_fft_3d
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    call decomp_2d_fft_3d(rhs,cw1)  !  from real to complex!  and begin poission solver

    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! in the z pencil we did the fft transform
        !!!!!!!!!!!!!!!!!! so cw1 is 3d complex data ,yeah (:,:,:)
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



    ! normalisation
    cw1 = cw1 / real(nx, kind=mytype) /real(ny, kind=mytype) &amp;amp;
         / real(nz, kind=mytype)
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;START&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif

    ! post-processing in spectral space

    ! POST PROCESSING IN Z
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)+tmp2*az(k), &amp;amp;
                  tmp2*bz(k)-tmp1*az(k), kind=mytype)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;after z&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    ! POST PROCESSING IN Y
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*by(j)+tmp2*ay(j), &amp;amp;
                  tmp2*by(j)-tmp1*ay(j), kind=mytype)
             if (j.gt.(ny/2+1)) cw1(i,j,k)=-cw1(i,j,k)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;after y&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!because (100)
                   !!!!!!!!!!!!!!!!!!!!!so the post processing in x is different
                   !!!!!!!!!!!!!!!!!!!!!from the  y and z
    ! POST PROCESSING IN X
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          cw1b(1,j,k)=cw1(1,j,k)
          do i = 2,nx
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             tmp3 = real(cw1(nx-i+2,j,k), kind=mytype) !!! the 2~nx
             tmp4 = aimag(cw1(nx-i+2,j,k))    !!!!!!!!!!!!     2~nx
             xx1=tmp1*bx(i)/2._mytype
             xx2=tmp1*ax(i)/2._mytype
             xx3=tmp2*bx(i)/2._mytype
             xx4=tmp2*ax(i)/2._mytype
             xx5=tmp3*bx(i)/2._mytype
             xx6=tmp3*ax(i)/2._mytype
             xx7=tmp4*bx(i)/2._mytype
             xx8=tmp4*ax(i)/2._mytype
             cw1b(i,j,k) = cmplx(xx1+xx4+xx5-xx8,-xx2+xx3+xx6+xx7, &amp;amp;
                  kind=mytype)  
          end do
       end do
    end do
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !  While  you set the -Debug in the compile period
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1b(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;after x&#39;,i,j,k,cw1b(i,j,k)
             end if
          end do
       end do
    end do
#endif
!!!!!!!!!!!!!!!!!!!!!from now on, the cw1b in x,y,z direction(not pencil)
!!!!!!!!!!!!!!!!!!!!is calculated ,so now you can calculate cw1b in the
!!!!!!!!!!!!!!!!!!!!!!! poisson condition ,yes poisson solver

    ! Solve Poisson
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             !tmp1=real(zk2(k)+yk2(j)+xk2(i), kind=mytype)
             !tmp2=aimag(zk2(k)+yk2(j)+xk2(i))
             tmp1=real(kxyz(i,j,k), kind=mytype)
             tmp2=aimag(kxyz(i,j,k))
             !xyzk=cmplx(tmp1,tmp2, kind=mytype)
             ! CANNOT DO A DIVISION BY ZERO
! yes
             if ((abs(tmp1).lt.epsilon).and.(abs(tmp2).lt.epsilon)) then    
                cw1b(i,j,k)=cmplx(0._mytype,0._mytype, kind=mytype)
             end if
             if ((abs(tmp1).lt.epsilon).and.(abs(tmp2).ge.epsilon)) then
                cw1b(i,j,k)=cmplx(0._mytype, &amp;amp;
                     aimag(cw1b(i,j,k))/(-tmp2), kind=mytype)
             end if
             if ((abs(tmp1).ge.epsilon).and.(abs(tmp2).lt.epsilon)) then    
                cw1b(i,j,k)=cmplx( real(cw1b(i,j,k), kind=mytype) &amp;amp;
                     /(-tmp1), 0._mytype, kind=mytype)
             end if
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             !!!!!!!!!!!!!!!!!!the most dayly processing
             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             if ((abs(tmp1).ge.epsilon).and.(abs(tmp2).ge.epsilon)) then
                cw1b(i,j,k)=cmplx( real(cw1b(i,j,k), kind=mytype) &amp;amp;
                     /(-tmp1), &amp;amp;
                     aimag(cw1b(i,j,k))/(-tmp2), kind=mytype)
             end if
#ifdef DEBUG
             if (abs(cw1b(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;AFTER&#39;,i,j,k,cw1b(i,j,k)
#endif
          end do
       end do
    end do
    
    ! post-processing backward

!!!!!!!!!!!!!!!!!!!!!!  You know cw1b is the cw1&#39;s another form in the spectral
!!!!!!!!!!!!!!!!!!!!!! space ,so you need to change the spetral space to physical
!!!!!!!!!!!!!!!!!!!!!!! space again ,yes get the cw1
!!!!!!!!!!!!!!!!!!!!!!!! from now on ,you will found that the calculate of poisson
!!!!!!!!!!!!!!!!!!!!!!!! equation is in the spectral space ,from the fft,then 3 post
!!!!!!!!!!!!!!!!!!!!!!!!!! processing in x,y,z 3 directions, then calculate the  poisson
!!!!!!!!!!!!!!!!!!!!!!!!!! equation. OK,then you start next!
    ! POST PROCESSING IN X
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          cw1(1,j,k)=cw1b(1,j,k)
          do i = 2,nx
             tmp1 = real(cw1b(i,j,k), kind=mytype)
             tmp2 = aimag(cw1b(i,j,k))
             tmp3 = real(cw1b(nx-i+2,j,k), kind=mytype)
             tmp4 = aimag(cw1b(nx-i+2,j,k))
             xx1=tmp1*bx(i)
             xx2=tmp1*ax(i)
             xx3=tmp2*bx(i)
             xx4=tmp2*ax(i)
             xx5=tmp3*bx(i)
             xx6=tmp3*ax(i)
             xx7=tmp4*bx(i)
             xx8=tmp4*ax(i)
             cw1(i,j,k) = cmplx(xx1-xx4+xx6+xx7,-(-xx2-xx3+xx5-xx8), &amp;amp;
                  kind=mytype)        
              !!!!!the buterfly algorithm!!!!!!!!!!!!!!!!!!!!!!!
          end do
       end do
    end do
    !!!!!!!!!!!!!!!!!!!!!!!from now on x direction ,the spectral data has been transform to
    !!!!!!!!!!!!!!!!!!!!!!!! physical space, but still the complex
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;AFTER X&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif

    ! POST PROCESSING IN Y
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*by(j)-tmp2*ay(j), &amp;amp;
                  tmp2*by(j)+tmp1*ay(j), kind=mytype)
             if (j.gt.(ny/2+1)) cw1(i,j,k)=-cw1(i,j,k)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;AFTER Y&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

                                    !!!!!!!!!!!!!!!!!!!!!! by  ay
                                    !!!!!!!!!!!!!!!!!!!!!! bz  az
    ! POST PROCESSING IN Z
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)-tmp2*az(k), &amp;amp;
                  tmp2*bz(k)+tmp1*az(k), kind=mytype)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;END&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    ! compute c2r transform
    call decomp_2d_fft_3d(cw1,rhs)

    ! rhs is in Z-pencil but requires global operations in X
    call transpose_z_to_y(rhs,rw2,ph)
    call transpose_y_to_x(rw2,rw1,ph)
    do k=ph%xst(3),ph%xen(3)
       do j=ph%xst(2),ph%xen(2)
          do i=1,nx/2
             rw1b(2*i-1,j,k)=rw1(i,j,k)   ! the odd terms is setted!
          enddo
          do i=1,nx/2
             rw1b(2*i,j,k)=rw1(nx-i+1,j,k)  ! the even terms is setted
          enddo
       enddo
    end do
    call transpose_x_to_y(rw1b,rw2,ph)
    call transpose_y_to_z(rw2,rhs,ph)
!!!!!!!!!!!!!the finally outcome rhs
    
  !  call decomp_2d_fft_finalize

    return
  end subroutine poisson_100

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Neumann!!!!!!!!!!!!!!!!!!!!!!!!!!!111
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Solving 3D Poisson equation: Neumann in Y; periodic in X &amp;amp; Z
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine poisson_010(rhs)

    implicit none

    real(mytype), dimension(:,:,:), intent(INOUT) :: rhs

    complex(mytype) :: xyzk
    real(mytype) :: tmp1, tmp2, tmp3, tmp4
    real(mytype) :: xx1,xx2,xx3,xx4,xx5,xx6,xx7,xx8

    integer :: nx,ny,nz, i,j,k

100 format(1x,a8,3I4,2F12.6)

    nx = nx_global
    ny = ny_global - 1  ! (010)  so have fewer1 ny!
    nz = nz_global

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!so if (11*)  you need to ?what pencil??????
    !!!!??
    ! rhs is in Z-pencil but requires global operations in Y  because(010)

                   !!!!!!!!!!!!!!twice real to complex
                     !!!!!!!!!!! 1: transform rhs-rw2-rw1
                     !!!!!!!!!!! 2: fft       rhs-----rw1
                   !!!!!!!!!!!!!!twice complex to real
                     !!!!!!!!!!! 1: transfrom rw1-rw2--rhs
                     !!!!!!!!!!! 2: fft       rw1------rhs
                   !!!!!!!!!!!!! post-processing operations is under the complex condition
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!   input real rhs(:.:,:) in the z pencil
    !!!!!!!!!!!!   1+1 transform  z-&amp;gt;y y-&amp;gt;z  |destination: modify the rhs  because z-y=1  rather than z-x=2
    !!!!!!!!!!!!   1 normalisation
    !!!!!!!!!!!!   1 FFT forward
    !!!!!!!!!!!!   2 post-processing   z--&amp;gt;x  direction not pencil
    !!!!!!!!!!!!   1 transform z-y
    !!!!!!!!!!!!   1 post-processing   y
    !!!!!!!!!!!!   1 poisson solver
    !!!!!!!!!!!!   1 matrice_refinement
    !!!!!!!!!!!!   3 inversion5_v1  inversion5_v2
    !!!!!!!!!!!!   1 post-processing backward  Y
    !!!!!!!!!!!!   1 transform y-z
    !!!!!!!!!!!!   2 post-processing backward  x----&amp;gt;z  direction
    !!!!!!!!!!!!   1 FFT backward
    !!!!!!!!!!!!   1+1 transform    |destination: modify the rhs
    !!!!!!!!!!!!   output real rhs(:,:,:)  in the z pencil
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                   !!!!!!!!!!!!!!!!!!so the key factor  a  a2  a3    ax bx
                   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ay by
                   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! az bz

    call transpose_z_to_y(rhs,rw2,ph)
    do k=ph%yst(3),ph%yen(3)
       do i=ph%yst(1),ph%yen(1)
          do j=1,ny/2
             rw2b(i,j,k)=rw2(i,2*(j-1)+1,k)
          enddo
          do j=ny/2+1,ny
             rw2b(i,j,k)=rw2(i,2*ny-2*j+2,k)
          enddo
       enddo
    end do
    call transpose_y_to_z(rw2b,rhs,ph)

    if (.not. fft_initialised) then
       call decomp_2d_fft_init(PHYSICAL_IN_Z,nx,ny,nz)
       fft_initialised = .true.
    end if
    ! compute r2c transform
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    call decomp_2d_fft_3d(rhs,cw1)
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! normalisation
    cw1 = cw1 / real(nx, kind=mytype) /real(ny, kind=mytype) &amp;amp;
         / real(nz, kind=mytype)
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;START&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif

    ! post-processing in spectral space

    ! POST PROCESSING IN Z
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)+tmp2*az(k), &amp;amp;
                  tmp2*bz(k)-tmp1*az(k), kind=mytype)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;after z&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    ! POST PROCESSING IN X
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bx(i)+tmp2*ax(i), &amp;amp;
                  tmp2*bx(i)-tmp1*ax(i), kind=mytype)
             if (i.gt.(nx/2+1)) cw1(i,j,k)=-cw1(i,j,k)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;after x&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do
    
    ! POST PROCESSING IN Y
    ! NEED TO BE IN Y PENCILS!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!sp!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    call transpose_x_to_y(cw1,cw2,sp)

    !!!!!!!!!!!!!!!!!!!!!sp!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    do k = sp%yst(3), sp%yen(3)
       do i = sp%yst(1), sp%yen(1)
          cw2b(i,1,k)=cw2(i,1,k)
          do j = 2,ny      
             tmp1 = real(cw2(i,j,k), kind=mytype)
             tmp2 = aimag(cw2(i,j,k))
             tmp3 = real(cw2(i,ny-j+2,k), kind=mytype)
             tmp4 = aimag(cw2(i,ny-j+2,k))
             xx1=tmp1*by(j)/2._mytype
             xx2=tmp1*ay(j)/2._mytype
             xx3=tmp2*by(j)/2._mytype
             xx4=tmp2*ay(j)/2._mytype
             xx5=tmp3*by(j)/2._mytype
             xx6=tmp3*ay(j)/2._mytype
             xx7=tmp4*by(j)/2._mytype
             xx8=tmp4*ay(j)/2._mytype
             cw2b(i,j,k) = cmplx(xx1+xx4+xx5-xx8,-xx2+xx3+xx6+xx7, &amp;amp;
                  kind=mytype)
          end do
       end do
    end do
#ifdef DEBUG
    do k = sp%yst(3), sp%yen(3)
       do j = sp%yst(2), sp%yen(2)
          do i = sp%yst(1), sp%yen(1)
             if (abs(cw2b(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;after y&#39;,i,j,k,cw2b(i,j,k)
                print *,kxyz(i,j,k)
             end if
          end do
       end do
    end do
#endif

    if (istret==0) then

    ! Solve Poisson
    ! doing wave number division in Y-pencil
    do k = sp%yst(3), sp%yen(3)
       do j = sp%yst(2), sp%yen(2)
          do i = sp%yst(1), sp%yen(1)
             !tmp1=real(zk2(k)+yk2(j)+xk2(i), kind=mytype)
             !tmp2=aimag(zk2(k)+yk2(j)+xk2(i))
             tmp1=real(kxyz(i,j,k), kind=mytype)
             tmp2=aimag(kxyz(i,j,k))
             !xyzk=cmplx(tmp1,tmp2, kind=mytype)
             !CANNOT DO A DIVISION BY ZERO
             if ((abs(tmp1).lt.epsilon).and.(abs(tmp2).lt.epsilon)) then    
                cw2b(i,j,k)=cmplx(0._mytype,0._mytype, kind=mytype)
             end if
             if ((abs(tmp1).lt.epsilon).and.(abs(tmp2).ge.epsilon)) then
                cw2b(i,j,k)=cmplx(0._mytype, &amp;amp;
                     aimag(cw2b(i,j,k))/(-tmp2), kind=mytype)
             end if
             if ((abs(tmp1).ge.epsilon).and.(abs(tmp2).lt.epsilon)) then    
                cw2b(i,j,k)=cmplx( real(cw2b(i,j,k), kind=mytype) &amp;amp;
                     /(-tmp1), 0._mytype, kind=mytype)
             end if
             if ((abs(tmp1).ge.epsilon).and.(abs(tmp2).ge.epsilon)) then
                cw2b(i,j,k)=cmplx( real(cw2b(i,j,k), kind=mytype) &amp;amp;
                     /(-tmp1), &amp;amp;
                     aimag(cw2b(i,j,k))/(-tmp2), kind=mytype)
             end if
          end do
       end do
    end do

    else
       
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       call matrice_refinement()
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!       do k = sp%yst(3), sp%yen(3)
!          do j = 1,ny/2
!             do i = sp%yst(1), sp%yen(1)
!                print *,i,j,k,a(i,j,k,3)
!!                if (nrank.le.1) print *,i,j,k,a(i,j,k,3)
!!                if (nrank.gt.1) print *,i+4,j,k,a(i,j,k,3)
!             enddo
!          enddo
!       enddo
     


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!istret  !=3
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       if (istret.ne.3) then
          cw2(:,:,:)=0.;cw2c(:,:,:)=0.
          do k = sp%yst(3), sp%yen(3)
          do j = 1,ny/2
          do i = sp%yst(1), sp%yen(1)
             cw2(i,j,k)=cw2b(i,2*j-1,k)
             cw2c(i,j,k)=cw2b(i,2*j,k)
          enddo
          enddo
          enddo

 !   do k = sp%yst(3), sp%yen(3)
 !      do j = 1,ny/2
 !         do i = sp%yst(1), sp%yen(1)
 !            if (abs(cw2(i,j,k)) &amp;gt; 1.0e-4) then
 !               write(*,*) &#39;before IN&#39;,i,j,k,cw2(i,j,k)!*2.
 !!            end if
  !        end do
  !     end do
  !  end do
          
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!for the strech  grid!!!!!!!!!!!!!!!!!!!!!!!
         call inversion5_v1(a,cw2,sp)
         call inversion5_v1(a2,cw2c,sp)

!         cw2(1,1,1)=cw2(1,1,1)*0.5
         
 
!   do k = sp%yst(3), sp%yen(3)
!       do j = 1,ny/2
!          do i = sp%yst(1), sp%yen(1)
!             if (abs(cw2c(i,j,k)) &amp;gt; 1.0e-4) then
!                write(*,*) &#39;after IN&#39;,i,j,k,cw2c(i,j,k)!*2.
!             end if
!          end do
!       end do
!    end do

          cw2b(:,:,:)=0.
          do k=sp%yst(3), sp%yen(3)
          do j=1,ny-1,2
          do i=sp%yst(1), sp%yen(1)
             cw2b(i,j,k)=cw2(i,(j+1)/2,k)
          enddo
          enddo
          do j=2,ny,2
          do i=sp%yst(1), sp%yen(1)
             cw2b(i,j,k)=cw2c(i,j/2,k)
          enddo
          enddo
          enddo
          !do k=sp%yst(3), sp%yen(3)
          !do i=sp%yst(1), sp%yen(1)
          !   if ((xkx(i)==0).and.(zkz(k)==0)) then
          !   !   cw2b(i,1,1)=0.
          !   !   cw2b(i,ny,1)=0.
          !   endif
          !enddo
          !enddo
       else
          do k = sp%yst(3), sp%yen(3)
          do j = 1,ny
          do i = sp%yst(1), sp%yen(1)
             cw2(i,j,k)=cw2b(i,j,k)
          enddo
          enddo
          enddo
          call inversion5_v2(a3,cw2,sp)
          do k = sp%yst(3), sp%yen(3)
          do j = 1,ny
          do i = sp%yst(1), sp%yen(1)
             cw2b(i,j,k)=cw2(i,j,k)
          enddo
          enddo
          enddo
       endif

    endif

!    print *,nrank, sp%yst(3),sp%yen(3),sp%yst(1),sp%yen(1)

!we are in Y pencil
    do k = sp%yst(3), sp%yen(3)  
    do i = sp%yst(1), sp%yen(1)
       if ((i==nx/2+1).and.(k==nz/2+1)) then
          cw2b(i,:,k)=0.
       endif
    enddo
    enddo
#ifdef DEBUG
    do k = sp%yst(3), sp%yen(3)
       do j = sp%yst(2), sp%yen(2)
          do i = sp%yst(1), sp%yen(1)
             if (abs(cw2b(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;AFTER&#39;,i,j,k,cw2b(i,j,k)
                print *,kxyz(i,j,k)
             end if
          end do
       end do
    end do
#endif

    ! post-processing backward

    ! POST PROCESSING IN Y
    do k = sp%yst(3), sp%yen(3)
       do i = sp%yst(1), sp%yen(1)
          cw2(i,1,k)=cw2b(i,1,k)
          do j = 2,ny
             tmp1 = real(cw2b(i,j,k), kind=mytype)
             tmp2 = aimag(cw2b(i,j,k))
             tmp3 = real(cw2b(i,ny-j+2,k), kind=mytype)
             tmp4 = aimag(cw2b(i,ny-j+2,k))
             xx1=tmp1*by(j)
             xx2=tmp1*ay(j)
             xx3=tmp2*by(j)
             xx4=tmp2*ay(j)
             xx5=tmp3*by(j)
             xx6=tmp3*ay(j)
             xx7=tmp4*by(j)
             xx8=tmp4*ay(j)
             cw2(i,j,k) = cmplx(xx1-xx4+xx6+xx7,-(-xx2-xx3+xx5-xx8), &amp;amp;
                  kind=mytype)
          end do
       end do
    end do
           
    ! Back to X-pencil
    call transpose_y_to_x(cw2,cw1,sp)
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;AFTER Y&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif
    
    ! POST PROCESSING IN X
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bx(i)-tmp2*ax(i), &amp;amp;
                  tmp2*bx(i)+tmp1*ax(i), kind=mytype)
             if (i.gt.(nx/2+1)) cw1(i,j,k)=-cw1(i,j,k)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;AFTER X&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    ! POST PROCESSING IN Z
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)-tmp2*az(k), &amp;amp;
                  tmp2*bz(k)+tmp1*az(k), kind=mytype)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;END&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    ! compute c2r transform, back to physical space

    call decomp_2d_fft_3d(cw1,rhs)

    ! rhs is in Z-pencil but requires global operations in Y
    call transpose_z_to_y(rhs,rw2,ph)
    do k=ph%yst(3),ph%yen(3)
       do i=ph%yst(1),ph%yen(1)
          do j=1,ny/2
             rw2b(i,2*j-1,k)=rw2(i,j,k)
          enddo
          do j=1,ny/2
             rw2b(i,2*j,k)=rw2(i,ny-j+1,k)
          enddo
       enddo
    end do
    call transpose_y_to_z(rw2b,rhs,ph)

  !  call decomp_2d_fft_finalize

    return
  end subroutine poisson_010

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!Neumann!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!11x!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!Neumann Neumann Neumann!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!Neumann Neumann periodic!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Solving 3D Poisson equation: Neumann in X, Y; Neumann/periodic in Z
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine poisson_11x(rhs, nclz1)




                   !!!!!!!!!!!!!!twice real to complex
                     !!!!!!!!!!! 1: transform rhs-rw2-rw1
                     !!!!!!!!!!! 2: fft       rhs-----rw1
                   !!!!!!!!!!!!!!twice complex to real
                     !!!!!!!!!!! 1: transfrom rw1-rw2--rhs
                     !!!!!!!!!!! 2: fft       rw1------rhs
                   !!!!!!!!!!!!! post-processing operations is under the complex condition
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!   input real rhs(:.:,:) in the z pencil
    !!!!!!!!!!!!   2+2 transform    z--y  y-&amp;gt;x   x-y y-z|destination: modify the rhs
    !!!!!!!!!!!!   1 normalisation
    !!!!!!!!!!!!   1 FFT forward
    !!!!!!!!!!!!   1 post-processing  z
    !!!!!!!!!!!!   1 transpose  x--y
    !!!!!!!!!!!!   1 post-processing  y
    !!!!!!!!!!!!   1 transpose  y--x
    !!!!!!!!!!!!   1 post-processing  x (because  he thinks he is in X pencil, Zhaoliang said no)
    !!!!!!!!!!!!   1 poisson solver
    !!!!!!!!!!!!   1 matrice_refinemento
    !!!!!!!!!!!!   1 transpse   x--y  (for strecting  because strecthing is in the y direction)
    !!!!!!!!!!!!   1 inversion5_v1
    !!!!!!!!!!!!   1 transpose  y---x
    !!!!!!!!!!!!  
    !!!!!!!!!!!!   1 post-processing x
    !!!!!!!!!!!!   1 transpose  x-y
    !!!!!!!!!!!!   1 post-processing y
    !!!!!!!!!!!!   1 transpose  y-x
    !!!!!!!!!!!!   1 post-processing z
    !!!!!!!!!!!!!
    !!!!!!!!!!!!   1 FFT backward
    !!!!!!!!!!!!   2+2 transform    |destination: modify the rhs
    !!!!!!!!!!!!   output real rhs(:,:,:)  in the z pencil
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



    implicit none

    integer, intent(IN) :: nclz1    
    real(mytype), dimension(:,:,:), intent(INOUT) :: rhs

    complex(mytype) :: xyzk
    real(mytype) :: tmp1, tmp2, tmp3, tmp4
    real(mytype) :: xx1,xx2,xx3,xx4,xx5,xx6,xx7,xx8

    integer :: nx,ny,nz, i,j,k

100 format(1x,a8,3I4,2F12.6)

    nx = nx_global - 1   ! becasuse (110)
    ny = ny_global - 1

    if (nclz1==1) then     !!!!!the free-slip boundary condition
       nz = nz_global - 1
    else if (nclz1==0) then
       nz = nz_global
    end if
   
    if (nclz1==1) then  
       do j=1,ph%zsz(2)
          do i=1,ph%zsz(1)
             do k=1,nz/2
                rw3(i,j,k)=rhs(i,j,2*(k-1)+1)
             end do
             do k=nz/2+1,nz
                rw3(i,j,k)=rhs(i,j,2*nz-2*k+2)
             end do
          end do
       end do
       call transpose_z_to_y(rw3,rw2,ph)
    else if (nclz1==0) then     
       call transpose_z_to_y(rhs,rw2,ph)
    end if
    

    do k=ph%yst(3),ph%yen(3)
       do i=ph%yst(1),ph%yen(1)
          do j=1,ny/2
             rw2b(i,j,k)=rw2(i,2*(j-1)+1,k)
          end do
          do j=ny/2+1,ny
             rw2b(i,j,k)=rw2(i,2*ny-2*j+2,k)
          end do
       end do
    end do

    ! the global operations in X
    call transpose_y_to_x(rw2b,rw1,ph)

    do k=ph%xst(3),ph%xen(3)
       do j=ph%xst(2),ph%xen(2)
          do i=1,nx/2
             rw1b(i,j,k)=rw1(2*(i-1)+1,j,k)
          end do
          do i=nx/2+1,nx
             rw1b(i,j,k)=rw1(2*nx-2*i+2,j,k)
          end do
       end do
    end do

    ! back to Z-pencil
    call transpose_x_to_y(rw1b,rw2,ph)
    call transpose_y_to_z(rw2,rhs,ph)

    if (.not. fft_initialised) then
       call decomp_2d_fft_init(PHYSICAL_IN_Z,nx,ny,nz)
       fft_initialised = .true.
    end if

    ! compute r2c transform

    call decomp_2d_fft_3d(rhs,cw1)



    ! normalisation
    cw1 = cw1 / real(nx, kind=mytype) /real(ny, kind=mytype) &amp;amp;
         / real(nz, kind=mytype)
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;START&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif

    ! post-processing in spectral space

    ! POST PROCESSING IN Z
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)+tmp2*az(k), &amp;amp;
                  tmp2*bz(k)-tmp1*az(k), kind=mytype)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;after z&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do


    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!while  1  should be in the corresponding pencils
    !!!!!!!!!!!!!!!!!!!!!!!!!!!characteristic 2 : there sholud be tmp1*2*3*4
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! POST PROCESSING IN Y
    ! WE HAVE TO BE IN Y PENCILS



    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!No  we should be the z pencil!  
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !!!!!!!!!!!!!!!!!!!there is something wrong in the source code!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!But now we are in the z pencil not in
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  the x pencil!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!so,it should be
    !!!!!!!!!!!!!!!!!call transpose_z_to_y rather than transpose_x_to_y
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    call transpose_x_to_y(cw1,cw2,sp)
    do k = sp%yst(3), sp%yen(3)
       do i = sp%yst(1), sp%yen(1)
          cw2b(i,1,k)=cw2(i,1,k)
          do j = 2,ny
             tmp1 = real(cw2(i,j,k), kind=mytype)
             tmp2 = aimag(cw2(i,j,k))
             tmp3 = real(cw2(i,ny-j+2,k), kind=mytype)
             tmp4 = aimag(cw2(i,ny-j+2,k))
             xx1=tmp1*by(j)/2._mytype
             xx2=tmp1*ay(j)/2._mytype
             xx3=tmp2*by(j)/2._mytype
             xx4=tmp2*ay(j)/2._mytype
             xx5=tmp3*by(j)/2._mytype
             xx6=tmp3*ay(j)/2._mytype
             xx7=tmp4*by(j)/2._mytype
             xx8=tmp4*ay(j)/2._mytype
             cw2b(i,j,k) = cmplx(xx1+xx4+xx5-xx8,-xx2+xx3+xx6+xx7, &amp;amp;
                  kind=mytype)  
          end do
       end do
    end do
    
    ! back to X-pencil
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!the same wrong ,now you should
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!go back to the z pencil rather than the x pencil
    call transpose_y_to_x(cw2b,cw1,sp)
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;after y&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif
    
    ! POST PROCESSING IN X
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          cw1b(1,j,k)=cw1(1,j,k)
          do i = 2,nx
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             tmp3 = real(cw1(nx-i+2,j,k), kind=mytype)
             tmp4 = aimag(cw1(nx-i+2,j,k))
             xx1=tmp1*bx(i)/2._mytype
             xx2=tmp1*ax(i)/2._mytype
             xx3=tmp2*bx(i)/2._mytype
             xx4=tmp2*ax(i)/2._mytype
             xx5=tmp3*bx(i)/2._mytype
             xx6=tmp3*ax(i)/2._mytype
             xx7=tmp4*bx(i)/2._mytype
             xx8=tmp4*ax(i)/2._mytype
             cw1b(i,j,k) = cmplx(xx1+xx4+xx5-xx8,-xx2+xx3+xx6+xx7, &amp;amp;
                  kind=mytype)  
          end do
       end do
    end do
    
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1b(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,*) &#39;BEFORE&#39;,i,j,k,cw1b(i,j,k)
             end if
          end do
       end do
    end do
#endif

    if (istret==0) then

    ! Solve Poisson
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             !tmp1=real(zk2(k)+yk2(j)+xk2(i), kind=mytype)
             !tmp2=aimag(zk2(k)+yk2(j)+xk2(i))
             tmp1=real(kxyz(i,j,k), kind=mytype)
             tmp2=aimag(kxyz(i,j,k))
             !xyzk=cmplx(tmp1,tmp2, kind=mytype)
             !CANNOT DO A DIVISION BY ZERO
             if ((abs(tmp1).lt.epsilon).and.(abs(tmp2).lt.epsilon)) then    
                cw1b(i,j,k)=cmplx(0._mytype,0._mytype, kind=mytype)
             end if
             if ((abs(tmp1).lt.epsilon).and.(abs(tmp2).ge.epsilon)) then
                cw1b(i,j,k)=cmplx(0._mytype, &amp;amp;
                     aimag(cw1b(i,j,k))/(-tmp2), kind=mytype)
             end if
             if ((abs(tmp1).ge.epsilon).and.(abs(tmp2).lt.epsilon)) then    
                cw1b(i,j,k)=cmplx( real(cw1b(i,j,k), kind=mytype) &amp;amp;
                     /(-tmp1), 0._mytype, kind=mytype)
             end if
             if ((abs(tmp1).ge.epsilon).and.(abs(tmp2).ge.epsilon)) then
                cw1b(i,j,k)=cmplx( real(cw1b(i,j,k), kind=mytype) &amp;amp;
                     /(-tmp1), &amp;amp;
                     aimag(cw1b(i,j,k))/(-tmp2), kind=mytype)
             end if
          end do
       end do
    end do

    else
       call matrice_refinement()
       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11so       we  should  z-&amp;gt;y pencil but not  x-&amp;gt;ypencil
! the stretching is only working in Y pencils

!!!!!!!!!!!!!!!why the default the pencil is  x pencil rather than z pencil!!!
       call transpose_x_to_y(cw1b,cw2b,sp)
       !we are now in Y pencil
       
       if (istret.ne.3) then
          cw2(:,:,:)=0.;cw2c(:,:,:)=0.
          do k = sp%yst(3), sp%yen(3)
          do j = 1,ny/2
          do i = sp%yst(1), sp%yen(1)
             cw2(i,j,k)=cw2b(i,2*j-1,k)
             cw2c(i,j,k)=cw2b(i,2*j,k)
          enddo
          enddo
          enddo
          call inversion5_v1(a,cw2,sp)
          call inversion5_v1(a2,cw2c,sp)

          cw2b(:,:,:)=0.
          do k=sp%yst(3), sp%yen(3)
          do j=1,ny-1,2
          do i=sp%yst(1), sp%yen(1)
             cw2b(i,j,k)=cw2(i,(j+1)/2,k)
          enddo
          enddo
          do j=2,ny,2
          do i=sp%yst(1), sp%yen(1)
             cw2b(i,j,k)=cw2c(i,j/2,k)
          enddo
          enddo
          enddo
       else
          cw2(:,:,:)=0.
          do k = sp%yst(3), sp%yen(3)
          do j = sp%yst(2), sp%yen(2)
          do i = sp%yst(1), sp%yen(1)
             cw2(i,j,k)=cw2b(i,j,k)
          enddo
          enddo
          enddo

          call inversion5_v2(a3,cw2,sp)

          do k = sp%yst(3), sp%yen(3)
          do j = sp%yst(2), sp%yen(2)
          do i = sp%yst(1), sp%yen(1)
             cw2b(i,j,k)=cw2(i,j,k)
          enddo
          enddo
          enddo
       endif
!we have to go back in X pencils
       call transpose_y_to_x(cw2b,cw1b,sp)
    endif

#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1b(i,j,k)) &amp;gt; 1.0e-6) then
                write(*,*) &#39;AFTER&#39;,i,j,k,cw1b(i,j,k)
             end if
          end do
       end do
    end do
#endif
!stop
    ! post-processing backward
    
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          cw1(1,j,k)=cw1b(1,j,k)
          do i = 2,nx
             tmp1 = real(cw1b(i,j,k), kind=mytype)
             tmp2 = aimag(cw1b(i,j,k))
             tmp3 = real(cw1b(nx-i+2,j,k), kind=mytype)
             tmp4 = aimag(cw1b(nx-i+2,j,k))
             xx1=tmp1*bx(i)
             xx2=tmp1*ax(i)
             xx3=tmp2*bx(i)
             xx4=tmp2*ax(i)
             xx5=tmp3*bx(i)
             xx6=tmp3*ax(i)
             xx7=tmp4*bx(i)
             xx8=tmp4*ax(i)
             cw1(i,j,k) = cmplx(xx1-xx4+xx6+xx7,-(-xx2-xx3+xx5-xx8), &amp;amp;
                  kind=mytype)        
          end do
       end do
    end do
#ifdef DEBUG
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;AFTER X&#39;,i,j,k,cw1(i,j,k)
             end if
          end do
       end do
    end do
#endif

    ! POST PROCESSING IN Y
    ! NEED to be in Y-pencil
    call transpose_x_to_y(cw1,cw2,sp)
    do k = sp%yst(3), sp%yen(3)
       do i = sp%yst(1), sp%yen(1)
          cw2b(i,1,k)=cw2(i,1,k)
          do j = 2,ny
             tmp1 = real(cw2(i,j,k), kind=mytype)
             tmp2 = aimag(cw2(i,j,k))
             tmp3 = real(cw2(i,ny-j+2,k), kind=mytype)
             tmp4 = aimag(cw2(i,ny-j+2,k))
             xx1=tmp1*by(j)
             xx2=tmp1*ay(j)
             xx3=tmp2*by(j)
             xx4=tmp2*ay(j)
             xx5=tmp3*by(j)
             xx6=tmp3*ay(j)
             xx7=tmp4*by(j)
             xx8=tmp4*ay(j)
             cw2b(i,j,k) = cmplx(xx1-xx4+xx6+xx7,-(-xx2-xx3+xx5-xx8), &amp;amp;
                  kind=mytype)        
          end do
       end do
    end do
#ifdef DEBUG
    do k = sp%yst(3), sp%yen(3)
       do j = sp%yst(2), sp%yen(2)
          do i = sp%yst(1), sp%yen(1)
             if (abs(cw2b(i,j,k)) &amp;gt; 1.0e-4) then
                write(*,100) &#39;AFTER Y&#39;,i,j,k,cw2b(i,j,k)
             end if
          end do
       end do
    end do
#endif
    ! back to X-pencil
    call transpose_y_to_x(cw2b,cw1,sp)
    
    ! POST PROCESSING IN Z
    do k = sp%xst(3),sp%xen(3)
       do j = sp%xst(2),sp%xen(2)
          do i = sp%xst(1),sp%xen(1)
             tmp1 = real(cw1(i,j,k), kind=mytype)
             tmp2 = aimag(cw1(i,j,k))
             cw1(i,j,k) = cmplx(tmp1*bz(k)-tmp2*az(k), &amp;amp;
                  tmp2*bz(k)+tmp1*az(k), kind=mytype)
#ifdef DEBUG
             if (abs(cw1(i,j,k)) &amp;gt; 1.0e-4) &amp;amp;
                  write(*,100) &#39;END&#39;,i,j,k,cw1(i,j,k)
#endif
          end do
       end do
    end do

    ! compute c2r transform, back to physical space
    call decomp_2d_fft_3d(cw1,rhs)

    if (nclz1==1) then
       do j=1,ph%zsz(2)
          do i=1,ph%zsz(1)
             do k=1,nz/2
                rw3(i,j,2*k-1)=rhs(i,j,k)
             end do
             do k=1,nz/2
                rw3(i,j,2*k)=rhs(i,j,nz-k+1)
             end do
          end do
       end do
       call transpose_z_to_y(rw3,rw2,ph)
    else if (nclz1==0) then
       call transpose_z_to_y(rhs,rw2,ph)   
    end if
    
    do k=ph%yst(3),ph%yen(3)
       do i=ph%yst(1),ph%yen(1)
          do j=1,ny/2
             rw2b(i,2*j-1,k)=rw2(i,j,k)
          end do
          do j=1,ny/2
             rw2b(i,2*j,k)=rw2(i,ny-j+1,k)
          end do
       enddo
    end do
    call transpose_y_to_x(rw2b,rw1,ph)
    do k=ph%xst(3),ph%xen(3)
       do j=ph%xst(2),ph%xen(2)
          do i=1,nx/2
             rw1b(2*i-1,j,k)=rw1(i,j,k)
          enddo
          do i=1,nx/2
             rw1b(2*i,j,k)=rw1(nx-i+1,j,k)
          enddo
       enddo
    end do
    call transpose_x_to_y(rw1b,rw2,ph)
    call transpose_y_to_z(rw2,rhs,ph)

  !  call decomp_2d_fft_finalize

   

    return
  end subroutine poisson_11x


 
  subroutine abxyz(ax,ay,az,bx,by,bz,nx,ny,nz,bcx,bcy,bcz)
    
    use param

    implicit none

    integer, intent(IN) :: nx,ny,nz
    integer, intent(IN) :: bcx,bcy,bcz
    real(mytype), dimension(:), intent(OUT) :: ax,bx
    real(mytype), dimension(:), intent(OUT) :: ay,by
    real(mytype), dimension(:), intent(OUT) :: az,bz

    integer :: i,j,k

    if (bcx==0) then
       do i=1,nx
           !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
           !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
           !!!!!!!!!!!!!! generate the x direction coeficiency!!!!!!!!!!!
           !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
           !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          ax(i) = sin(real(i-1, kind=mytype)*PI/real(nx, kind=mytype))
          bx(i) = cos(real(i-1, kind=mytype)*PI/real(nx, kind=mytype))
       end do
    else if (bcx==1) then
       do i=1,nx
           !!!!!!!!!!!!!!!!!!!!!!!!!one and a half of PI
          ax(i) = sin(real(i-1, kind=mytype)*PI/2.0_mytype/ &amp;amp;
               real(nx, kind=mytype))
          bx(i) = cos(real(i-1, kind=mytype)*PI/2.0_mytype/ &amp;amp;
               real(nx, kind=mytype))
       end do
    end if

    if (bcy==0) then
       do j=1,ny
          ay(j) = sin(real(j-1, kind=mytype)*PI/real(ny, kind=mytype))
          by(j) = cos(real(j-1, kind=mytype)*PI/real(ny, kind=mytype))
       end do
    else if (bcy==1) then
       do j=1,ny
          ay(j) = sin(real(j-1, kind=mytype)*PI/2.0_mytype/ &amp;amp;
               real(ny, kind=mytype))
          by(j) = cos(real(j-1, kind=mytype)*PI/2.0_mytype/ &amp;amp;
               real(ny, kind=mytype))
       end do
    end if

    if (bcz==0) then
       do k=1,nz
          az(k) = sin(real(k-1, kind=mytype)*PI/real(nz, kind=mytype))
          bz(k) = cos(real(k-1, kind=mytype)*PI/real(nz, kind=mytype))
       end do
    else if (bcz==1) then
       do k=1,nz
          az(k) = sin(real(k-1, kind=mytype)*PI/2.0_mytype/ &amp;amp;
               real(nz, kind=mytype))
          bz(k) = cos(real(k-1, kind=mytype)*PI/2.0_mytype/ &amp;amp;
               real(nz, kind=mytype))
       end do
    end if

    return
  end subroutine abxyz

! ***********************************************************
!
subroutine waves ()
!
!***********************************************************

USE derivX
USE derivY
USE derivZ
USE param
USE decomp_2d
USE variables
use decomp_2d_fft

implicit none

integer :: i,j,k
real(mytype) :: w,wp,w1,w1p
complex(mytype) :: xyzk
complex(mytype) :: ytt,xtt,ztt,yt1,xt1,yt2,xt2
complex(mytype) :: xtt1,ytt1,ztt1,zt1,zt2,tmp1,tmp2,tmp3
complex(mytype) :: tmp4,tmp5,tmp6

xkx(:)=0. ; xk2(:)=0. ; yky(:)=0. ; yk2(:)=0.
zkz(:)=0. ; zk2(:)=0.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!WAVE NUMBER IN X
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if (nclx==0) then
   do i=1,nx/2+1
      w=2.*pi*(i-1)/nx
      wp=acix6*2.*dx*sin(w/2.)+(bcix6*2.*dx)*sin(3./2.*w)
      wp=wp/(1.+2.*alcaix6*cos(w))
      xkx(i)=cmplx(nx*wp/xlx,nx*wp/xlx, kind=mytype)
      exs(i)=cmplx(nx*w/xlx,nx*w/xlx, kind=mytype)
      xk2(i)=cmplx((nx*wp/xlx)**2,(nx*wp/xlx)**2, kind=mytype)
   enddo
   do i=nx/2+2,nx
      xkx(i)=xkx(nx-i+2)
      exs(i)=exs(nx-i+2)
      xk2(i)=xk2(nx-i+2)
   enddo
else
   do i=1,nx
      w=2.*pi*0.5*(i-1)/nxm
      wp=acix6*2.*dx*sin(w/2.)+(bcix6*2.*dx)*sin(3./2.*w)
      wp=wp/(1.+2.*alcaix6*cos(w))
      xkx(i)=cmplx(nxm*wp/xlx,nxm*wp/xlx, kind=mytype)
      exs(i)=cmplx(nxm*w/xlx,nxm*w/xlx, kind=mytype)
      xk2(i)=cmplx((nxm*wp/xlx)**2,(nxm*wp/xlx)**2, kind=mytype)
   enddo
   xkx(1)=0.
   exs(1)=0.
   xk2(1)=0.
endif

!WAVE NUMBER IN Y
if (ncly==0) then
   do j=1,ny/2+1
      w=2.*pi*(j-1)/ny
      wp=aciy6*2.*dy*sin(w/2.)+(bciy6*2.*dy)*sin(3./2.*w)
      wp=wp/(1.+2.*alcaiy6*cos(w))
      if (istret==0) yky(j)=cmplx(ny*wp/yly,ny*wp/yly, kind=mytype)
      if (istret.ne.0) yky(j)=cmplx(ny*wp,ny*wp, kind=mytype)
      eys(j)=cmplx(ny*w/yly,ny*w/yly, kind=mytype)
      yk2(j)=cmplx((ny*wp/yly)**2,(ny*wp/yly)**2, kind=mytype)
   enddo
   do j=ny/2+2,ny
      yky(j)=yky(ny-j+2)
      eys(j)=eys(ny-j+2)
      yk2(j)=yk2(ny-j+2)
   enddo
else
   do j=1,ny
      w=2.*pi*0.5*(j-1)/nym
      wp=aciy6*2.*dy*sin(w/2.)+(bciy6*2.*dy)*sin(3./2.*w)
      wp=wp/(1.+2.*alcaiy6*cos(w))
      if (istret==0) yky(j)=cmplx(nym*wp/yly,nym*wp/yly, kind=mytype)
      if (istret.ne.0) yky(j)=cmplx(nym*wp,nym*wp, kind=mytype)
      eys(j)=cmplx(nym*w/yly,nym*w/yly, kind=mytype)
      yk2(j)=cmplx((nym*wp/yly)**2,(nym*wp/yly)**2, kind=mytype)
   enddo
   yky(1)=0.
   eys(1)=0.
   yk2(1)=0.
endif

!WAVE NUMBER IN Z
if (nclz==0) then
   do k=1,nz/2+1
      w=2.*pi*(k-1)/nz
      wp=aciz6*2.*dz*sin(w/2.)+(bciz6*2.*dz)*sin(3./2.*w)
      wp=wp/(1.+2.*alcaiz6*cos(w))
      zkz(k)=cmplx(nz*wp/zlz,nz*wp/zlz, kind=mytype)
      ezs(k)=cmplx(nz*w/zlz,nz*w/zlz, kind=mytype)
      zk2(k)=cmplx((nz*wp/zlz)**2,(nz*wp/zlz)**2, kind=mytype)
   enddo
else
   do k=1,nz/2+1
      w=2.*pi*0.5*(k-1)/nzm
      w1=2.*pi*0.5*(nzm-k+1)/nzm
      wp=aciz6*2.*dz*sin(w/2.)+(bciz6*2.*dz)*sin(3./2.*w)
      wp=wp/(1.+2.*alcaiz6*cos(w))
      w1p=aciz6*2.*dz*sin(w1/2.)+(bciz6*2.*dz)*sin(3./2.*w1)
      w1p=w1p/(1.+2.*alcaiz6*cos(w1))     
      zkz(k)=cmplx(nzm*wp/zlz,-nzm*w1p/zlz, kind=mytype)
      ezs(k)=cmplx(nzm*w/zlz,nzm*w1/zlz, kind=mytype)
      zk2(k)=cmplx((nzm*wp/zlz)**2,(nzm*w1p/zlz)**2, kind=mytype)
   enddo
endif
!
!if (nrank==0) then
!   do i=1,nx
!      print *,i,ezs(i)
!   enddo
!endif
!stop

if ((nclx==0).and.(nclz==0).and.((ncly==1).or.(ncly==2))) then
do k = sp%yst(3), sp%yen(3)
do j = sp%yst(2), sp%yen(2)
do i = sp%yst(1), sp%yen(1)
   xtt=cmplx((bicix6*2.*cos(real(exs(i))*3.*dx/2.)+&amp;amp;
        cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)),&amp;amp;
        (bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
        cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)), kind=mytype)
   ytt=cmplx((biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
        ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)),&amp;amp;
        (biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
        ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)), kind=mytype)
   ztt=cmplx((biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
        ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)),&amp;amp;
        (biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
        ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)), kind=mytype)
   xtt1=cmplx((aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)),&amp;amp;
        (aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)), kind=mytype)
   ytt1=cmplx((aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)),&amp;amp;
        (aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)), kind=mytype)
   ztt1=cmplx((aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)),&amp;amp;
        (aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)), kind=mytype)
   xt1=cmplx((1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)),&amp;amp;
        (1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)), kind=mytype)
   yt1=cmplx((1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)),&amp;amp;
        (1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)), kind=mytype)
   zt1=cmplx((1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)),&amp;amp;
        (1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)), kind=mytype)
   xt2=xk2(i)*((((ytt1+ytt)/yt1)*((ztt1+ztt)/zt1))**2)
   yt2=yk2(j)*((((xtt1+xtt)/xt1)*((ztt1+ztt)/zt1))**2)
   zt2=zk2(k)*((((xtt1+xtt)/xt1)*((ytt1+ytt)/yt1))**2)
   xyzk=xt2+yt2+zt2
   kxyz(i,j,k)=xyzk
!   print *,i,j,k, kxyz(i,j,k)
enddo
enddo
enddo
else
   if (nclz==0) then
      do k = sp%xst(3),sp%xen(3)
      do j = sp%xst(2),sp%xen(2)
      do i = sp%xst(1),sp%xen(1)
         xtt=cmplx((bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
              cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)),&amp;amp;
              (bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
              cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)), kind=mytype)
         ytt=cmplx((biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
              ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)),&amp;amp;
              (biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
              ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)), kind=mytype)
         ztt=cmplx((biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
              ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)),&amp;amp;
              (biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
              ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)), kind=mytype)
         xtt1=cmplx((aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)),&amp;amp;
              (aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)), kind=mytype)
         ytt1=cmplx((aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)),&amp;amp;
              (aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)), kind=mytype)
         ztt1=cmplx((aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)),&amp;amp;
              (aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)), kind=mytype)
         xt1=cmplx((1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)),&amp;amp;
              (1.+2.*ailcaix6*cos(real(exs(i))*dx)), kind=mytype)
         yt1=cmplx((1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)),&amp;amp;
              (1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)), kind=mytype)
         zt1=cmplx((1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)),&amp;amp;
              (1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)), kind=mytype)
         xt2=xk2(i)*((((ytt1+ytt)/yt1)*((ztt1+ztt)/zt1))**2)
         yt2=yk2(j)*((((xtt1+xtt)/xt1)*((ztt1+ztt)/zt1))**2)
         zt2=zk2(k)*((((xtt1+xtt)/xt1)*((ytt1+ytt)/yt1))**2)
         xyzk=xt2+yt2+zt2
         kxyz(i,j,k)=xyzk
!   print *,i,j,k, kxyz(i,j,k)
      enddo
      enddo
      enddo
   else
      do k = sp%xst(3),sp%xen(3)
      do j = sp%xst(2),sp%xen(2)
      do i = sp%xst(1),sp%xen(1)  
         xtt=cmplx((bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
              cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)),&amp;amp;
              (bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
              cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)), kind=mytype)
         ytt=cmplx((biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
              ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)),&amp;amp;
              (biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
              ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)), kind=mytype)
         !
         ztt=cmplx((biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
              ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)),&amp;amp;
              (biciz6*2.*cos(aimag(ezs(k))*3.*dz/2.)+&amp;amp;
              ciciz6*2.*cos(aimag(ezs(k))*5.*dz/2.)), kind=mytype)
         !
         xtt1=cmplx((aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)),&amp;amp;
              (aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)), kind=mytype)
         ytt1=cmplx((aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)),&amp;amp;
              (aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)), kind=mytype)
         !
         ztt1=cmplx((aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)),&amp;amp;
              (aiciz6*2.*cos(aimag(ezs(k))*dz/2.)), kind=mytype)
         !
         xt1=cmplx((1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)),&amp;amp;
              (1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)), kind=mytype)
         yt1=cmplx((1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)),&amp;amp;
              (1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)), kind=mytype)
         zt1=cmplx((1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)),&amp;amp;
              (1.+2.*ailcaiz6*cos(aimag(ezs(k))*dz)), kind=mytype)
         
         tmp1=cmplx(real(ztt1+ztt, kind=mytype)/real(zt1, kind=mytype),&amp;amp;
              aimag(ztt1+ztt)/aimag(zt1), kind=mytype)
         tmp2=cmplx(real(ytt1+ytt, kind=mytype)/real(yt1, kind=mytype),&amp;amp;
              real(ytt1+ytt, kind=mytype)/real(yt1, kind=mytype), kind=mytype)
         tmp3=cmplx(real(xtt1+xtt, kind=mytype)/real(xt1, kind=mytype),&amp;amp;
              real(xtt1+xtt, kind=mytype)/real(xt1, kind=mytype), kind=mytype)
         
         tmp4=cmplx((real(tmp1, kind=mytype)*real(tmp2, kind=mytype))**2,(aimag(tmp1)*aimag(tmp2))**2, kind=mytype)
         tmp5=cmplx((real(tmp1, kind=mytype)*real(tmp3, kind=mytype))**2,(aimag(tmp1)*aimag(tmp3))**2, kind=mytype)
         tmp6=cmplx((real(tmp3, kind=mytype)*real(tmp2, kind=mytype))**2,(aimag(tmp3)*aimag(tmp2))**2, kind=mytype)
         
         tmp1=cmplx(real(tmp4, kind=mytype)*real(xk2(i), kind=mytype),aimag(tmp4)*aimag(xk2(i)), kind=mytype)
         tmp2=cmplx(real(tmp5, kind=mytype)*real(yk2(j), kind=mytype),aimag(tmp5)*aimag(yk2(j)), kind=mytype)
         tmp3=cmplx(real(tmp6, kind=mytype)*real(zk2(k), kind=mytype),aimag(tmp6)*aimag(zk2(k)), kind=mytype)

         xyzk=tmp1+tmp2+tmp3
         kxyz(i,j,k)=xyzk
!         print *,i,j,k,zt1,yt1
      enddo
      enddo
      enddo
   endif
endif


!          do k=1,1!nz
!          do j=1,ny
!          do i=1,1!!nx
!             print *,j,a(i,j,k,3),kxyz(i,j,k)
!          enddo
!          enddo
!          enddo

end subroutine waves

!**************************************************************************
!
subroutine matrice_refinement()
!
!**************************************************************************

USE decomp_2d
USE variables
USE param
USE var
USE MPI
USE derivX
USE derivY
USE derivZ

implicit none

integer :: i,j,k

complex(mytype),dimension(sp%yst(1):sp%yen(1)) :: transx
complex(mytype),dimension(sp%yst(2):sp%yen(2)) :: transy
complex(mytype),dimension(sp%yst(3):sp%yen(3)) :: transz
real(mytype) :: xa0,xa1
complex(mytype) :: ytt,xtt,ztt,yt1,xt1,yt2,xt2
complex(mytype) :: xtt1,ytt1,ztt1,zt1,zt2,tmp1,tmp2,tmp3

do i = sp%yst(1),sp%yen(1)
   xtt=cmplx((bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
        cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)),&amp;amp;
        (bicix6*2.*cos(real(exs(i), kind=mytype)*3.*dx/2.)+&amp;amp;
        cicix6*2.*cos(real(exs(i), kind=mytype)*5.*dx/2.)), kind=mytype)
   xtt1=cmplx((aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)),&amp;amp;
        (aicix6*2.*cos(real(exs(i), kind=mytype)*dx/2.)), kind=mytype)
   xt1=cmplx((1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)),&amp;amp;
        (1.+2.*ailcaix6*cos(real(exs(i), kind=mytype)*dx)), kind=mytype)
   transx(i)=cmplx(real(xtt1+xtt, kind=mytype)/real(xt1, kind=mytype),&amp;amp;
        real(xtt1+xtt, kind=mytype)/real(xt1, kind=mytype), kind=mytype)!(xtt+xtt)/xt1
enddo
do j = sp%yst(2),sp%yen(2)
   ytt=cmplx((biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
        ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)),&amp;amp;
        (biciy6*2.*cos(real(eys(j), kind=mytype)*3.*dy/2.)+&amp;amp;
        ciciy6*2.*cos(real(eys(j), kind=mytype)*5.*dy/2.)), kind=mytype)
   ytt1=cmplx((aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)),&amp;amp;
        (aiciy6*2.*cos(real(eys(j), kind=mytype)*dy/2.)), kind=mytype)
   yt1=cmplx((1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)),&amp;amp;
        (1.+2.*ailcaiy6*cos(real(eys(j), kind=mytype)*dy)), kind=mytype)
   transy(j)=cmplx(real(ytt1+ytt, kind=mytype)/real(yt1, kind=mytype),&amp;amp;
        real(ytt1+ytt, kind=mytype)/real(yt1, kind=mytype), kind=mytype)!(ytt+ytt)/yt1
enddo
if (nclz==0) then
   do k = sp%yst(3),sp%yen(3)
      ztt=cmplx((biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
           ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)),&amp;amp;
           (biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
           ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)), kind=mytype)
      ztt1=cmplx((aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)),&amp;amp;
           (aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)), kind=mytype)
      zt1=cmplx((1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)),&amp;amp;
           (1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)), kind=mytype)
      transz(k)=cmplx(real(ztt1+ztt, kind=mytype)/real(zt1, kind=mytype),&amp;amp;
           aimag(ztt1+ztt)/aimag(zt1), kind=mytype)!(ztt+ztt)/zt1
   enddo
else
   do k = sp%yst(3),sp%yen(3)
      ztt=cmplx((biciz6*2.*cos(real(ezs(k), kind=mytype)*3.*dz/2.)+&amp;amp;
           ciciz6*2.*cos(real(ezs(k), kind=mytype)*5.*dz/2.)),&amp;amp;
           (biciz6*2.*cos(aimag(ezs(k))*3.*dz/2.)+&amp;amp;
           ciciz6*2.*cos(aimag(ezs(k))*5.*dz/2.)), kind=mytype)
      ztt1=cmplx((aiciz6*2.*cos(real(ezs(k), kind=mytype)*dz/2.)),&amp;amp;
           (aiciz6*2.*cos(aimag(ezs(k))*dz/2.)), kind=mytype)
      zt1=cmplx((1.+2.*ailcaiz6*cos(real(ezs(k), kind=mytype)*dz)),&amp;amp;
           (1.+2.*ailcaiz6*cos(aimag(ezs(k))*dz)), kind=mytype)
      transz(k)=cmplx(real(ztt1+ztt, kind=mytype)/real(zt1, kind=mytype),&amp;amp;
           aimag(ztt1+ztt)/aimag(zt1), kind=mytype)!(ztt+ztt)/zt1
   enddo
endif

if ((istret==1).or.(istret==2)) then

 
   xa0=alpha/pi+1./2./beta/pi
   if (istret==1) xa1=1./4./beta/pi
   if (istret==2) xa1=-1./4./beta/pi
!
!construction of the pentadiagonal matrice
!
   do k=sp%yst(3),sp%yen(3)
   do j=1,ny/2
   do i=sp%yst(1),sp%yen(1)
      cw22(i,j,k)=cmplx(real(yky(2*j-1), kind=mytype)*real(transx(i), kind=mytype)*real(transz(k), kind=mytype),&amp;amp;
           aimag(yky(2*j-1))*aimag(transx(i))*aimag(transz(k)), kind=mytype)
      cw2(i,j,k)=cmplx(real(yky(2*j), kind=mytype)*real(transx(i), kind=mytype)*real(transz(k), kind=mytype),&amp;amp;
           aimag(yky(2*j))*aimag(transx(i))*aimag(transz(k)), kind=mytype)
   enddo
   enddo
   enddo


   

!main diagonal
   do k=sp%yst(3),sp%yen(3)
   do j=2,ny/2-1
   do i=sp%yst(1),sp%yen(1)
      a(i,j,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(2*j-1), kind=mytype)*real(transy(2*j-1), kind=mytype)&amp;amp;
           *real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(2*j-1), kind=mytype)*real(transy(2*j-1), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw22(i,j,k), kind=mytype)*real(cw22(i,j,k), kind=mytype)*xa0*xa0-&amp;amp;
           xa1*xa1*(real(cw22(i,j,k), kind=mytype)*real(cw22(i,j-1,k), kind=mytype)+real(cw22(i,j,k), kind=mytype)*&amp;amp;
           real(cw22(i,j+1,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(2*j-1))*aimag(transy(2*j-1))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(2*j-1))*aimag(transy(2*j-1))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw22(i,j,k))*aimag(cw22(i,j,k))*xa0*xa0-&amp;amp;
           xa1*xa1*(aimag(cw22(i,j,k))*aimag(cw22(i,j-1,k))+aimag(cw22(i,j,k))*aimag(cw22(i,j+1,k))), kind=mytype)
      a2(i,j,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(2*j), kind=mytype)*real(transy(2*j), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(2*j), kind=mytype)*real(transy(2*j), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw2(i,j,k), kind=mytype)*real(cw2(i,j,k), kind=mytype)*xa0*xa0-&amp;amp;
           xa1*xa1*(real(cw2(i,j,k), kind=mytype)*real(cw2(i,j-1,k), kind=mytype)+real(cw2(i,j,k), kind=mytype)*&amp;amp;
           real(cw2(i,j+1,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(2*j))*aimag(transy(2*j))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(2*j))*aimag(transy(2*j))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw2(i,j,k))*aimag(cw2(i,j,k))*xa0*xa0-&amp;amp;
           xa1*xa1*(aimag(cw2(i,j,k))*aimag(cw2(i,j-1,k))+aimag(cw2(i,j,k))*aimag(cw2(i,j+1,k))), kind=mytype)
   enddo
   enddo
   do i=sp%yst(1),sp%yen(1)
      a(i,1,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(1), kind=mytype)*real(transy(1), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(1), kind=mytype)*real(transy(1), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw22(i,1,k), kind=mytype)*real(cw22(i,1,k), kind=mytype)*xa0*xa0-xa1*xa1*(real(cw22(i,1,k), kind=mytype)*&amp;amp;
           real(cw22(i,2,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(1))*aimag(transy(1))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(1))*aimag(transy(1))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw22(i,1,k))*aimag(cw22(i,1,k))*xa0*xa0-xa1*xa1*(aimag(cw22(i,1,k))*aimag(cw22(i,2,k))), kind=mytype)
      a(i,ny/2,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(ny-2), kind=mytype)*real(transy(ny-2), kind=mytype)&amp;amp;
           *real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(ny-2), kind=mytype)*real(transy(ny-2), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw22(i,ny/2,k), kind=mytype)*real(cw22(i,ny/2,k), kind=mytype)*xa0*xa0-&amp;amp;
           xa1*xa1*(real(cw22(i,ny/2,k), kind=mytype)*real(cw22(i,ny/2-1,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(ny-2))*aimag(transy(ny-2))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(ny-2))*aimag(transy(ny-2))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw22(i,ny/2,k))*aimag(cw22(i,ny/2,k))*xa0*xa0-&amp;amp;
           xa1*xa1*(aimag(cw22(i,ny/2,k))*aimag(cw22(i,ny/2-1,k))), kind=mytype)
      a2(i,1,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(2), kind=mytype)*real(transy(2), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(2), kind=mytype)*real(transy(2), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw2(i,1,k), kind=mytype)*real(cw2(i,1,k), kind=mytype)*(xa0-xa1)*(xa0+xa1)-xa1*xa1*(real(cw2(i,1,k), kind=mytype)*&amp;amp;
           real(cw2(i,2,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(2))*aimag(transy(2))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(2))*aimag(transy(2))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw2(i,1,k))*aimag(cw2(i,1,k))*(xa0-xa1)*(xa0+xa1)-xa1*xa1*(aimag(cw2(i,1,k))*aimag(cw2(i,2,k))), kind=mytype)
      a2(i,ny/2,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(ny-1), kind=mytype)*real(transy(ny-1), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(ny-1), kind=mytype)*real(transy(ny-1), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw2(i,ny/2,k), kind=mytype)*real(cw2(i,ny/2,k), kind=mytype)*(xa0+xa1)*(xa0+xa1)-&amp;amp;
           xa1*xa1*(real(cw2(i,ny/2,k), kind=mytype)*real(cw2(i,ny/2-1,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(ny-1))*aimag(transy(ny-1))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(ny-1))*aimag(transy(ny-1))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw2(i,ny/2,k))*aimag(cw2(i,ny/2,k))*(xa0+xa1)*(xa0+xa1)-&amp;amp;
           xa1*xa1*(aimag(cw2(i,ny/2,k))*aimag(cw2(i,ny/2-1,k))), kind=mytype)
   enddo
   enddo
   
 

 

!sup diag +1
   do k=sp%yst(3),sp%yen(3)
   do j=2,ny/2-1
   do i=sp%yst(1),sp%yen(1)   
      a(i,j,k,4)=cmplx(xa0*xa1*(real(cw22(i,j,k), kind=mytype)*real(cw22(i,j+1,k), kind=mytype)+real(cw22(i,j+1,k), kind=mytype)*&amp;amp;
           real(cw22(i,j+1,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw22(i,j,k))*aimag(cw22(i,j+1,k))+aimag(cw22(i,j+1,k))*aimag(cw22(i,j+1,k))), kind=mytype)
      a2(i,j,k,4)=cmplx(xa0*xa1*(real(cw2(i,j,k), kind=mytype)*real(cw2(i,j+1,k), kind=mytype)+real(cw2(i,j+1,k), kind=mytype)*&amp;amp;
           real(cw2(i,j+1,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw2(i,j,k))*aimag(cw2(i,j+1,k))+aimag(cw2(i,j+1,k))*aimag(cw2(i,j+1,k))), kind=mytype)
   enddo
   enddo
   do i=sp%yst(1),sp%yen(1)   
      a(i,1,k,4)=2.*cmplx((xa0*xa1*(real(cw22(i,1,k), kind=mytype)*real(cw22(i,2,k), kind=mytype)+real(cw22(i,2,k), kind=mytype)*&amp;amp;
           real(cw22(i,2,k), kind=mytype))),&amp;amp;
           (xa0*xa1*(aimag(cw22(i,1,k))*aimag(cw22(i,2,k))+aimag(cw22(i,2,k))*aimag(cw22(i,2,k)))), kind=mytype)
      a2(i,1,k,4)=cmplx((xa0-xa1)*xa1*(real(cw2(i,1,k), kind=mytype)*real(cw2(i,2,k), kind=mytype))&amp;amp;
           +xa0*xa1*(real(cw2(i,2,k), kind=mytype)*real(cw2(i,2,k), kind=mytype)),&amp;amp;
           (xa0-xa1)*xa1*(aimag(cw2(i,1,k))*aimag(cw2(i,2,k)))&amp;amp;
           +xa0*xa1*(aimag(cw2(i,2,k))*aimag(cw2(i,2,k))), kind=mytype)
      a2(i,ny/2-1,k,4)=cmplx(xa0*xa1*(real(cw2(i,ny/2-1,k), kind=mytype)*real(cw2(i,ny/2,k), kind=mytype))&amp;amp;
           +(xa0+xa1)*xa1*(real(cw2(i,ny/2,k), kind=mytype)*real(cw2(i,ny/2,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw2(i,ny/2-1,k))*aimag(cw2(i,ny/2,k)))&amp;amp;
           +(xa0+xa1)*xa1*(aimag(cw2(i,ny/2,k))*aimag(cw2(i,ny/2,k))), kind=mytype)
      a2(i,ny/2,k,4)=0.
   enddo
   enddo



!sup diag +2
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)   
   do j=1,ny/2-2
      a(i,j,k,5)=cmplx(-real(cw22(i,j+1,k), kind=mytype)*real(cw22(i,j+2,k), kind=mytype)*xa1*xa1,&amp;amp;
           -aimag(cw22(i,j+1,k))*aimag(cw22(i,j+2,k))*xa1*xa1, kind=mytype)
      a2(i,j,k,5)=cmplx(-real(cw2(i,j+1,k), kind=mytype)*real(cw2(i,j+2,k), kind=mytype)*xa1*xa1,&amp;amp;
           -aimag(cw2(i,j+1,k))*aimag(cw2(i,j+2,k))*xa1*xa1, kind=mytype)
   enddo
   a(i,1,k,5)=cmplx(real(a(i,1,k,5), kind=mytype)*2.,aimag(a(i,1,k,5))*2., kind=mytype)
   a(i,ny/2-1,k,5)=0.
   a(i,ny/2,k,5)=0.
   a2(i,ny/2-1,k,5)=0.
   a2(i,ny/2,k,5)=0.
   enddo
   enddo



!inf diag -1
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)   
   do j=2,ny/2
      a(i,j,k,2)=cmplx(xa0*xa1*(real(cw22(i,j,k), kind=mytype)*real(cw22(i,j-1,k), kind=mytype)+real(cw22(i,j-1,k), kind=mytype)*&amp;amp;
           real(cw22(i,j-1,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw22(i,j,k))*aimag(cw22(i,j-1,k))+aimag(cw22(i,j-1,k))*aimag(cw22(i,j-1,k))), kind=mytype)
      a2(i,j,k,2)=cmplx(xa0*xa1*(real(cw2(i,j,k), kind=mytype)*real(cw2(i,j-1,k), kind=mytype)+real(cw2(i,j-1,k), kind=mytype)*&amp;amp;
           real(cw2(i,j-1,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw2(i,j,k))*aimag(cw2(i,j-1,k))+aimag(cw2(i,j-1,k))*aimag(cw2(i,j-1,k))), kind=mytype)
   enddo
   a(i,1,k,2)=0.
   a2(i,1,k,2)=0.
   a2(i,2,k,2)=cmplx(xa0*xa1*(real(cw2(i,2,k), kind=mytype)*real(cw2(i,1,k), kind=mytype))&amp;amp;
        +(xa0+xa1)*xa1*(real(cw2(i,1,k), kind=mytype)*real(cw2(i,1,k), kind=mytype)),&amp;amp;
        xa0*xa1*(aimag(cw2(i,2,k))*aimag(cw2(i,1,k)))&amp;amp;
        +(xa0+xa1)*xa1*(aimag(cw2(i,1,k))*aimag(cw2(i,1,k))), kind=mytype)
   a2(i,ny/2,k,2)=cmplx((xa0+xa1)*xa1*(real(cw2(i,ny/2,k), kind=mytype)*real(cw2(i,ny/2-1,k), kind=mytype))&amp;amp;
        +xa0*xa1*(real(cw2(i,ny/2-1,k), kind=mytype)*real(cw2(i,ny/2-1,k), kind=mytype)),&amp;amp;
        (xa0+xa1)*xa1*(aimag(cw2(i,ny/2,k))*aimag(cw2(i,ny/2-1,k)))&amp;amp;
        +xa0*xa1*(aimag(cw2(i,ny/2-1,k))*aimag(cw2(i,ny/2-1,k))), kind=mytype)
   enddo
   enddo
!inf diag -2
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)  
   do j=3,ny/2
      a(i,j,k,1)=cmplx(-real(cw22(i,j-1,k), kind=mytype)*real(cw22(i,j-2,k), kind=mytype)*xa1*xa1,&amp;amp;
           -aimag(cw22(i,j-1,k))*aimag(cw22(i,j-2,k))*xa1*xa1, kind=mytype)
      a2(i,j,k,1)=cmplx(-real(cw2(i,j-1,k), kind=mytype)*real(cw2(i,j-2,k), kind=mytype)*xa1*xa1,&amp;amp;
           -aimag(cw2(i,j-1,k))*aimag(cw2(i,j-2,k))*xa1*xa1, kind=mytype)
   enddo
   a(i,1,k,1)=0.
   a(i,2,k,1)=0.
   a2(i,1,k,1)=0.
   a2(i,2,k,1)=0.
   enddo
   enddo
!not to have a singular matrice
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)
      if ((real(xk2(i), kind=mytype)==0.).and.(real(zk2(k), kind=mytype)==0)) then
         a(i,1,k,3)=cmplx(1.,1., kind=mytype)
         a(i,1,k,4)=0.
         a(i,1,k,5)=0.
      endif
   enddo
   enddo

else
   xa0=alpha/pi+1./2./beta/pi
   xa1=-1./4./beta/pi
!
!construction of the pentadiagonal matrice
!   
   do k=sp%yst(3),sp%yen(3)
   do j=1,nym
   do i=sp%yst(1),sp%yen(1)
      cw22(i,j,k)=cmplx(real(yky(j), kind=mytype)*real(transx(i), kind=mytype)*real(transz(k), kind=mytype),&amp;amp;
           aimag(yky(j))*aimag(transx(i))*aimag(transz(k)), kind=mytype)
   enddo
   enddo
   enddo

!main diagonal
   do k=sp%yst(3),sp%yen(3)
   do j=2,nym-1
   do i=sp%yst(1),sp%yen(1)
      a3(i,j,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(j), kind=mytype)*real(transy(j), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(j), kind=mytype)*real(transy(j), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype)*real(transx(i), kind=mytype))&amp;amp;
           -real(cw22(i,j,k), kind=mytype)*real(cw22(i,j,k), kind=mytype)*xa0*xa0-&amp;amp;
           xa1*xa1*(real(cw22(i,j,k), kind=mytype)*real(cw22(i,j-1,k), kind=mytype)+real(cw22(i,j,k), kind=mytype)*&amp;amp;
           real(cw22(i,j+1,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(j))*aimag(transy(j))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(j))*aimag(transy(j))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw22(i,j,k))*aimag(cw22(i,j,k))*xa0*xa0-&amp;amp;
           xa1*xa1*(aimag(cw22(i,j,k))*aimag(cw22(i,j-1,k))+aimag(cw22(i,j,k))*aimag(cw22(i,j+1,k))), kind=mytype)
   enddo
   enddo
   enddo

   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)
      a3(i,1,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(1), kind=mytype)*real(transy(1), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(1), kind=mytype)*real(transy(1), kind=mytype)*real(transx(i), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype))&amp;amp;
           -real(cw22(i,1,k), kind=mytype)*real(cw22(i,1,k), kind=mytype)*xa0*xa0-xa1*xa1*(real(cw22(i,1,k), kind=mytype)*&amp;amp;
           real(cw22(i,2,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(1))*aimag(transy(1))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(1))*aimag(transy(1))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw22(i,1,k))*aimag(cw22(i,1,k))*xa0*xa0-xa1*xa1*(aimag(cw22(i,1,k))*aimag(cw22(i,2,k))), kind=mytype)
      a3(i,nym,k,3)=cmplx(-(real(xk2(i), kind=mytype)*real(transy(nym), kind=mytype)*real(transy(nym), kind=mytype)*&amp;amp;
           real(transz(k), kind=mytype)*real(transz(k), kind=mytype))&amp;amp;
           -(real(zk2(k), kind=mytype)*real(transy(nym), kind=mytype)*real(transy(nym), kind=mytype)*real(transx(i), kind=mytype)*&amp;amp;
           real(transx(i), kind=mytype))&amp;amp;
           -real(cw22(i,nym,k), kind=mytype)*real(cw22(i,nym,k), kind=mytype)*xa0*xa0-&amp;amp;
           xa1*xa1*(real(cw22(i,nym,k), kind=mytype)*real(cw22(i,nym-1,k), kind=mytype)),&amp;amp;
           -(aimag(xk2(i))*aimag(transy(nym))*aimag(transy(nym))*aimag(transz(k))*aimag(transz(k)))&amp;amp;
           -(aimag(zk2(k))*aimag(transy(nym))*aimag(transy(nym))*aimag(transx(i))*aimag(transx(i)))&amp;amp;
           -aimag(cw22(i,nym,k))*aimag(cw22(i,nym,k))*xa0*xa0-&amp;amp;
           xa1*xa1*(aimag(cw22(i,nym,k))*aimag(cw22(i,nym-1,k))), kind=mytype)
   enddo
   enddo

   


!sup diag +1
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)
   do j=2,nym-1
      a3(i,j,k,4)=cmplx(xa0*xa1*(real(cw22(i,j,k), kind=mytype)*real(cw22(i,j+1,k), kind=mytype)+real(cw22(i,j+1,k), kind=mytype)*&amp;amp;
           real(cw22(i,j+1,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw22(i,j,k))*aimag(cw22(i,j+1,k))+aimag(cw22(i,j+1,k))*aimag(cw22(i,j+1,k))), kind=mytype)
   enddo
   a3(i,1,k,4)=cmplx((xa0*xa1*(real(cw22(i,1,k), kind=mytype)*real(cw22(i,2,k), kind=mytype)+real(cw22(i,2,k), kind=mytype)*&amp;amp;
        real(cw22(i,2,k), kind=mytype))),&amp;amp;
        (xa0*xa1*(aimag(cw22(i,1,k))*aimag(cw22(i,2,k))+aimag(cw22(i,2,k))*aimag(cw22(i,2,k)))), kind=mytype)
   enddo
   enddo
!sup diag +2
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)
   do j=1,nym-2
      a3(i,j,k,5)=cmplx(-real(cw22(i,j+1,k), kind=mytype)*real(cw22(i,j+2,k), kind=mytype)*xa1*xa1,&amp;amp;
           -aimag(cw22(i,j+1,k))*aimag(cw22(i,j+2,k))*xa1*xa1, kind=mytype)
   enddo
   !a3(i,1,k,5)=a3(i,1,k,5)*2.
   !a3(i,1,k,5)=0.
   a3(i,nym-1,k,5)=0.
   a3(i,nym,k,5)=0.
   enddo
   enddo


!inf diag -1
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)
   do j=2,nym
      a3(i,j,k,2)=cmplx(xa0*xa1*(real(cw22(i,j,k), kind=mytype)*real(cw22(i,j-1,k), kind=mytype)+real(cw22(i,j-1,k), kind=mytype)*&amp;amp;
           real(cw22(i,j-1,k), kind=mytype)),&amp;amp;
           xa0*xa1*(aimag(cw22(i,j,k))*aimag(cw22(i,j-1,k))+aimag(cw22(i,j-1,k))*aimag(cw22(i,j-1,k))), kind=mytype)
   enddo
   a3(i,1,k,2)=0.
   enddo
   enddo
!inf diag -2
   do k=sp%yst(3),sp%yen(3)
   do i=sp%yst(1),sp%yen(1)
   do j=3,nym
      a3(i,j,k,1)=cmplx(-real(cw22(i,j-1,k), kind=mytype)*real(cw22(i,j-2,k), kind=mytype)*xa1*xa1,&amp;amp;
           -aimag(cw22(i,j-1,k))*aimag(cw22(i,j-2,k))*xa1*xa1, kind=mytype)
   enddo
   a3(i,1,k,1)=0.
   a3(i,2,k,1)=0.
   enddo
   enddo

!not to have a singular matrice
!   do k=sp%yst(3),sp%yen(3)
!   do i=sp%yst(1),sp%yen(1)
!      if ((xkx(i)==0.).and.(zkz(k)==0)) then
if (nrank==0) then
   a3(1,1,1,3)=cmplx(1.,1., kind=mytype)
   a3(1,1,1,4)=0.
   a3(1,1,1,5)=0.
endif
!      endif
!   enddo
!   enddo
endif


   


return
end subroutine matrice_refinement

end module decomp_2d_poisson
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
