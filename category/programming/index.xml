<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming | 志不达者智不坚 言不信者行不果</title>
    <link>https://jueqingsizhe66.github.io/category/programming/</link>
      <atom:link href="https://jueqingsizhe66.github.io/category/programming/index.xml" rel="self" type="application/rss+xml" />
    <description>programming</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2023</copyright><lastBuildDate>Sun, 04 Jun 2023 23:23:35 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>programming</title>
      <link>https://jueqingsizhe66.github.io/category/programming/</link>
    </image>
    
    <item>
      <title>A New Reading Code Method</title>
      <link>https://jueqingsizhe66.github.io/post/a-new-reading-code-method/</link>
      <pubDate>Sun, 04 Jun 2023 23:23:35 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/post/a-new-reading-code-method/</guid>
      <description>&lt;p&gt;为了快速阅读源码，一方面我们可能需要通过&lt;a href=&#34;https://github.com/sharkdp/fd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; fd &lt;/a&gt;快速查找文件，另一方面我们需要通过&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; rg &lt;/a&gt;快速查找文件内容，最重要我们也需要跳转定义，
跳转定义一般有两种方式可以去执行,一是通过&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; ctags &lt;/a&gt;精确查找，亦或者通过&lt;a href=&#34;https://github.com/Yggdroot/LeaderF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; leaderf &lt;/a&gt;或者&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; rg &lt;/a&gt;进行模糊查找。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /post/a-new-reading-code-method/coding_hu340dca722e96fdbe158d0ac6aabfee93_122504_3712e87742e6da8bb963523049b35d04.webp 400w,
               /post/a-new-reading-code-method/coding_hu340dca722e96fdbe158d0ac6aabfee93_122504_80ee0e58226050cb5956c21d6f8d9988.webp 760w,
               /post/a-new-reading-code-method/coding_hu340dca722e96fdbe158d0ac6aabfee93_122504_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jueqingsizhe66.github.io/post/a-new-reading-code-method/coding_hu340dca722e96fdbe158d0ac6aabfee93_122504_3712e87742e6da8bb963523049b35d04.webp&#34;
               width=&#34;760&#34;
               height=&#34;260&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;1-rg执行步骤&#34;&gt;1. RG执行步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在vim中打开每个项目根目录的&lt;a href=&#34;https://github.com/vimwiki/vimwiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vimwiki &lt;/a&gt;文件(需要自建);注意可以把你每一个关注的目录添加到&lt;a href=&#34;https://github.com/preservim/nerdtree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; nerdtree &lt;/a&gt;中&lt;code&gt;:Bookmark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;rg&lt;/code&gt;搜索你要搜索的内容, 你可以给每次你的搜索主题，写上你的理解，你的认识，这样你的每次阅读都是有记录的&lt;/li&gt;
&lt;li&gt;把搜索的文件路径，黏贴到wiki文件内，通过&lt;code&gt;gf&lt;/code&gt;定位到文件进行查阅(注意在你的vim系统中，也开始使用&lt;code&gt;,cp&lt;/code&gt;获取绝对路径，然后把路径放到你的helpwiki文件中,保证vim系统也能记录上)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;rg &amp;quot;:call GotoFile\(&amp;quot;
yzl\my_plugins\open_file_under_cursor.vim\plugin\open_file_under_cursor.vim
39:nnoremap gf :call GotoFile(&amp;quot;&amp;quot;)&amp;lt;CR&amp;gt;
40:nnoremap &amp;lt;C-W&amp;gt;f :call GotoFile(&amp;quot;new&amp;quot;)&amp;lt;CR&amp;gt;
41:nnoremap &amp;lt;C-W&amp;gt;&amp;lt;C-F&amp;gt; :call GotoFile(&amp;quot;new&amp;quot;)&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-rg执行原则&#34;&gt;2. RG执行原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;你的每一次查找都有一个搜索主题&lt;/li&gt;
&lt;li&gt;没得每一个搜索主题都包含若干链接&lt;/li&gt;
&lt;li&gt;你的每一次查找都可以被记录，并被快速追溯,并被归纳在一个主题下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些记录的不错rg操作命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令行下使用rg
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rg &amp;quot;支持&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg injectDependency&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg -tpy foo&lt;/code&gt; 将搜索限制为 Python 文件，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg -Tjs foo&lt;/code&gt; 不包括 JavaScript 你搜索的文件&lt;/li&gt;
&lt;li&gt;rg 注意使用双引号（cmd和ubuntu有所不一，需要测试）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg -g &amp;quot;*.java&amp;quot; &lt;/code&gt;可以glob所有java文件，并对他们进行其他搜索(类似&lt;code&gt;-tjava&lt;/code&gt;或者&lt;code&gt;--type java&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg -g &amp;quot;!*.java&amp;quot;&lt;/code&gt;   !排除所有java文件结尾的文件（该结果可能会更多些）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg --replace or -r &lt;/code&gt; : 替换！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg --type-add ‘web:*.{html,css,js}&amp;quot; -tweb &amp;quot;hello&amp;quot;&lt;/code&gt;  自定义类型(&lt;code&gt;rg --type-list&lt;/code&gt; 可以看到所有type)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg &amp;quot;addSharedFunction\(.*\)&amp;quot; &lt;/code&gt;  所有addSharedFunction函数
注意记住上述搜素的画面中的行号，这样在vim窗口中，可以直接定位到对应行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rg --files . |rg &amp;quot;文件名字&amp;quot;&lt;/code&gt; 搜索当前目录下的文件名字小技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  D:\codeRoom\java\jfinal&amp;gt;rg &amp;quot;setInjectDependency\(&amp;quot;
  src\main\java\com\jfinal\config\Constants.java
  206:            controllerFactory.setInjectDependency(getInjectDependency());
  219:    public void setInjectDependency(boolean injectDependency) {
  220:            AopManager.me().setInjectDependency(injectDependency);

  src\main\java\com\jfinal\core\ControllerFactory.java
  26:     public void setInjectDependency(boolean injectDependency) {

  src\main\java\com\jfinal\aop\AopManager.java
  48:     public void setInjectDependency(boolean injectDependency) {
  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-fg执行步骤&#34;&gt;3. FG执行步骤&lt;/h2&gt;
&lt;p&gt;有时候我们也可以通过&lt;a href=&#34;https://github.com/sharkdp/fd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fg&lt;/a&gt; 进行文件的搜索。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fd &amp;ldquo;app&amp;rdquo; 搜索带app字符的文件&lt;/li&gt;
&lt;li&gt;fd -e jpg  搜索所有jpg文件结尾的文件&lt;/li&gt;
&lt;li&gt;fd -E jpg  搜索所有文件,并排除jpg文件结尾&lt;/li&gt;
&lt;li&gt;fd -e jpg  -a 搜索所有jpg文件结尾的文件，并以绝对路径输出&lt;/li&gt;
&lt;li&gt;fd -e jpg &amp;ndash;exec&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-ctags执行步骤&#34;&gt;4. ctags执行步骤&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Universe ctags &lt;/a&gt;可以生成一定源码文件的函数、字段标识符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctags -R *&lt;/li&gt;
&lt;li&gt;ctags -R &amp;ndash;force-language=java -R ./src&lt;/li&gt;
&lt;li&gt;ctags &amp;ndash;list-languages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set tags+=./tags
set tags+=D;/java/tags  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以添加多个tags路径，自动支持绝对路径,即其他代码库的tags可以添加到被引用库中，只要在vim配置添加好该tags绝对路径。&lt;/p&gt;
&lt;h2 id=&#34;5-接口rg查阅&#34;&gt;5. 接口rg查阅&lt;/h2&gt;
&lt;p&gt;通过&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; rg &lt;/a&gt;、&lt;a href=&#34;https://github.com/sharkdp/fd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; fd &lt;/a&gt;查看jfinal终端界面返回的接口和java源文件信息&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;func&#34; srcset=&#34;
               /post/a-new-reading-code-method/Interface-rg1_hud6d86b99ff5c5259d170155cb3688051_49597_df56d64cb59bc077afc87445c0395cd8.webp 400w,
               /post/a-new-reading-code-method/Interface-rg1_hud6d86b99ff5c5259d170155cb3688051_49597_b8f782d8c7a32172549e81120206fb7b.webp 760w,
               /post/a-new-reading-code-method/Interface-rg1_hud6d86b99ff5c5259d170155cb3688051_49597_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jueqingsizhe66.github.io/post/a-new-reading-code-method/Interface-rg1_hud6d86b99ff5c5259d170155cb3688051_49597_df56d64cb59bc077afc87445c0395cd8.webp&#34;
               width=&#34;760&#34;
               height=&#34;749&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;echarts&#34; srcset=&#34;
               /post/a-new-reading-code-method/Interface-rg2echarts_hu20dc6beceaf10f3729c765d7d588b93e_50180_ba40fe2a21f026e4026e64344f6b9975.webp 400w,
               /post/a-new-reading-code-method/Interface-rg2echarts_hu20dc6beceaf10f3729c765d7d588b93e_50180_91adcf686bb7309a16a0dbd6056521b3.webp 760w,
               /post/a-new-reading-code-method/Interface-rg2echarts_hu20dc6beceaf10f3729c765d7d588b93e_50180_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://jueqingsizhe66.github.io/post/a-new-reading-code-method/Interface-rg2echarts_hu20dc6beceaf10f3729c765d7d588b93e_50180_ba40fe2a21f026e4026e64344f6b9975.webp&#34;
               width=&#34;760&#34;
               height=&#34;677&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
