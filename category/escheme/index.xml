<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>escheme | 突然的~自我~</title>
    <link>https://jueqingsizhe66.github.io/category/escheme/</link>
      <atom:link href="https://jueqingsizhe66.github.io/category/escheme/index.xml" rel="self" type="application/rss+xml" />
    <description>escheme</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2023</copyright><lastBuildDate>Tue, 16 May 2023 23:20:13 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>escheme</title>
      <link>https://jueqingsizhe66.github.io/category/escheme/</link>
    </image>
    
    <item>
      <title>What Is Y</title>
      <link>https://jueqingsizhe66.github.io/post/what-is-y/</link>
      <pubDate>Tue, 16 May 2023 23:20:13 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/post/what-is-y/</guid>
      <description>&lt;h2 id=&#34;evens-only-and-its-collector&#34;&gt;evens-only and its collector&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define evens-only*
  (lambda (l)
    (letrec ((atom? (lambda (a)
                      (and (not (pair? a)) (not (null? a)))))
            ;; error definition of even
            ;; (even? (lambda (n)
            ;;          (= (* (/ n 2) 2) n)))
             )
      (cond
        ((null? l) (quote ()))
        ((atom? (car l))
         (let ((evencdr (evens-only* (cdr l))))
           (cond
             ((even? (car l))
              (cons (car l) evencdr))
             (else evencdr))))
        (else (cons (evens-only* (car l))
                    (evens-only* (cdr l))))))))
 (evens-only* &#39;(1 3 4 6 3 (3 6 3 (3 6 21 3))))



(define evens-only*col
  (lambda (l col)
    (letrec ((atom? (lambda (a)
                      (and (not (pair? a)) (not (null? a))))))
      (cond
        ((null? l) (col (quote ()) 1 0))
        ((atom? (car l))
           (cond
             ((even? (car l))
              (evens-only*col (cdr l)
                              (lambda (newl p s)
                                (col (cons (car l) newl)
                                     (* (car l) p)
                                     s))))
             (else
              (evens-only*col (cdr l)
                              (lambda (newl p s)
                                (col newl p
                                     (+  (car l) s)))))))
        (else
         (evens-only*col (car l)
                         (lambda (al ap as)
                           (evens-only*col (cdr l)
                                           (lambda (dl dp ds)
                                             (col (cons al dl)
                                                  (* ap dp)
                                                  (+ as ds)))))))))))

(define the-last-friend
  (lambda (newl product sum)
    (cons sum
          (cons product
               (cons newl &#39;())))))

 (evens-only*col &#39;(1 3 4 6 3 (3 6 3 (3 6 21 3))) the-last-friend)


&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;last-forever-and-will-stop&#34;&gt;last forever and will stop?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;;; will you become 隽永 forever?
;; will the program run always?

;; the function eternity we wan&#39;t execute it, because it will not stop, it don&#39;t know how to stop it
;; just like the life in the earth
(define eternity
  (lambda (x)
    (eternity x)))
;; what does shift do? the function shift takes a pair whose first component is a pair and builds a pair
;; by shifting the second part of the first component into the second componnent
(define shift
  (lambda (pair)
    (let ((first car)
          (second cdr)
          (build cons))
      (build (first (first pair))
             (build (second (first pair))
                    (second pair))))))
(shift &#39;((a b) c))
(shift &#39;((a b) (c d)))
(define weight*
  (lambda (para)
    (letrec ((atom? (lambda (a)
                      (and (not (null? a)) (not (pair? a)))))
             (first car)
             (second cdr))
      (cond
        ((atom? para) 1)
        (else (+ (* (weight* (first para)) 2)
                 (weight* (second para))))))))
;;(weight* &#39;((a b) c))
;;(weight* &#39;(q (c d)))

;;length0
((lambda (l)
   (cond
     ((null? l) 0)
     (else
      (add1 (eternity (cdr l))))))
 &#39;())

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;many-length-first-typerepeted&#34;&gt;many length first type(repeted)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;;;length0
((lambda (l)
   (cond
     ((null? l) 0)
     (else
      (add1 (eternity (cdr l))))))
 &#39;())
;;length1
((lambda (l)
   (cond
     ((null? l) 0)
     (else
      (add1
       ((lambda (l)
          (cond
            ((null? l) 0)
            (else (add1 (eternity (cdr l))))))
        (cdr l))))))
 &#39;(1))


;;length2
((lambda (l)
   (cond
     ((null? l) 0)
     (else
      (add1
       ((lambda (l)
          (cond
            ((null? l) 0)
            (else (add1
                   ((lambda (l)
                           (cond
                             ((null? l) 0)
                             (else (add1 (eternity (cdr l))))))
                         (cdr l))))))
        (cdr l))))))
 &#39;(1 2))



;;; length3
((lambda (l)
   (cond
     ((null? l) 0)
     (else
      (add1
       ((lambda (l)
          (cond
            ((null? l) 0)
            (else (add1
                   ((lambda (l)
                           (cond
                             ((null? l) 0)
                             (else (add1
                                    ((lambda (l)
                                       (cond
                                         ((null? l) 0)
                                         (else (add1 (eternity (cdr l))))))
                                     (cdr l))))))
                         (cdr l))))))
        (cdr l))))))
 &#39;(1 2 3))



;;; length4
((lambda (l)
   (cond
     ((null? l) 0)
     (else
      (add1
       ((lambda (l)
          (cond
            ((null? l) 0)
            (else (add1
                   ((lambda (l)
                           (cond
                             ((null? l) 0)
                             (else (add1
                                    ((lambda (l)
                                       (cond
                                         ((null? l) 0)
                                         (else (add1
                                                ((lambda (l)
                                                   (cond
                                                     ((null? l) 0)
                                                     (else (add1 (eternity (cdr l))))));; we don&#39;t want to execute eternity function
                                                 (cdr l))))))
                                     (cdr l))))))
                         (cdr l))))))
        (cdr l))))))
 &#39;(1 2 3 4))


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;many-length-second-typerepeated&#34;&gt;many length second type(repeated)&lt;/h3&gt;
&lt;p&gt;识别你的模式
recognize the pattern!!!
All the function or programs contain a function looks just like length but start with (lambda (length &amp;hellip;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;;;length0
(((lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1
               (length (cdr l)))))))
  eternity)
 &#39;())

;;;length1

(((lambda (f)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1
               (f (cdr l)))))))
  ((lambda (g)
     (lambda (l)
       (cond
         ((null? l) 0)
         (else
          (add1 (g (cdr l)))))))
   eternity))
 &#39;(1))


;;;length2

(((lambda (f)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1
               (f (cdr l)))))))
  ((lambda (g)
     (lambda (l)
       (cond
         ((null? l) 0)
         (else
          (add1 (g (cdr l)))))))
   ((lambda (h)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else
           (add1 (h (cdr l)))))))
   eternity)))
 &#39;(1 2))


;;;length3

(((lambda (f)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1
               (f (cdr l)))))))
  ((lambda (g)
     (lambda (l)
       (cond
         ((null? l) 0)
         (else
          (add1 (g (cdr l)))))))
   ((lambda (h)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else
           (add1 (h (cdr l)))))))
    ((lambda (k)
       (lambda (l)
         (cond
           ((null? l) 0)
           (else (add1 (k (cdr l)))))))
     eternity))))
 &#39;(1 2 3))

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;more-better-lengthwith-less-repeated-part&#34;&gt;more better length(With less repeated part)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(((lambda (mk-length)
    (mk-length eternity))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
 &#39;())


;; length1
(((lambda (mk-length)
    (mk-length
     (mk-length eternity)))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
 &#39;(1))



;; length2
(((lambda (mk-length)
    (mk-length
     (mk-length
      (mk-length eternity))))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
 &#39;(1 2))

;; length3

(((lambda (mk-length)
    (mk-length 
     (mk-length
      (mk-length
       (mk-length eternity)))))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
 &#39;(1 2 3))


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;we-dont-care-eternity-just-use-mk-length-or-others-instead-&#34;&gt;we don&amp;rsquo;t care eternity, just use mk-length or others instead ,&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;;;; We don&#39;t care what eternity does, so let&#39;s use mk-length instead eternity

;;length0
((lambda (mk-length)
   (mk-length mk-length))
 (lambda (length)
   (lambda (l)
     (cond
       ((null? l) 0)
       (else
        (add1 (length (cdr l))))))))

;;length0  instead length with mk-length
(((lambda (mk-length)
   (mk-length mk-length))
 (lambda (mk-length)
   (lambda (l)
     (cond
       ((null? l) 0)
       (else
        (add1 (mk-length (cdr l))))))))
 &#39;())

;; we could use (mk-length eternity) to make them run once

(((lambda (mk-length)
    (mk-length mk-length))
  (lambda (mk-length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else
         (add1 ((mk-length eternity) (cdr l))))))))
 &#39;(1))


;;; function we could use mk-length instead eternity , to let them execute one by one
;;; just length

(((lambda (mk-length)
    (mk-length mk-length))
  (lambda (mk-length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else
         (add1 ((mk-length mk-length) (cdr l))))))))
 &#39;(1 3 5 2))

;; funny (lambda (x) ((f f) x) =(f x)

(((lambda (mk-length)
    (mk-length mk-length))
  (lambda (mk-length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else
         (add1 ((lambda (x)
                  ((mk-length mk-length) x))
                  (cdr l))))))))
 &#39;(1 3 5 2))

;;; give the pattern (lambda (x) ((mk-length mk-length) x))  a name , le or length
(((lambda (mk-length)
    (mk-length mk-length))
  (lambda (mk-length)
    ((lambda (length)
       (lambda (l)
         (cond
           ((null? l) 0)
           (else (add1 (length (cdr l)))))))
     (lambda (x)
       ((mk-length mk-length) x)))))
 &#39;(1 2 3 3))
;; move length pattern behind

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;funny-y&#34;&gt;funny Y&lt;/h2&gt;
&lt;p&gt;what is Y! Hard to figure out!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(((lambda (le)
   ((lambda (mk-length)
      (mk-length mk-length))
    (lambda (mk-length)
      (le (lambda (x)
            ((mk-length mk-length) x))))))
  (lambda (length)
    (lambda (l)
      (cond
        ((null? l) 0)
        (else (add1 (length (cdr l))))))))
 &#39;(1 2 3 4 5 7 8))

(define Y
  (lambda (le)
    ((lambda (mk-length)
       (mk-length mk-length))
     (lambda (mk-length)
       (le (lambda (x)
             ((mk-length mk-length) x)))))))

((Y (lambda (length)
      (lambda (l)
        (cond
          ((null? l) 0)
          (else (add1 (length (cdr l))))))))
 &#39;(1 3 6 5))

(define Y2
  (lambda (fun)
    ((lambda (f)
       (f f))
     (lambda (f)
       (fun (lambda (x)
              ((f f) x)))))))

((Y2 (lambda (length)
       (lambda (l)
         (cond
           ((null? l) 0)
           (else (add1 (length (cdr l))))))))
 &#39;(3 6 8 3 20 94 ))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
