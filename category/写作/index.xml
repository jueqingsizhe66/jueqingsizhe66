<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>写作 | 30年磨一剑</title>
    <link>https://jueqingsizhe66.github.io/category/%E5%86%99%E4%BD%9C/</link>
      <atom:link href="https://jueqingsizhe66.github.io/category/%E5%86%99%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" />
    <description>写作</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2022</copyright><lastBuildDate>Sun, 13 Aug 2017 17:35:21 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/images/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>写作</title>
      <link>https://jueqingsizhe66.github.io/category/%E5%86%99%E4%BD%9C/</link>
    </image>
    
    <item>
      <title>What Vim Teaches You?</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/08/13/what-vim-teaches-you/</link>
      <pubDate>Sun, 13 Aug 2017 17:35:21 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/08/13/what-vim-teaches-you/</guid>
      <description>&lt;p&gt;vim真正教会了你什么？&lt;/p&gt;
&lt;p&gt;vim带给你激情，也给了你生活的智趣，从一开始你练习&lt;a href=&#34;http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Learn-vim-progressively &lt;/a&gt;,并且现在还在练习macro和vim’s text object. 也在不断的学习marks and tags思想，让生活轨迹有迹可循，你使用CtrlSpace来保证你的workspace保存下来，并切换文件和buffer； 随着知识的增长，你使用vimwiki来管理你的知识，并结合&lt;a href=&#34;https://github.com/mattn/calendar-vim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; calendar &lt;/a&gt;在vimwiki来管理你的日记。为了让文件查找，文件编辑更加方便，
你使用 &lt;a href=&#34;https://github.com/Shougo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; shoudo &lt;/a&gt;的&lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vimfiles &lt;/a&gt;来增强你的vim，使得你的vim变得更像一把瑞士军刀。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ctrl-Space Plugin&lt;/li&gt;
&lt;li&gt;Knowledge tool: Vimwiki&lt;/li&gt;
&lt;li&gt;Vimfiles: file operation&lt;/li&gt;
&lt;li&gt;Menu for your vim:Startify&lt;/li&gt;
&lt;li&gt;Attach File&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了多一点对称美，你使用高丽棒作者&lt;a href=&#34;https://github.com/junegunn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; junegunn &lt;/a&gt;的&lt;a href=&#34;https://github.com/junegunn/vim-easy-align&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-easy-align &lt;/a&gt; (Note: &lt;a href=&#34;https://github.com/junegunn/vim-easy-align/blob/master/EXAMPLES.md#formatting-yaml-or-json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; many examples &lt;/a&gt;),为了少犯错误，
你加入了&lt;a href=&#34;https://github.com/chip/vim-fat-finger&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-fat-finger &lt;/a&gt;,使用iabbrev来缩写你需要写的单词，或者修正错误的单词,为了编辑更加有效,
你甚至引入了&lt;a href=&#34;https://github.com/terryma/vim-multiple-cursors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-multiline-cursor &lt;/a&gt;.进一步的你引入了&lt;a href=&#34;https://github.com/tpope&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; tpope &lt;/a&gt;的&lt;a href=&#34;https://github.com/tpope/vim-surround&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-surround &lt;/a&gt;让你在书写
racket(当然你也可以使用&lt;a href=&#34;https://github.com/ruanyl/bigvim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; delimiteMate &lt;/a&gt;补全括号插件)或者lisp代码的时候更加方便一些，
并为了重复或者递归使用，你也引入他的&lt;a href=&#34;https://github.com/tpope/vim-repeat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-repeat &lt;/a&gt; (vim中的很多插件都是支持增强的，比如f的增强插件&lt;a href=&#34;https://rhysd.github.io/clever-f.vim/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; clever-f &lt;/a&gt;);
为了更快捷的编辑文件行，除了使用vim text object, 你也引入了&lt;a href=&#34;https://github.com/matze/vim-move&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-move &lt;/a&gt;和&lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-easymotion &lt;/a&gt; (Very Good)来移动行,使得vim文本更加结构化。&lt;/p&gt;
&lt;p&gt;想着让你的vim运行得更快一些，你把你一直用的&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vundle &lt;/a&gt;改为了的&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; junegunn&amp;rsquo;s vim-plug &lt;/a&gt;来管理你的插件,确没见得有太大的改进，简洁地使用plugins自然就快了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/vim/fuckvim.png&#34; alt=&#34;fuckVim&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到你也增加了 Startify 的配置。&lt;/p&gt;
&lt;p&gt;然而，上面这些都是你想让vim做的，下面要写的则是&lt;font color=&#34;red&#34;&gt;vim plugins带给你关于写作的新的概念和思想&lt;/font&gt;，这也才是本文的重点。&lt;/p&gt;
&lt;p&gt;刚开始接触vim的时候，你是用了scrooloose的&lt;a href=&#34;https://github.com/scrooloose/nerdtree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; nerdtree &lt;/a&gt; ,&lt;a href=&#34;https://github.com/majutsushi/tagbar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; tagbar &lt;/a&gt;,&lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim airline &lt;/a&gt;等，
你也使用了各种&lt;a href=&#34;https://github.com/WolfgangMehner/vim-plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; language support vim plugins &lt;/a&gt;,也知道vim使用&lt;a href=&#34;https://github.com/tpope&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; tpope &lt;/a&gt;的&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-gitgutter &lt;/a&gt;结合git管理code, 现在让我们来看第一个vim插件ctrl-space&lt;/p&gt;
&lt;h1 id=&#34;1ctrl-space-plugin&#34;&gt;1.Ctrl-Space Plugin&lt;/h1&gt;
&lt;p&gt;Github Repo: Click &lt;a href=&#34;https://github.com/vim-ctrlspace/vim-ctrlspace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; here &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim help: :h ctrlspace&lt;/p&gt;
&lt;p&gt;核心概念:&lt;/p&gt;
&lt;p&gt;当你在vim中使用:h ctrlspace时候会搜索到这些资料，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;【1.vim desktop】: Let&#39;s imagine [ Vim ] is a writing desk. 
【2.projects draws】 : Your [ projects ] are like drawers. 
【3.Bookmark  favorite project】:  The [ Bookmark ] List simply displays your favorite projects.
【4.Buffer  paper】: A [ buffer ] is like a sheet of paper lying on the desk. 
        named buffers
        unsaved buffers
【5.workspace  an status snapshot of current project】:All your [ buffers ], [ tabs ], and [ tab ] layouts can be persisted as a workspace.
It&#39;s like taking a picture of your desk with an instant camera. You can
save multiple workspaces per project with Workspace List.
【6.workspace  session】 : The word &amp;quot;workspace&amp;quot; can be considered a synonym of a &amp;quot;session&amp;quot;. The
ability of having so many sessions available at hand creates a lot of
interesting use cases! For example, you can have a workspace for each task
or feature you are working on. It&#39;s very easy to switch from one workspace
to another.

然后以后可以使用大写的B，跳转到Bookmark标签栏，类似于CtrlSpace的哲学思想，会跳转到某个bookmark下的目录，通过C也可以，直接Enter《CR》键也是可以的。
删除觉得不需要了，就D一下即可。



&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The easiest way to think about tab pages in Vim is to consider them to be viewports, layouts, or workspaces&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
tags是一个在编程中经常会使用
而且在git的版本中也经常涉及到很多打tag的工作 (git tag  or  git tag  -a)   git checkout某个tag等

其实tags只不过是对事物的一种抽象，这也是你在现实当中经常看到的class field method 注释等等，其实都可以把他们理解为一种tag，一种convinience tag
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在vimwiki的wiki文件的简单实用方法(经常用！！！):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:标签名字:
[[文件名#标签名字]]即可

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相同vim tag概念&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;&amp;quot; tab encapsulation
&amp;quot; tab 操作
&amp;quot; http://vim.wikia.com/wiki/Alternative_tab_navigation
&amp;quot; http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim

&amp;quot; tab切换
map &amp;lt;leader&amp;gt;th :tabfirst&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tl :tablast&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;tj :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tk :tabprev&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tn :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tp :tabprev&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;te :tabedit&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;td :tabclose&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tm :tabm&amp;lt;cr&amp;gt;

&amp;quot; normal模式下切换到确切的tab
noremap &amp;lt;leader&amp;gt;1 1gt
noremap &amp;lt;leader&amp;gt;2 2gt
noremap &amp;lt;leader&amp;gt;3 3gt
noremap &amp;lt;leader&amp;gt;4 4gt
noremap &amp;lt;leader&amp;gt;5 5gt
noremap &amp;lt;leader&amp;gt;6 6gt
noremap &amp;lt;leader&amp;gt;7 7gt
noremap &amp;lt;leader&amp;gt;8 8gt
noremap &amp;lt;leader&amp;gt;9 9gt
noremap &amp;lt;leader&amp;gt;0 :tablast&amp;lt;cr&amp;gt;


&amp;quot; Toggles between the active and last active tab &amp;quot;
&amp;quot; The first tab is always 1 &amp;quot;
let g:last_active_tab = 1
&amp;quot; nnoremap &amp;lt;leader&amp;gt;gt :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
&amp;quot; nnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
&amp;quot; vnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;tt :execute &#39;tabnext &#39; . g:last_active_tab&amp;lt;cr&amp;gt;
autocmd TabLeave * let g:last_active_tab = tabpagenr()

&amp;quot; 新建tab  Ctrl+t
nnoremap &amp;lt;C-t&amp;gt;     :tabnew&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-t&amp;gt;     &amp;lt;Esc&amp;gt;:tabnew&amp;lt;CR&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;默认工作类型目录&#34;&gt;默认工作类型目录&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;Markers will be also used as a storage for `cs_workspaces` (workspaces of
the current project) and `cs_files` (cached files of the current project).

Default value: &amp;gt;

    let g:CtrlSpaceProjectRootMarkers = [
         \ &amp;quot;.git&amp;quot;,
         \ &amp;quot;.hg&amp;quot;,
         \ &amp;quot;.svn&amp;quot;,
         \ &amp;quot;.bzr&amp;quot;,
         \ &amp;quot;_darcs&amp;quot;,
         \ &amp;quot;CVS&amp;quot;
         \ ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=&#34;red&#34;&gt;Summary:&lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;   A buffer is the in-memory text of a file.
   A window is a viewport on a buffer.
   A tab page is a collection of windows.


A window is a viewport onto a buffer.  You can use multiple windows on one
buffer, or several windows on different buffers.

A buffer is a file loaded into memory for editing.  The original file remains
unchanged until you write the buffer to the file.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#2. Knowledge tool: Vimwiki
Github Repo: Click &lt;a href=&#34;https://github.com/vimwiki/vimwiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; here &lt;/a&gt;
vimwki setup in vimrc:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;• &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;  
• &amp;quot; vimwiki  
• let g:vimwiki_use_mouse = 1  
• let g:vimwiki_list_ignore_newline = 0  
• let g:vimwiki_hl_headers = 0  
• &amp;quot; vimwiki打开折叠  
• &amp;quot;let g:vimwiki_folding = 1  
• let g:vimwiki_camel_case = 0  
• let g:vimwiki_list_ignore_newline = 0  
• let g:vimwiki_CJK_length = 1  
•   
• &amp;quot;设定文件浏览器目录为当前目录  
• set bsdir=buffer      
• &amp;quot;set autochdir  
•   
• &amp;quot; 日历插件  
• map ca :Calendar&amp;lt;cr&amp;gt;  
•   
• map &amp;lt;S-Space&amp;gt; :&amp;lt;C-Space&amp;gt;  
•   
• &amp;quot; vimwiki  
• let g:vimwiki_list = [{&#39;path&#39;: &#39;~/Wiki/wiki/&#39;, &#39;path_html&#39;: &#39;~/Wiki/&#39;, &#39;auto_export&#39;: 1}]  
• &amp;quot; 转化为Html文件  
• map &amp;lt;S-F4&amp;gt; :Vimwiki2HTML&amp;lt;cr&amp;gt;  
•   
• &amp;quot; 设置颜色  
• hi VimwikiHeader1 guifg=#FF0000  
• hi VimwikiHeader2 guifg=#00FF00  
• hi VimwikiHeader3 guifg=#0000FF  
• hi VimwikiHeader4 guifg=#FF00FF  
• hi VimwikiHeader5 guifg=#00FFFF  
hi VimwikiHeader6 guifg=#FFFF00  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##vimwiki tagbar 集成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;------------------------------------------------------------------------------
Tagbar integration                                            *vimwiki-tagbar*

As an alternative to the Table of Contents, you can use the Tagbar plugin
(http://majutsushi.github.io/tagbar/) to show the headers of your wiki files
in a side pane.
Download the Python script from
https://raw.githubusercontent.com/vimwiki/utils/master/vwtags.py and follow
the instructions in it.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/vim/tagbar.png&#34; alt=&#34;TAGBAR&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-vimfiles-a-tool-for-file-operations&#34;&gt;3. Vimfiles: A tool for file operations&lt;/h1&gt;
&lt;p&gt;Github Repo: click  &lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; here &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vimfiler setup in vimrc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;for vimfiler
let g:vimfiler_enable_auto_cd=1
&amp;quot;call vimfiler#set_execute_file(&#39;txt&#39;, &#39;notepad&#39;)
call vimfiler#set_execute_file(&#39;txt&#39;, &#39;gvim&#39;)
call vimfiler#set_execute_file(&#39;c&#39;, [&#39;gvim&#39;, &#39;notepad&#39;])

let g:vimfiler_as_default_explorer = 1

&amp;quot; Enable file operation commands.
&amp;quot; Edit file by tabedit.
&amp;quot;call vimfiler#custom#profile(&#39;default&#39;, &#39;context&#39;, {
&amp;quot;      \ &#39;safe&#39; : 0,
&amp;quot;      \ &#39;edit_action&#39; : &#39;tabopen&#39;,
&amp;quot;      \ })

&amp;quot; Like Textmate icons.
let g:vimfiler_tree_leaf_icon = &#39; &#39;
&amp;quot;let g:vimfiler_tree_closed_icon = &#39;▸&#39;
&amp;quot;let g:vimfiler_tree_opened_icon = &#39;▾&#39;
let g:vimfiler_file_icon = &#39;-&#39;
let g:vimfiler_marked_file_icon = &#39;*&#39;

let g:vimfiler_safe_mode_by_default=0 
  &amp;quot; Use trashbox.
  &amp;quot; Windows only and require latest vimproc.
let g:unite_kind_file_use_trashbox = 1
&amp;quot;&amp;quot;  you can create a .vim file, then source it
&amp;quot;need everything.exe
&amp;quot;nnoremap &amp;lt;Leader&amp;gt;f :Unite file buffer file_rec file_mru everything&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;f :VimFiler&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;l :Unite line&amp;lt;CR&amp;gt;
let g:unite_source_everything_limit = 100
let g:unite_source_everything_full_path_search = 1
let g:unite_source_everything_posix_regexp_search = 1
let g:unite_source_everything_async_minimum_length = 3
let g:unite_source_everything_cmd_path = &#39;C:\\Users\\YeZhao\\.vim\\es\\es.exe&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于vimfiler的使用也了解到了 &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; ag &lt;/a&gt;插件（一个特别好用的搜索插件,在ubuntu底下直接使用ag “expression” 找到当前文件夹所有文件内容 包含表达式的行数据 相当快速）&lt;/p&gt;
&lt;p&gt;Vimfiler常用快捷键&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;H作用打开shell  x打开文件夹的意思

L打开磁盘
Load
&amp;amp;回到project目录  那是相当有用的
~回到.vim目录

e编写文件
N 创建文件
K创建文件夹

#全选
*全部选？

c复制
d删除
m移动

先用m表示选定 然后d删除(重要操作)
m移动
c复制

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有意思的是,&lt;/p&gt;
&lt;p&gt;使用m然后r，可以跳出一个新的编辑窗口，进行文件名的修改，这是相当好的实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;
:Vimwiki2HTML – Convert current wiki page to HTML
:VimwikiAll2HTML – Convert all your wiki pages to HTML转化为HTML
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-startify-plugin&#34;&gt;4. Startify Plugin&lt;/h1&gt;
&lt;p&gt;Github Repo: click  &lt;a href=&#34;https://github.com/mhinz/vim-startify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; here &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##vim 全屏&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let w:full_screen=0
    map :call FullScreen()
func! FullScreen()
    if w:full_screen==1
    let w:full_screen=0
    :simalt ~R
    else
    :simalt ~X
    let w:full_screen=1
    endif
endfunc

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##vim-easy-align常用命令&lt;/p&gt;
&lt;p&gt;vim help: &lt;code&gt;:h easyalign&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;vip= Enter= EnterEnter=(居右，居中，居左对其选项 )&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;gaip=


 --------------+--------------------------------------------------------------------
 Delimiter key | Description/Use cases                                              ~
 --------------+--------------------------------------------------------------------
 &amp;lt;Space&amp;gt;       | General alignment around whitespaces
    `:`            | Suitable for formatting JSON or YAML
  `=`            | Operators containing equals sign ( `=` ,  `==,`  `!=` ,  `+=` ,  `&amp;amp;&amp;amp;=` , ...)
  `.`            | Multi-line method chaining
  `,`            | Multi-line method arguments
  `&amp;amp;`            | LaTeX tables (matches  `&amp;amp;`  and  `\\` )
  `#`            | Ruby/Python comments
  `&amp;quot;`            | Vim comments
 &amp;lt;Bar&amp;gt;         | Table markdown
 --------------+--------------------------------------------------------------------

  ------------------+------------------------------------+--------------------
 With visual map   | Description                        | Equivalent command ~
 ------------------+------------------------------------+--------------------
 &amp;lt;Enter&amp;gt;&amp;lt;Space&amp;gt;    | Around 1st whitespaces             | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign\
 &amp;lt;Enter&amp;gt;2&amp;lt;Space&amp;gt;   | Around 2nd whitespaces             | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign2\
 &amp;lt;Enter&amp;gt;-&amp;lt;Space&amp;gt;   | Around the last whitespaces        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign-\
 &amp;lt;Enter&amp;gt;-2&amp;lt;Space&amp;gt;  | Around the 2nd to last whitespaces | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign-2\
 &amp;lt;Enter&amp;gt;:          | Around 1st colon ( `key:  value` )   | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign:
 &amp;lt;Enter&amp;gt;&amp;lt;Right&amp;gt;:   | Around 1st colon ( `key : value` )   | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign:&amp;lt;l1
 &amp;lt;Enter&amp;gt;=          | Around 1st operators with =        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign=
 &amp;lt;Enter&amp;gt;3=         | Around 3rd operators with =        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign3=
 &amp;lt;Enter&amp;gt;*=         | Around all operators with =        | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign*=
 &amp;lt;Enter&amp;gt;**=        | Left-right alternating around =    | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign**=
 &amp;lt;Enter&amp;gt;&amp;lt;Enter&amp;gt;=   | Right alignment around 1st =       | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign!=
 &amp;lt;Enter&amp;gt;&amp;lt;Enter&amp;gt;**= | Right-left alternating around =    | :&#39;&amp;lt;,&#39;&amp;gt;EasyAlign!**=
 ------------------+------------------------------------+--------------------

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##vim-surround 常用命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;1. cs&amp;quot;&#39;
2. cs&#39;&amp;quot;
3. cs&#39;&amp;lt;q&amp;gt;
5. cs&amp;quot;t
4. cst&amp;quot;
6. ds&amp;quot;
7. ysiw&amp;quot;
8. yssb == yss)
9. S&amp;quot;  可视化模式选择快 然后大S，这点类似于Multiple-Cursor的Ctrl+N命令
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vim-copy-file-name&#34;&gt;vim copy file name&lt;/h2&gt;
&lt;p&gt;你使用&lt;a href=&#34;https://github.com/AdamWhittingham/vim-copy-filename&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; vim-copy-filename &lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;&amp;quot; for vim-copy-filename
nmap &amp;lt;leader&amp;gt;cp :CopyRelativePath&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cl :CopyRelativePathAndLine&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cP :CopyAbsolutePath&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cf :CopyFileName&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;cd :CopyDirectoryPath&amp;lt;CR&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;额外一些插件的备注&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haya14busa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Haya14busa &lt;/a&gt; 提供的 &lt;a href=&#34;https://github.com/haya14busa/incsearch.vim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; incsearch &lt;/a&gt; 增加了statusline的查找词当前数 和总个数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/itchyny/vim-cursorword&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Vim-cursorword &lt;/a&gt; 表示添加下划线。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AndrewRadev/splitjoin.vim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; AndrewRadev/splitjoin.vim &lt;/a&gt;  是提供类似于perl的当行模式的插件[gS gJ]。在scheme估计比较少用到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一直遗忘的一个快捷查看命令 &lt;code&gt;Ctrl+E&lt;/code&gt; 往下滚屏 &lt;code&gt;Ctrl+Y&lt;/code&gt; 往上滚屏&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;运行的话,进入底线命令模式,用:!perl %就可以运行,或者可以绑定一个快捷键组合, %表示当前文件的意思
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，编辑器界面展示的应全是代码，不应该有工具条、菜单、滚动条浪费空间的元素，另外，编程是种精神高度集中的脑力劳动，不应出现闪烁光标、花哨鼠标这些分散注意力的东东&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
写到这边我去睡觉了，梦中梦到了前半辈子比较重要的三个女人，我妈以及另外两个从小长大的妇女(不说女生了),街道上偶遇她们正在端着一个冰盒沿街发送，也不像是生了孩子似的，但梦中是那么真实又带着虚的东西（所以人
是一个最精良的仪器，拥有最直觉的第六感，又拥有最会惹事的直觉），我妈骑着自行车从我们三身边走过，前方又出现一个特别活泼的&amp;quot;妇女&amp;quot;,在我的环境中还有篮球这一个概念，我的梦（由我的身体+癫痫的精神状态+疲惫产生的一种组合的事件）把我带到一个篮球场，后来我又去了

我一个哥们那边，终于有男的出现，我发现我走过的路总是不缺乏女生(所以我是趋向于好色之徒,本来也是), 我梦到了我儿时的
阴影我特别怕的一个男生，喜欢拿刀砍人，犯冲，特别好斗，但缺少脑子。我写出来了，因为我想克服它。梦向黄大仙一样，它放屁的效果具有致幻的效果，能让人陷入幻境中不得自拔，人每天晚上也像黄大仙附体一样坐着春秋大梦。

但从我身边路过的那些女生，都已经变得不真实，我身边有一个wife如胶似漆的黏着我，怎么我就不懂珍惜呢。时代的进步，需要梦的催化，世界上无德的传销机构也在利用着洗脑在铸造着同一类人，这些人把思维当作无趣，而非智趣。

匆匆而过三十载，岁月不饶人，也不等人(也就是你学会了用时间的非定常特性来观察人生）。乐观、不自信一直伴随着我成长，然而我却不知道痛苦才是生活的本源，享受
痛苦，才能拥有些许的快乐。Enjoy Painess!但我不想把pain带给亲人，身边的人。我是一个自私的人，没有团队精神，不太会
替别人考虑的人（当然自从有了她，我得替她考虑，但是考虑得还很少，我很对不起她）

也就是生活的智趣源于痛苦，痛苦的根源诞生了时代的进步，和智趣的发展。

写到这边，就先停笔把，继续回到vim当中，他也像人，能够感知到字符的变化，感知文本结构（你赋予了它思考的能力），能够
让你编辑得更顺畅些;vim像刀、人也可以像刀，磨砺你自己这把最重要的一把刀把！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;必然对偶然，自由对随机，自由在必然中，随机在偶然中，原来这才是自由(&lt;a href=&#34;http://www.huzheng.org/geniusreligion/TheSourceCodeOfMyWorld.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 胡正自由 &lt;/a&gt;是有代价的)。&lt;/p&gt;
&lt;h1 id=&#34;在终端使用vim编辑命令的方式&#34;&gt;在终端使用vim编辑命令的方式&lt;/h1&gt;
&lt;p&gt;在~目录下创建一个.inputrc文件，内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set editing-mode vi
Control-a: beginning-of-line
Control-b: backward-char
Control-d: delete-char
Control-e: end-of-line
Control-f: forward-char
Control-k: kill-line
Control-n: next-history
Control-p: previous-history
set keymap emacs-ctlx
v: vi-editing-mode
Control-v: &amp;quot;\C-xv\e&amp;quot;
Escape: &amp;quot;\C-xv\e&amp;quot;
set keymap emacs
$if Bash
  Control-w: unix-filename-rubout
$endif

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>See From NoteExpress</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/05/18/see-from-noteexpress/</link>
      <pubDate>Thu, 18 May 2017 17:14:28 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/05/18/see-from-noteexpress/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.inoteexpress.com/aegean/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; NoteExpress &lt;/a&gt; 是一个文档管理软件，用于管理参考文件，可以方便的word等进行关联插入相关参考文献。 然而他有一个样式编辑器,很普通，却是让我有点触动。&lt;/p&gt;
&lt;h1 id=&#34;三个定义&#34;&gt;三个定义&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;过滤系统：让你的程序获得合适的数据，在运算系统之前.[struts的拦截器];你需要进行过滤，才能得到满足运算需要的数据
运算系统：合适的数据进行算法运算，矩阵运算等
样式系统: 运算完的数据进行输出,很多美化的工作。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;linux的ls可以有很多选项，可以让你的结果不一样，这个选项的效果其实跟样式系统的效果是一致的，都是你对 现实的输出不满意，于是修改，使得你的输出更加perfect&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
ls 
ls -ls 
ls -lsh  # 显示文件大小按照人类比较好识别的方式
ls -lsha # 显示隐藏文件

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; awk &lt;/a&gt; 是linux重要的过滤工具，他就好象是一个鱼网过滤器一样，按照孔的形状过滤字段, 也叫做字段级别过滤器。  &lt;a href=&#34;http://www.iteye.com/topic/587673&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; sed &lt;/a&gt; 是一个行修改工具，行级别过滤器,  有&lt;a href=&#34;http://blog.csdn.net/itsenlin/article/details/21129405&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; 几种典型的模式 &lt;/a&gt; s,p,d,x,g,h etc&lt;/p&gt;
&lt;p&gt;但就是这么简单的几个系统，却是组成了很多业务系统的实现过程的定义，你可以很容易把它替换成为你当前正在处理的阶段，see here to there.&lt;/p&gt;
&lt;h1 id=&#34;one-sentence&#34;&gt;One Sentence&lt;/h1&gt;
&lt;p&gt;每个人都应该有自己的样式系统，this is your style, nobody can change you! Different Style System makes you different. 人应该有点脾气.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim的乐趣</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/18/vimde-le-qu/</link>
      <pubDate>Thu, 18 Feb 2016 02:55:43 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/18/vimde-le-qu/</guid>
      <description>&lt;p&gt;vim有很多基础教程，我看过比较好的是&lt;a href=&#34;http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;learn vim progressively&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;% : Go to the corresponding (, {, [&lt;/li&gt;
&lt;li&gt;* (resp. #) : go to next (resp. previous) occurrence of the word under the cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#1&#34;&gt;1）在屏幕中移动光标&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#2&#34;&gt;2）在行内移动光标&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#3&#34;&gt;3）屏幕滚动&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#4&#34;&gt;4）多屏操作&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#4.1&#34;&gt;4.1 启动时候分屏 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.2&#34;&gt;4.2 运行期间分屏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.3&#34;&gt;4.3 运行期间光标移屏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.4&#34;&gt;4.4 运行期间屏幕切换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.5&#34;&gt;4.5 运行期间调整窗口大小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.6&#34;&gt;4.6 运行期间关闭窗口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vi &amp;amp; vim 有编译模式与命令模式，下述光标移动操作均为命令模式下操作；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;下文中以 ^ 符表示 Ctrl 键被按下，如 ^F 标示 Ctrl 与 F 键被同时按下；&lt;/li&gt;
&lt;li&gt;下文中以 + 号表示按下某键后再按另外按键，如 z + Enter 表示先按下 z 键，再按下 Enter 键；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1&#34;&gt;1，在屏幕中移动光标：&lt;/h2&gt;
&lt;p&gt;vi &amp;amp; vim 命令行模式操作移动光标位置都是指移动到要编辑单词、字母的前面。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    按键                                           操作描述
    h                                           光标左移一个字符；
    j                                           光标下移一行；
    k                                           光标上移一行；
    l                                           光标右移一个字符；

    数值  +  G                                  光标移至“数值”所指行的行首；
    ^H                                          光标移至当前屏幕显示首行的行首；
    ^M                                          光标移至当前屏幕显示的中间行的行首；
    ^L                                          光标移至当前屏幕显示的最后一行的行首；
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2&#34;&gt;2，在文件行内移动光标：&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    vi &amp;amp; vim 命令行模式操作光标行内移动，单词间以空格作为分隔字符，标点符号看作一个单词。

    按键                                          操作描述
    0    （数字零）                             光标移动到光标所在行的行首；
    $                                           光标移动到光标所在行的行末；
    w                                           光标移动到下一个单词的首字母前；
    b                                           光标移动到上一个单词的首字母前；
    e                                           光标移动到当前光标所在单词的最后字符前；
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3&#34;&gt;3，屏幕滚动：&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    按键                                            操作描述
    ^F                                            屏幕向下滚动一屏；==&amp;gt;屏
    ^B                                            屏幕向上滚动一屏；
    ^D                                            屏幕向下滚动半屏；==&amp;gt;半屏
    ^U                                            屏幕向上滚动半屏；
    ^E                                            屏幕向下滚动一行；==&amp;gt;行
    ^Y                                            屏幕向上滚动一行；
    z + Enter                                     滚动屏幕，使当前光标所在行处于屏幕第一行；
    z + .                                         滚动屏幕，使当前光标所在行处于屏幕中间行；
    z + -                                         滚动屏幕，使当前光标所在行处于屏幕最后一行；
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4&#34;&gt;4, 多屏操作&lt;/h2&gt;
&lt;h3 id=&#34;4.1&#34;&gt; 4.1 启动时候分屏 &lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;vim -on/-On filename1 filename2....
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;小写的o表示水平拆分，&lt;/li&gt;
&lt;li&gt;大写的O表示垂直拆分，&lt;/li&gt;
&lt;li&gt;n表示需要拆分的个数，最后面跟上拆分后需要打开的文件名称&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4.2&#34;&gt; 4.2 运行期间分屏 &lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;     按键                                         操作描述
    :sp [filename]                              水平拆分出一个窗格，后面可以接要打开的文件名，如果没有则将当前窗口进行拆分
    :vsp [filename]                             垂直拆分出一个窗格
    :new [filename]                             水平拆分
    ^w+s                                        等效于:sp不带filename效果
    ^w+v                                        等效于:vsp不带filename效果
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4.3&#34;&gt; 4.3 运行期间光标移屏 &lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;     按键                                         操作描述
    ^w+h                                        光标移动到左边窗口
    ^w+j                                        光标移动到下面窗口
    ^w+k                                        光标移动到上面窗口
    ^w+l                                        光标移动到右边窗口
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4.4&#34;&gt; 4.4 运行期间屏幕切换 &lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;     按键                                         操作描述
    ^w+H                                        将当前窗口移动到最左边
    ^w+J                                        将当前窗口移动到最下面
    ^w+K                                        将当前窗口移动到最上面
    ^w+L                                        将当前窗口移动到最右边
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4.5&#34;&gt; 4.5 运行期间调整窗口大小 &lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;     按键                                        操作描述
    ^w+=                                        一样大高度
    ^w+-                                        减小高度
    ^w++                                        增加高度

    ^w+&amp;lt;                                        减小宽度      ==&amp;gt;后来才知道分着这么细
    ^w+&amp;gt;                                        增大宽度
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4.6&#34;&gt; 4.6 运行期间关闭屏幕 &lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;     按键                                        操作描述
    ^w+o                                        只留下当前窗口,其他窗口都进行关闭   ===&amp;gt;改命令很有作用！
    ^w+c                                        关闭当前窗口，若是最后一个 提示是否关闭
    ^w+q                                        关闭当前窗口，若是最后一个 仍然不提是关闭


    ^w+&amp;lt;                                        减小宽度
    ^w+&amp;gt;                                        增大宽度
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>pandoc markdown注意点</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/06/11/pandoc-mdzhu-yi-dian/</link>
      <pubDate>Thu, 11 Jun 2015 12:30:13 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/06/11/pandoc-mdzhu-yi-dian/</guid>
      <description>&lt;p&gt;pandoc是markdown升级版工具，用于制作幻灯片相当好用，然而使用过程需要注意以下几点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;markdown文件  # 大标题不能跟上文本   ## 二标题才可以跟文本，且是一张幻灯
片。&lt;/li&gt;
&lt;li&gt;org文件使用 &amp;mdash;&amp;mdash;&amp;mdash;来强制执行创建新的幻灯片&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;markdown&#34;&gt;markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% Ye Zhaoliang
% Openfoam Introduction
% 11th June,2015

# Openfoam简介

## 1求解器(Solver 数值结算)

  openfoam采用c++编写的类库，开源免费。所以可以把它当作一种类似于String的基本类来使用。
 openfoam框架从使用级别来看主要分为两类：

    - 流体计算
    - 化学反应
    - 换热
    - 结构动力学
    - 电磁场
    - 金融评估等

## 2工具(Utility)

    - 前处理
      + 建模
      + 网格
      + 边界条件
    - 后处理
      + 计算结果显示

## cavity case

cavity case的文件夹简介（等价于fluent的.cas,只不过fluent集成为一个文件，openfoam是一个文件夹)

# 这便使用代码快包裹
├── 0 (初始条件文件夹)
│   ├── p
│   └── U
├── constant
│   ├── polyMesh(网格文件夹)
│   │   └── blockMeshDict
│   └── transportProperties(流体物性参数 传热物性参数)
└── system
    ├── controlDict(控制字典)
    ├── fvSchemes(离散格式 更高级的运用)
    └── fvSolution(求解方法)

# 运用的三个级别[%]

## 三个级别

- [ ] 直接利用解释器(替代商业求解器 初始点)
- [ ] 自定义求解器(关注点)
      + 根据自己的求解流程组合求解器(类库调用)
      + 不需要关心对流项和扩散项是如何离散的
      + 也不需要关心湍流模型
- [ ] 更高级的运用:编写离散格式

## 自定义求解器

    按照自己的_求解流程_编写求解。

##不关心

    + 离散格式(时间项和对流项)
    + 大型代数方程的求解，如何加速等。

## 传热求解

这边使用代码快包裹
    开始
    |
    初始值
    |
    -----------------&amp;lt;------------------------------
    |                                              |
    用CFD进行室内温度计算                          |
    |                   |                          ^
    辐射传热计算Qri  导热计算Qcdi                  |
    |                   |                          |
    由热平衡求新的对流传热量Qcvi^(m+1)             |
    |                                              |
    收敛条件 --------&amp;gt;-----------------------------|
    |
    结束

## 自定义离散格式

   针对于研究离散格式和代数求解器的用户
   目的： 创造更高效更精确的离散方法
   操作： 修改finiteVolumn...
          尤其是对流项。openfoam 提供了NVD和TVD的模板（40以上）
          对流项离散依然是一种研究方向。

## cavity源码文件的主要构成部分

   +  location
     - &amp;quot;system&amp;quot;
     - &amp;quot;constant&amp;quot;
     - &amp;quot;0&amp;quot;
   + class
     - dictionary
     - volVectorField
     - volScalarField

##

   + object
     - dictionary
       + fvschemes对象
       + fvsolution对象
       + controldict对象
       + blockmeshdict
       + transportproperties
     - volVectorField
       + U对象
     - volScalarField
       + p对象



&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;org-mode&#34;&gt;org-mode&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;* Openfoam简介
  openfoam采用c++编写的类库，开源免费。所以可以把它当作一种类似于String的基本类来使用。

 openfoam框架从使用级别来看主要分为两类：
----------
** 1求解器(Solver 数值结算)
    - 流体计算
    - 化学反应
    - 换热
    - 结构动力学
    - 电磁场
    - 金融评估等
** 2工具(Utility)
    - 前处理
      + 建模
      + 网格
      + 边界条件
    - 后处理
      + 计算结果显示

----------------------
** cavity case
cavity case的文件夹简介（等价于fluent的.cas,只不过fluent集成为一个文件，openfoam是一个文件夹)

#+begin_src sh
├── 0 (初始条件文件夹)
│   ├── p
│   └── U
├── constant
│   ├── polyMesh(网格文件夹)
│   │   └── blockMeshDict
│   └── transportProperties(流体物性参数 传热物性参数)
└── system
    ├── controlDict(控制字典)
    ├── fvSchemes(离散格式 更高级的运用)
    └── fvSolution(求解方法)
#+end_src 


* 运用的三个级别[%]

- [ ] 直接利用解释器(替代商业求解器 初始点)
- [ ] 自定义求解器(关注点)

      + 根据自己的求解流程组合求解器(类库调用)
      + 不需要关心对流项和扩散项是如何离散的
      + 也不需要关心湍流模型

- [ ] 更高级的运用:编写离散格式

---------
** 自定义求解器
    按照自己的_求解流程_编写求解。

** 不关心
    + 离散格式(时间项和对流项)
    + 大型代数方程的求解，如何加速等。

----------
** 传热求解
#+begin_src sh
    开始
    |
    初始值
    |
    -----------------&amp;lt;------------------------------
    |                                              |
    用CFD进行室内温度计算                          |
    |                   |                          ^
    辐射传热计算Qri  导热计算Qcdi                  |
    |                   |                          |
    由热平衡求新的对流传热量Qcvi^(m+1)             |
    |                                              |
    收敛条件 --------&amp;gt;-----------------------------|
    |
    结束
#+end_src
--------------------------------
** 自定义离散格式

   针对于研究离散格式和代数求解器的用户
   目的： 创造更高效更精确的离散方法
   操作： 修改finiteVolumn...
          尤其是对流项。openfoam 提供了NVD和TVD的模板（40以上）
          对流项离散依然是一种研究方向。

-------
** cavity源码文件的主要组成部分

   +  location
     - &amp;quot;system&amp;quot;
     - &amp;quot;constant&amp;quot;
     - &amp;quot;0&amp;quot;
  
   + class
     - dictionary
     - volVectorField
     - volScalarField
-----------
   + object
     - dictionary
       + fvschemes对象
       + fvsolution对象
       + controldict对象
       + blockmeshdict
       + transportproperties
     - volVectorField
       + U对象
     - volScalarField
       + p对象


&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>vim-haskell</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/18/vim-haskell/</link>
      <pubDate>Mon, 18 May 2015 14:04:37 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/18/vim-haskell/</guid>
      <description>&lt;p&gt;Haskell vim可以通过vimbar 安装到vim中。vimball是一个vim插件，可以很方便地帮你安装vba格式的插件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/fudesign2008/article/details/7297949&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;直接用vim打开vba格式的文件，输入:so %即可安装&lt;/a&gt;，然后:q退出。&lt;/p&gt;
&lt;p&gt;删除插件也很方便，直接在vim里输入:RmVimball 插件名&lt;/p&gt;
&lt;p&gt;不用安装vimBall(vim7.3之后 自带)&lt;/p&gt;
&lt;p&gt;方法1：&lt;a href=&#34;http://projects.haskell.org/haskellmode-vim/vimfiles/haskellmode-20101118.vba&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Haskell vimmode安装文件下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;方法2：使用bundles&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Bundle &#39;https://github.com/jueqingsizhe66/haskellmode-vim&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vim vbafiles&lt;/li&gt;
&lt;li&gt;:so %;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.haskell.org/haskellmode-vim/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;configure vimrc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;都需要配置docdir和browser，doc如果没有去windows底下的haskell phamtom拷贝一份&lt;/p&gt;
&lt;p&gt;windows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;let g:haddock_browser=&amp;quot;E:\Program\ Files\Mozilla Firefox\firefox.exe&amp;quot;
let g:haddock_docdir=&amp;quot;C:\Program\ Files\Haskell\ Platform\2014.2.0.0\doc\html&amp;quot; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ubuntu :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
let g:haddock_browser=&amp;quot;/usr/bin/opera&amp;quot;
let g:haddock_docdir=&amp;quot;/home/happycamp-of-lisp/doc&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;最后建议还是emacs漂亮一些！&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>markdown个人偏见</title>
      <link>https://jueqingsizhe66.github.io/blog/2014/05/15/mdge-ren-pian-jian/</link>
      <pubDate>Thu, 15 May 2014 22:57:56 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2014/05/15/mdge-ren-pian-jian/</guid>
      <description>&lt;p&gt;###嵌套的列表###&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序   数字&lt;/li&gt;
&lt;li&gt;无序   * + 注意在写法上的增加缩进&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###四个部分：###&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重点&lt;/li&gt;
&lt;li&gt;分类&lt;/li&gt;
&lt;li&gt;链接&lt;/li&gt;
&lt;li&gt;图片&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;markdown基本上没有下划线，也没有颜色，因为hacker不需要？ 其实也需要！只不过更关注的是重点（着重  真正的问题 大小和重量）和分类（列表） 链接（源自哪边）  需要一些图片（也许颜色和下划线 可以这样引入） 还有更重要的是真实的代码快（这个地方特别讲究，所以每种语言有不同的标记，也许代码的颜色才是黑客真正的颜色），一般他们还特别注意版权（也就是引用快，所以还有&amp;gt; , &amp;raquo; etc的选项）其他的工作就由html标记，但是特别区域快的摆放，特别注意前后的空行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果加入空行就会显示空行，如果不加入空行会把前后的数据叠加在一起，除非是加入标题。空行和加标题的一个效果类似，会使前后的数据用空行分开，另起一行！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在&amp;gt; 缩进的前方加入多余空格会造成&lt;em&gt;代码块&lt;/em&gt;的效果&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;标签没有&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;的加入没有表格的效果，还是一堆数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;For any markup that is not covered by Markdown’s syntax, you simply use HTML itself&lt;/a&gt;. There’s no need to preface it or delimit it to indicate that you’re switching from Markdown to HTML; you just use the tags.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The only restrictions are that block-level HTML elements — e.g.&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;,etc. — must be separated from surrounding content by blank lines, and the start and end tags of the block should not be indented** with tabs or spaces**. Markdown is smart enough not to add extra (unwanted) &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags around HTML block-level tags.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;##&lt;a href=&#34;http://hi.baidu.com/zolyfxughcbdkpq/item/85ea887c03081c2bd7a89cc1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;u&gt;一些常用的markdown没有的编辑操作：&lt;/u&gt;&lt;/a&gt;###&lt;/p&gt;
&lt;p&gt;###下划线###&lt;/p&gt;
&lt;p&gt;&lt;u&gt;代码:《u》下划线《/u》 &lt;/u&gt;&lt;/p&gt;
&lt;p&gt;中间标明:要加下划线的文字.&lt;/p&gt;
&lt;p&gt;###删除线###
代码:《s》删除线《/s》&lt;/p&gt;
&lt;p&gt;&lt;s&gt;中间标明:要加删除线的文字.&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;###更改字体颜色：###&lt;/p&gt;
&lt;p&gt;《font color=&amp;quot;#value&amp;quot;》写上你想写的字《/font》
(其中value值在000000与FFFFFF(16位进制)之间修改#后面的数值，就可以改变字体的颜色。&lt;/p&gt;
&lt;p&gt;###部分常用颜色代码：###&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#ff0000&#34;&gt;#ff0000 红色的字喔！&lt;/td&gt;&lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#ff8000&#34;&gt;#ff8000 橙色的字喔！&lt;/td&gt;&lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#ffff00&#34;&gt;#ffff00 黄色的字喔！&lt;/td&gt; &lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#00ff00&#34;&gt;#00ff00 绿色的字喔！&lt;/td&gt;&lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#0080ff&#34;&gt;#0080ff 蓝色的字喔！&lt;/td&gt; &lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#0000a0&#34;&gt;#0000a0 靛色的字喔！&lt;/td&gt;&lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#8000ff&#34;&gt;#8000ff 紫色的字喔！&lt;/td&gt; &lt;/font&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#000000&#34;&gt;#000000 黑色的字喔！&lt;/td&gt;&lt;/font&gt; &lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=&#34;#c0c0c0&#34;&gt;#c0c0c0 灰色的字喔！&lt;/td&gt;&lt;/font&gt;&lt;/tr&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>markdown_learning</title>
      <link>https://jueqingsizhe66.github.io/blog/2014/05/13/md-learning/</link>
      <pubDate>Tue, 13 May 2014 16:43:37 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2014/05/13/md-learning/</guid>
      <description>&lt;p&gt;#markdown code part start&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;* emphasize
* seperate line
* auto link
* picture
*************

+ emphaize
  &amp;gt; __You__ are strong
    + **he** is strong
    + *she* is em
    + _it_ is em
  
  **********
  
  use the `printf()` function
  
  这是一个普通段落。

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

这是另一个普通段落。

&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.

I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &amp;quot;Google&amp;quot;
  [2]: http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [3]: http://search.msn.com/    &amp;quot;MSN Search&amp;quot;
  
  ![Alt text][4]
  [4]:   http://image.baidu.com/detail/newindex?col=%E5%A3%81%E7%BA%B8&amp;amp;tag=%E5%88%9B%E6%84%8F&amp;amp;pn=1&amp;amp;pid=9433162230&amp;amp;aid=329840961&amp;amp;from=1&amp;amp;tag3=%E6%8A%A4%E7%9C%BC&amp;amp;app_id=578130&amp;amp;user_id=851997103&amp;amp;is_album=0&amp;amp;sortlog=0&amp;amp;width=1280&amp;amp;height=800&amp;amp;ic=0
  
  ___________________
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;#code part end#&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;emphasize&lt;/li&gt;
&lt;li&gt;seperate line&lt;/li&gt;
&lt;li&gt;auto link&lt;/li&gt;
&lt;li&gt;picture&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;emphaize&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You&lt;/strong&gt; are strong&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;he&lt;/strong&gt; is strong&lt;/li&gt;
&lt;li&gt;&lt;em&gt;she&lt;/em&gt; is em&lt;/li&gt;
&lt;li&gt;&lt;em&gt;it&lt;/em&gt; is em&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;xinran comes from hebei&lt;/li&gt;
&lt;li&gt;xinran is a beautiful and smart girl&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;use the &lt;code&gt;printf()&lt;/code&gt; function&lt;/p&gt;
&lt;p&gt;这是一个普通段落。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;youxu&lt;/li&gt;
&lt;li&gt;lie&lt;/li&gt;
&lt;li&gt;biao&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;这是另一个普通段落。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the first level of quoting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is nested blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the first level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I get 10 times more traffic from [Google] &lt;a href=&#34;http://google.com/&#34; title=&#34;Google&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt; than from
[Yahoo] &lt;a href=&#34;http://search.yahoo.com/&#34; title=&#34;Yahoo Search&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt; or [MSN] &lt;a href=&#34;http://search.msn.com/&#34; title=&#34;MSN Search&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;![Alt text][4]
[4]:   &lt;a href=&#34;http://image.baidu.com/detail/newindex?col=%E5%A3%81%E7%BA%B8&amp;amp;tag=%E5%88%9B%E6%84%8F&amp;amp;pn=1&amp;amp;pid=9433162230&amp;amp;aid=329840961&amp;amp;from=1&amp;amp;tag3=%E6%8A%A4%E7%9C%BC&amp;amp;app_id=578130&amp;amp;user_id=851997103&amp;amp;is_album=0&amp;amp;sortlog=0&amp;amp;width=1280&amp;amp;height=800&amp;amp;ic=0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://image.baidu.com/detail/newindex?col=%E5%A3%81%E7%BA%B8&amp;tag=%E5%88%9B%E6%84%8F&amp;pn=1&amp;pid=9433162230&amp;aid=329840961&amp;from=1&amp;tag3=%E6%8A%A4%E7%9C%BC&amp;app_id=578130&amp;user_id=851997103&amp;is_album=0&amp;sortlog=0&amp;width=1280&amp;height=800&amp;ic=0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
