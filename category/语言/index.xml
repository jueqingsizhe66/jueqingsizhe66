<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言 | 志不达者智不坚 言不信者行不果</title>
    <link>https://jueqingsizhe66.github.io/category/%E8%AF%AD%E8%A8%80/</link>
      <atom:link href="https://jueqingsizhe66.github.io/category/%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <description>语言</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2023</copyright><lastBuildDate>Sat, 26 Mar 2022 15:42:00 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>语言</title>
      <link>https://jueqingsizhe66.github.io/category/%E8%AF%AD%E8%A8%80/</link>
    </image>
    
    <item>
      <title>Exactly words for your conversation</title>
      <link>https://jueqingsizhe66.github.io/post/exactly-words-for-your-conversation/</link>
      <pubDate>Sat, 26 Mar 2022 15:42:00 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/post/exactly-words-for-your-conversation/</guid>
      <description>&lt;p&gt;一个正确的表达，也许可以给我们带来不一样的体验和结果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从对方角度出发（just out of curiosity, I am guessing you haven&amp;rsquo;t got around to, The good news is, don&amp;rsquo;t worry, I bet you are a bit like me, if I can will you? Most people, Before you makes your mind up, Simple swaps),&lt;/li&gt;
&lt;li&gt;从画面感出发（just imagine,How would you feel if?），&lt;/li&gt;
&lt;li&gt;从科学角度出发（what do you know? what makes you say that? Enough? What happens next )&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;103-dot-how-would-you-feel-if&#34;&gt;103. How would you feel if?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;#102-dot-just-imagine&#34;&gt;102. Just Imagine&lt;/a&gt; 一个是人的直觉，一个是想象
A word that gets thrown around like confetti in conferences is “motivation,” yet still, when I ask my audiences to share with me what the word means, all I see in response are blank faces.&lt;/p&gt;
&lt;p&gt;It is the meaning of this word that creates the true base for understand-ing all areas of negotiation influence and persuasion, and you should explore it further if you would like to perform at your peak.&lt;/p&gt;
&lt;p&gt;Put simply, understanding this word would mean that you could probably get just about anybody to do just about anything.&lt;/p&gt;
&lt;p&gt;The word motivation derives from two very common words forced together.&lt;/p&gt;
&lt;p&gt;The first part of the word, the “motiv-” part, is derived from the Latin word “motivus,” the modern-day translation of which is “motive.” Another word for motive is “reason.”&lt;/p&gt;
&lt;p&gt;The “-ation” part of the word derives from “action,” and if somebody is going to take action, they are going to do something or move. This means that a vesimple definition of motivation is “a reason to move” or “a reason to do.”&lt;/p&gt;
&lt;p&gt;Now ask yourself this: would it be fair to say that if the reason were big enough, you could get just about anybody to do just about anything?&lt;/p&gt;
&lt;p&gt;If you want people to do things that typically they do not want to do, first you need to &lt;code&gt;find an honest reason that is big enough&lt;/code&gt;. Understanding what reasons are big enough means you have to understand how people are motivated.&lt;/p&gt;
&lt;p&gt;People are motivated by one of two things: &lt;code&gt;either avoiding a loss or acquiring a potential gain&lt;/code&gt;. They either want to go toward the light, the good thing that they are looking for, or they want to get away from the thing that could potentially hurt them.&lt;/p&gt;
&lt;p&gt;The real world tells us that people will work far harder to&lt;code&gt; avoid a potential loss&lt;/code&gt; than they will to achieve a potential gain.&lt;/p&gt;
&lt;p&gt;Greater than that is the fact that the more contrast you can create between where somebody does not want to be and where they hope to be, the more likely you are to get people to move. Understanding the truth of motivation, coupled with this next point, gives you real context for this set of Magic Words.&lt;/p&gt;
&lt;p&gt;The second thing you must consider is whether people base their decisions on emotion or logic. The true answer to that question is, in fact, both; it is just that the decision is always made for emotive reasons firs The real world tells us that people will work far harder to avoid a potential loss (大多数人还是害怕失去)than they will to achieve a potential gain.&lt;/p&gt;
&lt;p&gt;Something has to feel right before it ever makes sense. I am sure you have stepped away from a conversation confused about why the other person did not follow your advice and have wondered, “I don’t know why they don’t do it. It just makes sense for them to do it.” If you are trying to win the argument based on your advice making sense, you are calling out to the wrong set of reasons. &lt;code&gt;People make decisions based on what feels right first&lt;/code&gt;. If you can make it feel right, the rest is easy(第一感觉特别特别重要).&lt;/p&gt;
&lt;h1 id=&#34;how-would-you-feel-if&#34;&gt;How would you feel if&lt;/h1&gt;
&lt;p&gt;Understanding those two complex theories is the foundation for this set of Magic Words, and it is all brought together in a preface to a question. By introducing a future scenario with the words, “ &lt;code&gt;How would you feel if...&lt;/code&gt;?” you allow the other person to time travel to that moment and imagine the emotions that would be triggered at that point. Choosing moments that trigger both positive and negative emotions will allow you to create a truth worth changing for. It will also prepare others to accept your ideas on how to help them achieve success or avoid loss. What you then create is a conditional future-facing scenario, something they can see for themselves.
EXAMPLES
Examples might be something like&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How would you feel if this decision led to your promotion?&lt;/li&gt;
&lt;li&gt;How would you feel if your competition passed you?&lt;/li&gt;
&lt;li&gt;How would you feel if you turned this around?&lt;/li&gt;
&lt;li&gt;How would you feel if you lost everything?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What about this one: how would you feel if this time next year you were debt-free, living in your dream homeand planning your next vacation?&lt;/p&gt;
&lt;p&gt;Creating these conditional future scenarios using the words, “How would you feel if&amp;hellip;?” gets people excited about their future and &lt;code&gt;gives them a reason to move&lt;/code&gt; either toward the good news or away from the bad news.&lt;/p&gt;
&lt;p&gt;Remember, &lt;code&gt;the greater the contrast, the more likely you are to get that someone to move&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;102-dot-just-imagine&#34;&gt;102. Just Imagine&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;#103-dot-how-would-you-feel-if&#34;&gt;103. How would you feel if?&lt;/a&gt;
Did you know that every decision any human makes is made at least twice? The decision is first made in your mind hypothetically before it is ever made in reality.&lt;/p&gt;
&lt;p&gt;In fact, for a decision to come true, you must have first at least imagined yourself doing it. Have you ever been in a situation in which you have said, or even justmouthed, these words back to somebody else: “I just couldn’t see myself doing that”?&lt;/p&gt;
&lt;p&gt;It is a literal thing. If you cannot see yourself doing something, the chances of you doing it are slim to none. People make decisions based on the images they see in their minds, so if you can place pictures in people’s minds, then you can use the results of those images to influence their decisions.&lt;/p&gt;
&lt;p&gt;Creating pictures in the minds of others is done by telling stories. We remember as children many a good story that started with the words, “Once upon a time&amp;hellip;” When we heard those words, we knew it was time to kick back, enjoy the moment and embrace our imagination while someone used words to paint a world for us to jump into. It would be really tough to engage adults with that same powerful preface, so you need some Magic Words that create the same picturesque outcome. When you hear the words, “Just imagine,” &lt;code&gt;the subconscious brain kicks a switch and opens up the image viewer,&lt;/code&gt; and it cannot help but picture the very scenario you are creating.&lt;/p&gt;
&lt;p&gt;In the previous section you learned about away motivation and toward motivation. You can apply those same exact rules to how you finish off your “just imagine” scenarios to help drive people to do the things you would like them to do.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;EXAMPLES&lt;/h3&gt;
&lt;p&gt;Here are some examples:
Just imagine how things will be in six months’ time once you have implemented this.
&lt;span class=&#34;underline&#34;&gt;Just imagine what your boss would say if you missed this opportunity.&lt;/span&gt;
&lt;code&gt;Just imagine the look on your kids’ faces when they see you achieve this.&lt;/code&gt;
&lt;code&gt;Just imagine the impact this could have.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Allowing the power attached to the other person’s creative mind to build your case for you will always save you guessing and can create a more vividreality than anything you could possibly describe.&lt;/p&gt;
&lt;p&gt;Let them do the hard work. Imagine saying to a team member or prospect, “Just imagine the smiles on your kids’ faces when you tell them you’ve booked a trip to Disneyland,” or, “&lt;code&gt;Just imagine stepping up on stage&lt;/code&gt; and picking up that big incentive check,” or, “Just imagine pulling into the driveway in your brand-new car.”&lt;/p&gt;
&lt;p&gt;As you make those statements, they will see the picture of that very thing happening. Now that they have seen the thing, chances are their belief in achieving it goes through the roof. I mean,
&lt;code&gt;just imagine the difference that is going to have for you and your business.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Creating pictures in the minds of others is done by telling stories.&lt;/p&gt;
&lt;p&gt;When you hear “&lt;code&gt;Just imagine&lt;/code&gt;,(我们一起来想象一下)” the brain pictures the very scenario you are creating.&lt;/p&gt;
&lt;h2 id=&#34;101-dot-just-out-of-curriosity&#34;&gt;101. just out of curriosity&lt;/h2&gt;
&lt;p&gt;There is one objection that people give in response to ideas that has always frustrated me. This objection is, “&lt;code&gt;I just need some time to think about it&lt;/code&gt;.”&lt;/p&gt;
&lt;p&gt;I am not saying that people should feel rushed into decisions. It’s just that my experience tells me this statement rarely means they are heading away to do a detailed analysis of their decision. They are just pushing their decision away to another day.&lt;/p&gt;
&lt;p&gt;Apply some context to this, and consider that you have spent time responding to an inquiry, visiting a prospect, getting to know them and listening to their challenges. You then provide them with a detailed set of recommendations as to how you can help them achieve their objectives or overcome their challenges, and in return they provide this vague response that helps none in the discussion to reach closure.&lt;/p&gt;
&lt;p&gt;My concern is that it is just not fair. I believe that if you have delivered your part correctly, then the other person at least owes you a little more transparency regarding their thoughts.&lt;/p&gt;
&lt;p&gt;On receipt of this reply, I have often found myself wanting to shout, “&lt;code&gt;What is it that you want to think about&lt;/code&gt;?” I knew that if they could open up their thoughts to me, then I could probably help.&lt;/p&gt;
&lt;p&gt;The trouble was, I knew I couldn’t really ask that because it would seem rude or obnoxious. So instead, I hear people in my situation say things like, “&lt;code&gt;It’s okay, no pressure; we are ready when you are ready&lt;/code&gt;,” and walk away from the opportunity hoping that time will fix it.&lt;/p&gt;
&lt;p&gt;This frustration has meant that I have had to find a way of getting a real answer from people by asking rude, obnoxious questions without sounding rude or obnoxious.&lt;/p&gt;
&lt;p&gt;What I want from their response is not a guaranteed commitment, but honesty in the discussion so that we both know what the true obstacles are.&lt;/p&gt;
&lt;p&gt;What I discovered was that if I preface one of these direct questions with a certain set of Magic Words, then I could change rude and obnoxious into soft and fluffy.&lt;/p&gt;
&lt;p&gt;By finding a reason for my direct question and gaining permission to ask it, I instantly shift control of the conversation to me. The words I use to do this are, “Just out of curiosity,” and they can be used as the perfect preface to many a direct question.&lt;/p&gt;
&lt;h3 id=&#34;examples-1&#34;&gt;EXAMPLES&lt;/h3&gt;
&lt;p&gt;Examples include&amp;hellip; &lt;code&gt;Just out of curiosity(很好奇哈)&lt;/code&gt;, what is it specifically you need some time to think about?
&lt;code&gt;Just out of curiosity&lt;/code&gt;, what needs to happen for you to make a decision about this?
&lt;code&gt;Just out of curiosity&lt;/code&gt;, what is it that’s stopping you from moving forward with this right now?&lt;/p&gt;
&lt;p&gt;In each of these examples, what is imperative is that you remain quiet following your question. Silence becomes your friend; you must not prejudge their answer or put words in their mouth. They now know they need to give you a proper answer, and one of two things will happen.&lt;/p&gt;
&lt;p&gt;Asking big, brave questions is exactly what you need to do to become a professional mind-maker-upper.&lt;/p&gt;
&lt;h2 id=&#34;100-dot-most-people&#34;&gt;100. Most people&lt;/h2&gt;
&lt;p&gt;First, people take great confidence from the fact that people like them have made a decision before them and that that decision worked out just fine.&lt;/p&gt;
&lt;p&gt;Consider this scenario, maybe one you have experienced yourself. On vacation, you see a group of children on top of a rock face looking to jump into the water below, but nobody wants to go first.&lt;/p&gt;
&lt;p&gt;However, as soon as one person is brave enough to go first and jumps into the water, lands with a splash and doesn’t suffer any injury but instead breaks the surface with agreat big smile on their face,&lt;/p&gt;
&lt;p&gt;now everybody seems to think it is a good idea. Human beings, people, you and I—we all like to follow others and trust that there is safety in numbers.&lt;/p&gt;
&lt;p&gt;Second, sometimes people need to be told what to do, but without their permission it can sound rude. I am sure there have been plenty of times that you have wanted to say, “What I think you should do is&amp;hellip;”&lt;/p&gt;
&lt;p&gt;“most people” would do in this situation and watch how it changes everything.&lt;/p&gt;
&lt;p&gt;When you tell people what most people would do, their subconscious brain says, “Aha, I’m most people, so if that is what most people would do, then perhaps that is what I should do too.&lt;/p&gt;
&lt;h2 id=&#34;99-dot-before-you-makes-your-mind-up&#34;&gt;99. Before you makes your Mind up&lt;/h2&gt;
&lt;p&gt;Look, before you make your mind up, let’s make sure we’ve looked at all the facts.&lt;/p&gt;
&lt;p&gt;Before you make your mind up, why don’t we just run through the details one more time so you can know what it is that you are saying no to?&lt;/p&gt;
&lt;p&gt;Before you make your mind up, wouldn’t it make sense to speak to a few more people about the difference this could make for you and your family?&lt;/p&gt;
&lt;p&gt;These simple examples can often move people from a position of no and allow the negotiation to continue by making them look at it from a different perspective.&lt;/p&gt;
&lt;p&gt;It is this shift in vantage point that then allows you to add alternative information to support your idea and increase your influence over their decision.&lt;/p&gt;
&lt;h2 id=&#34;98-dot-enough&#34;&gt;98. Enough&lt;/h2&gt;
&lt;p&gt;For instance, maybe at the grocery store you have questioned the number of apples you should buy.&lt;/p&gt;
&lt;p&gt;In every set of circumstances in which you involve yourself in the decision-making process, you have the power to influence the actions of others.&lt;/p&gt;
&lt;p&gt;Consumers love to be led through the right thing to do, and assisting people in making their minds up is a skill that will help you reach the highest places.&lt;/p&gt;
&lt;p&gt;Jumping back to the scenario in the grocery store, let’s imagine that you are deliberating between four and eight apples.&lt;/p&gt;
&lt;p&gt;If you were being served in that transaction and were asked thedirect question, “Would eight apples be enough for you?” your instant response would be “yes,” and the decision would be made.&lt;/p&gt;
&lt;p&gt;In business, your goal can be to have people come back for your products time and time again.&lt;/p&gt;
&lt;p&gt;Ensuring that they have the correct quantities to make a habit of using your products can be a key component of that.&lt;/p&gt;
&lt;p&gt;I am sure that you have enjoyed the use of travel-sized toiletries but never gone on to invest in the products yourself, yet when you have purchased a three-for-two offer, this has often become your new brand of choice.&lt;/p&gt;
&lt;p&gt;There is a company that I have worked extensively with, and their keyproduct is a drinking gel that they want people to come back and consume time and time again.&lt;/p&gt;
&lt;p&gt;In face-to-face discussions with a customer, the dilemma often arises over how many bottles they should purchase, and the choice typically sits between two and three bottles.&lt;/p&gt;
&lt;p&gt;Instead of a detailed analysis of the benefits of three bottles over two, you can easily simplify the decision with the direct question, “Would three bottles be enough for you?”&lt;/p&gt;
&lt;h2 id=&#34;97-dot-if-i-can-will-you&#34;&gt;97. If I can, will you?&lt;/h2&gt;
&lt;p&gt;Have you ever been in one of those scenarios in which your prospect or customer pushes back with reasons as to why they cannot do the thing you would like them to do?&lt;/p&gt;
&lt;p&gt;Perhaps they are looking for you to make a change from your standard terms or they would like you to offer an &lt;code&gt;improved price&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This same thing appears in our personal lives when people make excuses about why they cannot make it to events or celebrations.&lt;/p&gt;
&lt;p&gt;These situations are created by the other person delivering an external condition that is affecting their ability to move forward with your idea.&lt;/p&gt;
&lt;p&gt;They have removed themselves from the process and abdicated responsibility to something out of their control.&lt;/p&gt;
&lt;p&gt;You have the power in these situations to isolate this condition and remove the barrier by responding with a powerful question that eliminates their argument.&lt;/p&gt;
&lt;p&gt;This is achieved by using the question structure, “If I can&amp;hellip;, then will you&amp;hellip;?”&lt;/p&gt;
&lt;p&gt;Imagine that you want a friend tojoin you for a night out next Friday.&lt;/p&gt;
&lt;p&gt;Your friend says the reason they cannot join you is because the car is in for repair and the buses do not run that late.&lt;/p&gt;
&lt;p&gt;You could eliminate this challenge with the question,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“If I can pick you up and drop you off at home, then will you be able to be ready for seven pm?”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The same principle can be used when someone is looking for you to reduce your price in line with a competitive offer.&lt;/p&gt;
&lt;p&gt;“If I can match that price for you, then would you be happy to place the order with me today?”&lt;/p&gt;
&lt;p&gt;In both of these scenarios, you are still not obligated to meet the condition presented, but you are in controlof what happens next.&lt;/p&gt;
&lt;p&gt;You may receive further reasons and honesty from the other person that prevents you moving forward, or you may find that you gain their agreement.&lt;/p&gt;
&lt;p&gt;With their agreement to the condition, you can now present your best option to them and will be far more likely to reach your desired outcome.&lt;/p&gt;
&lt;p&gt;You have the power in these situations to remove the barrier by responding with a powerful question that eliminates the other person’s argument.&lt;/p&gt;
&lt;h2 id=&#34;96-dot-i-m-not-sure-if-it-s-for-you-but&#34;&gt;96. I&amp;rsquo;m not sure if it&amp;rsquo;s for you, But&lt;/h2&gt;
&lt;p&gt;Opening a statement with the words, “I’m not sure if it’s for you,” causes the listener’s subconscious brain to hear, “There’s no pressure here.”&lt;/p&gt;
&lt;p&gt;By suggesting that they may not be interested, you naturally increase their intrigue.&lt;/p&gt;
&lt;p&gt;They wonder what “it” is, and this spike in curiosity hooks them.&lt;/p&gt;
&lt;p&gt;What’s more, it fires an internal driverthat tells them a decision needs to be made, and the soft approach ensures this decision feels unpressured and internal.&lt;/p&gt;
&lt;p&gt;The real magic, though, is delivered through the final three-letter word of this sequence, a word that typically should be avoided in all conversations: the word “but.”&lt;/p&gt;
&lt;p&gt;Imagine receiving a comment from your employer that started with the words, “You know that you’re a really valuable member of the team.&lt;/p&gt;
&lt;p&gt;We love everything that you do here, but some things need to change.”&lt;/p&gt;
&lt;p&gt;What’s the only part you would remember?&lt;/p&gt;
&lt;p&gt;I am guessing the part that you would focus on most is everything that follows “but.” The word “but” negates everything that was said prior, so when you say to somebody, “I’m not sure if it’s for you, but&amp;hellip;,” what the little voice inside your listener’s head hears is, “You might want to look at this.”&lt;/p&gt;
&lt;p&gt;When you say to somebody, “I’m not sure if it’s for you, but.. .,” the little voice inside your listener’s head hears, “You might want to look at this.”&lt;/p&gt;
&lt;p&gt;I’m not sure if it’s for you, but would you happen to know someone who is interested in (insert the results of your product or service)?&lt;/p&gt;
&lt;p&gt;I’m not sure if it’s for you, but we have plans on Saturday, and you’re welcome to join us.&lt;/p&gt;
&lt;p&gt;I’m not sure if it’s for you, but this option is available for this month only, and I would hate for you to miss out.）（并不清楚大家周末的安排，但我这里有个安排，邀请大家报价周末的春游）&lt;/p&gt;
&lt;h2 id=&#34;95-dot-simple-swaps&#34;&gt;95. Simple Swaps&lt;/h2&gt;
&lt;p&gt;What questions do you have for me?”&lt;/p&gt;
&lt;p&gt;“What’s the best number to contact you at you？&lt;/p&gt;
&lt;p&gt;When Would Be a Good Time?&lt;/p&gt;
&lt;h2 id=&#34;94-dot-what-happens-next&#34;&gt;94. what happens next?&lt;/h2&gt;
&lt;p&gt;“What happens next is&amp;hellip;”&lt;/p&gt;
&lt;p&gt;This is a perfect way of linking all of the information they need to make a decision, the information you provided when you presented to them, and bringing them through to the completion that needs to follow.&lt;/p&gt;
&lt;p&gt;So, what you do is create a scene.&lt;/p&gt;
&lt;p&gt;You do not ask them what they would like to do; you just tell them what happens next.It is your responsibility to lead the conversation, and following the sharing of the required information, your role is to move it toward a close.&lt;/p&gt;
&lt;h2 id=&#34;93-dot-i-am-guessing-you-haven-t-got-ground-to&#34;&gt;93. I am guessing you haven&amp;rsquo;t got ground to&lt;/h2&gt;
&lt;p&gt;You know the times when you have sent over some details or they have said they needed to consult with someone else, and now you need to make contact to take the next step?&lt;/p&gt;
&lt;p&gt;When you are fearful that somebody has not done something, instead of asking them how that thing went, you may want to start the conversation slightly differently.&lt;/p&gt;
&lt;p&gt;Open the conversation by allowing the other person to save face, but also by preventing them from using any of the excuses you think they might use.&lt;/p&gt;
&lt;p&gt;This leaves them with nowhere to go in the conversation other than whereyou would like them to go.&lt;/p&gt;
&lt;p&gt;The reason they cannot use the excuses is because you have been bold enough to start the conversation in a way that suggests they were about to use the very excuse they had prepared: by prefacing your question with, “&lt;code&gt;I’m guessing you haven’t got around to...&lt;/code&gt;”&lt;/p&gt;
&lt;p&gt;Imagine you are making a telephone call to someone who said they needed to consult with their partner before making a decision.&lt;/p&gt;
&lt;p&gt;If you ask, “I’m guessing you haven’t got around to speaking to your partner yet?” it now becomes impossible for them to use that excuse.&lt;/p&gt;
&lt;p&gt;They respond in one of two ways: either they feel proud that they have done what they had promised, or they are embarrassed that they haven’t and make a new promise to put right that fact.&lt;/p&gt;
&lt;h3 id=&#34;examples-2&#34;&gt;EXAMPLES&lt;/h3&gt;
&lt;p&gt;Other examples could be&amp;hellip;&lt;/p&gt;
&lt;p&gt;I’m guessing you haven’t got around to looking over the documents yet?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;I’m guessing you haven’t got around to setting a date yet?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I’m guessing you haven’t got around to making a decision yet?&lt;/p&gt;
&lt;p&gt;By pushing for the negative scenario, you get people to rise to the positive or to tell you how they are going to fix the thing they said they were going to do.&lt;/p&gt;
&lt;p&gt;By using the words you are fearful they may give you back in the other direction, you create a scenario that completely disarms them.&lt;/p&gt;
&lt;p&gt;If you say to somebody, “I’m guessing you haven’t got around to making a decision on this yet,” and they say, “No, you’re right.&lt;/p&gt;
&lt;p&gt;We’re still thinking about it,” you can open up the negotiation. If, instead, they say, “No, we have, and we’ve made a decision,” you can say, “Great, when are we ready to get start
ed?”&lt;/p&gt;
&lt;p&gt;By pushing for the negative scenario, you get them to rise to the positive or to tell you how they are going to fix the thing they said they were going to do, because most people are people of their word and feel pretty bad when they are called out for it.&lt;/p&gt;
&lt;h2 id=&#34;92-dot-i-bet-you-are-a-bit-like-me&#34;&gt;92. I bet you are a bit like me&lt;/h2&gt;
&lt;p&gt;“I bet you’re a bit like me,” quite often results in the other person comfortably agreeing with what you are saying, providing that you are reasonable.&lt;/p&gt;
&lt;p&gt;This serves as a wonderful tool to help gather evidence to use in building your later recommendations.&lt;/p&gt;
&lt;p&gt;My experience has taught me that many customers, prospects and people in general are not always completely honest.&lt;/p&gt;
&lt;p&gt;Getting them to provide evidence that supports your objective makes it harder for them to disagree with you.&lt;/p&gt;
&lt;p&gt;You can use this set of words to help avoid many common objections by gaining full agreement with something they may otherwise have tried to use as a future excuse.&lt;/p&gt;
&lt;p&gt;I bet you’re a bit like me: you enjoy working hard now, knowing that it willI bet you’re a bit like me: you hate watching trashy TV in the evening and would rather work on something beneficial.&lt;/p&gt;
&lt;p&gt;I bet you’re a bit like me: you’re a busy person who’s always juggling to get everything done.&lt;/p&gt;
&lt;p&gt;Slip those kinds of statements into early conversations while holding eye contact with the other person, and just watch them nod back at you.&lt;/p&gt;
&lt;p&gt;When they do, this means they know that you know they agree with those concepts. This makes it an awful lot harder for them to tell you they have not got the time to do what you demonstrated could give them the things&lt;/p&gt;
&lt;h2 id=&#34;91-dot-the-good-news-is&#34;&gt;91. The good news is&lt;/h2&gt;
&lt;p&gt;Now is the time for us to talk about how you can turn around all that negative energy—the negative energy that comes from others in your team, others who you are prospecting or perhaps just other people in your life.&lt;/p&gt;
&lt;p&gt;These words provide you with a tool to spin a negative into a positive using a technique called &lt;code&gt;labeling&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The moment you apply a label to something, it becomes almost impossible for the other person in the conver-sation to shed that label.&lt;/p&gt;
&lt;p&gt;It is the acceptance of this new label that creates the ability to change the direction of a conversation with minimal effort and move it toward a more positive outcome.&lt;/p&gt;
&lt;p&gt;Using the Magic Words, “The good news is&amp;hellip;” as a preface to your chosen point ensures that the recipient has to accept the label you have attached to it.&lt;/p&gt;
&lt;p&gt;This optimistic spin can help you face negativity in your life, prevents you from ending up in a self-sabotaging conversation of blame and pity and helps you start to build in a new direction.&lt;/p&gt;
&lt;p&gt;If somebody is questioning their ability to do something, then you can respond with, “Look, the good news is that we have dozens of people who were in exactly the same situation when they first started, and they have gone on to be successful and are here to support you, too.”&lt;/p&gt;
&lt;p&gt;If they are unsure whether they have got the skills that are required in order to make the business work, you could say, “ &lt;code&gt;The good news is that we have com-prehensive training you can complete&lt;/code&gt; at your own pace to give you all the skills you need to make a success of this business.”&lt;/p&gt;
&lt;p&gt;What about when somebody is resisting change but says they wantmore success? You could respond with, “The good news is you already know that what you are doing now is not working, so what is the harm in trying this?”&lt;/p&gt;
&lt;p&gt;By prefacing things with, “The good news is&amp;hellip;,” you cause people to face forward with optimism and zap any negative energy out of the conversation.&lt;/p&gt;
&lt;p&gt;By prefacing things with, “&lt;code&gt;The good news is..&lt;/code&gt;.,” &lt;span class=&#34;underline&#34;&gt;you cause people to face forward with optimism and zap any negative energy out of the conversation&lt;/span&gt;.You can use this same principle with two more words when faced with people who give excuses or reasons as to why they are not ready to move forward.&lt;/p&gt;
&lt;p&gt;When somebody gives you an excuse, they expect you to push back and argue around that point.&lt;/p&gt;
&lt;p&gt;Next time somebody tells you a reason why they do not want to do something, respond by saying, “That’s great.” When somebody says, “I couldn’t do it because of this,” say, “That’s great, you’ve just found out another way that doesn’t work,” and watch how they look at you differently.&lt;/p&gt;
&lt;p&gt;You have changed the way that they think. Now,some of them might think that you have completely lost it, but hey, you probably did not want those people in your life anyway.&lt;/p&gt;
&lt;p&gt;By bringing more positivity to situations with, “&lt;code&gt;The good news is..&lt;/code&gt;.” and responding with, “&lt;em&gt;That’s great&lt;/em&gt;,” you soon start shifting the balance in people’s thoughts and allow them to question themselves toward a better outcome and behavior.&lt;/p&gt;
&lt;h3 id=&#34;don-t-worry&#34;&gt;Don&amp;rsquo;t worry&lt;/h3&gt;
&lt;p&gt;You know when you can see and feel the anxiety in somebody, when they are uncertain about what to do next or perhaps even fearful. These two Magic Words&lt;/p&gt;
&lt;p&gt;provide instant relief, and you can typically see the change in the recipient.&lt;/p&gt;
&lt;p&gt;Say the words, “Don’t worry,” and the tension just pours out of them as they become more relaxed.&lt;/p&gt;
&lt;p&gt;Just two words that, when said confidently and calmly, create an outcome that is the equivalent of the expression “Phew!”—that little sigh that comes out as they start to feel in control.&lt;/p&gt;
&lt;p&gt;Don’t worry（没事，一切都好）. You’re bound to be nervous right now.&lt;/p&gt;
&lt;p&gt;Don’t worry, I know you don’t know what to do right now, but that’s what I’m here for. I’m here to help you through this process and overcome all the hurdles as they crop up along the way.&lt;/p&gt;
&lt;p&gt;Don’t worry. I felt just the way you feel right now before I started, and look at me now.&lt;/p&gt;
&lt;p&gt;So, don’t worry if you’re wonderinghow you’re going to make all these new word choices stick. They will come in time, and you will have soon mastered it after getting a little better from one conversation to the next.&lt;/p&gt;
&lt;p&gt;“Don’t worry” is particularly useful in high-stress scenarios, when confronted with someone who is panicked—it puts people at ease.&lt;/p&gt;
&lt;h2 id=&#34;90-dot-what-make-you-say-that&#34;&gt;90. what make you say that?&lt;/h2&gt;
&lt;p&gt;or what makes you do that? 他是一个完整的句子&lt;/p&gt;
&lt;p&gt;or what makes you think that?&lt;/p&gt;
&lt;p&gt;or what makes you stop?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#89-dot-what-do-you-know&#34;&gt;89. what do you know?&lt;/a&gt;则是一个不完整的句子，他需要结合具体场景，完成对一次争论的控制&lt;/p&gt;
&lt;p&gt;The majority of people are happy to let go of their goal in favor of an easy life.&lt;/p&gt;
&lt;p&gt;The customer says, “I need to speak to somebody else before I make a decision about this.” You say, “What makes you say that?”&lt;/p&gt;
&lt;p&gt;The customer says, “Really, I don’t have all the money right now.” You say, “What makes you say that?”&lt;/p&gt;
&lt;p&gt;The customer says, “I’m really not sure I’ve got the time to fit this in around&lt;/p&gt;
&lt;p&gt;what I’m doing right now.” You say, “What makes you say that?”&lt;/p&gt;
&lt;p&gt;This shift of control now leaves the other person obligated to give an answer and fill in the gaps in their previous statement.&lt;/p&gt;
&lt;p&gt;It prevents you from making prejudgments or entering into an argument, and it allows you to better under-stand their point of view before recommending a next thought or action.&lt;/p&gt;
&lt;p&gt;What you are asking them to do is to explain themselves properly. The words, “What makes you say that?” mean they now have to take responsibility and explain what they really mean. Having this explained properly
&amp;lt;2022-06-07 23:57&amp;gt;很重要&lt;/p&gt;
&lt;p&gt;puts you in a position in which you can then help them with their decision or at least have a greater understanding of why they cannot make it at this time.&lt;/p&gt;
&lt;h2 id=&#34;89-dot-what-do-you-know&#34;&gt;89. what do you know?&lt;/h2&gt;
&lt;p&gt;How often do you find yourself in a conversation that quickly becomes a debate because you are speaking with someone who thinks they know best and perhaps even wishes to lecture you with their opinions?&lt;/p&gt;
&lt;p&gt;Move the other person’s position from one of certainty to one of doubt.&lt;/p&gt;
&lt;p&gt;Typically people try to create this position of uncertainty through directly challenging the other person’s opinion and perhaps even entering into an argument.&lt;/p&gt;
&lt;p&gt;I am sure you have had moments when you have been frustrated by someone’s inability to understand what you are saying and flustered that you cannot overcome their preconceptions.&lt;/p&gt;
&lt;p&gt;This can happen regularly when you are trying to introduce new ideas or concepts, and the “I know best” mentality of many people can be difficult to overcome.&lt;/p&gt;
&lt;p&gt;the “I know best” mentality of many people is to question the knowledge on which the other person’s opinion was founded.&lt;/p&gt;
&lt;p&gt;I am certain that you want to stop people from arguing with you, so this situation could regularly result in you backing down or walking away.&lt;/p&gt;
&lt;p&gt;For an opinion to have merit, however, it really should be founded on some form of knowledge.&lt;/p&gt;
&lt;p&gt;The best way to overcome this kind of conflict is not to win the argument; instead, you must question the knowledge on which the other person’s opinion was founded.&lt;/p&gt;
&lt;p&gt;The goal is to turn the situation into one in which the other person admits that their opinion was based on insufficient evidence, while retaining the ability for them to save face in the conversation.&lt;/p&gt;
&lt;p&gt;It is the power in the preface, “What do you know about&amp;hellip;?” that softly threatens their knowledge base and forces them to share the reference on which their argument is based.&lt;/p&gt;
&lt;p&gt;Often this results in them realizing their strong opinion was unfounded.&lt;/p&gt;
&lt;h3 id=&#34;examples-3&#34;&gt;EXAMPLES&lt;/h3&gt;
&lt;p&gt;Examples you could use in the real world are&amp;hellip;&lt;/p&gt;
&lt;p&gt;What do you know about us, our business and the way we do things differently?&lt;/p&gt;
&lt;p&gt;What do you know about everything that has changed since (insert event)?&lt;/p&gt;
&lt;p&gt;What do you know about how things really work here?&lt;/p&gt;
&lt;p&gt;What do you know about the benefits of (insert product sector)?&lt;/p&gt;
&lt;p&gt;These questions allow the other person to realize their opinion is perhaps not correct, and they can quickly become far more receptive to change.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell笔记</title>
      <link>https://jueqingsizhe66.github.io/archives/haskellbi-ji/</link>
      <pubDate>Sat, 16 May 2015 14:30:22 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/haskellbi-ji/</guid>
      <description>&lt;p&gt;语言的表现力，简洁性，有效性。&lt;/p&gt;
&lt;p&gt;2001年，出生于荷兰的计算机大师、图灵奖获得者__EdsgerW.Dijkstra__给德州大学预算委员会写信，力劝不要将计算机入门课程改为Java。不幸的是，学校最终还是用Java课程替换了Haskell。Haskell真的不行了？国内有些人的&lt;a href=&#34;http://www.vaikan.com/why-haskell-is-worth-learning/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;评论&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haskell:函数式编程语言&lt;/li&gt;
&lt;li&gt;Java  : 命令编程语言
尽管Haskell不完美，但仍然比Java好几个数量级，Java就是一个大杂烩(它是通过大范围的广告和销售员夸张的宣传才达到它的商业接受)。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果别人问你Haskell能够做什么？
一个能够编程的编程语言，高级函数编程语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果别人问你Haskell和scheme有什么区别？
比scheme更强调类型理论，但是相对scheme由于对于type theory的过度追求
反而更加难于编程&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如果别人问你haskell-如何实现冒泡法--直接排序--快速排序&#34;&gt;如果别人问你Haskell 如何实现冒泡法  直接排序  快速排序？&lt;/h3&gt;
&lt;h4 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;
sort1 [x] = [x]
sort1 (x:x1:xs)  {-选取了一个x1temp 值  x当做首数，x1:temp-}
    | x&amp;gt;x1 = x1:sort1 (x:xs)
    | otherwise = x:sort1 (x1:xs)
mpsort [] = []
mpsort x = let tmp = sort1 x in
           mpsort (init tmp) ++ [(last tmp)] 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;直接排序&#34;&gt;直接排序&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Data.List
selectsort::[Int] -&amp;gt; [Int]
selectsort [] = []
selectsort [x] = [x]
selectsort xs = minimum xs : selectsort ( delete ( minimum xs )  xs) 

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;快速排序1&#34;&gt;快速排序1&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;
quicksort :: (Ord a) =&amp;gt; [a] -&amp;gt; [a]   
quicksort [] = []   
quicksort (x:xs) =   
  let smallerSorted = quicksort [a | a &amp;lt;- xs, a &amp;lt;= x]  
      biggerSorted = quicksort [a | a &amp;lt;- xs, a &amp;gt; x]   
  in smallerSorted ++ [x] ++ biggerSorted
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;快速排序2&#34;&gt;快速排序2&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;quicksort :: (Ord a) =&amp;gt; [a] -&amp;gt; [a]     
quicksort [] = []     
quicksort (x:xs) =      
    let smallerSorted = quicksort (filter (&amp;lt;=x) xs) 
        biggerSorted = quicksort (filter (&amp;gt;x) xs)    
    in  smallerSorted ++ [x] ++ biggerSorted
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果别人问你递归是如何实现的&#34;&gt;如果别人问你递归是如何实现的？&lt;/h3&gt;
&lt;h3 id=&#34;如果别人问你如何构造fibonaaci数&#34;&gt;如果别人问你如何构造Fibonaaci数？&lt;/h3&gt;
&lt;h3 id=&#34;如果别人问你----是什么意思&#34;&gt;如果别人问你::  =&amp;gt; -&amp;gt;是什么意思？&lt;/h3&gt;
&lt;p&gt;(==) :: Eq a =&amp;gt; a -&amp;gt; a -&amp;gt; Bool
可以这样阅读：  相当函数的两个相同的类型值作为参数并返回一个bool值，而这两个参数的类型同在Eq类之中(即类型约束）
eq这一类型 提供了判断相等性的接口，凡是可以比较相等性的类型嗯必属于Eq类
（=&amp;gt;左边的部分叫做类型约束）
a表示人意的类型 &amp;mdash;&amp;mdash;&amp;mdash;泛形 &amp;mdash;多态函数挂钩。。。。&lt;/p&gt;
&lt;p&gt;::  读作他的类型为   （类似 !! 从list去除 第几个元素   &amp;lt;- 属于  &lt;code&gt;elem&lt;/code&gt;是什么的元素   &lt;code&gt;mod&lt;/code&gt; 可以和什么除。。&lt;/p&gt;
&lt;h3 id=&#34;如果有人问你如何用haskell编写函数&#34;&gt;如果有人问你如何用haskell编写函数？&lt;/h3&gt;
&lt;p&gt;他和scheme有很大的不同，scheme用的是(define)
而haskell用的是模式匹配，比如下面的求最大值的程序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;maximum&#39; :: (Ord a) =&amp;gt; [a] -&amp;gt; a   
maximum&#39; [] = error &amp;quot;maximum of empty list&amp;quot;   
maximum&#39; [x] = x   
maximum&#39; (x:xs)    
    | x &amp;gt; maxTail = x   
    | otherwise = maxTail   
    where maxTail = maximum&#39; xs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果别人叫你简化上面的maximum程序&#34;&gt;如果别人叫你简化上面的maximum程序&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;maximum&#39; :: (Ord a) =&amp;gt; [a] -&amp;gt; a   
maximum&#39; [] = error &amp;quot;maximum of empty list&amp;quot;   
maximum&#39; [x] = x   
maximum&#39; (x:xs) = max x (maximum&#39; xs) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果别人问你haskell到底长成啥子样子&#34;&gt;如果别人问你Haskell到底长成啥子样子？&lt;/h3&gt;
&lt;p&gt;你会告诉他他涨起来真的是一节一节的，一段一段的，有棱有角&lt;/p&gt;
&lt;h3 id=&#34;如果有人问你replicate-3-5是如何实现的&#34;&gt;如果有人问你replicate 3 5是如何实现的？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;replicate&#39; :: (Num i, Ord i) =&amp;gt; i -&amp;gt; a -&amp;gt; [a]   
replicate&#39; n x   
| n &amp;lt;= 0    = []   
| otherwise = x:replicate&#39; (n-1) x
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果有人问你take是如何实现的呢-drop&#34;&gt;如果有人问你take是如何实现的呢？ drop?&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;take&#39; :: (Num i, Ord i) =&amp;gt; i -&amp;gt; [a] -&amp;gt; [a]   
take&#39; n _   
| n &amp;lt;= 0   = []   
take&#39; _ []     = []   
take&#39; n (x:xs) = x : take&#39; (n-1) xs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果有人问你_-下划线表示什么意思&#34;&gt;如果有人问你_ 下划线表示什么意思？&lt;/h3&gt;
&lt;p&gt;_ 代表任意东西&lt;/p&gt;
&lt;h3 id=&#34;如果有人问你reverse如何实现&#34;&gt;如果有人问你reverse如何实现？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;reverse&#39; :: [a] -&amp;gt; [a]   
reverse&#39; [] = []   
reverse&#39; (x:xs) = reverse&#39; xs ++ [x]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果有人问你repeat如何实现&#34;&gt;如果有人问你repeat如何实现？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;repeat&#39; :: a -&amp;gt; [a]   
repeat&#39; x = x:repeat&#39; x
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果有人做了一个tuple-想要用zip产生更多tuples&#34;&gt;如果有人做了一个tuple ，想要用zip产生更多tuples？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;zip&#39; :: [a] -&amp;gt; [b] -&amp;gt; [(a,b)]   
zip&#39; _ [] = []   
zip&#39; [] _ = []   
zip&#39; (x:xs) (y:ys) = (x,y):zip&#39; xs ys
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果有人问你mod的类似函数--elem的实现&#34;&gt;如果有人问你mod的类似函数  elem的实现？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;elem&#39; :: (Eq a) =&amp;gt; a -&amp;gt; [a] -&amp;gt; Bool   
elem&#39; a [] = False   
elem&#39; a (x:xs)   
| a == x    = True   
| otherwise = a `elem&#39;` xs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如果有人问你typeclass有哪里类&#34;&gt;如果有人问你typeclass有哪里类？&lt;/h3&gt;
&lt;p&gt;利用 type 自己查去&lt;/p&gt;
&lt;h3 id=&#34;如果有人问你haskell有没有类似scheme的lambda函数&#34;&gt;如果有人问你Haskell有没有类似scheme的lambda函数？&lt;/h3&gt;
&lt;p&gt;告诉他有，而且更加直接，虽然刚开始书写起来不方便&lt;/p&gt;
&lt;p&gt;scheme版的lambda:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    (lambda (x y)
       (+ x y))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Haskell版的lambda:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    (\y -&amp;gt; y + 3）
    其中\后面跟着参数  -&amp;gt;后面跟着函数体
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;18如果有人问haskell有没有存在高阶函数&#34;&gt;18.如果有人问haskell有没有存在高阶函数？&lt;/h3&gt;
&lt;p&gt;有 。 map ,filter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map (\y-&amp;gt; y+3) [3,5,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;19如果有人问你flip有什么含义&#34;&gt;19.如果有人问你flip有什么含义？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;let f x  y = x / y
Prelude&amp;gt; map (f 2) [1,2,3]
[2.0,1.0,0.6666666666666666]
Prelude&amp;gt; map (flip f 2) [1,2,3]
[0.5,1.0,1.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;20-如何有人问-如何运行-2048&#34;&gt;20. 如何有人问 如何运行 2048&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ runhaskell putchar_test.hs 
use runhaskell to run the *.hs programme
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;21-如果有人问haskell实现递归的自然表达式&#34;&gt;21. 如果有人问haskell实现递归的自然表达式？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;quicksort (x:xs) =
elem&#39; a (x:xs) 

zip&#39; (x:xs) (y:ys) = (x,y):zip&#39; xs ys
reverse&#39; (x:xs) = reverse&#39; xs ++ [x]

take&#39; n (x:xs) = x : take&#39; (n-1) xs
maximum&#39; (x:xs) = max x (maximum&#39; xs)
maximum&#39; (x:xs)   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以看见每一个形式都有函数名,函数使用方式,函数的参数表 &lt;br&gt;
这是一种__模式__,因为Haskell使用函数的时候，先写出函数，然后空格 写出变量 紧接着其他可选变量
所以你也函数匹配模式 也应该是这样来写
基于这种思想，你重新回过头看函数定义，你会发现还真的是这样额？！
从函数的定义知道他的用法，这就是Haskell与众不同的一点。&lt;/p&gt;
&lt;h3 id=&#34;22-如果有人问如何写出阶乘形式&#34;&gt;22. 如果有人问如何写出阶乘形式？&lt;/h3&gt;
&lt;p&gt;告诉他用函数，告诉他用函数匹配，告诉他用递归。。。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;factorial :: (Integral a) =&amp;gt; a -&amp;gt; a   
factorial 0 = 1   
factorial n = n * factorial (n - 1) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;23-如果别人问你haskell如何新建一中类型&#34;&gt;23. 如果别人问你Haskell如何新建一中类型？&lt;/h3&gt;
&lt;p&gt;暂时不太懂
但是我知道 Haskell使用 data来定义类别
julia使用type来定义&lt;/p&gt;
&lt;h3 id=&#34;24-如果别人问你monads-是什么玩意&#34;&gt;24. 如果别人问你monads 是什么玩意？&lt;/h3&gt;
&lt;p&gt;其实这个是更加深层次的运用Haskell,在scheme也有. 比如IO monad,可以想象为一种抽象数据类型。&lt;/p&gt;
&lt;h3 id=&#34;25-如果别人问你如何学习haskell&#34;&gt;25. 如果别人问你如何学习haskell？&lt;/h3&gt;
&lt;p&gt;告诉他有一篇文章叫做 如此有趣的学习Haskell
Haskell趣學指南   &lt;a href=&#34;http://learnyouahaskell-zh-tw.csie.org/zh-cn/chapters.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://learnyouahaskell-zh-tw.csie.org/zh-cn/chapters.html&lt;/a&gt;
还不错 ，这个教程&lt;/p&gt;
&lt;p&gt;学习Haskell ，要是你能够对于空格特别敏感，会对你有所好处，因为很多地方都是用空格分开
而不是（）  [] 之类的。空格有实际意义，分开不同的字段&lt;/p&gt;
&lt;h3 id=&#34;26-如果别人问你--有什么意义&#34;&gt;26. 如果别人问你 | 有什么意义？&lt;/h3&gt;
&lt;p&gt;分类说明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bmiTell :: (RealFloat a) =&amp;gt; a -&amp;gt; a -&amp;gt; String   
bmiTell weight height   
    | weight / height ^ 2 &amp;lt;= 18.5 = &amp;quot;You&#39;re underweight, you emo, you!&amp;quot;   
    | weight / height ^ 2 &amp;lt;= 25.0 = &amp;quot;You&#39;re supposedly normal. Pffft, I bet you&#39;re ugly!&amp;quot;   
    | weight / height ^ 2 &amp;lt;= 30.0 = &amp;quot;You&#39;re fat! Lose some weight, fatty!&amp;quot;   
    | otherwise                   = &amp;quot;You&#39;re a whale, congratulations!&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每一个函数定义的时候，在Haskell看来只是其中的一种模式，一个模式下可以有很多的分类，如果他找不到模式
就说找不到，所以定义的时候，尽可能的完善定义。
比如下面的lucky函数 和sayMe 函数
lucky函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky :: (Integral a) =&amp;gt; a -&amp;gt; String   
lucky 7 = &amp;quot;LUCKY NUMBER SEVEN!&amp;quot;   
lucky x = &amp;quot;Sorry, you&#39;re out of luck, pal!&amp;quot; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sayme函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sayMe :: (Integral a) =&amp;gt; a -&amp;gt; String   
sayMe 1 = &amp;quot;One!&amp;quot;   
sayMe 2 = &amp;quot;Two!&amp;quot;   
sayMe 3 = &amp;quot;Three!&amp;quot;   
sayMe 4 = &amp;quot;Four!&amp;quot;   
sayMe 5 = &amp;quot;Five!&amp;quot;   
sayMe x = &amp;quot;Not between 1 and 5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;27-如果别人叫你简化bmitell函数&#34;&gt;27. 如果别人叫你简化bmiTell函数&lt;/h3&gt;
&lt;p&gt;使用where&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bmiTell :: (RealFloat a) =&amp;gt; a -&amp;gt; a -&amp;gt; String   
bmiTell weight height   
    | bmi &amp;lt;= 18.5 = &amp;quot;You&#39;re underweight, you emo, you!&amp;quot;   
    | bmi &amp;lt;= 25.0 = &amp;quot;You&#39;re supposedly normal. Pffft, I bet you&#39;re ugly!&amp;quot;   
    | bmi &amp;lt;= 30.0 = &amp;quot;You&#39;re fat! Lose some weight, fatty!&amp;quot;   
    | otherwise   = &amp;quot;You&#39;re a whale, congratulations!&amp;quot;   
    where bmi = weight / height ^ 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;28-如果别人问你-where可以跟多少个变量-&#34;&gt;28. 如果别人问你 where可以跟多少个变量 ？&lt;/h3&gt;
&lt;p&gt;跟他说 很多个。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bmiTell :: (RealFloat a) =&amp;gt; a -&amp;gt; a -&amp;gt; String   
bmiTell weight height   
    | bmi &amp;lt;= skinny = &amp;quot;You&#39;re underweight, you emo, you!&amp;quot;   
    | bmi &amp;lt;= normal = &amp;quot;You&#39;re supposedly normal. Pffft, I bet you&#39;re ugly!&amp;quot;   
    | bmi &amp;lt;= fat    = &amp;quot;You&#39;re fat! Lose some weight, fatty!&amp;quot;   
    | otherwise     = &amp;quot;You&#39;re a whale, congratulations!&amp;quot;   
    where bmi = weight / height ^ 2   
          skinny = 18.5   
          normal = 25.0   
          fat = 30.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数在 where 绑定中定义的名字只对本函数可见，因此我们不必担心它会污染其他函数的命名空间。注意，其中的名字
都是一列垂直排开，如果不这样规范，Haskell 就搞不清楚它们在哪个地方了&lt;/p&gt;
&lt;h3 id=&#34;29-如果有人问你-where当中可以使用模式匹配吗&#34;&gt;29. 如果有人问你 where当中可以使用模式匹配吗？&lt;/h3&gt;
&lt;p&gt;可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;where bmi = weight / height ^ 2   
(skinny, normal, fat) = (18.5, 25.0, 30.0) 

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;30-如果别人叫你写一个show类型的函数&#34;&gt;30. 如果别人叫你写一个show类型的函数？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;tell :: (Show a) =&amp;gt; [a] -&amp;gt; String   
tell [] = &amp;quot;The list is empty&amp;quot;   
tell (x:[]) = &amp;quot;The list has one element: &amp;quot; ++ show x   
tell (x:y:[]) = &amp;quot;The list has two elements: &amp;quot; ++ show x ++ &amp;quot; and &amp;quot; ++ show y   
tell (x:y:_) = &amp;quot;This list is long. The first two elements are: &amp;quot; ++ show x ++ &amp;quot; and &amp;quot; ++ show y  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个函数顾及了空 List，单元素 List，双元素 List 以及较长的 List，所以这个函数很安全。(x:[]) 与 (x:y:[]) 也可以写作 [x] 和 [x,y] (有了语法糖，我们不必多加括号)。不过 (x:y:_)这样的模式就不行了，因为它匹配的 List 长度不固定。&lt;/p&gt;
&lt;h3 id=&#34;31-如果别人问你int-和integer的区别&#34;&gt;31. 如果别人问你Int 和Integer的区别？&lt;/h3&gt;
&lt;p&gt;Int 有上下线  Integer没有&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; minBound :: Int
-9223372036854775808
Prelude&amp;gt; min
min       minBound  minimum
Prelude&amp;gt; minBound  :: Integer 

&amp;lt;interactive&amp;gt;:247:1:
    No instance for (Bounded Integer) arising from a use of `minBound&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;32-如果别人问你char-and-char-的区别&#34;&gt;32. 如果别人问你char and [char] 的区别？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; :t &#39;a&#39;
&#39;a&#39; :: Char
Prelude&amp;gt; :t &amp;quot;a&amp;quot;
&amp;quot;a&amp;quot; :: [Char]
Prelude&amp;gt; :t &amp;quot;dfasdf&amp;quot;
&amp;quot;dfasdf&amp;quot; :: [Char]
Prelude&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-如果别人问你变量有类型那么函数是不是也有类型&#34;&gt;33. 如果别人问你变量有类型，那么函数是不是也有类型？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;removeNonUppercase :: [Char] -&amp;gt; [Char]   
removeNonUppercase st = [ c | c &amp;lt;- st, c `elem` [&#39;A&#39;..&#39;Z&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;removeNonUppercase 的类型为 [Char]-&amp;gt;[Char]，从它的参数和回传值的类型上可以看出，
它将一个字串映射为另一个字串。[Char] 与 String 是等价的，但使用 String 会更清晰：
removeNonUppercase :: String -&amp;gt; String。编译器会自动检测出它的类型，我们还是标明了
它的类型声明。要是多个参数的函数该怎样？如下便是一个将三个整数相加的简单函数
参数之间由 -&amp;gt; 分隔，而与回传值之间并无特殊差异&lt;/p&gt;
&lt;h3 id=&#34;34-如果别人问你有没有比较好用的编程工具&#34;&gt;34. 如果别人问你有没有比较好用的编程工具？&lt;/h3&gt;
&lt;p&gt;告诉他Haskell！&lt;/p&gt;
&lt;p&gt;该如何学习？
告诉他安装 ghci,并且在软件中输入 :brower  就能观察到很多的类型
并且支持tab键。
:brower 会列出内置函数的 类型，以及他的基本使用方法&lt;/p&gt;
&lt;h3 id=&#34;35-如果别人问你高阶函数是如何定义&#34;&gt;35. 如果别人问你高阶函数是如何定义？&lt;/h3&gt;
&lt;p&gt;高阶函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map f lst --将lst按照函数f映射得到一个新的数列
map :: (a-&amp;gt;b) -&amp;gt; [a] -&amp;gt;
map f [] = []
map f (x:xs) = f x : map f xs

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;36-如果别人问你如何使用-brower-提供的函数类型&#34;&gt;36. 如果别人问你如何使用 :brower 提供的函数类型？&lt;/h3&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;36.1
Prelude&amp;gt; :t product 
product :: Num a =&amp;gt; [a] -&amp;gt; a
Prelude&amp;gt; product [3,5,2]
30
36.2
readFile :: FilePath -&amp;gt; IO String

Prelude&amp;gt; readFile &amp;quot;/tmp/a.txt&amp;quot;
&amp;quot;fdsf&amp;quot;
Prelude&amp;gt; let  d=readFile &amp;quot;/tmp/a.txt&amp;quot;
Prelude&amp;gt; d
&amp;quot;fdsf&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;37--如果别人问你如何切断一个数组在某个位置&#34;&gt;37.  如果别人问你如何切断一个数组在某个位置？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;splitAt :: Int -&amp;gt; [a] -&amp;gt; ([a], [a])
Prelude&amp;gt; splitAt 3 [3,5,6,2,3,6,3]
([3,5,6],[2,3,6,3])

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;38--如果别人问你为什么你这样使用subtract&#34;&gt;38.  如果别人问你为什么你这样使用subtract?&lt;/h3&gt;
&lt;p&gt;告诉他，我是看着定义来使用的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subtract :: Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a
Prelude&amp;gt; subtract 20 3
-17
Prelude&amp;gt; subtract [30,3] [3,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;39--如果别人问你-zip相关的函数&#34;&gt;39.  如果别人问你 zip相关的函数？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    Prelude&amp;gt; unzip [(3,4)]
    ([3],[4])
    Prelude&amp;gt; unzip [(3,4),(3,7)]
    ([3,3],[4,7])
    Prelude&amp;gt; unzip [(3,4),(3,7),(7,4)]
    ([3,3,7],[4,7,4])
    Prelude&amp;gt; unzip [(3,4),(3,7),(7,4),(8,9)]
    ([3,3,7,8],[4,7,4,9])
    Prelude&amp;gt; unzip [((3,4),(3,7)),((7,4),(8,9))]
    ([(3,4),(7,4)],[(3,7),(8,9)])

    unzip3 :: [(a, b, c)] -&amp;gt; ([a], [b], [c])

    Prelude&amp;gt; unzip3 [(3,6,3)]
    ([3],[6],[3])
    Prelude&amp;gt; unzip3 [(3,6,3),(3,5,9)]
    ([3,3],[6,5],[3,9])
    Prelude&amp;gt; unzip3 [(3,6,3),(3,5,9),(8,9,0)]
    ([3,3,8],[6,5,9],[3,9,0])
    Prelude&amp;gt; unzip3 [(3,6,3,5),(3,5,9,3),(8,9,0,6)]

    &amp;lt;interactive&amp;gt;:172:9:
        Couldn&#39;t match expected type `(a0, b0, c0)&#39;
                    with actual type `(t0, t1, t2, t3)&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;40-如果别人问你un相关的函数&#34;&gt;40. 如果别人问你un相关的函数？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; unlines [&amp;quot;ds&amp;quot;,&amp;quot;dfsf&amp;quot;]
&amp;quot;ds\ndfsf\n&amp;quot;
until :: (a -&amp;gt; Bool) -&amp;gt; (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a
unwords :: [String] -&amp;gt; String
Prelude&amp;gt; unwords [&amp;quot;dsf&amp;quot;,&amp;quot;fdsf&amp;quot;]
&amp;quot;dsf fdsf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;41-如果比人问你如何使用-sin等三角函数&#34;&gt;41. 如果比人问你如何使用 sin等三角函数？&lt;/h3&gt;
&lt;p&gt;转换为弧度制&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; sin (45/180*pi)
0.7071067811865475
Prelude&amp;gt; sin (45*pi/180)
0.7071067811865475

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-如果别人问你haskell针对字符的函数&#34;&gt;42. 如果别人问你Haskell针对字符的函数？&lt;/h3&gt;
&lt;p&gt;Haskell中预定义的针对字符的函数有:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   isAscii, isLatin1, isControl, isPrint, isSpace, isUpper, isLower,
   isAlpha, isDigit, isOctDigit, isHexDigit, isAlphaNum,
   digitToInt, intToDigit,
   toUpper, toLower,
   ord, chr,等
   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ord将字母转换为数字, chr反之.&lt;/p&gt;
&lt;h3 id=&#34;43-如果别人问你构造数组的几种方式&#34;&gt;43. 如果别人问你构造数组的几种方式？&lt;/h3&gt;
&lt;p&gt;数列是通过[]来进行描述的&lt;/p&gt;
&lt;h4 id=&#34;431-数组构造&#34;&gt;43.1 数组构造&lt;/h4&gt;
&lt;p&gt;数列是用[]和(:)构造的, []是一个空的数列, x:xs的含义是元素x附加到数列xs的前面组成一个更长的数列.
比如, 1:[] 等于[1], 2:3:1:[]等于[2,3,1], 运算符(:)是从右向左运算的. 所有的数列都可以看作是从[]开始,
将各元素用(:)附到上面形成的. 在实际编程中有一些简记法可以快速地构造数列.&lt;/p&gt;
&lt;h4 id=&#34;432-列举法&#34;&gt;43.2 列举法&lt;/h4&gt;
&lt;p&gt;将数列的元素一一列举, 比如: [1,2,3], [&amp;lsquo;A&amp;rsquo;,&amp;lsquo;B&amp;rsquo;,&amp;rsquo;d&amp;rsquo;], [[1,2], [4,5,6]]等等,
数列的类型用&amp;quot;[元素类型]&amp;ldquo;来表示, 这几个例子的类型依次为: [Int], [Char], [[Int]].&lt;/p&gt;
&lt;h4 id=&#34;433-范围法&#34;&gt;43.3 范围法&lt;/h4&gt;
&lt;p&gt;适用于构造等差数列, 比如: [1..5]等于[1,2,3,4,5], [&amp;lsquo;a&amp;rsquo;..&amp;rsquo;d&amp;rsquo;]等于[&amp;lsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,&amp;lsquo;c&amp;rsquo;,&amp;rsquo;d&amp;rsquo;]等于&amp;quot;abcd&amp;quot;因为type String=[Char].
默认的等差为1, 也可以给出前两个元素指定等差, 比如: [2,4..8]等于[2,4,6,8], [2,4..7]等于[2,4,6], [2.5,4..9.5]等于
[2.5,4.0,5.5,7.0,8.5,10.0].&lt;/p&gt;
&lt;h3 id=&#34;433-描述法&#34;&gt;43.3 描述法&lt;/h3&gt;
&lt;p&gt;描述法给出数列中元素取值的范围以及所满足的条件, 与数学中集合的描述法是一样的. 例如:
[3*x+2| x&amp;lt;-[3,6,9]] &amp;ndash;记号&amp;rdquo;&amp;lt;-&amp;ldquo;表示属于,x依次取3,6,9,代入3*x+2,得到数列[11,20,29]
[x*x| x&amp;lt;-[1..9], x `rem` 3==1] &amp;ndash;给出x的范围,还限定x除3余1
[(x,y)|x&amp;lt;-[1,2,3],y&amp;lt;-[x..3]] &amp;ndash;等于 [(1,1),(1,2),(1,3),(2,2),(2,3),(3,3)]&lt;/p&gt;
&lt;h3 id=&#34;44-如果别人跟你说haskell可以write-poet&#34;&gt;44. 如果别人跟你说Haskell可以write poet?&lt;/h3&gt;
&lt;p&gt;第一次语文  数学   计算机的结合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt;  let nouns = [&amp;quot;he&amp;quot;,&amp;quot;she&amp;quot;,&amp;quot;I&amp;quot;]
Prelude&amp;gt; let adjectives=[&amp;quot;lazy&amp;quot;,&amp;quot;handsome&amp;quot;,&amp;quot;something&amp;quot;]
Prelude&amp;gt; [adjective ++ &amp;quot; &amp;quot; ++ noun | adjective &amp;lt;-adjectives ,noun&amp;lt;-nouns]
[&amp;quot;lazy he&amp;quot;,&amp;quot;lazy she&amp;quot;,&amp;quot;lazy I&amp;quot;,&amp;quot;handsome he&amp;quot;,&amp;quot;handsome she&amp;quot;,&amp;quot;handsome I&amp;quot;,&amp;quot;something he&amp;quot;,&amp;quot;something she&amp;quot;,&amp;quot;something I&amp;quot;]

*Main&amp;gt; let nouns = [&amp;quot;he&amp;quot;,&amp;quot;she&amp;quot;,&amp;quot;I&amp;quot;]
*Main&amp;gt; let adjectives=[&amp;quot;lazy&amp;quot;,&amp;quot;handsome&amp;quot;,&amp;quot;something&amp;quot;]
*Main&amp;gt; [adjective ++ &amp;quot; &amp;quot; ++ noun | adjective &amp;lt;-adjectives ,noun&amp;lt;-nouns]
[&amp;quot;lazy he&amp;quot;,&amp;quot;lazy she&amp;quot;,&amp;quot;lazy I&amp;quot;,&amp;quot;handsome he&amp;quot;,&amp;quot;handsome she&amp;quot;,&amp;quot;handsome I&amp;quot;,&amp;quot;something he&amp;quot;,&amp;quot;something she&amp;quot;,&amp;quot;something I&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###45. 如果别人跟你说Haskell可以跟几何并轨？
第一次和几何的触碰&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt;  let triangels=[(a,b,c)|c&amp;lt;-[1..10],b&amp;lt;-[1..c],a&amp;lt;-[1..b],c^2==a^2+b^2,a+b+c==24]
Prelude&amp;gt; triangels 
[(6,8,10)]

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;46-如果别人问你haskell的cabal是什么&#34;&gt;46. 如果别人问你Haskell的cabal是什么？&lt;/h3&gt;
&lt;p&gt;类似于ubuntu的apt-get&lt;br&gt;
scilab  的atoms
python的 easy_install  或者pip
redhat 的yum&lt;/p&gt;
&lt;h3 id=&#34;47-如果别人问你有几个基本的typeclass&#34;&gt;47. 如果别人问你有几个基本的TypeClass?&lt;/h3&gt;
&lt;p&gt;类型类是haskell中站在较高位置的语言认识。几种基本的类型类包括Eq,Ord,Show,Read,Enum等。&lt;/p&gt;
&lt;h4 id=&#34;471-eq&#34;&gt;47.1 Eq&lt;/h4&gt;
&lt;p&gt;包含可判断相等性的类型。提供实现的函数是 == 和 /=。所以，
只要一个函数有Eq类的类型限制，那么它就必定在定义中用到了 == 和 /=&lt;/p&gt;
&lt;h4 id=&#34;472-ord&#34;&gt;47.2 Ord&lt;/h4&gt;
&lt;p&gt;包含可比较大小的类型。除了函数以外，我们目前所谈到的所有类型都属于 Ord 类。Ord 包中包含了
&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= 之类用于比较大小的函数。compare 函数取两个
Ord 类中的相同类型的值作参数，回传比较的结果。这个结果是如下三种类型之一：GT, LT, EQ。&lt;/p&gt;
&lt;h4 id=&#34;473-show&#34;&gt;47.3 Show&lt;/h4&gt;
&lt;p&gt;的成员为可用字串表示的类型。目前为止，除函数以外的所有类型都是 Show 的成员。
操作 Show Typeclass，最常用的函数表示 show。它可以取任一Show的成员类型并将其转为字串&lt;/p&gt;
&lt;h4 id=&#34;474-read&#34;&gt;47.4 Read&lt;/h4&gt;
&lt;p&gt;是与 Show 相反的 Typeclass。read 函数可以将一个字串转为 Read 的某成员类型。&lt;/p&gt;
&lt;h4 id=&#34;475-enum&#34;&gt;47.5 Enum&lt;/h4&gt;
&lt;p&gt;的成员都是连续的类型 &amp;ndash; 也就是可枚举。Enum 类存在的主要好处就在于我们可以在 Range 中用到它的成员类型：
每个值都有后继子 (successer) 和前置子 (predecesor)，分别可以通过 succ 函数和 pred 函数得到。
该 Typeclass 包含的类型有：(), Bool, Char, Ordering, Int, Integer, Float 和 Double。&lt;/p&gt;
&lt;h4 id=&#34;476-bounded&#34;&gt;47.6 Bounded&lt;/h4&gt;
&lt;p&gt;的成员都有一个上限和下限。&lt;/p&gt;
&lt;h4 id=&#34;477-num&#34;&gt;47.7 Num&lt;/h4&gt;
&lt;p&gt;Num 是表示数字的 Typeclass，它的成员类型都具有数字的特征。检查一个数字的类型：&lt;/p&gt;
&lt;h4 id=&#34;478-integral&#34;&gt;47.8 Integral&lt;/h4&gt;
&lt;p&gt;同样是表示数字的 Typeclass。Num 包含所有的数字：实数和整数。而 Integral 仅包含整数，其中的成员类型有 Int 和 Integer。&lt;/p&gt;
&lt;h4 id=&#34;479-floating&#34;&gt;47.9 Floating&lt;/h4&gt;
&lt;p&gt;仅包含浮点类型：Float 和 Double。
可以用一张图来表示：
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/classes.gif&#34; alt=&#34;类图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;48-我想用haskell产生一个三角形&#34;&gt;48. 我想用Haskell产生一个三角形&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;let triangels=[(a,b,c)|c&amp;lt;-[1..10],b&amp;lt;-[1..10],a&amp;lt;-[1..10]]
let righttriangels=[(a,b,c)|c&amp;lt;-[1..10],b&amp;lt;-[1..c],a&amp;lt;-[1..b],a^2+b^2==c^2]
let righttriangelsc=[(a,b,c)|c&amp;lt;-[1..10],b&amp;lt;-[1..c],a&amp;lt;-[1..b],a^2+b^2==c^2,a+b+c==24]

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;49-如果别人问你如何表示数学的集合&#34;&gt;49. 如果别人问你如何表示数学的集合？&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; [x*2|x &amp;lt;- [1..10]]
[2,4,6,8,10,12,14,16,18,20]
Prelude&amp;gt; [x*2|x&amp;lt;- [1..10],x*2 &amp;gt;=12 ]
[12,14,16,18,20]
Prelude&amp;gt; [x | x &amp;lt;- [50..100], x `mod` 7 ==3]
[52,59,66,73,80,87,94]

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;50-如果别人问你-代表什么东西&#34;&gt;50. 如果别人问你!! 代表什么东西？&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[3, 5,6] !!2
*Main&amp;gt; [3, 5,6] !!2
6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;51-几个常用的数组提取函数&#34;&gt;51. 几个常用的数组提取函数？&lt;/h4&gt;
&lt;p&gt;并且是从0开始的
常用几个list函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Main&amp;gt; head [5,6,4]
5
*Main&amp;gt; last [5,6,4]
4
*Main&amp;gt; tail [5,6,4]
[6,4]
*Main&amp;gt; init [5,6,6,43,6]
[5,6,6,43]


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;length  null  reverse  take等函数  具体说一下take&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Main&amp;gt; take 4 [5,6,7,4,3,8]
[5,6,7,4]
*Main&amp;gt; take 3 [5,6,7,4,3,8]
[5,6,7]
*Main&amp;gt; take 2 [5,6,7,4,3,8]
[5,6]
*Main&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同理类似的drop&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
