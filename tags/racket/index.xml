<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>racket | Macro Life</title>
    <link>https://jueqingsizhe66.github.io/tags/racket/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tags/racket/index.xml" rel="self" type="application/rss+xml" />
    <description>racket</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Fri, 11 Aug 2017 13:25:10 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>racket</title>
      <link>https://jueqingsizhe66.github.io/tags/racket/</link>
    </image>
    
    <item>
      <title>CPS Intutive</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/08/11/cps-intutive/</link>
      <pubDate>Fri, 11 Aug 2017 13:25:10 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/08/11/cps-intutive/</guid>
      <description>&lt;p&gt;通过deep&amp;amp;coB 和deepB的不同CPS实现，说明letcc版本是直接跳出surrounding，而不管周边的其他计算。 并且可以这样认为所有的scheme lambda表达式都可以理解为kn表达式的过程(好处1)，这种直观的解释方便理解 绕来绕去的过程。并且cps style尾巴的k既可以是变量也可以是函数 (好处2)。&lt;/p&gt;
&lt;h1 id=&#34;1-&#34;&gt;1. 普通形式&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Normal Form&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; append2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lisa lisb)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lisa) lisb)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons (car lisa) (append2 (cdr lisa) lisb))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; fact
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (zero? n)
         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
         (* n (fact (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))

(fact &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-tail-form&#34;&gt;2. Tail form&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; append3
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lisa lisb)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((ap2
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a b)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                  ((null? a) b)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (ap2 (cdr a) (cons (car a) b)))))))
      (ap2 (reverse lisa) lisb))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; fact2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((fact-help (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n help)
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (zero? n)
                              help
                              (fact-help (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (* n help))))))
      (fact-help n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
(fact2 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;#3. deep&amp;amp;coB&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; deep&amp;amp;coB
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (m k)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((zero? m)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ()
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;set!&lt;/span&gt; toppings k)
         (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pizza&lt;/span&gt;)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (deep&amp;amp;coB (sub1 m)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
                   (k (cons x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))))))

(deep&amp;amp;coB &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;
(deep&amp;amp;coB &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cps风格 lambda(x) x ,可以使用k1 k2 k3 的风格进行替换,cps风格仅仅是编程的风格，letcc是其中的一种体现.&lt;/p&gt;
&lt;p&gt;#4. deepB&lt;/p&gt;
&lt;p&gt;letcc风格 直接跳出！！（也就是不管其他计算，直接他就是返回值！！）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; toppings &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; deepB
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (m)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((zero? m)
       (call-with-current-continuation
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (jump)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;set!&lt;/span&gt; toppings jump)
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pizza&lt;/span&gt;)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons (deepB (sub1 m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;#5. bons and kons&lt;/p&gt;
&lt;p&gt;进一步理解cps风格也可以看看kons和bons的实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#lang &lt;/span&gt;racket
&lt;span style=&#34;color:#75715e&#34;&gt;; kons the magnificent&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; kons
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (kar kdr)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (selector)          &lt;span style=&#34;color:#75715e&#34;&gt;; returns lambda (selector)&lt;/span&gt;
      (selector kar kdr))))     &lt;span style=&#34;color:#75715e&#34;&gt;; calls selector with kar and kdr arguments&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; kar&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; kar
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (c)                   &lt;span style=&#34;color:#75715e&#34;&gt;; applies selector on (a d) and returns &amp;#39;a (car)&lt;/span&gt;
    (c (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a d) a))))

&lt;span style=&#34;color:#75715e&#34;&gt;; kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; kdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (c)                   &lt;span style=&#34;color:#75715e&#34;&gt;; applies selector on (a d) and returns d (cdr)&lt;/span&gt;
    (c (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a d) d))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of kons kar kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(kar (kons &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;
(kdr (kons &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(kar (kdr (kons &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; (kons &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;b&lt;/span&gt;
(kar (kons &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; (kons &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Another cons&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; bons
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (kar)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((kdr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (selector)
        (selector
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;set!&lt;/span&gt; kdr x))
         kar
         kdr)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Another kar&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; bar
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (c)
    (c (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (s a d) a))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Another kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; bdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (c)
    (c (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (s a d) d))))

&lt;span style=&#34;color:#75715e&#34;&gt;; set-kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; set-kdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (c x)
    ((c (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (s a d) s)) x)))

&lt;span style=&#34;color:#75715e&#34;&gt;; create kons using set-kdr and bons&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; kons2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a d)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((c (bons a)))
      (set-kdr c d)
      c)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of kons2 bar and bdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(bar (kons2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;
(bdr (kons2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 2 3)&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; bad
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; (will-stop? bad)
         (eternity x))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; eternity
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
    (eternity x)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cgi.soic.indiana.edu/~c311/lib/exe/fetch.php?media=cps-notes.scm&#34;&gt; cps变换教程 &lt;/a&gt;
2 &lt;a href=&#34;http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html&#34;&gt; Y combinator推导 &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Racket Man Wanna Learn Datetype and Cases</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/05/30/racket-man-wanna-learn-datetype-and-cases/</link>
      <pubDate>Tue, 30 May 2017 21:11:25 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/05/30/racket-man-wanna-learn-datetype-and-cases/</guid>
      <description>&lt;p&gt;无意中，想到了 [ racket ][1] ，scheme家族中一员，那么亲切，lovely.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;Welcome to Racket v6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&amp;gt; (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&amp;gt; (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;52.44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.834493&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;62.840551089104395&lt;/span&gt;
&amp;gt; (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;52.44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.834493&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;-62&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;62.840551089104395&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;-62&lt;/span&gt;
&amp;gt; (- (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;52.44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.834493&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8405510891043946&lt;/span&gt;
&amp;gt; (* (- (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;52.44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.834493&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;302.59839207758205&lt;/span&gt;
&amp;gt; exit&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&amp;lt;procedure:exit&amp;gt;
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复习列表:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[ datetype ][2]&lt;/li&gt;
&lt;li&gt;[ cases ][3]&lt;/li&gt;
&lt;li&gt;[ First Interpreter From EOPL ][4]&lt;/li&gt;
&lt;li&gt;[ The Second Interpreter from one ][5]&lt;/li&gt;
&lt;li&gt;[ The third Interpreter with proc feature ][6]&lt;/li&gt;
&lt;li&gt;[ the fourth Interpreter with traceproc feature ][7]&lt;/li&gt;
&lt;li&gt;[ The fifth Interpreter with letrec feature ][8]
Read the EOPL book&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Deadline: 2017-06-30
[1]:http://racket-lang.org/
[2]:http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/
[3]:http://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/
[4]:http://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/
[5]:http://jueqingsizhe66.github.io/blog/2016/02/27/the-second-interpreter-from-one/
[6]:http://jueqingsizhe66.github.io/blog/2016/02/27/the-third-interpreter-implementing-proc/
[7]:http://jueqingsizhe66.github.io/blog/2016/02/27/the-fourth-interpreter-about-the-traceproc/
[8]:http://jueqingsizhe66.github.io/blog/2016/02/28/the-fifth-interpreter-with-the-implementation-of-letrec-important/&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
