<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matlab | 简约派</title>
    <link>https://jueqingsizhe66.github.io/tags/matlab/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tags/matlab/index.xml" rel="self" type="application/rss+xml" />
    <description>matlab</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Wed, 28 Sep 2016 17:20:32 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>matlab</title>
      <link>https://jueqingsizhe66.github.io/tags/matlab/</link>
    </image>
    
    <item>
      <title>Machine Learning some search record</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/09/28/machine-learning-some-search-record/</link>
      <pubDate>Wed, 28 Sep 2016 17:20:32 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/09/28/machine-learning-some-search-record/</guid>
      <description>&lt;p&gt;学习&lt;a href=&#34;http://cs229.stanford.edu/&#34;&gt;stanford Cs229机器学习&lt;/a&gt;的一些资料汇总。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/alvine008/article/details/9097105&#34;&gt;手把手教你实现SVM算法（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/alvine008/article/details/9097109&#34;&gt;详解2D-PCA （二维PCA）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/alvine008/article/details/9097111&#34;&gt;手把手教你实现SVM算法（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;了解了一些机器学习，想到了prolog是一门人工智能算法，所以顺便搜索到了&lt;a href=&#34;http://blog.csdn.net/baimafujinji/article/details/49745389&#34;&gt;prolog九宫格&lt;/a&gt; .
首先这段prolog代码显然是简短的、简单的（但是不友好 声明式语言一定得写的友好）。我们根本没有告诉计算机该怎么做，我们只是说现在我们有一个九宫格，并要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）每个格都是从1到9中的一个整数；&lt;/li&gt;
&lt;li&gt;（2）九宫格中的数字不会重复；&lt;/li&gt;
&lt;li&gt;（3）每行的和都相等；&lt;/li&gt;
&lt;li&gt;（4）每列的和都相等；&lt;/li&gt;
&lt;li&gt;（5）两条对角线上的和也相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;现在运行还有点问题！待以后解决！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wenku.baidu.com/link?url=H44D9f3eHZB-RqPf2tbICEIHtn3L5ZvCkLS6IcOg_uEhW-nmZocKYCoUGYBjQ6O_YXRbYptH2Yr4vsTtkwjB-36xpFnCAf1Ygyjo3zscoky&#34;&gt;基于PDC_PROLOG自学习机器博弈 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;白马负金羁&lt;!-- raw HTML omitted --&gt;的&lt;a href=&#34;http://blog.csdn.net/baimafujinji/article/category/6048259&#34;&gt;机器学习资料&lt;/a&gt; （包含R语言，逻辑规约，HMM,卡尔曼滤波）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/baimafujinji/article/details/6472337&#34;&gt;MATLAB中进行基于SVM的数据分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/stark_summer/article/details/50364666&#34;&gt;机器学习简史&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/stark_summer/article/details/50249943&#34;&gt;机器学习概念&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.analyticsvidhya.com/blog/2015/08/common-machine-learning-algorithms/#rd?sukey=e74171513d3453dd223d8ac2deeb49e1eac3a7c7511b955187120c332b0e4df30837b86c6940bf1967a7c57107306d2c&#34;&gt;贝叶斯及其他常用机器学习算法 From analyticsvidhya&lt;/a&gt;（&lt;!-- raw HTML omitted --&gt;相当棒&lt;!-- raw HTML omitted --&gt;的一个机器学习算法介绍 好评不断  通过计算认识了贝叶斯算法）
并同时介绍了what is predicator?  what is Class Prior Probabilty?
what is Posterior Probability? what is Predictor Prior Probability?&lt;/p&gt;
&lt;p&gt;下面是我的手写笔记(需要2min看懂)
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/MachineLearning/beya1.jpg&#34; alt=&#34;bayes1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/MachineLearning/beya2.jpg&#34; alt=&#34;bayes2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/MachineLearning/beya3.jpg&#34; alt=&#34;bayes3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.analyticsvidhya.com/&#34;&gt;Analyticsvidhya&lt;/a&gt;,一个相当不错的计算机学习网站。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bayes%27_theorem&#34;&gt;贝叶斯理论 From wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/&#34;&gt;平凡而有神奇的贝叶斯 刘未鹏&lt;/a&gt;， &lt;!-- raw HTML omitted --&gt;从这里开始认识到贝叶斯的美&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.analyticsvidhya.com/blog/2016/04/complete-tutorial-tree-based-modeling-scratch-in-python/&#34;&gt;A Complete Tutorial on Tree Based Modeling from Scratch (in R &amp;amp; Python)&lt;/a&gt;，&lt;!-- raw HTML omitted --&gt;十分清楚,需要一定时间理解&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;R语言和Python语言比较经常被人们用来做机器学习，其实包括lisp,prolog,java等都是可以的。
&lt;a href=&#34;https://www.analyticsvidhya.com/blog/2016/02/complete-tutorial-learn-data-science-scratch/&#34;&gt;完整的R语言教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/&#34;&gt;完整的python语言教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/u013731339/article/details/40025373&#34;&gt;ipython机器学习&lt;/a&gt;.Ipython是一个比较有用的python IDE界面，提供比较友好的输出调试界面(网页上操作),所以顺便也查了一下怎么用。&lt;/p&gt;
&lt;p&gt;尝试Notebook, 还需要下载一些其它咚咚&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载安装 pyzmq, 在这里不建议使用pip, pip对pyzmq支持不太好，装不上。我尝试使用easy_install
c:&amp;gt;easy_install.exe pyzmq&lt;/li&gt;
&lt;li&gt;下载安装 jinja2,
c:&amp;gt;easy_install.exe jinja2&lt;/li&gt;
&lt;li&gt;下载安装 tornado,
c:&amp;gt;easy_install.exe tornado    &lt;br&gt;
好了，使用下面命令就可以把Notebook起来：
c:&amp;gt;ipython.exe notebook&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;十分友好的ipython notebook，在命令行敲一下会打开一个浏览器窗口，用于编写Python的语句&lt;/p&gt;
&lt;p&gt;然而python和R并不是我的选择，我还是熟悉&lt;!-- raw HTML omitted --&gt;matlab&lt;!-- raw HTML omitted --&gt;,打算选择matlab作为我机器学习的工具。&lt;/p&gt;
&lt;p&gt;关于机器语言的一些常用算法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/MachineLearning/algo.jpg&#34; alt=&#34;algo&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雷老师推荐的&lt;a href=&#34;http://www.esat.kuleuven.be/sista/lssvmlab/&#34;&gt;LS-SVM matlab&lt;/a&gt;, &lt;!-- raw HTML omitted --&gt;结论是选择LS-SVM&lt;!-- raw HTML omitted --&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.csie.ntu.edu.tw/~cjlin/libsvm/&#34;&gt;台湾的林智仁(Lin Chih-Jen)教授等编写SVM模式识别和回归的软件包，多语言实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;附带dot语言图片生成&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/09/28/graphviz-notebook/&#34;&gt;dot reference&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gnuplot&#34; data-lang=&#34;gnuplot&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt; G1{
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    compound&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt;[fontname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Kaiti];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;fontname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SimSun]; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;fontname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SimSun]; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;box&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rounded&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;fillcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#1f8842&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;]; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt; cluster_1{
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ellipse&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Supervised Learning&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Supervised Learning(This algorithm consist of a target / outcome &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nvariable&lt;/span&gt; (or dependent variable) which is to be predicted 
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; of &lt;span style=&#34;color:#a6e22e&#34;&gt;predictors&lt;/span&gt; (independent variables))&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    node[style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filled&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;fillcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chartreuse];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1. Linear Regression&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2. logistic Regression&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3. Decision Tree&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4. Supported Vector Machine&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5. Random Forest&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6. KNN&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Naive Bayes&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt; cluster_2{
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filled&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;fillcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chartreuse];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ellipse&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UnSupervised Learning&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UnSupervised Learning(do not have any target or outcome variable to&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;npredict &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; estimate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  It is used for clustering population
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt; is widely used for 
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Apriori Alogirithm&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;K-means&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt; cluster_3{
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filled&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;fillcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chartreuse];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Reinforcement Learning(It works this way: the machine is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;nexposed to an environment where it 
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f&lt;/span&gt; continually using trial and error&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; 
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;his&lt;/span&gt; machine learns from past experience 
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;re&lt;/span&gt; the best possible knowledge 
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Markov Decision Process&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;]
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;lhead&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cluster_1];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;lhead&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cluster_2];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;lhead&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cluster_3];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>matlab小结</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/07/19/matlabxiao-jie/</link>
      <pubDate>Tue, 19 Jul 2016 18:41:57 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/07/19/matlabxiao-jie/</guid>
      <description>&lt;p&gt;最近，有做一个图像处理的项目，总结出一些有用的maltlab小工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;Numsubplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;windRose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;多项式拟合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;箭头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;误差带&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;matlab编程配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;cell and array&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在进行分析的时候，有时候可能需要多图打印，numsubplot还是挺方便的。使用可以看注释部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;    function&lt;/span&gt; [p,n]=&lt;span style=&#34;color:#a6e22e&#34;&gt;numSubplots&lt;/span&gt;(n)
&lt;span style=&#34;color:#75715e&#34;&gt;% function [p,n]=numSubplots(n)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Purpose&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Calculate how many rows and columns of sub-plots are needed to&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% neatly display n subplots. &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Inputs&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% n - the desired number of subplots.     &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Outputs&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% p - a vector length 2 defining the number of rows and number of&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     columns required to show n plots.     &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% [ n - the current number of subplots. This output is used only by&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%       this function for a recursive call.]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Example: neatly lay out 13 sub-plots&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;% &amp;gt;&amp;gt; p=numSubplots(13)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% p = &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     3   5&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% for i=1:13; subplot(p(1),p(2),i), pcolor(rand(10)), end &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Rob Campbell - January 2010&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; isprime(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, 
    n=n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

p=factor(n);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(p)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
p=[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,p];
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; length(p)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(p)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
p(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=p(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
p(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)=p(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;);
p(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)=[];
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
p(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=p(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
p(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)=[];
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    
p=sort(p);
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;%Reformat if the column/row ratio is too large: we want a roughly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%square design &lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; p(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;p(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.5&lt;/span&gt;
N=n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
[p,n]=numSubplots(N); &lt;span style=&#34;color:#75715e&#34;&gt;%Recursive!&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;a. 可以用于绘制风玫瑰图，也就是风向变量和风速变量
b. 也可以用于绘制单一变量的玫瑰图，比如角度玫瑰图&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [figure_handle,colorSeq,barX,barY,count,speeds,directions,Table] = &lt;span style=&#34;color:#a6e22e&#34;&gt;WindRose&lt;/span&gt;(direction,speed,varargin)
    &lt;span style=&#34;color:#75715e&#34;&gt;%  WindRose  Draw a Wind Rose knowing direction and speed&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  [figure_handle,count,speeds,directions,Table] = WindRose(direction,speed);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  [figure_handle,count,speeds,directions,Table] = WindRose(direction,speed,&amp;#39;parameter1&amp;#39;,value1,...);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  figure_handle is the handle of the figure containing the chart&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  count is the frequency for each speed (ncolumns = nspeeds) and for each direction (nrows = ndirections).&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  speeds is a 1 by n vector containing the values for the speed intervals&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  directions is a m by 1 vector containing the values in which direction intervals are centered&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  Table is a (4+m) by (3+m) cell array (excel-ready), containing Frequencies for each direction and for each speed. &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  User can specify direction angle meaning North and East winds, so&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%  the graphs is shown in the desired reference&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Example&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     d = 360 * rand(10000,1); % My reference is North = 0? East = 90?&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     v = 30*rand(10000,1);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     [figure_handle,count,speeds,directions,Table] = WindRose(d,v,&amp;#39;anglenorth&amp;#39;,0,&amp;#39;angleeast&amp;#39;,90,&amp;#39;freqlabelangle&amp;#39;,45);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% PARAMETER          CLASS         DEFAULT VALUE         DESCRIPTION&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;centeredin0&amp;#39;      Logical.      true                  Is first angular bin centered in 0 (-5 to 5)? -&amp;gt; CeteredIn0 = true // or does it start in 0 (0 to 10)? -&amp;gt; CeteredIn0 = false.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;ndirections&amp;#39;      Numeric.      36                    Number of direction bins (subdivisions) to be shown.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;freqround&amp;#39;        Numeric.      1                     Maximum frquency value will be rounded to the first higher whole multiple of FrequenciesRound. Only applies if &amp;#39;maxfrequency&amp;#39; is specified.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;nfreq&amp;#39;            Numeric.      5                     Draw this number of circles indicating frequency.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;speedround&amp;#39;       Numeric.      [] (auto)             Maximum wind speed will be rounded to the first higher whole multiple of WindSpeedRound.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;nspeeds&amp;#39;          Numeric.      [] (auto)             Draw this number of windspeeds subdivisions (bins). Default is 6 if &amp;#39;speedround&amp;#39; is specified. Otherwise, default is automatic.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;maxfrequency&amp;#39;     Numeric.      [] (auto) or 6        Set the value of the maximum frequency circle to be displayed. Be careful, because bins radius keep the original size.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;freqlabelangle&amp;#39;   Numeric.      [] (auto)             Angle in which frequecy labels are shown. If this value is empty, frequency labels will NOT be shown. Trigonometric reference. 0=Right, 90=Up.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;titlestring&amp;#39;      Cell/String.  {&amp;#39;Wind Rose&amp;#39;;&amp;#39; &amp;#39;}     Figure title. It is recommended to include an empty line below the main string.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;lablegend&amp;#39;        String.       &amp;#39;Wind speeds in m/s&amp;#39;  String that will appear at the top of the legend. Can be empty.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;cmap&amp;#39;             String.       &amp;#39;jet&amp;#39;                 String with the name of a colormap function. If you put inv before the name of the funcion, colors will be flipped (e.g. &amp;#39;invjet&amp;#39;, &amp;#39;invautum&amp;#39;, &amp;#39;invbone&amp;#39;, ...). Use any of the built-in functions (autumn, bone, colorcube, cool, copper, flag, gray, hot, hsv, jet, lines, pink, prism, spring, summer, white, winter). See doc colormap for more information.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;height&amp;#39;           Numeric.      2/3*screensize        Figure inner height in pixels. Default is 2/3 of minimum window dimension;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;width&amp;#39;            Numeric.      2/3*screensize        Figure inner width in pixels.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;figcolor&amp;#39;         Color Code.   &amp;#39;w&amp;#39;                   Figure color, any admitted matlab color format. Default is white.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;textcolor&amp;#39;        Color Code.   &amp;#39;k&amp;#39;                   Text and axis color, any admitted matlab color format. Default is black.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;labels&amp;#39;           CellString    {&amp;#39;N&amp;#39;,&amp;#39;S&amp;#39;,&amp;#39;E&amp;#39;,&amp;#39;W&amp;#39;}     Specify North South East West in a cell array of strings.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;labelnorth&amp;#39;       String.       &amp;#39;N&amp;#39;                   Label to indicate North. Be careful if you specify &amp;#39;labels&amp;#39; and &amp;#39;labelnorth&amp;#39;. Last parameter specified will be the one used.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;labelsouth&amp;#39;       String.       &amp;#39;S&amp;#39;                   Label to indicate South. Be careful if you specify &amp;#39;labels&amp;#39; and &amp;#39;labelsouth&amp;#39;. Last parameter specified will be the one used.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;labeleast&amp;#39;        String.       &amp;#39;E&amp;#39;                   Label to indicate East.  Be careful if you specify &amp;#39;labels&amp;#39; and &amp;#39;labeleast&amp;#39; . Last parameter specified will be the one used.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;labelwest&amp;#39;        String.       &amp;#39;W&amp;#39;                   Label to indicate West.  Be careful if you specify &amp;#39;labels&amp;#39; and &amp;#39;labelwest&amp;#39; . Last parameter specified will be the one used.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;titlefontweight&amp;#39;  String.       &amp;#39;bold&amp;#39;                Title font weight. You can use &amp;#39;normal&amp;#39;,&amp;#39;bold&amp;#39;,&amp;#39;light&amp;#39;,&amp;#39;demi&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;legendvariable&amp;#39;   String.       &amp;#39;W_S&amp;#39;                 Variable abbreviation that appears inside the legend. You can use TeX sequences.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;anglenorth&amp;#39;       Numeric.       90                   Direction angle meaning North wind. Default is 90 for North (trigonometric reference). If you specify &amp;#39;north&amp;#39; angle, you need to specify &amp;#39;east&amp;#39; angle, so the script knows how angles are referenced.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;angleeast&amp;#39;        Numeric.       0                    Direction angle meaning East wind.  Default is  0 for East  (counterclockwise).        If you specify &amp;#39;east&amp;#39; angle, you need to specify &amp;#39;north&amp;#39; angle, so the script knows how angles are referenced.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;minradius&amp;#39;        Numeric        1/30                 Minimum radius of the wind rose, relative to the maximum frequency radius. An empty circle of this size appears if greater than 0.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;legendtype&amp;#39;       Numeric        2                    Legend type continuous = 1, separated boxes = 2&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% by Daniel Pereira - dpereira@s2msolutions.com&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% 2014/Jul/14 - First version&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Check funciton call&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;WindRose needs at least two inputs&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; mod(length(varargin),&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Inputs must be paired: WindRose(Speed,Direction,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PropertyName&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,PropertyValue,...)&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isnumeric(speed) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isnumeric(speed)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Speed and Direction must be numeric arrays.&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isequal(size(speed),size(direction))
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Speed and Direction must be the same size.&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Default parameters&lt;/span&gt;
    SCS              = get(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;screensize&amp;#39;&lt;/span&gt;);

    CeteredIn0       = true;
    ndirections      = &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;;
    FrequenciesRound = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    NFrequencies     = &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
    WindSpeedRound   = [];
    NSpeeds          = [];
    circlemax        = [];
    FreqLabelAngle   = [];
    TitleString      = {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Wind Rose&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#39;&lt;/span&gt;};
&lt;span style=&#34;color:#75715e&#34;&gt;%lablegend        = &amp;#39;Wind Speeds in m/s&amp;#39;;&lt;/span&gt;
lablegend        = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;flow angle in °&amp;#39;&lt;/span&gt;;
colorfun         = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;jet&amp;#39;&lt;/span&gt;;
height           = min(SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
width            = min(SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
figcolor         = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1,1,1]&amp;#39;&lt;/span&gt;;
TextColor        = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0,0,0]&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;% label.N          = &amp;#39;N&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;% label.S          = &amp;#39;S&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;% label.W          = &amp;#39;W&amp;#39;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;% label.E          = &amp;#39;E&amp;#39;;&lt;/span&gt;
label.N          = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;90°&amp;#39;&lt;/span&gt;;
label.S          = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;270°&amp;#39;&lt;/span&gt;;
label.W          = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;180°&amp;#39;&lt;/span&gt;;
label.E          = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0°&amp;#39;&lt;/span&gt;;
titlefontweight  = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bold&amp;#39;&lt;/span&gt;;
legendvariable   = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;W_S&amp;#39;&lt;/span&gt;;
RefN             = &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;;
RefE             = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
min_radius       = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;;
LegendType       = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;%% User-.specified parameters&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:numel(varargin)
&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; lower(varargin{i})
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;centeredin0&amp;#39;&lt;/span&gt;
    CeteredIn0       = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ndirections&amp;#39;&lt;/span&gt;
ndirections      = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;freqround&amp;#39;&lt;/span&gt;
FrequenciesRound = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nfreq&amp;#39;&lt;/span&gt;
NFrequencies     = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;speedround&amp;#39;&lt;/span&gt;
WindSpeedRound   = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nspeeds&amp;#39;&lt;/span&gt;
NSpeeds          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;freqlabelangle&amp;#39;&lt;/span&gt;
FreqLabelAngle   = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;titlestring&amp;#39;&lt;/span&gt;
TitleString      = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;lablegend&amp;#39;&lt;/span&gt;
lablegend        = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cmap&amp;#39;&lt;/span&gt;
colorfun         = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;height&amp;#39;&lt;/span&gt;
height           = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;width&amp;#39;&lt;/span&gt;
width            = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;figcolor&amp;#39;&lt;/span&gt;
figcolor         = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;textcolor&amp;#39;&lt;/span&gt;
TextColor        = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;min_radius&amp;#39;&lt;/span&gt;
min_radius       = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;maxfrequency&amp;#39;&lt;/span&gt;
circlemax = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;titlefontweight&amp;#39;&lt;/span&gt;
titlefontweight  = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;legendvariable&amp;#39;&lt;/span&gt;
legendvariable   = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;legendtype&amp;#39;&lt;/span&gt;
LegendType       = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;labelnorth&amp;#39;&lt;/span&gt;
label.N          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;labelsouth&amp;#39;&lt;/span&gt;
label.S          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;labeleast&amp;#39;&lt;/span&gt;
label.E          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;labelwest&amp;#39;&lt;/span&gt;
label.W          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;labels&amp;#39;&lt;/span&gt;
label.N          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
label.S          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}{&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};
label.E          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}{&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
label.W          = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}{&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;anglenorth&amp;#39;&lt;/span&gt;
k = any(arrayfun(@(x) strcmpi(x,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;angleeast&amp;#39;&lt;/span&gt;),varargin));
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;k
error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Reference angles need to be specified for AngleEAST and AngleNORTH directions&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;angleeast&amp;#39;&lt;/span&gt;
k = find(arrayfun(@(x) strcmpi(x,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;anglenorth&amp;#39;&lt;/span&gt;),varargin));
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isempty(k)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Reference angles need to be specified for AngleEAST and AngleNORTH directions&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    RefE         = varargin{i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
RefN         = varargin{k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(RefN&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;RefE)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The angles specified for north and east must differ in 90 degrees&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;otherwise&lt;/span&gt;
error([varargin{i} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is not a valid property for WindRose function.&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

speed            = reshape(speed,[],&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);                                    &lt;span style=&#34;color:#75715e&#34;&gt;% Convert wind speed into a column vector&lt;/span&gt;
direction        = reshape(direction,[],&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);                                &lt;span style=&#34;color:#75715e&#34;&gt;% Convert wind direction into a column vector&lt;/span&gt;
NumberElements   = numel(direction);                                       &lt;span style=&#34;color:#75715e&#34;&gt;% Coun the actual number of elements, to consider winds = 0 when calculating frequency.&lt;/span&gt;
dir              = mod((RefN&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;direction)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(RefN&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;RefE)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;);               &lt;span style=&#34;color:#75715e&#34;&gt;% Ensure that the direction is between 0 and 360?&lt;/span&gt;
speed            = speed(speed&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);                                         &lt;span style=&#34;color:#75715e&#34;&gt;% Only show winds higher than 0. 縒hy? See next comment.&lt;/span&gt;
dir              = dir(speed&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);                                           &lt;span style=&#34;color:#75715e&#34;&gt;% Wind = 0 does not have direction, so it cannot appear in a wind rose, but the number of appeareances must be considered.&lt;/span&gt;

figure_handle = figure(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,figcolor,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;units&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pixels&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;position&amp;#39;&lt;/span&gt;,[SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;width&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; SCS(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;height&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; width height],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;menubar&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;none&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;toolbar&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;none&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;%% Bin Directions&lt;/span&gt;
N     = linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;,ndirections&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);                                     &lt;span style=&#34;color:#75715e&#34;&gt;% Create ndirections direction intervals (ndirections+1 edges)&lt;/span&gt;
N     = N(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);                                                        &lt;span style=&#34;color:#75715e&#34;&gt;% N is the angles in which direction bins are centered. We do not want the 360 to appear, because 0 is already appearing.&lt;/span&gt;
n     = &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ndirections;                                                   &lt;span style=&#34;color:#75715e&#34;&gt;% Angle that should be put backward and forward to create the angular bin, 1st centered in 0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;CeteredIn0                                                             &lt;span style=&#34;color:#75715e&#34;&gt;% If user does not want the 1st bin to be centered in 0?&lt;/span&gt;
N = N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n;                                                               &lt;span style=&#34;color:#75715e&#34;&gt;% Bin goes from 0 to 2n (N to N+2n), instead of from -n to n (N-n to N+n), so Bin is not centered in 0 (N) angle, but in the n (N+n) angle&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Wind speeds/velocities&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isempty(WindSpeedRound)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isempty(NSpeeds); NSpeeds = &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;                                  &lt;span style=&#34;color:#75715e&#34;&gt;% Default value for NSpeeds if not user specified&lt;/span&gt;
    vmax      = ceil(max(speed)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WindSpeedRound)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;WindSpeedRound;            &lt;span style=&#34;color:#75715e&#34;&gt;% Max wind speed rounded to the nearest whole multiple of WindSpeedRound (Use round or ceil as desired)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vmax&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; vmax=WindSpeedRound; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;                      &lt;span style=&#34;color:#75715e&#34;&gt;% If max wind speed is 0, make max wind to be WindSpeedRound, so wind speed bins are correctly shown.&lt;/span&gt;
    vwinds    = linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,vmax,NSpeeds);                                  &lt;span style=&#34;color:#75715e&#34;&gt;% Wind speeds go from 0 to vmax, creating the desired number of wind speed intervals&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    figure2 = figure(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;visible&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;off&amp;#39;&lt;/span&gt;); plot(speed);                        &lt;span style=&#34;color:#75715e&#34;&gt;% Plot wind speed&lt;/span&gt;
    vwinds = get(gca,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ytick&amp;#39;&lt;/span&gt;); delete(figure2);                            &lt;span style=&#34;color:#75715e&#34;&gt;% Yaxis will automatically make divisions or us.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isempty(NSpeeds)
    vwinds = linspace(min(vwinds),max(vwinds),NSpeeds);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Histogram in each direction + Draw&lt;/span&gt;
    count     = PivotTableCount(N,n,vwinds,speed,dir,NumberElements);          &lt;span style=&#34;color:#75715e&#34;&gt;% For each direction and for each speed, value of the radius that the windorose must reach (Accumulated in speed).&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isempty(circlemax)
    circlemax = ceil(max(max(count))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;FrequenciesRound)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;FrequenciesRound;   &lt;span style=&#34;color:#75715e&#34;&gt;% Round highest frequency to closest whole multiple of theFrequenciesRound  (Use round or ceil as desired)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    min_radius = min_radius&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;circlemax;

    DrawPatches(N,n,vwinds,count,colorfun,figcolor,min_radius);&lt;span style=&#34;color:#75715e&#34;&gt;% Draw the windrose, knowing the angles, the range for each direction, the speed ranges, the count (frequency) values and the colormap used.&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Constant frequecy circles and x-y axes + Draw + Labels&lt;/span&gt;

    [x,y]     = cylinder(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;); x = x(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,:); y = y(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,:);                        &lt;span style=&#34;color:#75715e&#34;&gt;% Get x and y for a unit-radius circle&lt;/span&gt;
    circles   = linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,circlemax,NFrequencies&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); circles = circles(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;% Radii of the circles that must be drawn (frequencies). We do not want to spend time drawing radius=0.&lt;/span&gt;

    radius    = circles   &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; min_radius;
    radiusmax = circlemax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; min_radius;

    plot(x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;radius,y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;radius,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor);                           &lt;span style=&#34;color:#75715e&#34;&gt;% Draw circles&lt;/span&gt;
    plot(x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;radiusmax,y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;radiusmax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor);                       &lt;span style=&#34;color:#75715e&#34;&gt;% Redraw last circle&lt;/span&gt;

    axisangles = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;; axisangles = axisangles(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);                   &lt;span style=&#34;color:#75715e&#34;&gt;% Angles in which to draw the radial axis (trigonometric reference)&lt;/span&gt;
    R = [min_radius;radiusmax];
    plot(R&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cosd(axisangles),R&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sind(axisangles),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor);         &lt;span style=&#34;color:#75715e&#34;&gt;% Draw radial axis, in the specified angles&lt;/span&gt;

    FrequecyLabels(circles,radius,FreqLabelAngle,TextColor);                   &lt;span style=&#34;color:#75715e&#34;&gt;% Display frequency labels&lt;/span&gt;
    CardinalLabels(radiusmax,TextColor,label);                                 &lt;span style=&#34;color:#75715e&#34;&gt;% Display N, S, E, W&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Title and Legend&lt;/span&gt;
    title(TitleString,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fontweight&amp;#39;&lt;/span&gt;,titlefontweight);         &lt;span style=&#34;color:#75715e&#34;&gt;% Display a title&lt;/span&gt;
    set(gca,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;outerposition&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);                                        &lt;span style=&#34;color:#75715e&#34;&gt;% Check that the current axis fills the figure.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; LegendType&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    leyenda = CreateLegend(vwinds,lablegend,legendvariable);               &lt;span style=&#34;color:#75715e&#34;&gt;% Create a legend cell string&lt;/span&gt;
    l       = legend(leyenda,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;location&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;southwest&amp;#39;&lt;/span&gt;);                      &lt;span style=&#34;color:#75715e&#34;&gt;% Display the legend wherever (position is corrected)&lt;/span&gt;
    PrettyLegend(l,TextColor);                                   &lt;span style=&#34;color:#75715e&#34;&gt;% Display the legend in a good position&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; LegendType&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    disp(vwinds);
    caxis([vwinds(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) vwinds(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)]);
    colorbar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YTick&amp;#39;&lt;/span&gt;,vwinds);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% Outputs&lt;/span&gt;
    [count,speeds,directions,Table,colorSeq,barX,barY] = CreateOutputs(count,vwinds,N,n,RefN,RefE);

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; count = &lt;span style=&#34;color:#a6e22e&#34;&gt;PivotTableCount&lt;/span&gt;(N,n,vwinds,speed,dir,NumberElements)
    count  = zeros(length(N),length(vwinds));
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(N)
    d1 = mod(N(i)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;);                                              &lt;span style=&#34;color:#75715e&#34;&gt;% Direction 1 is N-n&lt;/span&gt;
    d2 = N(i)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n;                                                       &lt;span style=&#34;color:#75715e&#34;&gt;% Direction 2 is N+n&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; d1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;d2                                                           &lt;span style=&#34;color:#75715e&#34;&gt;% If direction 1 is greater than direction 2 of the bin (d1 = -5 = 355, d2 = 5)&lt;/span&gt;
    cond = or(dir&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;=d1,dir&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d2);                                     &lt;span style=&#34;color:#75715e&#34;&gt;% The condition is satisfied whenever d&amp;gt;=d1 or d&amp;lt;d2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                                               &lt;span style=&#34;color:#75715e&#34;&gt;% For the rest of the cases,&lt;/span&gt;
    cond = and(dir&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;=d1,dir&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;d2);                                    &lt;span style=&#34;color:#75715e&#34;&gt;% Both conditions must be met for the same bin&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    counter    = histc(speed(cond),vwinds);                            &lt;span style=&#34;color:#75715e&#34;&gt;% If vmax was for instance 25, counter will have counts for these intervals: [&amp;gt;=0 y &amp;lt;5] [&amp;gt;=5 y &amp;lt;10] [&amp;gt;=10 y &amp;lt;15] [&amp;gt;=15 y &amp;lt;20] [&amp;gt;=20 y &amp;lt;25] [&amp;gt;=25]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isempty(counter); counter = zeros(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,size(count,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;% If counter is empty for any reason, set the counts to 0.&lt;/span&gt;
    count(i,:) = cumsum(counter);                                      &lt;span style=&#34;color:#75715e&#34;&gt;% Computing cumsum will make count to have the counts for [&amp;lt;5] [&amp;lt;10] [&amp;lt;15] [&amp;lt;20] [&amp;lt;25] [&amp;gt;=25] (cumulative count, so we have the radius for each speed)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    count = count&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;NumberElements&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;                                      &lt;span style=&#34;color:#75715e&#34;&gt;% Frequency in percentage&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DrawPatches&lt;/span&gt;(N,n,vwinds,count,colorfun,figcolor,min_radius)
    inv = strcmp(colorfun(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;inv&amp;#39;&lt;/span&gt;);                                     &lt;span style=&#34;color:#75715e&#34;&gt;% INV = First three letters in cmap are inv&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; inv; colorfun = colorfun(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;% if INV, cmap is the rest, excluding inv&lt;/span&gt;
    color = feval(colorfun,&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;);                                           &lt;span style=&#34;color:#75715e&#34;&gt;% Create color map&lt;/span&gt;
    color = interp1(linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,length(vwinds),&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;),color,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(vwinds));&lt;span style=&#34;color:#75715e&#34;&gt;% Get the needed values.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; inv; color = flipud(color); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;                                    &lt;span style=&#34;color:#75715e&#34;&gt;% if INV, flip upside down the colormap&lt;/span&gt;
    plot(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,figcolor,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;markeredgecolor&amp;#39;&lt;/span&gt;,figcolor,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;markerfacecolor&amp;#39;&lt;/span&gt;,figcolor); &lt;span style=&#34;color:#75715e&#34;&gt;% This will create an empty legend entry.&lt;/span&gt;
    hold on; axis square; axis off;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(N)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j=length(vwinds)👎&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                          r(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) = count(i,j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                          r(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;                                                  &lt;span style=&#34;color:#75715e&#34;&gt;% For the first case, radius is 0&lt;/span&gt;
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
                          r(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  = count(i,j);
                          r     = r&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;min_radius;

                          alpha = linspace(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n,n,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;N(i);
                          x1    = r(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sind(fliplr(alpha));
                          y1    = r(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cosd(fliplr(alpha));
                          x     = [x1 r(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sind(alpha)];                           &lt;span style=&#34;color:#75715e&#34;&gt;% Create circular sectors&lt;/span&gt;
                          y     = [y1 r(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cosd(alpha)];
                          fill(x,y,color(j,:),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;edgecolor&amp;#39;&lt;/span&gt;,hsv2rgb(rgb2hsv(color(j,:))&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;])); &lt;span style=&#34;color:#75715e&#34;&gt;% Draw them in the specified coloe. Edge is slightly darker.&lt;/span&gt;
                          &lt;span style=&#34;color:#75715e&#34;&gt;%text(x(1),y(1),num2str(count(i,j)));  %% add label&lt;/span&gt;
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FrequecyLabels&lt;/span&gt;(circles,radius,angulo,TextColor)
    s = sind(angulo); c = cosd(angulo);                                      &lt;span style=&#34;color:#75715e&#34;&gt;% Get the positions in which labels must be placed&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ha = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;;   &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ha = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;right&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ha = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;center&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;% Depending on the sign of the cosine, horizontal alignment should be one or another&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; va = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bottom&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; va = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;top&amp;#39;&lt;/span&gt;;   &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; va = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;% Depending on the sign of the sine  , vertical   alignment should be one or another&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(circles)
    text(radius(i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c,radius(i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s,[num2str(circles(i)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,ha,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,va,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% display the labels for each circle&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    rmin = radius(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;abs(diff(radius(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rmin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ha = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;right&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ha = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;;   &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ha = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;center&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;% Depending on the sign of the cosine, horizontal alignment should be one or another&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; va = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;top&amp;#39;&lt;/span&gt;;   &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; va = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bottom&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; va = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;% Depending on the sign of the sine  , vertical   alignment should be one or another&lt;/span&gt;
    text(rmin&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c,rmin&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0%&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,ha,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,va,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% display the labels for each circle&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CardinalLabels&lt;/span&gt;(circlemax,TextColor,labels)
    text( circlemax,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#39;&lt;/span&gt; labels.E],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% East  label&lt;/span&gt;
    text( circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 30°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% East  label&lt;/span&gt;
    text( circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 60°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); 
    text( (circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),(circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;120°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); 
    text( (circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),(circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;150°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); 
    text( (circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),(circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;210°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); 
    text( (circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),(circlemax&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;240°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor);     
    text( circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 300°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); 
    text( circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;330&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),circlemax&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;330&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;),[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 330°&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left&amp;#39;&lt;/span&gt;  ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); 
    text(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;circlemax,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,[labels.W &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;right&amp;#39;&lt;/span&gt; ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% West  label&lt;/span&gt;
    text(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, circlemax,labels.N      ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;center&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bottom&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% North label&lt;/span&gt;
    text(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;circlemax,labels.S      ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HorizontalAlignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;center&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;verticalalignment&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;top&amp;#39;&lt;/span&gt;   ,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,TextColor); &lt;span style=&#34;color:#75715e&#34;&gt;% South label&lt;/span&gt;
    xlim([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;circlemax circlemax]);
    ylim([&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;circlemax circlemax]);

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; leyenda = &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateLegend&lt;/span&gt;(vwinds,lablegend,legendvariable)
    leyenda = cell(length(vwinds),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);                                      &lt;span style=&#34;color:#75715e&#34;&gt;% Initialize legend cell array&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(vwinds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;length(vwinds)                                               &lt;span style=&#34;color:#75715e&#34;&gt;% When last index is reached&lt;/span&gt;
    string = sprintf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s %s %g&amp;#39;&lt;/span&gt;,legendvariable,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\geq&amp;#39;&lt;/span&gt;,vwinds(j));  &lt;span style=&#34;color:#75715e&#34;&gt;% Display wind &amp;lt;= max wind&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                                               &lt;span style=&#34;color:#75715e&#34;&gt;% For the rest of the indices&lt;/span&gt;
    string = sprintf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%g %s %s &amp;lt; %g&amp;#39;&lt;/span&gt;,vwinds(j),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\leq&amp;#39;&lt;/span&gt;,legendvariable,vwinds(j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;% Set v1 &amp;lt;= v2 &amp;lt; v1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    string = regexprep(string,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0 \leq&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0 &amp;lt;&amp;#39;&lt;/span&gt;);                         &lt;span style=&#34;color:#75715e&#34;&gt;% Replace &amp;#34;0 &amp;lt;=&amp;#34; by &amp;#34;0 &amp;lt;&amp;#34;, because wind speed = 0 is not displayed in the graph.&lt;/span&gt;
    leyenda{length(vwinds)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;} = string;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    leyenda = [lablegend; leyenda];                                        &lt;span style=&#34;color:#75715e&#34;&gt;% Add the title for the legend&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrettyLegend&lt;/span&gt;(l,TextColor)
    set(l,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;units&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;normalized&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;box&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;off&amp;#39;&lt;/span&gt;);                               &lt;span style=&#34;color:#75715e&#34;&gt;% Do not display the box&lt;/span&gt;
    POS = get(l,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;position&amp;#39;&lt;/span&gt;);                                               &lt;span style=&#34;color:#75715e&#34;&gt;% get legend position (width and height)&lt;/span&gt;
    set(l,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;position&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;POS(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) POS(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) POS(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;textcolor&amp;#39;&lt;/span&gt;,TextColor);    &lt;span style=&#34;color:#75715e&#34;&gt;% Put the legend in the upper left corner&lt;/span&gt;
    uistack(l,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bottom&amp;#39;&lt;/span&gt;);                                                   &lt;span style=&#34;color:#75715e&#34;&gt;% Put the legend below the axis&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [count,speeds,directions,Table,colorSeq,barX,barY] = &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateOutputs&lt;/span&gt;(count,vwinds,N,n,RefN,RefE)
    count          = [count(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) diff(count,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)];                         &lt;span style=&#34;color:#75715e&#34;&gt;% Count had the accumulated frequencies. With this line, we get the frequency for each single direction and each single speed with no accumulation.&lt;/span&gt;
    speeds         = vwinds;                                               &lt;span style=&#34;color:#75715e&#34;&gt;% Speeds are the same as the ones used in the Wind Rose Graph&lt;/span&gt;
    directions     = mod(RefN &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(RefN&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;RefE),&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;);                    &lt;span style=&#34;color:#75715e&#34;&gt;% Directions are the directions in which the sector is centered. Convert function reference to user reference&lt;/span&gt;
    vwinds(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  = inf;                                                  &lt;span style=&#34;color:#75715e&#34;&gt;% Last wind direction is inf (for creating intervals)&lt;/span&gt;

    [directions,i] = sort(directions);                                     &lt;span style=&#34;color:#75715e&#34;&gt;% Sort directions in ascending order&lt;/span&gt;
    count          = count(i,:);                                           &lt;span style=&#34;color:#75715e&#34;&gt;% Sort count in the same way.&lt;/span&gt;

    wspeeds        = cell(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,length(vwinds)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:(length(vwinds)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vwinds(i) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; s1 = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; s1 = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;% If vwinds(i) =0 interval is open, because count didn&amp;#39;t compute windspeed = 0.&lt;/span&gt;
    wspeeds{i} = [s1 num2str(vwinds(i)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; , &amp;#39;&lt;/span&gt; num2str(vwinds(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;];&lt;span style=&#34;color:#75715e&#34;&gt;% Create wind speed intervals&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    wdirs = cell(length(directions),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(directions)
    wdirs{i} = sprintf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[%g , %g)&amp;#39;&lt;/span&gt;,mod(directions(i)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;),directions(i)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n); &lt;span style=&#34;color:#75715e&#34;&gt;% Create widn direction intervals&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%     countMark         = find(count == max(max(count)));&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     countColumnLength = length(directions);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     foundIndex        = countMark -countColumnLength * floor(countMark/countColumnLength);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     colorSeq          = [mod(directions(foundIndex)-n,360),directions(foundIndex)+n];&lt;/span&gt;
    WindZeroFreqency = &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sum(sum(count));                                &lt;span style=&#34;color:#75715e&#34;&gt;% Wind speed = 0 appears 100-sum(total) % of the time. It does not have direction.&lt;/span&gt;
    WindZeroFreqency = WindZeroFreqency&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(WindZeroFreqency&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;eps);        &lt;span style=&#34;color:#75715e&#34;&gt;% If frequency/100% is lower than eps, do not show that value.&lt;/span&gt;

    Table            = [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Frequencies (%)&amp;#39;&lt;/span&gt;},{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;},{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Wind Speed Interval&amp;#39;&lt;/span&gt;},repmat({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;},&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,numel(wspeeds));&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Direction Interval (?&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Direction ~&amp;#39;&lt;/span&gt;,wspeeds,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TOTAL&amp;#39;&lt;/span&gt;;[wdirs num2cell(directions) num2cell(count) num2cell(sum(count,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))]]; &lt;span style=&#34;color:#75715e&#34;&gt;% Create table cell. Ready to xlswrite.&lt;/span&gt;
            Table(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,:)   = [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0 , 360)&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TOTAL&amp;#39;&lt;/span&gt;},num2cell(sum(count,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)),{sum(sum(count))}];
    Table(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) = {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;No Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Wind Speed = 0&amp;#39;&lt;/span&gt;};  &lt;span style=&#34;color:#75715e&#34;&gt;% Show Wind Speed = 0 on table.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%% find max count&lt;/span&gt;
    colorBar1 = sum(count,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    foundIndex       = find(colorBar1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; max(colorBar1));
    colorSeq         = [mod(directions(foundIndex)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;360&lt;/span&gt;),directions(foundIndex)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n];
    barIndex =  find(colorBar1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    barX = [];
    barY = [];
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(barIndex)
    barX(i) = directions(i);
    barY(i) = colorBar1(i);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%bp = bar(barX,barY);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%bp(1).LineWidth = 3;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%bp(foundIndex).EdgeColor = &amp;#39;red&amp;#39;;&lt;/span&gt;

    Table{&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;}   = WindZeroFreqency;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;可以自己更改n为不同的多项式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [t,y1,a]=&lt;span style=&#34;color:#a6e22e&#34;&gt;getfitLine&lt;/span&gt;(x,y,TapeLine)
    n=&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;

    p = polyfit(x,y,n); 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    a(i)= p(i); 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    t = linspace(x(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),x(length(x)),TapeLine);  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    y1=a(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    y1=a(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    y1 = a(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;); 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    y1 = a(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    y1= a(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;    function&lt;/span&gt; hn=&lt;span style=&#34;color:#a6e22e&#34;&gt;arrow3&lt;/span&gt;(p1,p2,s,w,h,ip,alpha,beta)
&lt;span style=&#34;color:#75715e&#34;&gt;% ARROW3 (R13)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3(P1,P2) draws lines from P1 to P2 with directional arrowheads.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   P1 and P2 are either nx2 or nx3 matrices.  Each row of P1 is an&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   initial point, and each row of P2 is a terminal point.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3(P1,P2,S,W,H,IP,ALPHA,BETA) can be used to specify properties&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   of the line, initial point marker, and arrowhead.  S is a character&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   string made with one element from any or all of the following 3&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   columns:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color Switches      LineStyle            LineWidth&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     ------------------  -------------------  --------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     k  blacK (default)  -  solid (default)   0.5 points (default)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     y  Yellow           :  dotted            0   no lines&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     m  Magenta          -. dashdot           /   LineWidthOrder&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     c  Cyan             -- dashed&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     r  Red              *  LineStyleOrder            _______ __  &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     g  Green                                       ^        |    &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     b  Blue                                       / \       |    &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     w  White                        Arrowhead    /   \   Height  &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     a  Asparagus                                /     \     |    &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     d  Dark gray                               /       \    |    &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     e  Evergreen                              /___   ___\ __|__  &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     f  Firebrick                             |    | |    |       &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     h  Hot pink                              |-- Width --|       &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     i  Indigo                                |    | |    |       &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     j  Jade                                       | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     l  Light gray                                 | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     n  Nutbrown                                   | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     p  Pear                                       | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q  kumQuat                      Line       --&amp;gt;| |&amp;lt;--LineWidth&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     s  Sky blue                                   | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     t  Tawny                                      | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     u  bUrgundy                                   | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     v  Violet                                     | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     z  aZure                                      | |            &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     x  random                       Initial      /   \           &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     o  colorOrder                   Point    --&amp;gt;(     )&amp;lt;--IP     &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     |  magnitude                    Marker       \_ _/           &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     -------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                          Color Equivalencies&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     -------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     ColorOrder     Arrow3         |     Simulink       Arrow3&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     ----------     ----------     |     ----------     ----------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color1         Blue           |     LightBlue      aZure&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color2         Evergreen      |     DarkGreen      Asparagus&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color3         Red            |     Orange         kumQuat&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color4         Sky blue       |     Gray           Light gray&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color5         Violet         |&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color6         Pear           |&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Color7         Dark gray      |&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     -------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   The components of S may be specified in any order.  Invalid&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   characters in S will be ignored and replaced by default settings.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   Prefixing the color code with &amp;#39;_&amp;#39; produces a darker shade, e.g.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   &amp;#39;_t&amp;#39; is dark tawny; prefixing the color code with &amp;#39;^&amp;#39; produces a&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   lighter shade, e.g. &amp;#39;^q&amp;#39; is light kumquat.  The relative brightness&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   of light and dark color shades is controlled by the scalar parameter&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   BETA.  Color code prefixes do not affect black (k), white (w), or&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   the special color switches (xo|).&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ColorOrder may be achieved in two fashions:  The user may either&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   set the ColorOrder property (using RGB triples) or define the&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   global variable ColorOrder (using a string of valid color codes).&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   If the color switch is specified with &amp;#39;o&amp;#39;, and the global variable&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ColorOrder is a string of color codes (color switches less &amp;#39;xo|&amp;#39;,&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;%   optionally prefixed with &amp;#39;_&amp;#39; or &amp;#39;^&amp;#39;), then the ColorOrder property&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   will be set to the sequence of colors indicated by the ColorOrder&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   variable.  The color sequence &amp;#39;bersvpd&amp;#39; matches the default&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ColorOrder property.  If the color switch is specified with &amp;#39;o&amp;#39;, and&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   the global variable ColorOrder is empty or invalid, then the current&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ColorOrder property will be used.  Note that the ColorOrder variable&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   takes precedence over the ColorOrder property.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   The magnitude color switch is used to visualize vector magnitudes&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   in conjunction with a colorbar.  If the color switch is specified&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   with &amp;#39;|&amp;#39;, colors are linearly interpolated from the current ColorMap&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   according to the length of the associated line.  This option sets&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   CLim to [MinM,MaxM], where MinM and MaxM are the minimum and maximum&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   magnitudes, respectively.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   The current LineStyleOrder property will be used if LineStyle is&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   specified with &amp;#39;*&amp;#39;.  MATLAB cycles through the line styles defined&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   by the LineStyleOrder property only after using all colors defined&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   by the ColorOrder property.  If however, the global variable&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   LineWidthOrder is defined, and LineWidth is specified with &amp;#39;/&amp;#39;,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   then each line will be drawn with sequential color, linestyle, and&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   linewidth.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   W (default = 1) is a vector of arrowhead widths; use W = 0 for no&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   arrowheads.  H (default = 3W) is a vector of arrowhead heights.  If&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   vector IP is neither empty nor negative, initial point markers will&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   be plotted with diameter IP; for default diameter W, use IP = 0.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   The units of W, H and IP are 1/72 of the PlotBox diagonal.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ALPHA (default = 1) is a vector of FaceAlpha values ranging between&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   0 (clear) and 1 (opaque).  FaceAlpha is a surface (arrowhead and&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;%   initial point marker) property and does not affect lines.  FaceAlpha&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   is not supported for 2D rendering.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   BETA (default = 0.4) is a scalar that controls the relative&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   brightness of light and dark color shades, ranging between 0 (no&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;%   contrast) and 1 (maximum contrast).&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   Plotting lines with a single color, linestyle, and linewidth is&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   faster than plotting lines with multiple colors and/or linestyles.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   Plotting lines with multiple linewidths is slower still.  ARROW3&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   chooses renderers that produce the best screen images; exported&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   or printed plots may benefit from different choices.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3(P1,P2,S,W,H,&amp;#39;cone&amp;#39;,...) will plot cones with bases centered&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   on P1 in the direction given by P2.  In this instance, P2 is&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   interpreted as a direction vector instead of a terminal point.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   Neither initial point markers nor lines are plotted with the &amp;#39;cone&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   option.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   HN = ARROW3(P1,P2,...) returns a vector of handles to line and&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   surface objects created by ARROW3.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3 COLORS will plot a table of named colors with default&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   brightness.  ARROW3(&amp;#39;colors&amp;#39;,BETA) will plot a table of named&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   colors with brightness BETA.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3 attempts to preserve the appearance of existing axes.  In&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   particular, ARROW3 will not change XYZLim, View, or CameraViewAngle.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3 does not, however, support stretch-to-fill scaling.  AXIS&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   NORMAL will restore the current axis box to full size and remove any&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   restrictions on the scaling of units, but will likely result in&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   distorted arrowheads and initial point markers.  See&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   (arrow3_messes_up_my_plots.html).&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   If a particular aspect ratio or variable limit is required, use&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   DASPECT, PBASPECT, AXIS, or XYZLIM commands before calling ARROW3.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   Changing limits or aspect ratios after calling ARROW3 may alter the&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   appearance of arrowheads and initial point markers.  ARROW3 sets&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   XYZCLimMode to manual for all plots, sets DataAspectRatioMode to&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   manual for linear plots, and sets PlotBoxAspectRatioMode to manual&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   for log plots and 3D plots.  CameraViewAngleMode is also set to&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   manual for 3D plots.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3 UPDATE will restore the appearance of arrowheads and&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   initial point markers that have become corrupted by changes to&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   limits or aspect ratios.  ARROW3(&amp;#39;update&amp;#39;,SF) will redraw initial&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   point markers and arrowheads with scale factor SF.  If SF has one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%   element, SF scales W, H and IP.  If SF has two elements, SF(1)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   scales W and IP, and SF(2) scales H.  If SF has three elements,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   SF(1) scales W, SF(2) scales H, and SF(3) scales IP.  All sizes are&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   relative to the current PlotBox diagonal.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   ARROW3 UPDATE COLORS will update the magnitude coloring of&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   arrowheads, initial point markers, and lines to conform to the&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   current ColorMap.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   HN = ARROW3(&amp;#39;update&amp;#39;,...) returns a vector of handles to updated&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   objects.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   EXAMPLES:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % 2D vectors&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3([0 0],[1 3])&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3([0 0],[1 2],&amp;#39;-.e&amp;#39;)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3([0 0],[10 10],&amp;#39;--x2&amp;#39;,1)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(10,2),50*rand(10,2),&amp;#39;x&amp;#39;,1,3)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(10,2),[10*rand(10,1),500*rand(10,1)],&amp;#39;u&amp;#39;)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(10*rand(10,2),50*rand(10,2),&amp;#39;x&amp;#39;,1,[],1)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % 3D vectors&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3([0 0 0],[1 1 1])&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(20,3),50*rand(20,3),&amp;#39;--x1.5&amp;#39;,2)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(100,3),50*rand(100,3),&amp;#39;x&amp;#39;,1,3)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(10,3),[10*rand(10,1),500*rand(10,1),50*rand(10,1)],&amp;#39;a&amp;#39;)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(10*rand(10,3),50*rand(10,3),&amp;#39;x&amp;#39;,[],[],0)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % 3D animation&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     t=(0:pi/40:8*pi)&amp;#39;; u=cos(t); v=sin(t);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     plot3(20*t,u,v)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     axis([0,600,-1.5,1.5,-1.5,1.5])&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     grid on, view(35,25)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     hold on&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     pbaspect([1.8,1.4,1])&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(3),diag([500,1.5,1.5]),&amp;#39;l&amp;#39;,0.7,[],0)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     p=[20*t,u,v]; inc=4:1:length(t);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     p2=p(inc,:); p1=p(inc-1,:);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     hn=arrow3(p1(1,:),p2(1,:),&amp;#39;0_b&amp;#39;,0.7);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     for i=2:1:length(p1)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%       delete(hn)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%       hn=arrow3(p1(i,:),p2(i,:),&amp;#39;0_b&amp;#39;,0.7);&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%       pause(0.01)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     hold off&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % Cone plot&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     t=(pi/8:pi/8:2*pi)&amp;#39;; p1=[cos(t) sin(t) t]; p2=repmat([0 0 1],16,1);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(p1,p2,&amp;#39;x&amp;#39;,2,4,&amp;#39;cone&amp;#39;), hold on&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     plot3(p1(:,1),p1(:,2),p1(:,3)), hold off&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     pause % change cone size&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;update&amp;#39;,[1,2])&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % Just for fun&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(100,3),50*rand(100,3),&amp;#39;x&amp;#39;,8,4,[],0.95)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     light(&amp;#39;position&amp;#39;,[-10 -10 -10],&amp;#39;style&amp;#39;,&amp;#39;local&amp;#39;)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     light(&amp;#39;position&amp;#39;,[60,60,60]), lighting gouraud&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % ColorOrder variable, color code prefixes, and Beta&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     global ColorOrder, ColorOrder=&amp;#39;^ui^e_hq^v&amp;#39;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     theta=[0:pi/22:pi/2]&amp;#39;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(12,2),[cos(theta),sin(theta)],&amp;#39;1.5o&amp;#39;,1.5,[],[],[],0.5)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % ColorOrder property, LineStyleOrder, and LineWidthOrder&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     global ColorOrder, ColorOrder=[];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;ColorOrder&amp;#39;,[1,0,0;0,0,1;0.25,0.75,0.25;0,0,0])&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;LineStyleOrder&amp;#39;,{&amp;#39;-&amp;#39;,&amp;#39;--&amp;#39;,&amp;#39;-.&amp;#39;,&amp;#39;:&amp;#39;})&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     global LineWidthOrder, LineWidthOrder=[1,2,4,8];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     w=[1,2,3,4]; h=[4,6,4,2];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(zeros(4,2),[10*rand(4,1),500*rand(4,1)],&amp;#39;o*/&amp;#39;,w,h,0)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % Magnitude coloring&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     colormap spring&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(20*randn(20,3),50*randn(20,3),&amp;#39;|&amp;#39;,[],[],0)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;color&amp;#39;,0.7*[1,1,1])&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gcf,&amp;#39;color&amp;#39;,0.5*[1,1,1]), grid on, colorbar&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     pause % change the ColorMap and update colors&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     colormap hot&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;update&amp;#39;,&amp;#39;colors&amp;#39;)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % LogLog plot&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;xscale&amp;#39;,&amp;#39;log&amp;#39;,&amp;#39;yscale&amp;#39;,&amp;#39;log&amp;#39;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     axis([1e2,1e8,1e-2,1e-1]); hold on&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     p1=repmat([1e3,2e-2],15,1);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q1=[1e7,1e6,1e5,1e4,1e3,1e7,1e7,1e7,1e7,1e7,1e7,1e6,1e5,1e4,1e3];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q2=1e-2*[9,9,9,9,9,7,5,4,3,2,1,1,1,1,1]; p2=[q1&amp;#39;,q2&amp;#39;];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     global ColorOrder, ColorOrder=[];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;ColorOrder&amp;#39;,rand(15,3))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(p1,p2,&amp;#39;o&amp;#39;), grid on, hold off&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % SemiLogX plot&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;xscale&amp;#39;,&amp;#39;log&amp;#39;,&amp;#39;yscale&amp;#39;,&amp;#39;linear&amp;#39;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     axis([1e2,1e8,1e-2,1e-1]); hold on&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     p1=repmat([1e3,0.05],15,1);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q1=[1e7,1e6,1e5,1e4,1e3,1e7,1e7,1e7,1e7,1e7,1e7,1e6,1e5,1e4,1e3];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q2=1e-2*[9,9,9,9,9,7,5,4,3,2,1,1,1,1,1]; p2=[q1&amp;#39;,q2&amp;#39;];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(p1,p2,&amp;#39;x&amp;#39;), grid on, hold off&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % SemiLogY plot&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;xscale&amp;#39;,&amp;#39;linear&amp;#39;,&amp;#39;yscale&amp;#39;,&amp;#39;log&amp;#39;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     axis([2,8,1e-2,1e-1]); hold on&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     p1=repmat([3,2e-2],17,1);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q1=[7,6,5,4,3,7,7,7,7,7,7,7,7,6,5,4,3];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     q2=1e-2*[9,9,9,9,9,8,7,6,5,4,3,2,1,1,1,1,1]; p2=[q1&amp;#39;,q2&amp;#39;];&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     set(gca,&amp;#39;LineStyleOrder&amp;#39;,{&amp;#39;-&amp;#39;,&amp;#39;--&amp;#39;,&amp;#39;-.&amp;#39;,&amp;#39;:&amp;#39;})&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(p1,p2,&amp;#39;*&amp;#39;,1,[],0), grid on, hold off&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % Color tables&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;colors&amp;#39;)           % default color table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;colors&amp;#39;,0.3)       % low contrast color table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;colors&amp;#39;,0.5)       % high contrast color table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % Update initial point markers and arrowheads&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     % relative to the current PlotBox diagonal&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;update&amp;#39;)           % redraw same size&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;update&amp;#39;,2)         % redraw double size&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;update&amp;#39;,0.5)       % redraw half size&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     arrow3(&amp;#39;update&amp;#39;,[0.5,2,1]) % redraw W half size,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                                %        H double size, and&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                                %        IP same size&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     See also (arrow3_examples.html), (arrow3_messes_up_my_plots.html).&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%   Copyright(c)2002-2011 Version 5.14&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     Tom Davis (tdavis@metzgerwillard.com)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     Jeff Chang&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%   Revision History:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     07/27/11 - Added animation example. (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     05/13/09 - Corrected spelling errors (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     03/16/08 - Updated contact information (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     10/23/07 - Corrected zero magnitude exclusion (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     09/08/07 - Added cone plot option; removed adaptive grid&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                spacing; corrected scale factor; removed &amp;#34;nearly&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                tight limits (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     07/24/07 - Ignore zero-magnitude input (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     07/08/07 - Modified named colors to match named Simulink&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                colors; added light and dark shades for basic&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%                colors (ymcrgb) (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     07/01/07 - Modified named colors to match default ColorOrder&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                colors (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     06/24/07 - Error checking for empty P1, P2 (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     06/17/07 - Trim colors,W,H,IP,ALPHA to LENGTH(P1) (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     05/27/07 - Magnitude coloring and documentation revision (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     03/10/07 - Improved code metrics (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/21/07 - Preserve existing axis appearance;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                use relative sizes for W, H, and IP;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                removed version checking; minor bug fixes (TD) &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     01/09/04 - Replaced calls to LINSPACE, INTERP1, and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%                COLORMAP (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     12/17/03 - Semilog examples, CAXIS support, magnitude&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                coloring, and color updating; use CData instead&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                of FaceColor; minor bug fixes (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     07/17/03 - Changed 2D rendering from OpenGL to ZBuffer;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%                defined HN for COLORS and UPDATE options (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/27/03 - Replaced calls to RANDPERM, VIEW, REPMAT, SPHERE,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                and CYLINDER; added ZBuffer for log plots, RESET&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%                for CLA and CLF, and ABS for W and H (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/01/03 - Added UPDATE scale factor and MATLAB version&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                checking, replaced call to CROSS (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     12/26/02 - Added UserData and UPDATE option (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     11/16/02 - Added more named colors, color code prefix,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                global ColorOrder, ALPHA , and BETA (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     10/12/02 - Added global LineWidthOrder,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                vectorized W, H and IP (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     10/05/02 - Changed CLF to CLA for subplot support,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                added ColorOrder and LineStyleOrder support (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     04/27/02 - Minor log plot revisions (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     03/26/02 - Added log plot support (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     03/24/02 - Adaptive grid spacing control to trade off&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%                appearance vs. speed based on size of matrix (JC)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     03/16/02 - Added &amp;#34;axis tight&amp;#34; for improved appearance (JC)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     03/12/02 - Added initial point marker (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     03/03/02 - Added aspect ratio support (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     03/02/02 - Enhanced program&amp;#39;s user friendliness (JC)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                (lump Color, LineStyle, and LineWidth together)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     03/01/02 - Replaced call to ROTATE (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/28/02 - Modified line plotting,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                added linewidth and linestyle (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/27/02 - Minor enhancements on 3D appearance (JC)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/26/02 - Minor enhancements for speed (TD&amp;amp;JC)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     02/26/02 - Optimize PLOT3 and SURF for speed (TD)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/25/02 - Return handler, error handling, color effect,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                generalize for 2D/3D vectors (JC)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%     02/24/02 - Optimize PLOT3 and SURF for speed (TD)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%     02/23/02 - First release (JC&amp;amp;TD)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Error Checking&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; LineWidthOrder ColorOrder
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; isempty(beta), beta=&lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    beta=abs(beta(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)); &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargout, hn=[]; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmpi(p1,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;colors&amp;#39;&lt;/span&gt;)                            &lt;span style=&#34;color:#75715e&#34;&gt;% plot color table&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, beta=abs(p2(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    LocalColorTable(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,beta); &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    fig=gcf; ax=gca;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmpi(p1,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;update&amp;#39;&lt;/span&gt;), ud=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UserData&amp;#39;&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;% update&lt;/span&gt;
    LocalLogCheck(ax);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; size(ud,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid UserData&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UserData&amp;#39;&lt;/span&gt;,[]); sf=[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; flag=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmpi(p2,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;colors&amp;#39;&lt;/span&gt;), flag=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;               &lt;span style=&#34;color:#75715e&#34;&gt;% update colors&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isempty(p2)                            &lt;span style=&#34;color:#75715e&#34;&gt;% update surfaces&lt;/span&gt;
    sf=p2(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sf; n=length(p2(:));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sf(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)=p2(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, sf(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)=p2(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    H=LocalUpdate(fig,ax,ud,sf,flag); &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargout, hn=H; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    InputError=[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid input, type HELP &amp;#39;&lt;/span&gt;,upper(mfilename),&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; for usage examples&amp;#39;&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, error(InputError), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    [r1,c1]=size(p1); [r2,c2]=size(p2);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; r1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r2&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, error(InputError), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r1&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;r2, error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;P1 and P2 must have same number of rows&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;c2, error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;P1 and P2 must have same number of columns&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    p=sum(abs(p2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p1),&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; cone=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isempty(ip) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; strcmpi(ip,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cone&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;% cone plot&lt;/span&gt;
    cone=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; p=sum(p2,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;any(p), error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;P2 cannot equal 0&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tag&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3ConePlot&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;any(p), error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;P1 cannot equal P2&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;all(p)
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:ZeroMagnitude&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Zero magnitude ignored&amp;#39;&lt;/span&gt;)
    p1=p1(p,:); p2=p2(p,:); [r1,c1]=size(p1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    n=r1; Zeros=zeros(n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, p1=[p1,Zeros]; p2=[p2,Zeros];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;any([p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]), c1=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    L=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LineStyleOrder&amp;#39;&lt;/span&gt;); C=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ColorOrder&amp;#39;&lt;/span&gt;);
    ST=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultSurfaceTag&amp;#39;&lt;/span&gt;); LT=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultLineTag&amp;#39;&lt;/span&gt;);
    EC=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultSurfaceEdgeColor&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; strcmp(get(fig,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add&amp;#39;&lt;/span&gt;)
    Xr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xlim&amp;#39;&lt;/span&gt;); Yr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ylim&amp;#39;&lt;/span&gt;); Zr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zlim&amp;#39;&lt;/span&gt;);
    [xs,ys,xys]=LocalLogCheck(ax); restore=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys, mode=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;auto&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any([p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]), error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3D log plot not supported&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (xs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;all([p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    (ys &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;all([p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Nonpositive log data not supported&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; mode=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;manual&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;WarpToFill&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;on&amp;#39;&lt;/span&gt;)
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:WarpToFill&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Stretch-to-fill scaling not &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;supported;\nuse DASPECT or PBASPECT before calling ARROW3.&amp;#39;&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;XLimMode&amp;#39;&lt;/span&gt;,mode,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YLimMode&amp;#39;&lt;/span&gt;,mode,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ZLimMode&amp;#39;&lt;/span&gt;,mode,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CLimMode&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;manual&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; restore=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; cla reset; xys=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; set(fig,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, azel=[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;]; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; azel=[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37.5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;]; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UserData&amp;#39;&lt;/span&gt;,[],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;View&amp;#39;&lt;/span&gt;,azel);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Style Control&lt;/span&gt;
    [vc,cn]=LocalColorTable(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); prefix=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;; OneColor=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, [c,ls,lw]=LocalValidateCLSW;&lt;span style=&#34;color:#75715e&#34;&gt;% default color, linestyle/width&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
    [c,ls,lw]=LocalValidateCLSW(s);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(c)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_^&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)), prefix=c(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, c=c(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x&amp;#39;&lt;/span&gt;                              &lt;span style=&#34;color:#75715e&#34;&gt;% random named color (less white)&lt;/span&gt;
    [ignore,i]=sort(rand(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)); c=cn(i,:);        &lt;span style=&#34;color:#75715e&#34;&gt;%#ok&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o&amp;#39;&lt;/span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;% ColorOrder&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(ColorOrder)
    [c,failed]=LocalColorMap(lower(ColorOrder),vc,cn,beta);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; failed, ColorOrderWarning=[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid ColorOrder &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;variable, current ColorOrder property will be used&amp;#39;&lt;/span&gt;];
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:ColorOrder&amp;#39;&lt;/span&gt;,ColorOrderWarning)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; C=c;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, c=C;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&amp;#39;&lt;/span&gt;, map=get(fig,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;colormap&amp;#39;&lt;/span&gt;);          &lt;span style=&#34;color:#75715e&#34;&gt;% magnitude coloring&lt;/span&gt;
    M=(p1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p2); M=sqrt(sum(M&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;M,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)); minM=min(M); maxM=max(M);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; maxM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;minM&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, minM=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;clim&amp;#39;&lt;/span&gt;,[minM,maxM]); c=LocalInterp(minM,maxM,map,M);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sum(vc&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c), c=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;k&amp;#39;&lt;/span&gt;; ColorWarning=[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid color switch, &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;default color (black) will be used&amp;#39;&lt;/span&gt;];
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:Color&amp;#39;&lt;/span&gt;,ColorWarning)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(c)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;% single color&lt;/span&gt;
    c=LocalColorMap([prefix,c],vc,cn,beta); OneColor=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ColorOrder&amp;#39;&lt;/span&gt;,c); c=LocalRepmat(c,[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;size(c,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ls&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&amp;#39;&lt;/span&gt;, set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LineStyleOrder&amp;#39;&lt;/span&gt;,ls); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;% LineStyleOrder&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lw&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&amp;#39;&lt;/span&gt;                                         &lt;span style=&#34;color:#75715e&#34;&gt;% LineWidthOrder&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(LineWidthOrder)
    lw=LocalRepmat(LineWidthOrder(:),[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;length(LineWidthOrder)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; lw=&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;; LineWidthOrderWarning=[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Undefined LineWidthOrder, &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;default width (0.5) will be used&amp;#39;&lt;/span&gt;];
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:LineWidthOrder&amp;#39;&lt;/span&gt;,LineWidthOrderWarning)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; isempty(w), w=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;% width&lt;/span&gt;
    w=LocalRepmat(abs(w(:)),[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;length(w)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; isempty(h), h=&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;w; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;% height&lt;/span&gt;
    h=LocalRepmat(abs(h(:)),[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;length(h)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isempty(ip) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;cone               &lt;span style=&#34;color:#75715e&#34;&gt;% ip&lt;/span&gt;
    ip=LocalRepmat(ip(:),[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;length(ip)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    i=find(ip&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); ip(i)=w(i);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ip=&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ones(n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; isempty(alpha), alpha=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    a=LocalRepmat(alpha(:),[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;length(alpha)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]); &lt;span style=&#34;color:#75715e&#34;&gt;% FaceAlpha&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Log Plot&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys
    units=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;units&amp;#39;&lt;/span&gt;); set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;units&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;points&amp;#39;&lt;/span&gt;);
    pos=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;position&amp;#39;&lt;/span&gt;); set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;units&amp;#39;&lt;/span&gt;,units);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PlotBoxAspectRatioMode&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;auto&amp;#39;&lt;/span&gt;)
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PlotBoxAspectRatio&amp;#39;&lt;/span&gt;,[pos(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),pos(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    par=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PlotBoxAspectRatio&amp;#39;&lt;/span&gt;);
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DataAspectRatio&amp;#39;&lt;/span&gt;,[par(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),par(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),par(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]);
    &lt;span style=&#34;color:#75715e&#34;&gt;% map coordinates onto unit square&lt;/span&gt;
    q=[p1;p2]; xr=Xr; yr=Yr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xs, xr=log10(xr); q(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=log10(q(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ys, yr=log10(yr); q(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)=log10(q(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    q=q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;LocalRepmat([xr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),yr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    dx=xr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); dy=yr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;yr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    q=q&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;diag([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dx,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dy,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    q1=q(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n,:); q2=q(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; xs=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ys=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dx=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dy=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; xr=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; yr=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Line&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;cone
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultLineTag&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;arrow3&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(lw)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lw&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; OneColor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls(&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;% single color, linestyle/width&lt;/span&gt;
    P=zeros(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n;
    P(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,:)=p1(i,:); P(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,:)=p2(i,:); P(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=NaN;
    H1=plot3(P(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),P(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),P(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LineWidth&amp;#39;&lt;/span&gt;,lw);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                               &lt;span style=&#34;color:#75715e&#34;&gt;% single linewidth&lt;/span&gt;
    H1=plot3([p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;,[p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            [p1(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),p2(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LineWidth&amp;#39;&lt;/span&gt;,lw);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; H1=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                   &lt;span style=&#34;color:#75715e&#34;&gt;% use LineWidthOrder&lt;/span&gt;
    ls=LocalRepmat(cellstr(L),[ceil(n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;size(L,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    H1=Zeros;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n
    H1(i)=plot3([p1(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),p2(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)],[p1(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),p2(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)],&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            [p1(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),p2(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)],ls{i},&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Color&amp;#39;&lt;/span&gt;,c(i,:),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LineWidth&amp;#39;&lt;/span&gt;,lw(i));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                     &lt;span style=&#34;color:#75715e&#34;&gt;% cone plot&lt;/span&gt;
    P=zeros(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n;
    P(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,:)=p1(i,:); P(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,:)=p1(i,:); P(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=NaN;
    H1=plot3(P(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),P(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),P(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Scale&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;restore, axis tight, &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    ar=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DataAspectRatio&amp;#39;&lt;/span&gt;); ar=sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;norm(ar);
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DataAspectRatioMode&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;manual&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys, sf=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; xr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xlim&amp;#39;&lt;/span&gt;); yr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ylim&amp;#39;&lt;/span&gt;); zr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zlim&amp;#39;&lt;/span&gt;);
    sf=norm(diff([xr;yr;zr],&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;ar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% UserData&lt;/span&gt;
    c=c(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n,:); w=w(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n); h=h(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n); ip=ip(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n); a=a(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n);
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UserData&amp;#39;&lt;/span&gt;,[get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;UserData&amp;#39;&lt;/span&gt;);p1,p2,c,w,h,ip,a]);

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Arrowhead&lt;/span&gt;
    whip=sf&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[w,h,ip];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys, whip=whip&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;; p1=q1; p2=q2; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    w=whip(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); h=whip(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); ip=whip(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cone                                            &lt;span style=&#34;color:#75715e&#34;&gt;% cone plot&lt;/span&gt;
    delete(H1), H1=[];
    p2=p2&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;LocalRepmat(sqrt(sum(p2&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;p2,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)),[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
    p2=p1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;LocalRepmat(ar,[n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;LocalRepmat(h,[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    W=(p1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p2)&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;LocalRepmat(ar,[n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    W=W&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;LocalRepmat(sqrt(sum(W&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;W,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)),[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);         &lt;span style=&#34;color:#75715e&#34;&gt;% new z direction&lt;/span&gt;
    U=[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),Zeros];
    N=sqrt(sum(U&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)); i=find(N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;eps); j=length(i);
    U(i,:)=LocalRepmat([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],[j,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]); N(i)=ones(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    U=U&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;LocalRepmat(N,[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);                         &lt;span style=&#34;color:#75715e&#34;&gt;% new x direction&lt;/span&gt;
    V=[W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),&lt;span style=&#34;color:#75715e&#34;&gt;...               % new y direction&lt;/span&gt;
    W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;W(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;U(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)];

    m=&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;                               &lt;span style=&#34;color:#75715e&#34;&gt;% surface grid spacing&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultSurfaceTag&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;arrow3&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultSurfaceEdgeColor&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;none&amp;#39;&lt;/span&gt;);
    r=[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; theta=(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:m)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi; Ones=ones(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    x=r&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(theta); y=r&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(theta); z=r&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Ones;
    G=surface(x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,z); dar=diag(ar);
    X=get(G,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;XData&amp;#39;&lt;/span&gt;); Y=get(G,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YData&amp;#39;&lt;/span&gt;); Z=get(G,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ZData&amp;#39;&lt;/span&gt;);
    H2=Zeros; [j,k]=size(X);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n                           &lt;span style=&#34;color:#75715e&#34;&gt;% translate, rotate, and scale&lt;/span&gt;
    H2(i)=copyobj(G,ax);
    xyz=[w(i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;X(:),w(i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Y(:),h(i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Z(:)]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[U(i,:);V(i,:);W(i,:)]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dar;
    x=reshape(xyz(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),j,k)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p2(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    y=reshape(xyz(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),j,k)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p2(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    z=reshape(xyz(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),j,k)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p2(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    LocalSetSurface(xys,xs,ys,dx,dy,xr,yr,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            x,y,z,a(i),c(i,:),H2(i),&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    delete(G);

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Initial Point Marker&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any(ip&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    theta=(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:m)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi; phi=(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:m)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pi&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; cosphi=cos(phi);
    x=cosphi&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cos(theta); y=cosphi&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sin(theta); z=sin(phi)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Ones;
    G=surface(x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,z&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ar(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    X=get(G,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;XData&amp;#39;&lt;/span&gt;); Y=get(G,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YData&amp;#39;&lt;/span&gt;); Z=get(G,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ZData&amp;#39;&lt;/span&gt;);
    H3=zeros(n,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n                                        &lt;span style=&#34;color:#75715e&#34;&gt;% translate&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ip(i)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    H3(i)=copyobj(G,ax);
    x=p1(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;X&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ip(i); y=p1(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;Y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ip(i); z=p1(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;Z&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ip(i);
    LocalSetSurface(xys,xs,ys,dx,dy,xr,yr,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            x,y,z,a(i),c(i,:),H3(i),m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, delete(G);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; H3=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Finish&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; restore, xr=Xr; yr=Yr; zr=Zr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys, set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DataAspectRatioMode&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;auto&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    axis tight
    xr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xlim&amp;#39;&lt;/span&gt;); yr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ylim&amp;#39;&lt;/span&gt;); zr=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zlim&amp;#39;&lt;/span&gt;);
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;replace&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    azel=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;view&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(azel(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, renderer=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ZBuffer&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; renderer=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OpenGL&amp;#39;&lt;/span&gt;; c1=&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(fig,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Renderer&amp;#39;&lt;/span&gt;,renderer);
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LineStyleOrder&amp;#39;&lt;/span&gt;,L,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ColorOrder&amp;#39;&lt;/span&gt;,C,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultLineTag&amp;#39;&lt;/span&gt;,LT,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultSurfaceTag&amp;#39;&lt;/span&gt;,ST,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultSurfaceEdgeColor&amp;#39;&lt;/span&gt;,EC,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xlim&amp;#39;&lt;/span&gt;,xr,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ylim&amp;#39;&lt;/span&gt;,yr,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zlim&amp;#39;&lt;/span&gt;,zr,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;clim&amp;#39;&lt;/span&gt;,get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CLim&amp;#39;&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CameraViewAngle&amp;#39;&lt;/span&gt;,get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CameraViewAngle&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PlotBoxAspectRatio&amp;#39;&lt;/span&gt;,get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PlotBoxAspectRatio&amp;#39;&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargout, hn=[H1(:);H2(:);H3(:)]; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Local Functions&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Update&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; H=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalUpdate&lt;/span&gt;(fig,ax,ud,sf,flag)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; ColorOrder
    p1=ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); p2=ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;); c=ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;); a=ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;);
    w=sf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;); h=sf(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;); ip=sf(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ud(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;);
    H=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;children&amp;#39;&lt;/span&gt;); tag=get(H,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tag&amp;#39;&lt;/span&gt;); type=get(H,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;type&amp;#39;&lt;/span&gt;);
    delete(H(strcmp(tag,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;arrow3&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; strcmp(type,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;surface&amp;#39;&lt;/span&gt;)));
    set(fig,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add&amp;#39;&lt;/span&gt;); set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add&amp;#39;&lt;/span&gt;); H1=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag, map=get(fig,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;colormap&amp;#39;&lt;/span&gt;);                  &lt;span style=&#34;color:#75715e&#34;&gt;% update colors&lt;/span&gt;
    M=(p1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p2); M=sqrt(sum(M&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;M,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)); minM=min(M); maxM=max(M);
    H1=H(strcmp(tag,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;arrow3&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; strcmp(type,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;line&amp;#39;&lt;/span&gt;));
    MagnitudeWarning=[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Cannot perform magnitude coloring on lines &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;that\nwere drawn with a single color, linestyle, and linewidth&amp;#39;&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(H1)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:length(H1)                             &lt;span style=&#34;color:#75715e&#34;&gt;% update line colors&lt;/span&gt;
    x=get(H1(i),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xdata&amp;#39;&lt;/span&gt;); y=get(H1(i),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ydata&amp;#39;&lt;/span&gt;); z=get(H1(i),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zdata&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(x)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;                               &lt;span style=&#34;color:#75715e&#34;&gt;% multiple lines&lt;/span&gt;
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:Magnitude&amp;#39;&lt;/span&gt;,MagnitudeWarning), &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    m=sqrt((x(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))^&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(y(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))^&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(z(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;z(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))^&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    c=LocalInterp(minM,maxM,map,m); set(H1(i),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&amp;#39;&lt;/span&gt;,c);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; length(H1)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3:Magnitude&amp;#39;&lt;/span&gt;,MagnitudeWarning)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    c=LocalInterp(minM,maxM,map,M);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ColorOrder&amp;#39;&lt;/span&gt;,c);                            &lt;span style=&#34;color:#75715e&#34;&gt;% update surfaces&lt;/span&gt;
    ColorOrder=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tag&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Arrow3ConePlot&amp;#39;&lt;/span&gt;)
    H=arrow3(p1,p2,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o&amp;#39;&lt;/span&gt; ,w,h,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cone&amp;#39;&lt;/span&gt;,a);            &lt;span style=&#34;color:#75715e&#34;&gt;% update cones&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; H=arrow3(p1,p2,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o0&amp;#39;&lt;/span&gt;,w,h,    ip,a);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, H=[H1(:);H(:)];
    set(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nextplot&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;replace&amp;#39;&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% SetSurface&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LocalSetSurface&lt;/span&gt;(xys,xs,ys,dx,dy,xr,yr,x,y,z,a,c,H,n,m)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys
    x=x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;xr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); y=y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dy&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;yr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xs, x=&lt;span style=&#34;color:#ae81ff&#34;&gt;10.&lt;/span&gt;^x; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ys, y=&lt;span style=&#34;color:#ae81ff&#34;&gt;10.&lt;/span&gt;^y; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    cd=zeros(n,m,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); cd(:,:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=c(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); cd(:,:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)=c(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); cd(:,:,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)=c(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    set(H,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;XData&amp;#39;&lt;/span&gt;,x,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YData&amp;#39;&lt;/span&gt;,y,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ZData&amp;#39;&lt;/span&gt;,z,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CData&amp;#39;&lt;/span&gt;,cd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FaceAlpha&amp;#39;&lt;/span&gt;,a);

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% ColorTable&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [vc,cn]=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalColorTable&lt;/span&gt;(n,beta)
    vc=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kymcrgbadefhijlnpqstuvzw&amp;#39;&lt;/span&gt;;                     &lt;span style=&#34;color:#75715e&#34;&gt;% valid color codes&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                k               y               m               c&lt;/span&gt;
    cn=[&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                r               g               b               a&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.42&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.59&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.24&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                d               e               f               h&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.70&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.13&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.41&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.71&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                i               j               l               n&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.51&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.66&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.42&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                p               q               s               t&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.80&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;%                u               v               z               w&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.13&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.38&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.74&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.99&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.00&lt;/span&gt;];

&lt;span style=&#34;color:#75715e&#34;&gt;% Named Simulink Colors (zaql)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% LightBlue = 0.38  0.74  0.99 = aZure&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% DarkGreen = 0.42  0.59  0.24 = Asparagus&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Orange    = 1.00  0.50  0.00 = kumQuat&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Gray      = 0.50  0.50  0.50 = Light gray&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;% Default ColorOrder Property Colors (bersvpd)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color1    = 0.00  0.00  1.00 = Blue&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color2    = 0.00  0.50  0.00 = Evergreen&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color3    = 1.00  0.00  0.00 = Red&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color4    = 0.00  0.75  0.75 = Sky blue&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color5    = 0.75  0.00  0.75 = Violet&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color6    = 0.75  0.75  0.00 = Pear&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Color7    = 0.25  0.25  0.25 = Dark gray&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n, clf reset                                    &lt;span style=&#34;color:#75715e&#34;&gt;% plot color table&lt;/span&gt;
    name={&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;blacK&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Yellow&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Magenta&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Cyan&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Red&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Green&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Blue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Asparagus&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Dark gray&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Evergreen&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Firebrick&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hot pink&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Indigo&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Jade&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Light gray&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Nutbrown&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pear&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kumQuat&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Sky blue&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Tawny&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bUrgundy&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Violet&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;aZure&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;White&amp;#39;&lt;/span&gt;};
c=[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yptn&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gjae&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;czsb&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hmvi&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;qrfu&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wldk&amp;#39;&lt;/span&gt;];
set(gcf,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultAxesXTick&amp;#39;&lt;/span&gt;,[],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultAxesYTick&amp;#39;&lt;/span&gt;,[],&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultAxesXTickLabel&amp;#39;&lt;/span&gt;,[],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultAxesYTickLabel&amp;#39;&lt;/span&gt;,[],&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultAxesXLim&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultAxesYLim&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;],&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DefaultRectangleEdgeColor&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;none&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,i); box on
j=find(vc&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(i)); title(name{j});
dark=LocalBrighten(cn(j,:),&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;beta);
light=LocalBrighten(cn(j,:),beta);
rectangle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Position&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FaceColor&amp;#39;&lt;/span&gt;,dark);
rectangle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Position&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FaceColor&amp;#39;&lt;/span&gt;,cn(j,:));
rectangle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Position&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FaceColor&amp;#39;&lt;/span&gt;,light);
rectangle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Position&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EdgeColor&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;k&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rem(i,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
set(gca,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YTickLabel&amp;#39;&lt;/span&gt;,{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dark&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;normal&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;light&amp;#39;&lt;/span&gt;},&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YTick&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;0.125&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.375&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.625&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
text(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;,[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{\bf\itARROW3}  Named Color Table  &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;( \beta = &amp;#39;&lt;/span&gt;,num2str(beta),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; )&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% ColorMap&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [C,failed]=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalColorMap&lt;/span&gt;(c,vc,cn,beta)
    n=length(c); failed=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; C=zeros(n,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); i=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sum([vc,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_^&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(i)), failed=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_^&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(i))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;n, failed=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sum(vc&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)), failed=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    cc=cn(vc&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),:); gamma=beta;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c(i)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&amp;#39;&lt;/span&gt;, gamma=&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;beta; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    C(j,:)=LocalBrighten(cc,gamma); i=i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; C(j,:)=cn(vc&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;c(i),:); i=i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;n, &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;, j=j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;j, C(j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n,:)=[]; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Brighten&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; C=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalBrighten&lt;/span&gt;(c,beta)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum([c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sum(c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sum(c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; beta&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    C=(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;beta)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    C=c;  C(C&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)=beta;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    C=c&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;min(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sqrt(eps),abs(beta)))^sign(beta));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Repmat&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; B=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalRepmat&lt;/span&gt;(A,siz)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(A)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, B(prod(siz))=A; B(:)=A; B=reshape(B,siz);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; [m,n]=size(A); mind=(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:m)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;; nind=(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;;
    mind=mind(:,ones(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,siz(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))); nind=nind(:,ones(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,siz(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)));
    B=A(mind,nind);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Interp&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; v=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalInterp&lt;/span&gt;(xmin,xmax,y,u)
    [m,n]=size(y); h=(xmax&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xmin)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); p=length(u); v=zeros(p,n);
    k=min(max(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;floor((u&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xmin)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;h),&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); s=(u&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xmin)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n, v(:,j)=y(k,j)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;.*&lt;/span&gt;(y(k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,j)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y(k,j)); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    v(v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v(v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Check for supported log scales&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [xs,ys,xys]=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalLogCheck&lt;/span&gt;(ax)
    xs=strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;xscale&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;log&amp;#39;&lt;/span&gt;);
    ys=strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yscale&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;log&amp;#39;&lt;/span&gt;);
    zs=strcmp(get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;zscale&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;log&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; zs, error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z log scale not supported&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    xys=xs&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;ys;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xys, azel=get(ax,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;view&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(azel(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3D log plot not supported&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%-------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% Generate valid value for color, linestyle and linewidth&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [c,ls,lw]=&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalValidateCLSW&lt;/span&gt;(s)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, c=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;k&amp;#39;&lt;/span&gt;; ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;; lw=&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% identify linestyle&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; findstr(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--&amp;#39;&lt;/span&gt;), ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--&amp;#39;&lt;/span&gt;; s=strrep(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; findstr(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-.&amp;#39;&lt;/span&gt;), ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-.&amp;#39;&lt;/span&gt;; s=strrep(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-.&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; findstr(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;), ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;; s=strrep(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; findstr(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;), ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;; s=strrep(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; findstr(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&amp;#39;&lt;/span&gt;), ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&amp;#39;&lt;/span&gt;; s=strrep(s,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ls=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;% identify linewidth&lt;/span&gt;
    tmp=double(s);
    tmp=find(tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; tmp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(tmp)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any(s(tmp)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&amp;#39;&lt;/span&gt;), lw=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; lw=str2double(s(tmp)); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    s(tmp)=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; lw=&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;% identify color&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(s), s=lower(s);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(s)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, c=s(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; c=s(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; c=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;k&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errorbare&lt;/span&gt;(sty,x,y,xbar,ybar,symbol)

    &lt;span style=&#34;color:#75715e&#34;&gt;% ERRORBARE Enhanced Errorbar Function.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%   ERRORBARE(STY,X,Y,Xbar,Ybar,symbol) &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   It can draw errorbar along X/Y/Dual axis &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   in normal,semilog,loglog coordinate system,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   and adjust length of top line automatically,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   can also control dotstyle and color in the same way with errorbar.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   If the lower and upper error range of x/y is different, they should be&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   input as [lower,upper] if x/y is a column vector; &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   for a row vector, they should be [lower;uper].&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   parameter STY include 12 types: &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   v,h,d,vlogx,hlogx,dlogx,vlogy,hlogy,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%       dlogy,vlogd,hlogd,dlogd &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   where&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   v stands for vertical errorbar，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   h draws horizontal errorbar，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   d means dual direction,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   logx corresponding to semilogx，can use preffix v/h/d&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   logy corresponding to semilogy，can use preffix v/h/d&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   logd corresponding to loglog，can use preffix v/h/d&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%   误差棒函数增强版&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%   ERRORBARE(STY,X,Y,Xbar,Ybar,symbol) &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   可在各个坐标系中沿X轴，Y轴方向，或者两轴方向绘制误差棒，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   能够根据所选坐标类型调整端点线长。&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   增加对误差棒的线型控制，用法与原errorbar函数中相同&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   若上下限范围不同，X为列向量时应按照&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   [下限,上限] 的格式输入，若为行向量则为 [下限;上限]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   STY 参数包括 v,h,d,vlogx,hlogx,dlogx,vlogy,hlogy,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%	dlogy,vlogd,hlogd,dlogd 共12种&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   v 表示误差棒垂直，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   h 表示误差棒水平，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   d (dual) 显示双轴误差，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   logx 对应 semilogx，前缀 v,h,d 意义同上&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   logy 对应 semilogy，前缀 v,h,d 意义同上&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%   logd 对应 loglog，前缀 v,h,d 意义同上&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%   For example,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%	x = 1:10;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	y = sin(x)+2;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	e = std(y)*ones(size(x));&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(x,y,e)	% use function &amp;#34;errorbar&amp;#34; directly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(x,y,e,&amp;#39;or&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(&amp;#39;v&amp;#39;,x,y,e)	% &amp;#34;e&amp;#34; is error of &amp;#34;y&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(&amp;#39;v&amp;#39;,x,y,[e;2*e])  % try different error limits&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(&amp;#39;hlogx&amp;#39;,x,y,e)    % &amp;#34;e&amp;#34; is error of &amp;#34;x&amp;#34; here，&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(&amp;#39;d&amp;#39;,x,y,e,e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(&amp;#39;d&amp;#39;,x,y,e,e,&amp;#39;or&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%	errorbare(&amp;#39;dlogd&amp;#39;,x,y,e,e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%   by Henry Sting  Email: henrysting@hotmail.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;%   $Revision: 1.2 $  $Date: 2010-2-8 $&lt;/span&gt;

lx=[];ux=[];ly=[];uy=[]; &lt;span style=&#34;color:#75715e&#34;&gt;% 误差棒上下限&lt;/span&gt;
xl=[];xr=[];yl=[];yr=[]; &lt;span style=&#34;color:#75715e&#34;&gt;% 端点短线左右限&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isstr(sty)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
errorbar(sty,x,y)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
errorbar(sty,x,y,xbar)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Please assign adopted coordinate system with symbol parameters.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; isstr(sty)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; size(x)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;size(y)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Coordinate array should be equal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    symbol=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ob&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(x)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;length(xbar)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Format of Xbar is illegal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;v&amp;#39;&lt;/span&gt;
    ybar=xbar;xbar=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;h&amp;#39;&lt;/span&gt;
    ybar=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&amp;#39;&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Parameters are not enough.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symbol parameter is illegal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isstr(ybar)
    symbol=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ob&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(x)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;length(xbar)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Format of Xbar is illegal.&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; length(y)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;length(ybar)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Format of Ybar is illegal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; isstr(ybar)
    symbol=ybar;ybar=[];
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(x)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;length(xbar)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Format of Xbar is illegal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;v&amp;#39;&lt;/span&gt;
    ybar=xbar;xbar=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;h&amp;#39;&lt;/span&gt;
    ybar=[];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&amp;#39;&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Parameters are not enough.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symbol parameter is illegal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; nargin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(x)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;length(xbar)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Format of Xbar is illegal.&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; length(y)&lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt;length(ybar)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Format of Ybar is illegal.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isstr(symbol)
    error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symbol should be string&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


    [ls,col,mark,msg] = colstyle(symbol); &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;isempty(msg), error(msg); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    symbol = [ls mark col]; &lt;span style=&#34;color:#75715e&#34;&gt;% Use marker only on data part&lt;/span&gt;
    esymbol = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt; col]; &lt;span style=&#34;color:#75715e&#34;&gt;% Make sure bars are solid&lt;/span&gt;


    &lt;span style=&#34;color:#75715e&#34;&gt;% 转换为列距阵&lt;/span&gt;
    [a,b]=size(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b
    x=x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;;y=y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;;xbar=xbar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;;ybar=ybar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;;
    c=a;a=b;b=c;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% 处理上下限不等&lt;/span&gt;
    [xa,xb]=size(xbar);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xb&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    ux=xbar;lx=xbar; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; xb&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    lx=xbar(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);ux=xbar(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    [ya,yb]=size(ybar);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; yb&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    uy=ybar;ly=ybar; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; yb&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    ly=ybar(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);uy=ybar(:,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% 描点&lt;/span&gt;
    dx=(max(x(:))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;min(x(:)))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    dy=(max(y(:))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;min(y(:)))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    logn=&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length(sty) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    xl = x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dx; xr = x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dx; yl = y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dy; yr = y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dy; &lt;span style=&#34;color:#75715e&#34;&gt;% 定义端点短线长度&lt;/span&gt;
    plot(x,y,symbol);hold on
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; length(sty) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;logx&amp;#39;&lt;/span&gt; 
    dx=(log(max(x(:)))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;log(min(x(:))))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    xl = x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;logn^dx;xr = x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logn^dx;yl = y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dy; yr = y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dy; 
    semilogx(x,y,symbol);hold on
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; length(sty) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;logy&amp;#39;&lt;/span&gt; 
    dy=(log(max(y(:)))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;log(min(y(:))))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    yl = y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;logn^dy;yr = y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logn^dy;xl = x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dx; xr = x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dx; 
    semilogy(x,y,symbol);hold on
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; length(sty) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;logd&amp;#39;&lt;/span&gt; 
    dx=(log(max(x(:)))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;log(min(x(:))))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    dy=(log(max(y(:)))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;log(min(y(:))))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    xl = x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;logn^dx;xr = x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logn^dx; yl = y&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;logn^dy;yr = y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;logn^dy;
    loglog(x,y,symbol);hold on
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;%% 纵向&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;v&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&amp;#39;&lt;/span&gt;
    vx = zeros(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,b);
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = xl;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = xr;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = xl;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = xr;
    vx(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;

    vy = zeros(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,b);
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ly;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;uy;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ly;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ly;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;uy;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;uy;
    vy(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;

    plot(vx,vy,esymbol,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;markersize&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;%% 横向&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;h&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; sty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&amp;#39;&lt;/span&gt;
    hx = zeros(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,b);
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lx;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;ux;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lx;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lx;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;ux;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;ux;
    hx(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;

    hy = zeros(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,b);
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = y;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = yl;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = yr;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = yl;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = yr;
    hy(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,:) = NaN;

    plot(hx,hy,esymbol,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;markersize&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;配置文件
Initial.db&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    0%%%%%%Configure
    0.01    
    0.99
    0.01
    0.99
    0%%%%%%getLine
    100
    15
    0
    30
    90
    50
    0%%%%%HSV
    0
    25
    170
    255
    30
    170
    30
    170
    0%%%%pile process cut
    100    %[100~200]
    0.8    %[0~1]
    0.73    %[0~1] 
    0.47   %[0~0.5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/matlab/config.png&#34; alt=&#34;config&#34;&gt;
读取部分的核心部分，最终返回一个x_coordinate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [x_coordinate] = &lt;span style=&#34;color:#a6e22e&#34;&gt;readConfTest&lt;/span&gt;(filename)
    RowNumber=getRowFromFile(filename); 
    f = fopen(filename) ; 
    tline = cell(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, RowNumber) ; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : RowNumber 
    tline{i} = fgetl(f);
    y = sscanf( tline{i} , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%f&amp;#39;&lt;/span&gt;) ;
    x_coordinate(i)=y;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; row=&lt;span style=&#34;color:#a6e22e&#34;&gt;getRowFromFile&lt;/span&gt;(filename)
    fid=fopen(filename,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rt&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;% t是告诉fread是这里文本文件&lt;/span&gt;
    row=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;feof(fid)
    &lt;span style=&#34;color:#75715e&#34;&gt;% 一次性读取10000字符，计算其中的回车个数，其中10是回车的ASCII编码&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;*char&amp;#39;表示每次读取一个字符，*表示输出也是字符&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% 放心fread现在已经可以自动识别中文了，万一还是识别不了，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% 请在fopen中指定文件编码格式，比如gbk&lt;/span&gt;
    row=row&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;sum(fread(fid,&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*char&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;char(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;));
    &lt;span style=&#34;color:#75715e&#34;&gt;% 下面还有一个类似的方法，但是效率低很多，大概是上面的一半&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% &amp;#39;char&amp;#39;表示每次读取一个字符，但是默认输出double，&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% 也就是说读取char然后转换double中间有转换能快吗？&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;% row=row+sum(fread(fid,10000,&amp;#39;char&amp;#39;)==10);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    fclose(fid);
    &lt;span style=&#34;color:#75715e&#34;&gt;%row=row+1;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;a. 调用cell数据的方式是{} 区分于array（使用[]创建array）的()调用数组数据。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
