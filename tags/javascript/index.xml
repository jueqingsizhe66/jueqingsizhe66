<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript  | Macro Life</title>
    <link>https://jueqingsizhe66.github.io/tags/javascript/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <description>JavaScript </description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2019</copyright><lastBuildDate>Mon, 11 May 2015 14:58:44 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>JavaScript </title>
      <link>https://jueqingsizhe66.github.io/tags/javascript/</link>
    </image>
    
    <item>
      <title>JQuery1-9April4th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/jquery1-9april4th/</link>
      <pubDate>Mon, 11 May 2015 14:58:44 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/jquery1-9april4th/</guid>
      <description>&lt;p&gt;1: jquery的加载顺序&lt;/p&gt;

&lt;p&gt;IE中会有不同点
结论：jquery中使用$(function(){})即可！其他知道即可&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;
    &amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

      //javascript
      //第四个加载
      //在IE中居然无法加载！！！
      //需要等待页面完全加载完毕才会触发
      onload=function()
      {
        //console的作用就是在浏览器的控制台 打印出结果
        console.log(&#39;javascript\&#39;s onload&#39;);
        alert(&#39;javascript window.onload js ok 4&#39;);
      };
      //window object change into jQuery object
      //第五个加载
      $(window).load(function(){
        console.log(&#39;window onload&#39;);
        alert(&#39;$(window).load No 5&#39;);
      });

//第二个加载
      $(function()
        {
          console.log(&#39;dom ready=&#39;+$(&#39;#span&#39;).html());
          alert(&#39;$(function(){}niming hanshu! 2&#39;);
        });


      //Dom object change into Jquery Object
      // 很是奇怪 第一个加载
      //可以多次触发
      $(document).ready(function(){
        console.log(&#39;document ready&#39;)
        alert(&#39;$(document).ready Ok 1&#39;);
      });

      // THe most common  and most convininet
      //jQuery(function(){})
           //第三个加载  跟第二个一样的  按照前后顺序进行布置
      jQuery(function()
       {
        console.log(&#39;dom ready=&#39;+$(&#39;#span&#39;).html());
        alert(&#39; jQuery(function(){}niming hanshu 3!&#39;)
       });

       function init()
       {
         console.log(&#39;body init&#39;);
       }

    &amp;lt;/script&amp;gt;

  &amp;lt;/Head&amp;gt;
  &amp;lt;Body onload=&amp;quot;init()&amp;quot;&amp;gt;
    
    &amp;lt;Span id=&amp;quot;span&amp;quot;&amp;gt; Rupeng!&amp;lt;/Span&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2：Map 和each函数的使用
map：用于修改
each：用于遍历&lt;/p&gt;

&lt;p&gt;map:  value index
each:  key  value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      
       var arr=[1,2,4,5,6];
       $.map(arr,function()
             {
               alert(&#39;element&#39;+arguments[1]+&#39;==&#39;+arguments[0]);
             });
        //namely  ,we can write below
        $.map(arr,function(ele,index)
              {
                alert(&#39;element&#39;+index+&#39;==&#39;+ele);
              });

        //return a  new array ==2*old_array
              var newArray=$.map(arr,function(ele,index)
               {
                 return ele*2;
               })

        //$.map is similar to lisp&#39;s (map ...) 
        // so we can get the two properties of array with $.map function

        //print new array
        alert(newArray);   


        var newArray2=$.map(arr,function(ele,index){
          return index&amp;gt;2?ele*2:ele;
        })

        alert(newArray2);


    &amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var dic={&amp;quot;name&amp;quot;:&amp;quot;xiaoming&amp;quot;,&amp;quot;age&amp;quot;:3,&amp;quot;gender&amp;quot;:&amp;quot;1&amp;quot;};
      //each 主要用于遍历    map主要用于修改
      $.each(dic,function(key,value)
             {
               alert(key+&#39;==&#39;+value);
             })
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3:jquery和jsDom的互转&lt;/p&gt;

&lt;p&gt;1：jsDom -&amp;gt; jquery       把jsDom对象放在$()括号中即可
2： jquery -&amp;gt; jsDom
     两种方法
         a:  $().get(0)
         b: $()[0]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Test the transformation between jQuery and Dom &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; &amp;gt;
    
    
      $(function(){

  /*
        document.getElementById(&#39;btn&#39;).onclick=function()
        {
          var dvObj=document.getElementById(&#39;dv&#39;);
          //方法1  Dom
          //dvObj.style.backgroundColor=&#39;black&#39;; 
         
          //方法2 jQuery 方法
           //Dom object change into jQuery
//          var dvObjJquery=$(dvObj);
//          dvObjJquery.css(&#39;backgroundColor&#39;,&#39;yellow&#39;);

          // 把jquery对象转回到Dom对象
          var dvObjJquery=$(dvObj);
          //1  转回去dom的方法1
//          var dvObjAgain=dvObjJquery[0]; 
          //2  转回去dom的方法2
          var dvObjAgain=dvObjJquery.get(0); 
           dvObjAgain.style.backgroundColor=&#39;black&#39;; 

        

        }
   */       

        //1  省略了  等号
        //2  省略了   Dom长长的函数名调用
        //2  取而代之的是简易的jQuery语法  利用链式法则
        $(&#39;#btn&#39;).click(function()
                        {
                          $(&#39;#dv&#39;).css(&#39;backgroundColor&#39;,&#39;purple&#39;);
                        });
      })
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;changeColor&amp;quot;/&amp;gt;
    &amp;lt;Div id=&amp;quot;dv&amp;quot; style=&amp;quot;width:300px; height:200px; background-color:green&amp;quot;&amp;gt;
      hello
      &amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4多重选择器
注意：中间不能有空格  否则没有反应 这是需要注意的
          text() 类似于jsDom的innerText()
          html()类似于 innerHtml()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
//      alert(&#39;hello&#39;)
      $(function()
        {
          $(&#39;#btn&#39;).click(function(){
//            alert(&#39;hello&#39;);
//            $(&#39;#cls&#39;).text(&#39;This is  a  layer&#39;);  // class selector


            //$(&#39;div#cls&#39;).css(&#39;backgroundColor&#39;,&#39;yellow&#39;);  // label with Id selector
//            $(&#39;div #cls&#39;).css(&#39;backgroundColor&#39;,&#39;yellow&#39;); //中间不能有空格  否则没有反应 这是需要注意的
//   同样的标签加上lei也不是不能加上空格


            $(&#39;div#cls&#39;).text(&#39;InnerText方式添加&#39;);
            $(&#39;div#cls&#39;).html(&#39;&amp;lt;H1&amp;gt;InnerHTML方式添加&amp;lt;/H1&amp;gt;&#39;);

            //标签选择器的隐式编程   隐式循环！ 这是一个jQuery的一个好处 implicit cycle
            $(&#39;p&#39;).text(&#39;Set all the p the value&#39;);
    
          });
        });
    &amp;lt;/script&amp;gt;

    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
       #cls
       {
         width:300px;
         height:200px;
         background-color:green;
       }
    &amp;lt;/style&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;change&amp;quot;/&amp;gt;
    &amp;lt;div id=&amp;quot;cls&amp;quot;&amp;gt;

    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5： 选择器  过滤器的使用
:first   first()
:last   last()
:eq()
:lt()
:gt()&lt;/p&gt;

&lt;p&gt;注意：可不敢再把siblings()漏掉了！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;  test  the start mark&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        //注意是tr  行
        $(&#39;#tb tr:first&#39;).css(&#39;backgroundColor&#39;,&#39;green&#39;).css(&#39;fontSize&#39;,&#39;50px&#39;);
        $(&#39;#tb tr:last&#39;).css(&#39;color&#39;,&#39;black&#39;);
        // 0-3之间  0 1 2 3
        $(&#39;#tb tr:gt(0):lt(3)&#39;).css(&#39;fontSize&#39;,&#39;25px&#39;);
        $(&#39;#tb tr:odd&#39;).css(&#39;backgroundColor&#39;,&#39;yellow&#39;);

        $(&#39;#tb tr&#39;).click(function(){
          //可不敢再犯这种错误了！ ！ siblings()  加上括号
          $(this).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;gray&#39;);
        })
      })
    &amp;lt;/script&amp;gt;

    
   &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      .cls
      {
        background-color:black;
      }
      td
      {
        border:1px solid red;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;table id=&amp;quot;tb&amp;quot; style=&amp;quot;width:2\450px;height:20px;text-align:center; font-size:14px ;border:1px solid black;cursor:pointer&amp;quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Name&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Mark&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Chairman Mao&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;89&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Chairman Hu&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;79&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Chairman Deng&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;99&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Chairman Xi&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;98&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Chairman jiang&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;76&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;

    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6：相对容器 和绝对容器&lt;/p&gt;

&lt;p&gt;$(&amp;lsquo;p div&amp;rsquo;)  绝对容器  p的后代
$(&amp;lsquo;div&amp;rsquo;,&amp;lsquo;p&amp;rsquo;)  相对容器   所有在p标签中的 div
参考点不一样&lt;/p&gt;

&lt;p&gt;注意
          //$(&amp;lsquo;this&amp;rsquo;).siblings.css(&amp;lsquo;backgroundColor&amp;rsquo;,&amp;ldquo;);//可不敢再犯这个错误
          //this不需要加上单引号
          //为什么无法直接行t添加上 颜色？ 因为真正在表面显示的是td
          //$(this).siblings().css(&amp;lsquo;backgroundColor&amp;rsquo;,&amp;ldquo;);&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;  test  the start mark&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){

        //绝对定位
        // $(&#39;div p&#39;)表示div下的p元素
        //相对定位
        //相对div元素的p标签
        //$(&#39;p&#39;,&#39;div&#39;) 表示在div层中的p元素

        $(&#39;#tb tr&#39;).click(function(){
          //$(&#39;this&#39;).siblings.css(&#39;backgroundColor&#39;,&#39;&#39;);//可不敢再犯这个错误
          //this不需要加上单引号
          //为什么无法直接行t添加上 颜色？ 因为真正在表面显示的是td
          //$(this).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;);

          $(&#39;td&#39;,$(this).siblings()).css(&#39;backgroundColor&#39;,&#39;&#39;);
          $(&#39;td:even&#39;,$(this)).css(&#39;backgroundColor&#39;,&#39;red&#39;);
          $(&#39;td:odd&#39;,$(this)).css(&#39;backgroundColor&#39;,&#39;yellow&#39;);
        });

        //学习了.hover(,) 函数的使用方式
        //来的时候是第一个参数
        //去的时候是第二个参数
        $(&#39;tr&#39;).hover(function(){
          $(this).find(&#39;td&#39;).addClass(&#39;hover&#39;);
        },function(){
          $(this).find(&#39;td&#39;).removeClass(&#39;hover&#39;);
        });


        //l列的追踪
        $(&#39;td&#39;).hover(function(){
          var $index=$(this).index();
          $(this).addClass(&#39;hover&#39;);
          $(&#39;td:nth-child(&#39;+($index+1)+&#39;)&#39;).addClass(&#39;hover&#39;);
        },function(){
          $(&#39;#tb tr&#39;).children().removeClass(&#39;hover&#39;);
        });
        alert(&#39;Total rows:&#39;+$(&#39;#tb tr&#39;).length);


      })
    &amp;lt;/script&amp;gt;

    
   &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
     .hover
     {
       color:#fff;
       background-color:gray;
     }
      .cls
      {
        background-color:black;
      }
      td
      {
        border:1px solid red;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;table id=&amp;quot;tb&amp;quot; style=&amp;quot;width:2\450px;height:20px;text-align:center; font-size:14px ;border:1px solid black;cursor:pointer&amp;quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;First&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Second&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Third&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fourth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fifth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Sixth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Seventh&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;eighth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;nineth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;tenth&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;First&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Second&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Third&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fourth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fifth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Sixth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Seventh&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;eighth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;nineth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;tenth&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;First&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Second&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Third&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fourth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fifth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Sixth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Seventh&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;eighth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;nineth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;tenth&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;First&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Second&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Third&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fourth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Fifth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Sixth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;Seventh&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;eighth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;nineth&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;tenth&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;

    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个有趣的分页&lt;/p&gt;

&lt;p&gt;奇巧淫技&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;

&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
   .page
   {
       margin:5px;
   }
   .hover
   {
       background-color:#00f;
       color:#fff;
       cursor:hand;
   }
    &amp;lt;/style&amp;gt;

     &amp;lt;script src=&amp;quot;jquery-2.1.3.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
     &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

         $(document).ready(function () {
           //实际的效果是在先前的表格中进行隐藏和显示的小伎俩！ 奇巧淫技
           //get the rows
             var $rows = $(&#39;table tbody tr&#39;).length;
          // get the show lines  页面行数
             var $pagesize = 2;
          //总页数
             var $pagecount = Math.ceil($rows / $pagesize);
          //创建一个层
             var $div = $(&#39;&amp;lt;div id=&amp;quot;pages&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;);
          //在层中加入page
             for (var i = 0; i &amp;lt; $pagecount; i++) {
               //把创建的东西加入到层中
                 $(&#39;&amp;lt;span class=&amp;quot;page&amp;quot;&amp;gt;&#39; + (i + 1) + &#39;&amp;lt;/span&amp;gt;&#39;).appendTo($div);
             }
             $div.appendTo(&#39;table&#39;);

             //appendd the hover
             //设置页面的数字的悬浮效果
             $(&#39;.page&#39;).hover(function () {
                 $(this).addClass(&#39;hover&#39;);
             }, function () {
                 $(this).removeClass(&#39;hover&#39;);
             });

             //增加了页面行的点击隐藏的事件
             $(&#39;table tbody tr&#39;).click(function(){
               $(this).hide();

             })
             //隐藏所有行
             $(&#39;table tbody tr&#39;).hide();
             //获得所有的tr行对象
             var tr = $(&#39;table tbody tr&#39;);
             for (var i = 0; i &amp;lt; $pagecount - 1; i++) {
                 $(tr[i]).show();
             }

             //设置页面的点击事件 效果
             $(&#39;span&#39;).click(function () {
                 $(&#39;table tbody tr&#39;).hide();
                 for (i = ($(this).text() - 1) * $pagesize; i &amp;lt;= $(this).text() * $pagesize - 1; i++) {
                     $(tr[i]).show();
                 }
             })
         });
     &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;table border=&amp;quot;1&amp;quot; width=&amp;quot;200px&amp;quot;&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Mark&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;100&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Steven&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;100&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;101&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Mike&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;70&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;102&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Robot&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;80&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;103&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Perry&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;100&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;104&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Lion&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;90&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;105&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Andy&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;85&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;

&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个小练习： 东西部篮球队&lt;/p&gt;

&lt;p&gt;注意：
       //可不敢再犯这个错误   1  逗号写成了句话   2： siblings后直接街上css的参数
          //$(this).css(&amp;lsquo;backgroundColor&amp;rsquo;.&amp;lsquo;red&amp;rsquo;).siblings()&amp;lsquo;backgroundColor&amp;rsquo;,&amp;ldquo;);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      //由此错误可得到一个结论
      // jQuery分成两个部分一个是获得Dom对象  紧接着是设置CSS样式！
      // 也就是js其实就是把这两个部分按照链条一样一对一对的串起来了
      //一个Dom一个Css  然后再一个Dom 一个CSS
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        $(&#39;ol li&#39;).mouseover(function(){
          //可不敢再犯这个错误   1  逗号写成了句话   2： siblings后直接街上css的参数
          //$(this).css(&#39;backgroundColor&#39;.&#39;red&#39;).siblings()&#39;backgroundColor&#39;,&#39;&#39;);

          //由此错误可得到一个结论
          // jQuery分成两个部分一个是获得Dom对象  紧接着是设置CSS样式！
          // 也就是js其实就是把这两个部分按照链条一样一对一对的串起来了
          //一个Dom一个Css  然后再一个Dom 一个CSS
          $(this).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;);
        });
        $(&#39;ol li&#39;).click(function()
           {

             //第一种写法
//             $(this).prevAll().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
//             $(this).nextAll().css(&#39;backgroundColor&#39;,&#39;yellow&#39;);

             //第二种写法
             //end的作用就是从前面所有 又跳回到$(this)的作用！！关键点是end() 这样才可以帮助我们就你行链式编程
             $(this).prevAll().css(&#39;backgroundColor&#39;,&#39;blue&#39;).end().nextAll().css(&#39;backgroundColor&#39;,&#39;yellow&#39;);
           })
      });
    &amp;lt;/script&amp;gt;

  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Ol id=&amp;quot;east&amp;quot;&amp;gt;
      &amp;lt;Li&amp;gt;亚特兰大 老鹰&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;芝加哥 公牛&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;波士顿 凯尔特人&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;夏洛特 黄蜂&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;克利夫兰 骑士&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;布鲁克林 篮网&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;迈阿密 热火&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;底特律 活塞&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;纽约 尼克斯&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;奥兰多 魔术&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;印第安纳 步行者&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;费城 76人&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;华盛顿 奇才&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;密尔沃基 雄鹿&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;多伦多 猛龙&amp;lt;/Li&amp;gt;
    &amp;lt;/Ol&amp;gt;
    &amp;lt;Ol id=&amp;quot;west&amp;quot;&amp;gt;
      &amp;lt;Li&amp;gt;金州 勇士&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;丹佛 掘金&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;达拉斯 小牛&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;洛杉矶 快船&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;明尼苏达 森林狼&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;休斯顿 火箭&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;洛杉矶 湖人&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;奥克兰陈马成 雷霆&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;孟菲斯 灰熊&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;菲尼克斯 太阳&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;波特兰 开拓者&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;新奥尔良 鹈鹕&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;萨克拉门托 国王&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;犹他 爵士&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;圣安东尼奥 马刺&amp;lt;/Li&amp;gt;
    &amp;lt;/Ol&amp;gt;
    &amp;lt;Ul id=&amp;quot;other&amp;quot;&amp;gt;
      &amp;lt;Li&amp;gt;步行者&amp;lt;/Li&amp;gt;
      &amp;lt;Li&amp;gt;山猫&amp;lt;/Li&amp;gt;
    &amp;lt;/Ul&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7：过滤器的练习&lt;/p&gt;

&lt;p&gt;注意：
   even和odd选择器     index从0开始。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;  test  the start mark&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        $(&#39;#btnFirst&#39;).click(function(){
          $(&#39;div:first&#39;).css(&#39;backgroundColor&#39;,&#39;green&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
        });
        $(&#39;#btnFirst2&#39;).click(function(){
          $(&#39;div&#39;).first().css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
        });
        $(&#39;#Last&#39;).click(function(){
          $(&#39;div:last&#39;).css(&#39;backgroundColor&#39;,&#39;purple&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
        });
        $(&#39;#Last2&#39;).click(function(){
          $(&#39;div&#39;).last().css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
        });

        $(&#39;#eq2&#39;).click(function(){
          $(&#39;div:eq(2)&#39;).css(&#39;backgroundColor&#39;,&#39;black&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
        });
        $(&#39;#lt2&#39;).click(function(){
          //范围性内容 不能用siblings
          //$(&#39;div:lt(2)&#39;).css(&#39;backgroundColor&#39;,&#39;black&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
          $(&#39;div:lt(2)&#39;).css(&#39;backgroundColor&#39;,&#39;black&#39;);
        });
        $(&#39;#gt2&#39;).click(function(){
        // $(&#39;div:gt(2)&#39;).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
          $(&#39;div:gt(2)&#39;).css(&#39;backgroundColor&#39;,&#39;red&#39;);
        });
        //下标从0开始  index 所以表面上even是第一个元素 
        $(&#39;#even2&#39;).click(function(){
         // $(&#39;div:even&#39;).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
          $(&#39;div:even&#39;).css(&#39;backgroundColor&#39;,&#39;red&#39;);
        });
        $(&#39;#odd2&#39;).click(function(){
          //$(&#39;div:odd&#39;).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;blue&#39;);
          $(&#39;div:odd&#39;).css(&#39;backgroundColor&#39;,&#39;red&#39;);
        });
        // 当然也是可以组合起来  $(&#39;div:gt(3):lt(2)&#39;)
        // $(&#39;div:not(.cls)&#39;)
        $(&#39;#olivenot&#39;).click(function(){
          //必须加上. 句话才是有效的
          $(&#39;div:not(.cls)&#39;).css(&#39;backgroundColor&#39;,&#39;yellow&#39;);
        });
      $(&#39;#header1&#39;).click(function(){
        $(&#39;h1,h2,h3,h4,h5,h6&#39;).css(&#39;backgroundColor&#39;,&#39;gray&#39;);
      });
      $(&#39;#header2&#39;).click(function(){
        $(&#39;:header&#39;).css(&#39;backgroundColor&#39;,&#39;yellow&#39;);
      });



      });
    &amp;lt;/script&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      div
      {
        width:150px;
        height:30px;
        margin-bottom:10px;
        background-color:blue;
      }
      td
      {
        border:1px solid red;
      }
      .cls
      {
           background-color:olive;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;


  &amp;lt;body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnFirst&amp;quot; value=&amp;quot;divColorToGreenFirst&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnFirst2&amp;quot; value=&amp;quot;divColorToGreenFirst2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;Last&amp;quot; value=&amp;quot;divColorToGreenLast&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;Last2&amp;quot; value=&amp;quot;divColorToGreenLast2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;gt2&amp;quot; value=&amp;quot;divColorToGreenGreater2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;eq2&amp;quot; value=&amp;quot;divColorToGreenEqual2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;lt2&amp;quot; value=&amp;quot;divColorToGreenLess2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;even2&amp;quot; value=&amp;quot;divColorToGreenEven&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;odd2&amp;quot; value=&amp;quot;divColorToGreenOdd&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;olivenot&amp;quot; value=&amp;quot;not olive&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;header1&amp;quot; value=&amp;quot;header1&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;header2&amp;quot; value=&amp;quot;header2&amp;quot;/&amp;gt;
    &amp;lt;Div&amp;gt;&amp;lt;/Div&amp;gt;
    &amp;lt;Div&amp;gt;&amp;lt;/Div&amp;gt;
    &amp;lt;Div class=&amp;quot;cls&amp;quot;&amp;gt;&amp;lt;/Div&amp;gt;
    &amp;lt;Div&amp;gt;&amp;lt;/Div&amp;gt;
    &amp;lt;Div&amp;gt;&amp;lt;/Div&amp;gt;

    &amp;lt;H1&amp;gt;Header 1&amp;lt;/H1&amp;gt;
    &amp;lt;H2&amp;gt;Header 2&amp;lt;/H2&amp;gt;
    &amp;lt;H3&amp;gt;Header 3&amp;lt;/H3&amp;gt;
    &amp;lt;H4&amp;gt;Header 4&amp;lt;/H4&amp;gt;
    &amp;lt;H5&amp;gt;Header 5&amp;lt;/H5&amp;gt;
    &amp;lt;H6&amp;gt;Header 6&amp;lt;/H6&amp;gt;
      
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个有趣的slideup and down 小案例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;

&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    &amp;lt;/style&amp;gt;
     &amp;lt;script src=&amp;quot;jquery-2.1.3.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
     &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
         $(document).ready(function () {
             $(&#39;#message1&#39;).css({ &#39;backgroundColor&#39;: &#39;#f00&#39;, &#39;text-align&#39;: &#39;center&#39;,&#39;width&#39;:&#39;200px&#39; }).hide();
             $(&amp;quot;#message2&amp;quot;).css({ &#39;backgroundColor&#39;: &#39;gray&#39;, &#39;text-align&#39;: &#39;center&#39;,&#39;width&#39;: &#39;200px&#39; }).click(function () {
                 $(this).slideUp();
                 $(&amp;quot;#message1&amp;quot;).slideDown();
             });
         });
     &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p id=&amp;quot;message1&amp;quot;&amp;gt;Welome to My Blog&amp;lt;/p&amp;gt;

&amp;lt;p id=&amp;quot;message2&amp;quot;&amp;gt;Welcome to My Facebook&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8： 评分和addClass&lt;/p&gt;

&lt;p&gt;.end()断链的使用，之所以要断链也是因为返回来的是集合，而不是原先的对象
注意：
      //测试开关灯
      //隐含着规律是：jquery获得的都是集合的元素
    //做判断一定得是 $(function(){})里面中&lt;/p&gt;

&lt;p&gt;五角星是直接输入，而不是通过图片&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;  test  the start mark&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

      // 测试评分
      $(function(){
        $(&#39;#tb td&#39;).mouseover(function(){
            //$(this).prevall().css(&#39;backgroundcolor&#39;,&#39;red&#39;);
            $(this).text(&#39;○&#39;).prevall().text(&#39;○&#39;).end().nextall().text(&#39;☆&#39;);
        });
        $(&#39;#tb td&#39;).mouseout(function()
        {
          $(&#39;#tb td&#39;).text(&#39;☆&#39;);
        });
      });
    &amp;lt;/script&amp;gt;

    
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      //测试开关灯
      //隐含着规律是：jquery获得的都是集合的元素
    //做判断一定得是 $(function(){})里面中
    $(function(){
      if($(&#39;#btn&#39;).length&amp;gt;0)
        {
          alert(&#39;存在id=#tb的标签&#39;);
        }else
        {
          alert(&#39;不存在id=#tb的标签&#39;);
        }
        $(&#39;#btnopen&#39;).click(function(){
          $(&#39;body&#39;).addclass(&#39;cls&#39;);
        });
        $(&#39;#btnclose&#39;).click(function(){
          $(&#39;body&#39;).removeclass(&#39;cls&#39;);
        });
        $(&#39;#btncloseopen&#39;).click(function(){
          if($(&#39;body&#39;).hasclass(&#39;cls&#39;))
            {
                $(&#39;body&#39;).removeclass(&#39;cls&#39;);
            }else
            {
                $(&#39;body&#39;).addclass(&#39;cls&#39;);

            }
        });
        $(&#39;#btncloseopen2&#39;).click(function(){
            $(&#39;body&#39;).toggleclass(&#39;cls&#39;);
        });

    });


    &amp;lt;/script&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      .cls
      {
        background-color:black;
      }
      td
      {
        border:1px solid red;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;table id=&amp;quot;tb&amp;quot; style=&amp;quot;width:250px;height:20px;text-align:center; font-size:20px ;border:1px solid black;cursor:pointer&amp;quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;☆&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;☆&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;☆&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;☆&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;☆&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;input type=&#39;button&#39; name=&amp;quot;hello&amp;quot; value=&amp;quot;hello&amp;quot; id=&amp;quot;btn&amp;quot;/&amp;gt;
    &amp;lt;input type=&#39;button&#39; name=&amp;quot;open&amp;quot; value=&amp;quot;turn on the light&amp;quot; id=&amp;quot;btnopen&amp;quot;/&amp;gt;
    &amp;lt;input type=&#39;button&#39; name=&amp;quot;close&amp;quot; value=&amp;quot;turn off the light&amp;quot; id=&amp;quot;btnclose&amp;quot;/&amp;gt;
    &amp;lt;input type=&#39;button&#39; name=&amp;quot;openclose&amp;quot; value=&amp;quot;turn off|on the light&amp;quot; id=&amp;quot;btncloseopen&amp;quot;/&amp;gt;
    &amp;lt;input type=&#39;button&#39; name=&amp;quot;openclose2&amp;quot; value=&amp;quot;turn off|on the light2&amp;quot; id=&amp;quot;btncloseopen2&amp;quot;/&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;两个综合实验：&lt;/p&gt;

&lt;p&gt;case1: 数组 练习join()
append()
sort()
splice()
hover()悬停事件
concat()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;  test  the start mark&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;!--1 touppercase--&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      .hover
      {
          background-color:red;
          font-size:24px;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        //核心：touppercase
        // Good!  Let the array become beautiful
        var namePostion=$(&#39;#names&#39;); 
        var Member=[&#39;basket&#39;,&#39;foot&#39;,&#39;tennis&#39;,&#39;running&#39;,&#39;pingpong&#39;,&#39;net&#39;];
        // map() 迭代数组中每个元素  并为每个元素分别调用一次回调函数
        Member =$.map(Member,function(value,index){
          return(index+1+&#39;.&#39;+value.toUpperCase());
        });
        $.each(Member,function(index,value){
          namePostion.append($(&#39;&amp;lt;Li class=&amp;quot;sport&amp;quot;&amp;gt;&#39;+value+&#39;&amp;lt;/Li&amp;gt;&#39;));
        });

        //使用了悬停事件
        $(&#39;.sport&#39;).hover(function(){
           //   alert(&#39;ok&#39;);
              $(this).addClass(&#39;hover&#39;);
        },function(){
              $(this).removeClass(&#39;hover&#39;);
           //   alert(&#39;byel&#39;);
        });

      })
    &amp;lt;/script&amp;gt;
    &amp;lt;!--2 grep--&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      #All
      {
        background-color:green;

      }
      #Part
      {
        background-color:gray;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        var Member=[&#39;basket&#39;,&#39;foot&#39;,&#39;tennis&#39;,&#39;running&#39;,&#39;pingpong&#39;,&#39;net&#39;];
        //一定要注意在p和#All不要加入空格
        // join通过&amp;lt;br&amp;gt;来划分数组中的元素
        $(&#39;p#All&#39;).append(Member.join(&#39;&amp;lt;br/&amp;gt;&#39;));
        //grep() 分析数组的所有元素，把不想要的元素过滤掉。
        Member = $.grep(Member,function(value){
          return value.length &amp;gt; 6;
        });
        $(&#39;p#Part&#39;).append(Member.join(&#39;&amp;lt;br/&amp;gt;&#39;));
      });


    &amp;lt;/script&amp;gt;

    &amp;lt;!--3 join sort--&amp;gt;

    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      
      .All
      {
        background-color:red;
      }
      .Part
      {
        background-color:gray;
      }
      .AllNumber
      {
        background-color:blue;
      }
      .PartNumber
      {
        background-color:lime;
      }
    &amp;lt;/style&amp;gt;



    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        var Member=[&#39;basket&#39;,&#39;foot&#39;,&#39;tennis&#39;,&#39;running&#39;,&#39;pingpong&#39;,&#39;net&#39;];
        //重复的一个练习
        $(&#39;p.All&#39;).append(Member.join(&#39;&amp;lt;Br&amp;gt;&#39;));
        $(&#39;p.Part&#39;).append(Member.sort().join(&#39;&amp;lt;/Br&amp;gt;&#39;));

        var Number1 = [12,43,2,34,6,34];
        $(&#39;p.AllNumber&#39;).append(Number1.join(&#39;&amp;lt;Br/&amp;gt;&#39;));

        // a b 两个值 进行比较  大的那个放在后排
        Number1 =  Number1.sort(function(a,b){
          return a-b;
        });
        $(&#39;p.partNumber&#39;).append(Number1.join(&#39;&amp;lt;Br/&amp;gt;&#39;));
        
      });

    &amp;lt;/script&amp;gt;

    &amp;lt;!--4 splice--&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
     
      .Part1
      {
        background-color:lime;
      }

      .Remain
      {
        background-color:red;
      }
    &amp;lt;/style&amp;gt;



    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

      $(function(){
        var Member=[&#39;basket&#39;,&#39;foot&#39;,&#39;tennis&#39;,&#39;running&#39;,&#39;pingpong&#39;,&#39;net&#39;];
        //第一个参数为索引开始   第二个参数为删除的个数     splice作用返回前两个成员到Filter数组
        var Filter=Member.splice(0,2);
        $(&#39;p.Part1&#39;).append(Filter.join(&#39;&amp;lt;Br/&amp;gt;&#39;));
        $(&#39;p.Remain&#39;).append(Member.join(&#39;&amp;lt;Br/&amp;gt;&#39;));
      })

    &amp;lt;/script&amp;gt;

    &amp;lt;!--5  concat --&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    
      .First
      {
        background-color:lime;
      }
      .Last
      {
        background-color:gray;
      }
      .Whole
      {
        background-color:red;
      }
    &amp;lt;/style&amp;gt;



    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        var first=[&#39;basket&#39;,&#39;foot&#39;,&#39;tennis&#39;];
        var last=[&#39;running&#39;,&#39;pingpong&#39;,&#39;net&#39;];
        $(&#39;p.First&#39;).append(first.join(&#39;&amp;lt;Br/&amp;gt;&#39;));
        $(&#39;p.Last&#39;).append(last.join(&#39;&amp;lt;Br/&amp;gt;&#39;));
        var whole=first.concat(last);
        $(&#39;p.Whole&#39;).append(whole.join(&#39;&amp;lt;Br/&amp;gt;&#39;));
      });

    &amp;lt;/script&amp;gt;


    &amp;lt;!--6  Json sort--&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      .All1
      {
        background-color:green;
      }

    
    &amp;lt;/style&amp;gt;



    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        var students=[{Name:&#39;Qianqian&#39;,Role:&#39;Administrator&#39;,Age:&#39;45&#39;},
          {Name:&#39;Lilei&#39;,Role:&#39;Programmer&#39;,Age:&#39;15&#39;},
          {Name:&#39;Dongyuliang&#39;,Role:&#39;Seller&#39;,Age:&#39;25&#39;},
          {Name:&#39;LiFeng&#39;,Role:&#39;manager&#39;,Age:&#39;25&#39;},
          {Name:&#39;zhaoli&#39;,Role:&#39;Architector&#39;,Age:&#39;35&#39;}
        ];

        //有点类似 Java中的treeset的作用  需要设置一个比较器
        students=students.sort(function(studnetA,studentB){
          if(studnetA.name&amp;gt;studentB.name){
            return 1;
          }else if(studnetA.name &amp;lt; studentB.name)
          {
            return -1;
          }else
          {
            return 0;
          }
        });
        $.each(students,function(index,value){
          $(&#39;p.All1&#39;).append(&#39;&amp;lt;Tr&amp;gt;&amp;lt;Td&amp;gt;&amp;gt;&#39;+value.Name+&#39;&amp;lt;/Td&amp;gt;&amp;lt;Td&amp;gt;&#39;+value.Role+&#39;&amp;lt;/Td&amp;gt;&amp;lt;Td&amp;gt;&#39;+value.Age+&#39;&amp;lt;/Td&amp;gt;&amp;lt;/Tr&amp;gt;&#39;);
        });
      });

    &amp;lt;/script&amp;gt;

  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;p id=&amp;quot;names&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;

    &amp;lt;hr/&amp;gt;
    &amp;lt;H3&amp;gt; Member Name&amp;lt;/H3&amp;gt;
    &amp;lt;P id=&amp;quot;All&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt; Part Name&amp;lt;/H3&amp;gt;
    &amp;lt;P id=&amp;quot;Part&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;Hr/&amp;gt;

    &amp;lt;H3&amp;gt;Not sort string array&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;All&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt; sort string array&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;Part&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt;Not sort number&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;AllNumber&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt; sort number&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;PartNumber&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;

    &amp;lt;Hr/&amp;gt;
    &amp;lt;H3&amp;gt;get the  Filer array&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;Part1&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt;get the remain array&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;Remain&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;

    &amp;lt;Hr/&amp;gt;
    &amp;lt;H3&amp;gt;Get the First part&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;First&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt;Get the Last part&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;Last&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;H3&amp;gt;Get the Whole part&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;Whole&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;


    &amp;lt;Hr&amp;gt;
    &amp;lt;H3&amp;gt;Member Info&amp;lt;/H3&amp;gt;
    &amp;lt;P class=&amp;quot;All1&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;


  &amp;lt;/Body&amp;gt;

&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;case2: 事件触发&lt;/p&gt;

&lt;p&gt;bind()
unbind()
trigger()
多类的设置 class=&amp;rdquo;  &amp;ldquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;  test  the common jQuery event &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;!--1  trigger   bind  unbind--&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      .Red
      {
          color:red;
      }
      .Green
      {
        color:green;
      }
      .unbind
      {
        color:lime
      }
      .buttons
      {
        width:150px;
        height:20px;
        margin:5px;
        border:2px solid;
        float:left;
        font-weight:bold;
        background-color:gray;
      }
      .Down
      {
        color:green;
      }
      .Up
      {
        color:red;
      }
      .Over
      {
        color:lime;
      }
      .Mouses
      {
        width:150px;
        height:20px;
        margin:5px;
        border:2px solid;
        float:left;
        font-weight:bold;
        background-color:gray;
      }

    &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      //可不敢再犯这个错误
      //$(&#39;.button&#39;).bind(&#39;click&#39;,function(){
    $(function(){
       $(&#39;.buttons&#39;).bind(&#39;click&#39;,function(){
        alert(&#39;You have clicked &#39;+$(this).text()); //innerText()
        // trigger without click !!!  automated;
      //可不敢再犯这个错误
        //$(.Green).trigger(&#39;click&#39;);
       // $(&#39;.Green&#39;).trigger(&#39;click&#39;);

       // unbindf test
        $(&#39;.Unbind&#39;).bind(&#39;click&#39;,function(){
          alert(&#39;You have clicked the&#39;+$(this).text()+&#39;&amp;lt;Br/&amp;gt;After that the button will unbind the click event!&#39;);
          $(&#39;.Unbind&#39;).unbind(&#39;click&#39;);

        })
      });
       
      //mouse event
      $(&#39;.Mouses&#39;).bind(&#39;mousedown&#39;,function(){
          alert(&#39;your mouse have been pressed down&#39;+$(this).text());
      });

      $(&#39;.Mouses&#39;).bind(&#39;mouseup&#39;,function(){
          alert(&#39;your mouse have been pressed up&#39;+$(this).text());
      });

      $(&#39;.Mouses&#39;).bind(&#39;mouseover&#39;,function(){
          alert(&#39;your mouse have been pressed over&#39;+$(this).text());
      });


      //focus test
      $(&#39;#btn&#39;).focus(function(){
        alert(&#39;ol&#39;);
        $(&#39;#btn&#39;).html(&#39;&amp;lt;Font color=&amp;quot;red&amp;quot;&amp;gt;&amp;lt;Strong&amp;gt;Focus&amp;lt;/Strong&amp;gt;&amp;lt;/Font&amp;gt;&#39;);
      });
      $(&#39;#btn&#39;).blur(function(){
        alert(&#39;fuck&#39;);
        $(&#39;#btn&#39;).html(&#39;&amp;lt;Font color=&amp;quot;gray&amp;quot;&amp;gt;&amp;lt;Italic&amp;gt;Focus&amp;lt;/Italic&amp;gt;&amp;lt;/Font&amp;gt;&#39;);
      });

       
    });
    &amp;lt;/script&amp;gt;



  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;H3&amp;gt;Test bind and trigger&amp;lt;/H3&amp;gt;
    &amp;lt;!--Multiple classes !!!　Take Note--&amp;gt;
    &amp;lt;Span class=&amp;quot;Red buttons&amp;quot;&amp;gt;Red&amp;lt;/Span&amp;gt;
    &amp;lt;Span class=&amp;quot;Green buttons&amp;quot;&amp;gt;Green&amp;lt;/Span&amp;gt;
    &amp;lt;Span class=&amp;quot;Unbind buttons&amp;quot;&amp;gt;Unbind it&amp;lt;/Span&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;hr/&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;H3&amp;gt;Test bind and trigger&amp;lt;/H3&amp;gt;
    &amp;lt;!--Multiple classes !!!　Take Note--&amp;gt;
    &amp;lt;Span class=&amp;quot;Mouses Down&amp;quot;&amp;gt;Mouse Down&amp;lt;/Span&amp;gt;
    &amp;lt;Span class=&amp;quot;Mouses Up&amp;quot;&amp;gt;Mouse Up&amp;lt;/Span&amp;gt;
    &amp;lt;Span class=&amp;quot;Mouses Over&amp;quot;&amp;gt;Mouse over&amp;lt;/Span&amp;gt;

    &amp;lt;Br/&amp;gt;
    &amp;lt;hr/&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;H3&amp;gt;Test focus and blur&amp;lt;/H3&amp;gt;
    &amp;lt;!--     Input cannot  html  --&amp;gt;
    &amp;lt;Input type=&amp;quot;text&amp;quot; name=&amp;quot;mouse&amp;quot; id=&amp;quot;btn&amp;quot; values=&amp;quot;focus&amp;quot;/&amp;gt;

    &amp;lt;/Div&amp;gt;
    


  &amp;lt;/Body&amp;gt;

&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>jQuery10-18节笔记代码April5th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/jquery10-18jie-bi-ji-dai-ma-april5th/</link>
      <pubDate>Mon, 11 May 2015 14:58:44 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/jquery10-18jie-bi-ji-dai-ma-april5th/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.rupeng.com/forum/thread-45422-1-1.html&#34; target=&#34;_blank&#34;&gt;http://www.rupeng.com/forum/thread-45422-1-1.html&lt;/a&gt; jquery1-9
1：移除元素
$(&amp;lsquo;div&amp;rsquo;).empty()  清空层中的元素
$(&amp;lsquo;div&amp;rsquo;).remove(&amp;lsquo;.cls&amp;rsquo;)   清空层中运用cls样式的元素
$(&amp;lsquo;div&amp;rsquo;).remove()  自我删除
2: select 下拉框的练习
单选移到另一个框
全选移到另一个框
option:selected表示已选中的元素
:selected表示所有选中的下列框元素，前提是select设置了 multiple=&amp;ldquo;multiple&amp;rdquo;&lt;/p&gt;

&lt;p&gt;案例1：（单选和全选）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test select and option &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot; &amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        $(&#39;#btnLeft&#39;).click(function(){
          $(&#39;#sel2 option:selected&#39;).appendTo(&#39;#sel1&#39;);
          //$(&#39;#sel1 option:selected&#39;).appendTo($(&#39;#sel2&#39;));
        });
        $(&#39;#btnRight&#39;).click(function(){
          $(&#39;#sel1 option:selected&#39;).appendTo(&#39;#sel2&#39;);
        });

        $(&#39;#btnAllRight&#39;).click(function(){
          $(&#39;#sel1 option&#39;).appendTo(&#39;#sel2&#39;);
        });

        $(&#39;#btnAllLeft&#39;).click(function(){
          $(&#39;#sel2 option&#39;).appendTo(&#39;#sel1&#39;);
        });

      })
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;


  &amp;lt;Body&amp;gt;
    &amp;lt;Select id=&amp;quot;sel1&amp;quot; multiple=&amp;quot;multiple&amp;quot; style=&amp;quot;float:left; width:400px;height:100px;&amp;quot;&amp;gt;
      &amp;lt;!--Multipel can show all the contains in the selector--&amp;gt;
      &amp;lt;Option &amp;gt; delete&amp;lt;/Option&amp;gt;
      &amp;lt;Option &amp;gt; create&amp;lt;/Option&amp;gt;
      &amp;lt;Option &amp;gt; check&amp;lt;/Option&amp;gt;
      &amp;lt;Option &amp;gt; update&amp;lt;/Option&amp;gt;
      &amp;lt;Option &amp;gt; select&amp;lt;/Option&amp;gt;
    &amp;lt;/Select&amp;gt;
    &amp;lt;!--In the div, the width:50px  then inside the div
    is 50px width,so it change the line!
    And because the float:left ,so it will try to align
    along the left--&amp;gt;
    &amp;lt;Div style=&amp;quot;float:left;width:50px&amp;quot;&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnLeft&amp;quot; value=&amp;quot;&amp;lt;&amp;quot; style=&amp;quot;width:50px&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnRight&amp;quot; value=&amp;quot;&amp;gt;&amp;quot; &amp;quot;width:50px&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnAllLeft&amp;quot; value=&amp;quot;&amp;lt;&amp;lt;&amp;quot; &amp;quot;width:50px&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnAllRight&amp;quot; value=&amp;quot;&amp;gt;&amp;gt;&amp;quot; &amp;quot;width:50px&amp;quot;/&amp;gt;

    &amp;lt;/Div&amp;gt;
    &amp;lt;Button type=&amp;quot;button&amp;quot; id=&amp;quot;btnLeft1&amp;quot; value=&amp;quot;To the left&amp;quot;&amp;gt;&amp;quot;To the left&amp;quot;&amp;lt;/Button&amp;gt;
    &amp;lt;Button type=&amp;quot;button&amp;quot; id=&amp;quot;btnRight1&amp;quot; value=&amp;quot;To the right&amp;quot;/&amp;gt;&amp;quot;To the right&amp;quot;&amp;lt;/Button&amp;gt;
    &amp;lt;Button type=&amp;quot;button&amp;quot; id=&amp;quot;btnAllLeft1&amp;quot; value=&amp;quot;All To the left&amp;quot;/&amp;gt;&amp;quot;All To the left&amp;quot;&amp;lt;/Button&amp;gt;
    &amp;lt;Button type=&amp;quot;button&amp;quot; id=&amp;quot;btnAllRight1&amp;quot; value=&amp;quot;All To the left&amp;quot;/&amp;gt;&amp;quot;All To the left&amp;quot;&amp;lt;/Button&amp;gt;
    &amp;lt;!--Because of the float:left,so selector will focuse to
        take occupy of the left position--&amp;gt;
    &amp;lt;Select id=&amp;quot;sel2&amp;quot; multiple=&amp;quot;multiple&amp;quot; style=&amp;quot;float:left; width:400px;height:100px;&amp;quot;&amp;gt;
      &amp;lt;!--&amp;lt;Select id=&amp;quot;sel2&amp;quot; multiple=&amp;quot;multiple&amp;quot;&amp;gt;--&amp;gt;
    &amp;lt;/Select&amp;gt;


  &amp;lt;/Body&amp;gt;

&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案例2：计算器&lt;/p&gt;

&lt;p&gt;使用switch &amp;hellip;case 判断选中的计算器操作符
注意：输入参数的有效性的判断。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test Calculator with the basic operator&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot; &amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        $(&#39;#equal&#39;).click(function(){
          var leftvalue=$(&#39;#one&#39;).val();
          var rightvalue=$(&#39;#two&#39;).val();
          if(leftvalue==&#39;&#39;)
          {
            console.log(&#39;The empty of the one!;&#39;);
            return;
          }
          if(rightvalue==&#39;&#39;)
          {
            console.log(&#39;The empty of the two!;&#39;);
            return;
          }
          var result=0.0;
          //alert($(&#39;#operator :selected&#39;).val());
          //alert(typeof($(&#39;#operator :selected&#39;).val()));
          switch($(&#39;#operator :selected&#39;).val())
          {
            case &#39;+&#39;:
              result=parseFloat(leftvalue)+parseFloat(rightvalue);
              break;
              case &#39;-&#39;:
result=parseFloat(leftvalue)-parseFloat(rightvalue);
              break;
             case &#39;*&#39;:
result=parseFloat(leftvalue)*parseFloat(rightvalue);
              break;
             case &#39;/&#39;:
result=parseFloat(leftvalue)/parseFloat(rightvalue);
              break;

              default:
                break;
          }
          $(&#39;#result&#39;).val(result);
        })
      })
    &amp;lt;/script&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;one&amp;quot;/&amp;gt;
    &amp;lt;Select id=&amp;quot;operator&amp;quot; style=&amp;quot; width:40px;height:30px;&amp;quot;&amp;gt;
      &amp;lt;Option&amp;gt;+&amp;lt;/Option&amp;gt;
      &amp;lt;Option&amp;gt;-&amp;lt;/Option&amp;gt;
      &amp;lt;Option&amp;gt;*&amp;lt;/Option&amp;gt;
      &amp;lt;Option&amp;gt;/&amp;lt;/Option&amp;gt;
    &amp;lt;/Select&amp;gt;
    &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;two&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;equal&amp;quot;value=&amp;quot;=&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;result&amp;quot;/&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dt&gt;4: checkbox的练习&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:disabled 属性的练习&lt;/p&gt;

&lt;p&gt;案例1： 软件安装时需要提醒用户阅读协议，一般是5s，然后才可以点击同意。&lt;/p&gt;

&lt;p&gt;注意：计时器setInterval和清除计时器clearInterval() .  回顾： setTimeout 和 clearTimeout&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test Time machine &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot; &amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        var i =5;
        var timeMeter=setInterval(function(){
          if(i&amp;gt;0)
          {
            i--;
            $(&#39;#span1&#39;).text(&#39;Please read the agreement carefully(&#39;+i+&#39;s)&#39;);
          }else
          {
            //forget clear The time meter
            clearInterval(timeMeter);
            $(&#39;#span1&#39;).text(&#39;Agree&#39;);
            $(&#39;#chk&#39;).attr(&#39;disabled&#39;,false);
          }
        },1000);
      })
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;chk&amp;quot; disabled=&amp;quot;disabled&amp;quot;&amp;gt;&amp;lt;Span id=&amp;quot;span1&amp;quot;&amp;gt;Please read the agreement carefully(5s)&amp;lt;/Span&amp;gt;
  &amp;lt;/Body&amp;gt;

&amp;lt;/Html&amp;gt;

            $(&#39;#span1&#39;).text(&#39;Agree&#39;);
            $(&#39;#chk&#39;).attr(&#39;disabled&#39;,false);
          }
        },1000);
      })
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;chk&amp;quot; disabled=&amp;quot;disabled&amp;quot;&amp;gt;&amp;lt;Span id=&amp;quot;span1&amp;quot;&amp;gt;Please read the agreement carefully(5s)&amp;lt;/Span&amp;gt;
  &amp;lt;/Body&amp;gt;

&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5:事件冒泡&lt;/p&gt;

&lt;p&gt;取消事件冒泡的方法
arguments[0].stopPropagation 或者
function(e){e.stopPropagation();}&lt;/p&gt;

&lt;p&gt;附加上图片的脱离文档流操作和一次事件&lt;/p&gt;

&lt;p&gt;但是one在jquery-1.8.3.min.js 能够试验通过 ，在2.1.3.js新版本则不行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test select and option &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot; &amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        $(&#39;#btn&#39;).click({&#39;name&#39;:&#39;xiaomin&#39;},function(e){
          alert(e.data.name) ;
        });
        $(&#39;#dv&#39;).click(function(){
          alert($(this).attr(&#39;id&#39;));
        });

        $(&#39;#ps&#39;).click(function(){
          alert($(this).attr(&#39;id&#39;));
        });
        $(&#39;#sp1&#39;).click(function(){
          alert($(this).attr(&#39;id&#39;));
          //如果加上这句话，事件就不会冒泡了
          //可不敢露了一个s
          //$(argument[0]).stopPropagation();//取消底层的事件冒泡
          arguments[0].stopPropagation();//取消底层的事件冒泡
          //方法2  function(e){e.stoppropagation();}
        });


        //Test Image
        $(document).mouseover(function(e){
          //1 脱离文档流
          //2 给定坐标
          $(&#39;img&#39;).css(&#39;position&#39;,&#39;absolute&#39;).css({&amp;quot;left&amp;quot;:e.pageX,&amp;quot;top&amp;quot;:e.pageY});
        });

        //一次事件
        $(&#39;#btnOnce&#39;).one(function(){
          alert(&#39;烟花总是灿烂，但是只开一次&#39;);
        });
      });
    &amp;lt;/script&amp;gt;

    &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;getData&amp;quot; id=&amp;quot;btn&amp;quot;/&amp;gt;
    &amp;lt;Div id=&amp;quot;dv&amp;quot; style=&amp;quot;width:300px; height:200px; border:1px solid red;&amp;quot;&amp;gt;
      &amp;lt;P id=&amp;quot;ps&amp;quot; &amp;gt;
        &amp;lt;Span id=&amp;quot;sp1&amp;quot; style=&amp;quot;width:200px; height:100px; border:1px solid yellow&amp;quot;&amp;gt; This is zone of span&amp;lt;/Span&amp;gt;
      &amp;lt;/P&amp;gt;
    &amp;lt;/Div&amp;gt;

    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnOnce&amp;quot; value=&amp;quot;onceEvent&amp;quot;/&amp;gt;
    
    &amp;lt;Img src=&amp;quot;2.png&amp;quot;/&amp;gt;
  &amp;lt;/Body&amp;gt;

&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7: replaceAll  and replaceWith&lt;/p&gt;

&lt;p&gt;repalceAll  把左边的标签替换包含右边文本的标签&lt;/p&gt;

&lt;p&gt;replaceWith 把右边的标签替换左边文本的标签&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $(&#39;#btn&#39;).click({&#39;name&#39;:&#39;xiaomin&#39;},function(e){
      alert(e.data.name) ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7.1  标签包裹&lt;/p&gt;

&lt;p&gt;1 wrap   每个p标签各自被一个 font包裹
2 wrapAll  所有p标签被一个font 包裹
3 wrapInner 每个P标签内部都有意个font标签&lt;/p&gt;

&lt;p&gt;7.2 百度搜索框&lt;/p&gt;

&lt;p&gt;focus   blur&lt;/p&gt;

&lt;p&gt;以及removeClass的操作&lt;/p&gt;

&lt;p&gt;7.3 RadioButton 的选择 :checked&lt;/p&gt;

&lt;p&gt;通过attr(&amp;lsquo;checked&amp;rsquo;,true);进行设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;
    &amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      $(function(){
        //with all label
        $(&#39;#btn1&#39;).click(function(){
          $(&#39;br&#39;).replaceWith(&#39;&amp;lt;Hr/&amp;gt;&#39;)
        });

        //replaceAll with not all labels
        $(&#39;#btn2&#39;).click(function(){
          $(&#39;&amp;lt;br/&amp;gt;&#39;).replaceAll(&#39;hr&#39;);
        });

        $(&#39;#btn3&#39;).click(function(){
          //1wrap   每个p标签各自被一个 font包裹
          //2wrapAll  所有p标签被一个font 包裹
          //3wrapInner 每个P标签内部都有意个font标签
          //$(&#39;div p&#39;).wrap(&#39;&amp;lt;Font color=&amp;quot;red&amp;quot; size=&amp;quot;8&amp;quot; &amp;gt;&amp;lt;/Font&amp;gt;&#39;);
          //$(&#39;div p&#39;).wrapAll(&#39;&amp;lt;Font color=&amp;quot;red&amp;quot; size=&amp;quot;8&amp;quot; &amp;gt;&amp;lt;/Font&amp;gt;&#39;);
          $(&#39;div p&#39;).wrapInner(&#39;&amp;lt;Font color=&amp;quot;red&amp;quot; size=&amp;quot;8&amp;quot; &amp;gt;&amp;lt;/Font&amp;gt;&#39;);
        });

        //你可以通过浏览器的探测功能，观察每一个过程html代码结构的
        //变化
        //下面代码适应所有的html文件！！！
        //只有body里面有东西都是可以的
        // 回顾： 聚焦控件联系    其实还包括focus and blur的联系
        /// 另外这些知识点统归为jQuery的时间编程
        /*
        $(&#39;body *&#39;).mouseover(function(){
          $(this).addClass(&#39;cls&#39;);
        }).mouseout(function(){
          $(this).removeClass(&#39;cls&#39;);
        });
        */


        //focus and blur
        //回顾了 事件编程 包括click  mouseover  mouseout hover悬停事件等

        // 百度搜索框的jquery实现
        //var contents=$(this).val();
        $(&#39;#baidu001&#39;).focus(function(){

          if($(this).val() ==&#39;Please input some value&#39;)
          {
            // 作用是如果当前的值为这个，那我就证明需要我输入什么
            //于是我就removeClass 然后开始写上值
            $(this).val(&#39;&#39;).removeClass(&#39;baidu&#39;);
          }
        }).blur(function(){
          if($(this).val().length==0)
          {
            //如果用户没有填写任何东西，就主动给他附上值
            $(this).val(&#39;Please input some value&#39;).addClass(&#39;baidu&#39;);
          }
        });

        $(&#39;#btnRadio&#39;).click(function(){
//          $(&#39;:radio[value=1]&#39;).attr(&#39;checked&#39;,true);
//          $(&#39;input[value=1]&#39;).attr(&#39;checked&#39;,true);
//          $(&#39;input[type=radio][value=1]&#39;).attr(&#39;checked&#39;,true);
            //$(&#39;:radio&#39;).val([&#39;1&#39;,&#39;2&#39;,&#39;6&#39;]);  必须一一对应才会被选中？
            //$(&#39;:radio&#39;).val([&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]);
          $(&#39;:radio&#39;).val([&#39;4&#39;,&#39;2&#39;,&#39;3&#39;]);// 哪个不对应上 则不选择哪个

          //也就是radiobutton是按照alue值来进行区分的


        })

      });
    &amp;lt;/script&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      .cls
      {
        background-color:red;
      }
      .baidu
      {
        background-color:gray;
      }
      div
      {
        width:300px;
        height:200px;
        background-color:green;
      }
    &amp;lt;/style&amp;gt;

  &amp;lt;/Head&amp;gt;
  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btn1&amp;quot; value=&amp;quot;with&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btn2&amp;quot; value=&amp;quot;All&amp;quot;/&amp;gt;

    &amp;lt;P&amp;gt;Good morning 1&amp;lt;/P&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;P&amp;gt;Good morning 2&amp;lt;/P&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;P&amp;gt;Good morning 3&amp;lt;/P&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;P&amp;gt;Good morning 4&amp;lt;/P&amp;gt;
    &amp;lt;Br/&amp;gt;

    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btn3&amp;quot; value=&amp;quot;packet with one font&amp;quot;/&amp;gt;
    &amp;lt;Div id=&amp;quot;dv&amp;quot;&amp;gt;
      &amp;lt;P&amp;gt; Good Afternoon&amp;lt;/P&amp;gt;
      &amp;lt;P&amp;gt; Good Afternoon&amp;lt;/P&amp;gt;
      &amp;lt;P&amp;gt; Good Afternoon&amp;lt;/P&amp;gt;
      &amp;lt;P&amp;gt; Good Afternoon&amp;lt;/P&amp;gt;
      &amp;lt;P&amp;gt; Good Afternoon&amp;lt;/P&amp;gt;
    &amp;lt;/Div&amp;gt;
    &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;baidu001&amp;quot; class=&amp;quot;baidu&amp;quot; value=&amp;quot;Please input some value&amp;quot;&amp;gt;

    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnRadio&amp;quot; value=&amp;quot;selectTheRadio&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;radio&amp;quot; name=&amp;quot;1&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt; Man
    &amp;lt;Input type=&amp;quot;radio&amp;quot; name=&amp;quot;2&amp;quot; value=&amp;quot;2&amp;quot;&amp;gt; Woman
    &amp;lt;Input type=&amp;quot;radio&amp;quot; name=&amp;quot;3&amp;quot; value=&amp;quot;3&amp;quot;&amp;gt; Secret
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8:checkbox事件bind&lt;/p&gt;

&lt;p&gt;属性选择器&lt;/p&gt;

&lt;p&gt;attr 和prop的区别和联系：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;attr: function( elem, name, value, pass ) { 
var ret, hooks, notxml, 
nType = elem.nodeType; 
// don&#39;t get/set attributes on text, comment and attribute nodes 
if ( !elem || nType === 3 || nType === 8 || nType === 2 ) { 
return; 
} 
if ( pass &amp;amp;&amp;amp; jQuery.isFunction( jQuery.fn[ name ] ) ) { 
return jQuery( elem )[ name ]( value ); 
} 
// Fallback to prop when attributes are not supported 
if ( typeof elem.getAttribute === &amp;quot;undefined&amp;quot; ) { 
return jQuery.prop( elem, name, value ); 
} 
notxml = nType !== 1 || !jQuery.isXMLDoc( elem ); 
// All attributes are lowercase 
// Grab necessary hook if one is defined 
if ( notxml ) { 
name = name.toLowerCase(); 
hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook ); 
} 
if ( value !== undefined ) { 
if ( value === null ) { 
jQuery.removeAttr( elem, name ); 
return; 
} else if ( hooks &amp;amp;&amp;amp; &amp;quot;set&amp;quot; in hooks &amp;amp;&amp;amp; notxml &amp;amp;&amp;amp; (ret = hooks.set( elem, value, name )) !== undefined ) { 
return ret; 
} else { 
elem.setAttribute( name, value + &amp;quot;&amp;quot; ); 
return value; 
} 
} else if ( hooks &amp;amp;&amp;amp; &amp;quot;get&amp;quot; in hooks &amp;amp;&amp;amp; notxml &amp;amp;&amp;amp; (ret = hooks.get( elem, name )) !== null ) { 
return ret; 
} else { 
ret = elem.getAttribute( name ); 
// Non-existent attributes return null, we normalize to undefined 
return ret === null ? 
undefined : 
ret; 
} 
}

prop:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;javascript
prop: function( elem, name, value ) {
var ret, hooks, notxml,
nType = elem.nodeType;
// don&amp;rsquo;t get/set properties on text, comment and attribute nodes
if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
return;
}
notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
if ( notxml ) {
// Fix name and attach hooks
name = jQuery.propFix[ name ] || name;
hooks = jQuery.propHooks[ name ];
}
if ( value !== undefined ) {
if ( hooks &amp;amp;&amp;amp; &amp;ldquo;set&amp;rdquo; in hooks &amp;amp;&amp;amp; (ret = hooks.set( elem, value, name )) !== undefined ) {
return ret;
} else {
return ( elem[ name ] = value );
}
} else {
if ( hooks &amp;amp;&amp;amp; &amp;ldquo;get&amp;rdquo; in hooks &amp;amp;&amp;amp; (ret = hooks.get( elem, name )) !== null ) {
return ret;
} else {
return elem[ name ];
}
}
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;


attr方法里面，最关键的两行代码，elem.setAttribute( name, value + “” )和ret = elem.getAttribute( name )，很明显的看出来，使用的DOM的API setAttribute和getAttribute方法操作的属性元素节点。而prop方法里面，最关键的两行代码，return ( elem[ name ] = value )和return elem[ name ]，你可以理解成这样document.getElementById(el)[name] = value，这是转化成JS对象的一个属性。(Perfect的确这样，有两种方法一种是[] 另外一种是get(0))


分别做了文本框和checkbox的测试：
1：在遇到要获取或设置checked,selected,readonly和disabled等属性时，用prop方法显然更好
2：需要true or false的时候 最好使用 prop ，因为他返回的是true or false
3：其他情况再考虑attr, checkbox返回的是checked

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html&gt;
&lt;head lang=&#34;en&#34;&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style type=&#34;text/css&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .cls
    {
        width: 300px;
        height: 200px;
        background-color: red;
    }
&amp;lt;/style&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;src=&amp;quot;jquery-2.1.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$(function(){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#btn&#39;).click(function(){

    //$(&#39;div&#39;).empty();//清空层中的元素
    //$(&#39;div&#39;).remove();//层没了,自杀


    $(&#39;div&#39;).remove(&#39;.cls&#39;);//移除应用了cls样式的层;
});
var el=$(&#39;#atr1&#39;);
console.log(&#39;attr :&#39;+el.attr(&#39;style&#39;)); //undefined 
console.log(&#39;prop() :&#39;+el.prop(&#39;style&#39;)); //CSSStyleDeclaration对象 
console.log(&#39;prop() :&#39;+document.getElementById(&#39;atr1&#39;).style); //CSSStyleDeclaration对象 
//attr 定义 只能attr(&#39;&#39;)去掉用  attr是一种jQuery的对象操作
//prop 定义 只能prop(&#39;&#39;)去掉用  prop是一种JSDom的对象操作
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;el.attr(&amp;lsquo;abc&amp;rsquo;,&amp;lsquo;111&amp;rsquo;);
console.log(&amp;lsquo;attr el:abc&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.attr(&amp;lsquo;abc&amp;rsquo;));
console.log(&amp;lsquo;prop el:abc&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.prop(&amp;lsquo;abc&amp;rsquo;));
     el.prop(&amp;lsquo;def&amp;rsquo;,&amp;lsquo;2222&amp;rsquo;);
console.log(&amp;lsquo;attr el:def&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.attr(&amp;lsquo;def&amp;rsquo;));
console.log(&amp;lsquo;prop el:def&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.prop(&amp;lsquo;def&amp;rsquo;));&lt;/p&gt;

&lt;p&gt;// prop显示的checked之类的是  true or false 而不是attr的undefined or checked
var ek=$(&amp;lsquo;#chk1&amp;rsquo;);
console.log(&amp;lsquo;attr el:checked&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.attr(&amp;lsquo;checked&amp;rsquo;));
console.log(&amp;lsquo;prop el:checked&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.prop(&amp;lsquo;checked&amp;rsquo;));
console.log(&amp;lsquo;attr el:disabled&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.attr(&amp;lsquo;disabled&amp;rsquo;));
console.log(&amp;lsquo;prop() 的方法叫合理些&amp;rsquo;);
console.log(&amp;lsquo;prop el:disabled&amp;mdash;&amp;mdash;&amp;ndash;&amp;lsquo;+el.prop(&amp;lsquo;disabled&amp;rsquo;));&lt;/p&gt;

&lt;p&gt;});
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;input type=&#34;button&#34; name=&#34;name&#34; value=&#34;删除元素&#34; id=&#34;btn&#34;/&gt;
&lt;div class=&#34;cls&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;文本框&amp;quot; id=&amp;quot;atr1&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;ceshi&amp;quot; id=&amp;quot;chk1&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

checkbox的测试案例：
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt; &lt;/Title&gt;
    &lt;Meta charset=&#34;UTF-8&#34;&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34;&gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34; &gt;
      $(function(){
        $(&amp;lsquo;#btnAll&amp;rsquo;).click(function(){
          //可以但是不好用
          //$(&amp;lsquo;#dv :checkbox&amp;rsquo;).attr(&amp;lsquo;checked&amp;rsquo;,&amp;lsquo;checked&amp;rsquo;);
          //$(&amp;lsquo;#dv :checkbox&amp;rsquo;).attr(&amp;lsquo;checked&amp;rsquo;,true);
          //$(&amp;lsquo;div :checkbox&amp;rsquo;).attr(&amp;lsquo;checked&amp;rsquo;,true);
          $(&amp;lsquo;div :checkbox&amp;rsquo;).prop(&amp;lsquo;checked&amp;rsquo;,true);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    });
  $(&#39;#btnNot&#39;).click(function(){
    //1
      //$(&#39;#dv :checkbox&#39;).removeAttr(&#39;checked&#39;);
    //2
      //$(&#39;#dv :checkbox&#39;).attr(&#39;checked&#39;,false);
      //$(&#39;div :checkbox&#39;).attr(&#39;checked&#39;,false);
      $(&#39;div :checkbox&#39;).prop(&#39;checked&#39;,false);
    });
  $(&#39;#btnInverse&#39;).click(function(){
    //$(&#39;#dv :checkbox&#39;).each(function(){
    $(&#39;div :checkbox&#39;).each(function(){
      //错误1
      //$(this).setAttribute(&#39;checked&#39;,!$(this)[&#39;checked&#39;]);
      //不行
      //$(this).setAttribute(&#39;checked&#39;,!$(this).attr(&#39;checked&#39;));
      //思路对了！！但是就是不行！！是不是跟编码有关系
      //$(this).attr(&#39;checked&#39;,!$(this).attr(&#39;checked&#39;));
      $(this).prop(&#39;checked&#39;,!$(this).prop(&#39;checked&#39;));
    });
  });

  });
&amp;lt;/script&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
  /*
  div
  {
    margin:5px;
    background-color:green;
  }
  */
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;
    &lt;Div id=&#34;btnDv&#34;&gt;
      &lt;Input type=&#34;button&#34; value=&#34;allSelected&#34; id=&#34;btnAll&#34;/&gt;
      &lt;Input type=&#34;button&#34; value=&#34;allNotSelected&#34; id=&#34;btnNot&#34;/&gt;
      &lt;Input type=&#34;button&#34; value=&#34;allSelectedInverse&#34; id=&#34;btnInverse&#34;/&gt;
    &lt;/Div&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Div id=&amp;quot;dv&amp;quot;&amp;gt;
  &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;1&amp;quot; id=&amp;quot;btnEat&amp;quot;/&amp;gt;eating
  &amp;lt;Input type=&amp;quot;checkbox&amp;quot;  name=&amp;quot;name&amp;quot; value=&amp;quot;2&amp;quot; id=&amp;quot;btnSleep&amp;quot;/&amp;gt;sleeping
  &amp;lt;Input type=&amp;quot;checkbox&amp;quot;  name=&amp;quot;name&amp;quot; value=&amp;quot;3&amp;quot; id=&amp;quot;btnPlay&amp;quot;/&amp;gt;playing
&amp;lt;/Div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;最终通过prop解决了属性问题。attr在2.1.3.js是有问题的


另外2.1.3.js还存在toggle的点击切换问题，在1.8.3测试中未发现问题，类似先前的one点击事件

TestBind.html: 用于测试toggle

但是在2.1.3无法切换，在1.8.3可以

本想通过下述代码 实现toggle，却发现无法返回到first当中
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;javascript
    $(&amp;lsquo;#btn&amp;rsquo;).click()
     {
       alert(&amp;lsquo;first&amp;rsquo;);
       $(this).unbind().bind(&amp;lsquo;click&amp;rsquo;,function(){
         alert(&amp;lsquo;second&amp;rsquo;);
         $(this).unbind().bind(&amp;lsquo;click&amp;rsquo;,function(){
           alert(&amp;lsquo;third&amp;rsquo;);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     });
   });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;




9: 文本输入框的测试

1:如果文本框没有输入文本，那么鼠标离开变成红色


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt;Test select and option &lt;/Title&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34; &gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34;&gt;
      $(function(){
        $(&amp;lsquo;input[type=text]&amp;lsquo;).blur(function(){
          if($(this).val().length==0)
          {
            $(this).css(&amp;lsquo;backgroundColor&amp;rsquo;,&amp;lsquo;red&amp;rsquo;);
          }else
          {
            $(this).css(&amp;lsquo;backgroundColor&amp;rsquo;,&amp;ldquo;);
          }
        });
      });
    &lt;/script&gt;
    &lt;style type=&#34;text/css&#34;&gt;
      div
      {
        width:100px;
        float:left;
      }
      input
      {
        width:100px;
        margin:10px;
      }
    &lt;/style&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Head&gt;
  &lt;Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;Div id=&#34;dv&#34; &gt;
    &lt;Input type=&#34;text&#34;/&gt;
    &lt;Input type=&#34;text&#34;/&gt;
    &lt;Input type=&#34;text&#34;/&gt;
    &lt;Input type=&#34;text&#34;/&gt;
    &lt;Input type=&#34;text&#34;/&gt;
  &lt;/Div&gt;
  &lt;/Body&gt;
&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

10:获取鼠标的点击

左键：1
中键：2
右键：3
e.which 返回其值

注意：js中使用 backgroundColor:pink     css中使用background-color:pink;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt;Test select and option &lt;/Title&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34; &gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34;&gt;
      $(function(){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $(&#39;#countMouse&#39;).click(function(e){
      //获得鼠标敲击的值
      //左键 1
      //中键 2
      //右键 3
      alert(e.which);
    });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--可不敢再犯这种backgroundColor:pink的错误--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;Div id=&#34;countMouse&#34; style=&#34;width:300px;height:200px;background-color:pink&#34;&gt;
    &lt;/Div&gt;
  &lt;/Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11.  隐藏和显示


1:  标签显示和隐藏
    show
     hide
    toggle  在2.1.3中不行

2:slide 幻灯片
     slideDown
    slideUp
   slideToggle

3: Fade 渐进
      FadeIn
     FadeOut
      FadeToggle


1000 代表1000ms  
一般分为三等 slow  normal   fast  ，默认是normal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Meta charset=&#34;utf-8&#34;&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  $(function(){
    $(&#39;#btnShow&#39;).click(function(){
     // $(&#39;div&#39;).show(1000);
     //slide 分为三个 
     $(&#39;div&#39;).slideDown(1000);
     //$(&#39;div&#39;).fadeIn(1000);
    });
    $(&#39;#btnHide&#39;).click(function(){
     // $(&#39;div&#39;).hide(1000);
      //在1.8.3.min效果一样

      $(&#39;div&#39;).slideUp(1000);

     //Fade in out toggle 都可以实现
     //$(&#39;div&#39;).fadeOut(1000);
    });
    $(&#39;#btnToggle&#39;).click(function(){
      $(&#39;div&#39;).slideToggle(1000);
      //$(&#39;div&#39;).fadeToggle(1000);
    });

  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Head&gt;
  &lt;Body&gt;
      &lt;Input type=&#34;button&#34; id=&#34;btnShow&#34; value=&#34;show&#34;/&gt;
      &lt;Input type=&#34;button&#34; id=&#34;btnHide&#34; value=&#34;hide&#34;/&gt;
      &lt;Input type=&#34;button&#34; id=&#34;btnToggle&#34; value=&#34;toggle&#34;/&gt;
      &lt;Div id=&#34;dv&#34; style=&#34;width:400px;height:400px;background-color:pink&#34;&gt;
      &lt;/Div&gt;
  &lt;/Body&gt;
&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
12.NBA东西部篮球队 

a.通过unbind().bind()来绑定已经解绑的标签事件
b.attr 包含很多属性 比如style（主要是一些背景颜色  border   width heigth 等）

功能是：
a.鼠标经过时候变沉红色 其他的为白色背景
b.鼠标点击后则把该只球队剔除，并放在退赛球队中

bug: 
   东部球队在剔除后，分配到outEast中，mouseover的鼠标移动事件无法实现，然而西部却是可以。。。。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Meta charset=&#34;utf-8&#34;&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  $(function(){
    $(&#39;#east li&#39;).mouseover(function(){
      $(this).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;);
      //alert($(this).style);
    }).click(function()
       {
         //$(this).removeAttr(&#39;style&#39;).unbind().appendTo(&#39;#outerEast&#39;);
         //$(this).attr(&#39;backgroundColor&#39;,&#39;blue&#39;).appendTo(&#39;#outerEast&#39;);
         //$(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).unbind().appendTo(&#39;#outerEast&#39;);
         //$(this).attr(&#39;backgroundColor&#39;,&#39;blue&#39;).unbind().appendTo(&#39;#outerEast&#39;);
         //可不敢犯这个错误，如果不加end()的断链操作，会把所有的siblings()元素
         //提交到下边哐当中！
         //$(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;).end().unbind().appendTo(&#39;#outerEast&#39;);
         //在appendTo的事件发生之后（发展的角度来看）
         //但是发现不行，于是留下一个疑问

         //现在明白了既然unbind就得需要用bind()来解决
         //$(this).unbind().appendTo(&#39;#outerEast&#39;).attr(&#39;onmouseover&#39;,&#39;&#39;).mouseover(function(){
         $(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;).end().unbind().appendTo(&#39;#outerEast&#39;).bind(&#39;mouseover&#39;,function(){
           //错误阿！！！居然把所有的其他都给功能禁用了！
         //$(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;).unbind().end().appendTo(&#39;#outerEast&#39;).bind(&#39;mouseover&#39;,function(){
           $(this).css(&#39;backgroundcolor&#39;,&#39;blue&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;);
         });
       });
    $(&#39;#west li&#39;).mouseover(function(){
      $(this).css(&#39;backgroundColor&#39;,&#39;red&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;);
    }).click(function()
       {
         //可不敢再犯这个错误
         //attr不止一个属性，不仅仅是style
         //而css只是设置界面属性
         //$(this).removeAttr(&#39;style&#39;).unbind().appendTo(&#39;#outeWest&#39;);

         //可行阿！！！试验了一个小时   bind之后再到之后的地方unbind即可
         //$(this).unbind().appendTo(&#39;#outerWest&#39;).bind(&#39;mouseover&#39;,function(){
         //好处是直接显示蓝色
         $(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;).end().unbind().appendTo(&#39;#outerWest&#39;).bind(&#39;mouseover&#39;,function(){
          $(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).siblings().css(&#39;backgroundColor&#39;,&#39;&#39;);
         });
         //$(this).attr(&#39;backgroundColor&#39;,&#39;blue&#39;).unbind().appendTo(&#39;#outerWest&#39;);
         //attr只会保存着第一个backgroundcolor的值！
       });

       //增加一个功能，可以返回到原先的竞争队列中
       // 先清空一下试试
     //$(&#39;#outerEast li&#39;).click(function(){

     /*
     $(&#39;#outerEast li&#39;).attr(&#39;onclick&#39;,&#39;&#39;).click(function(){
       $(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).bind(&#39;click&#39;,function(){
        $(this).css(&#39;backgroundColor&#39;,&#39;red&#39;).appendTo($(&#39;#east&#39;));
       });
     });

     $(&#39;#outerEast li&#39;).attr(&#39;onclick&#39;,&#39;&#39;).click(function(){
       $(this).css(&#39;backgroundColor&#39;,&#39;blue&#39;).bind(&#39;click&#39;,function(){
        $(this).css(&#39;backgroundColor&#39;,&#39;red&#39;).appendTo($(&#39;#east&#39;));
       });
     });
     */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//如果onclick事件原先有值，要先清空，再用click(
//为什么？
      });
    &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;
    &lt;H2&gt;The basketball team&lt;/H2&gt;
    &lt;Ol id=&#34;east&#34;&gt;
      &lt;H3&gt;The East Basketbal Teams&lt;/H3&gt;
      &lt;Li&gt;亚特兰大 老鹰&lt;/Li&gt;
      &lt;Li&gt;芝加哥 公牛&lt;/Li&gt;
      &lt;Li&gt;波士顿 凯尔特人&lt;/Li&gt;
      &lt;Li&gt;夏洛特 黄蜂&lt;/Li&gt;
      &lt;Li&gt;克利夫兰 骑士&lt;/Li&gt;
      &lt;Li&gt;布鲁克林 篮网&lt;/Li&gt;
      &lt;Li&gt;迈阿密 热火&lt;/Li&gt;
      &lt;Li&gt;底特律 活塞&lt;/Li&gt;
      &lt;Li&gt;纽约 尼克斯&lt;/Li&gt;
      &lt;Li&gt;奥兰多 魔术&lt;/Li&gt;
      &lt;Li&gt;印第安纳 步行者&lt;/Li&gt;
      &lt;Li&gt;费城 76人&lt;/Li&gt;
      &lt;Li&gt;华盛顿 奇才&lt;/Li&gt;
      &lt;Li&gt;密尔沃基 雄鹿&lt;/Li&gt;
      &lt;Li&gt;多伦多 猛龙&lt;/Li&gt;
    &lt;/Ol&gt;
    &lt;Ol id=&#34;west&#34;&gt;
      &lt;H3&gt;The West Basketbal Teams&lt;/H3&gt;
      &lt;Li&gt;金州 勇士&lt;/Li&gt;
      &lt;Li&gt;丹佛 掘金&lt;/Li&gt;
      &lt;Li&gt;达拉斯 小牛&lt;/Li&gt;
      &lt;Li&gt;洛杉矶 快船&lt;/Li&gt;
      &lt;Li&gt;明尼苏达 森林狼&lt;/Li&gt;
      &lt;Li&gt;休斯顿 火箭&lt;/Li&gt;
      &lt;Li&gt;洛杉矶 湖人&lt;/Li&gt;
      &lt;Li&gt;奥克兰陈马成 雷霆&lt;/Li&gt;
      &lt;Li&gt;孟菲斯 灰熊&lt;/Li&gt;
      &lt;Li&gt;菲尼克斯 太阳&lt;/Li&gt;
      &lt;Li&gt;波特兰 开拓者&lt;/Li&gt;
      &lt;Li&gt;新奥尔良 鹈鹕&lt;/Li&gt;
      &lt;Li&gt;萨克拉门托 国王&lt;/Li&gt;
      &lt;Li&gt;犹他 爵士&lt;/Li&gt;
      &lt;Li&gt;圣安东尼奥 马刺&lt;/Li&gt;
    &lt;/Ol&gt;
    &lt;Ul id=&#34;other&#34;&gt;
      &lt;Li&gt;步行者&lt;/Li&gt;
      &lt;Li&gt;山猫&lt;/Li&gt;
    &lt;/Ul&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;H2&amp;gt;The basketball team which have been out of the game.&amp;lt;/H2&amp;gt;

&amp;lt;Hr color=&amp;quot;red&amp;quot;/&amp;gt;
&amp;lt;H3&amp;gt;The team of the west&amp;lt;/H3&amp;gt;
&amp;lt;Ol id=&amp;quot;outerWest&amp;quot;&amp;gt;

&amp;lt;/Ol&amp;gt;

&amp;lt;Hr color=&amp;quot;red&amp;quot;/&amp;gt;
&amp;lt;H3&amp;gt;The team of the east&amp;lt;/H3&amp;gt;
&amp;lt;Ol id=&amp;quot;outerEast&amp;quot;&amp;gt;

&amp;lt;/Ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Body&gt;
&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;


12:逐帧变化Animate

        //animate的作用其实就是动态的改变效果
        // 比如从某个点 移动某个点
        //     慢慢的拉伸长度  高度  模仿人的动作，并可以通过设置
        //     ms数 


会飞的鸟：
功能： 1 先让他从(0,0)移动到 （200，50）  1s移动时间
       2 再让其从(200,50)   移动到(700,150)  2s移动时间(可以使用+= 注意了)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt;Test select and option &lt;/Title&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34; &gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34;&gt;
      $(function(){
        //animate的作用其实就是动态的改变效果
        // 比如从某个点 移动某个点
        //     慢慢的拉伸长度  高度  模仿人的动作，并可以通过设置
        //     ms数
        $(&amp;lsquo;#btn1&amp;rsquo;).click(function(){
          //按照 默认的正常速度 延长高度到300px
          $(&amp;lsquo;#box&amp;rsquo;).animate({height:&amp;ldquo;300px&amp;rdquo;});
        });
        $(&amp;lsquo;#fly&amp;rsquo;).click(function(){
          //1000ms 从(0 0)  运行到200 50 的位置 时间1s
          //可不敢犯这个错误
          //$(&amp;lsquo;#bird&amp;rsquo;).animate(&amp;lsquo;{&amp;ldquo;left&amp;rdquo;:&amp;ldquo;200px&amp;rdquo;,&amp;ldquo;top&amp;rdquo;:&amp;ldquo;500px&amp;rdquo;}&amp;lsquo;,1000);
          $(&amp;lsquo;#bird&amp;rsquo;).animate({&amp;ldquo;left&amp;rdquo;:&amp;ldquo;200px&amp;rdquo;,&amp;ldquo;top&amp;rdquo;:&amp;ldquo;50px&amp;rdquo;},1000);
          // 加一个变小飞退的效果
          $(&amp;lsquo;#bird&amp;rsquo;).animate({&amp;ldquo;left&amp;rdquo;:&amp;ldquo;+=500px&amp;rdquo;,&amp;ldquo;top&amp;rdquo;:&amp;ldquo;+=100px&amp;rdquo;,&amp;ldquo;width&amp;rdquo;:&amp;ldquo;40px&amp;rdquo;,&amp;ldquo;height&amp;rdquo;:&amp;ldquo;30px&amp;rdquo;},2000);
        })
      })
    &lt;/script&gt;
  &lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;
    &lt;Input type=&#34;button&#34; id=&#34;btn1&#34; value=&#34;animate&#34;/&gt;
    &lt;Div id=&#34;box&#34; style=&#34;width:300px;height:200px ;background-color:red&#34;&gt;
    &lt;/Div&gt;
    &lt;Input type=&#34;button&#34; value=&#34;let me fly&#34; id=&#34;fly&#34;&gt;
    &lt;Img src=&#34;2.png&#34; style=&#34;position:absolute;&#34; id=&#34;bird&#34;/&gt;
  &lt;/Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
13: Cookie



        //突然明白  cookie只不过是一堆hashmap  临时存储在浏览器当中哦 


定义：

$.cookie(&#39;uName&#39;, $(&#39;#YourName&#39;).val());


使用：



$.cookie(&#39;uName&#39;)



作用：

当刷新页面仍然会保存uName的值！



需要加载jquery.cookie.js 插件


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt;Test select and option &lt;/Title&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34; &gt;&lt;/script&gt;
    &lt;!--$.cookie有效必须加载 jquery.cookie.js--&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery.cookie.js&#34; &gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34;&gt;
      $(function(){
        $(&amp;lsquo;#btn&amp;rsquo;).click(function(){
            $.cookie(&amp;lsquo;uName&amp;rsquo;, $(&amp;lsquo;#YourName&amp;rsquo;).val());
            alert(&amp;lsquo;I browser have record your name&amp;rsquo;);
        });
        //突然明白  cookie只不过是一堆hashmap  临时存储在浏览器当中哦
        if($.cookie(&amp;lsquo;uName&amp;rsquo;))
        {
            $(&amp;lsquo;span&amp;rsquo;).text(&amp;lsquo;welcome  Mr/Mrs &amp;lsquo;+$.cookie(&amp;lsquo;uName&amp;rsquo;)+&amp;rsquo; coming back&amp;rsquo;);
        }else
        {
          $(&amp;lsquo;span&amp;rsquo;).text(&amp;lsquo;welcome you !Little Bird . &amp;lsquo;)
        }
      });&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;
      &lt;Input type=&#34;text&#34; name=&#34;name&#34; value=&#34;&#34; id=&#34;YourName&#34;/&gt;
      &lt;INput type=&#34;button&#34; name=&#34;name&#34; value=&#34;record&#34; id=&#34;btn&#34;/&gt;
      &lt;Span&gt;&lt;/Span&gt;
  &lt;/Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
14:jqZoom局部放大器

注意点1：jqZoom在2.1.3测试失败！  但在1.8.3.min.js测试通过

注意点2: 要    
  连接上css否则效果不好：&amp;lt;LINK rel=stylesheet  type=text/css href=&amp;quot;jquery.jqzoom.css&amp;quot; /&amp;gt;

注意点3： jqzoom()失效写的



注意点4： 大图片是放在一个&amp;lt;A class=MYCLASS href=&amp;quot;大图片&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;小图片&amp;quot;/&amp;gt;&amp;lt;/A&amp;gt; 


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt;Test select and option &lt;/Title&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-1.8.3.min.js&#34; &gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery.jqzoom-core.js&#34; &gt;&lt;/script&gt;
    &lt;!-- 可不敢犯这个错误
    &lt;script type=&#34;text/css&#34; src=&#34;jquery.jqzoom.css&#34; &gt;&lt;/script&gt;
    --&gt;
    &lt;LINK rel=stylesheet  type=text/css href=&#34;jquery.jqzoom.css&#34; /&gt;
    &lt;script type=&#34;text/javascript&#34;&gt;
      $(function(){
      //$(document).ready(function(){
      //可不敢写错函数 z不可以大写
        //$(&amp;lsquo;.MYCLASS&amp;rsquo;).jqZoom();
        $(&amp;lsquo;.MYCLASS&amp;rsquo;).jqzoom();
            /*
          {
                zoomType: &amp;lsquo;standard&amp;rsquo;,
                lens:true,
                zoomWidth: 300,
                zoomHeight:450,
                xOffset:90,
                yOffset:30,
                preloadImages: true,
                alwaysOn:false
          });
              */
      });
    &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;
    &lt;!--可不敢把 &lt;/A&gt;放在 IMg标签外了--&gt;
    &lt;A class=MYCLASS  title=MYTITLE href=&#34;triumph_big1.jpg&#34;&gt;
      &lt;Img title=&#34;IMAGE TITLE&#34; src=&#34;triumph_small1.jpg&#34;&gt;
&lt;/A&gt;
  &lt;/Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;


15 qq微博案例

模拟微博140个字的提交案例

1： html部分
    加载weibo.css
    加载weibo.js
    加载logo
    加载textarea文本框
    加载附件区
    加载按钮
2： css部分
    no-repeat 不进行平铺

3： js部分

  3.1需要着重掌握 拓展的写法
  3.2通过脱离文档流  来加在朋友列表和表情列表
  3.3 学习广播的 追踪显示部分图片的功能 配合 background   background-position
      以及坐标进行设置  当然背景框是有大小限制的 no-repeat不平铺  利用css进
      如果超出多少个字  则变红色警告

  3.4 有三个地方 Please write down the topic  为什么？  1: 为了添加Topic 点击事件需要 2：在朋友列表和表情列表
            第二个是因为当没有只有#Please write..# 则使用val()进行替换

        但是当textarea原先有内容时候，如果直接使用val（新内容）则会覆盖原先的旧内容 ，所以需要进行判断
  3.5 selectRange的作用就是选择掉从第一个字符到最后一个字符，但是我的测试结果变成了选择
  3.6 朋友列表，表情列表 都是通过建立一个新的层来设置
        注意添加完close 标签后，在添加 朋友列表的时候需要在style属性中添加clear:both来清除 float:right的属性
3.7  表情层中 显示的文件夹路径得设置正确
              注意 1： userFaces[key]在 表情上面的title
               2： 小手功能
              //     3： 点击功能  单机事件  鼠标mouseover的事件 会显示文字信息



weibo.html:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html
&lt;Html&gt;
  &lt;Head&gt;
    &lt;Title&gt;Test select and option &lt;/Title&gt;
    &lt;Link rel=stylesheet href=&#34;weibo.css&#34; type=&#34;text/css&#34;&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;jquery-2.1.3.js&#34; &gt;&lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;weibo.js&#34;&gt;
    &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Head&gt;&lt;/p&gt;

&lt;p&gt;&lt;Body&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Img id=&amp;quot;logo&amp;quot; src=&amp;quot;weiboPic/b3_100901.png&amp;quot; alt=&amp;quot;log&amp;quot;/&amp;gt;
&amp;lt;!--让评论居中--&amp;gt;
&amp;lt;Center&amp;gt;
  &amp;lt;Div id=&amp;quot;Weibo&amp;quot;&amp;gt;
    &amp;lt;Div id=&amp;quot;WL&amp;quot;&amp;gt;
      &amp;lt;Div id=&amp;quot;Talking&amp;quot;&amp;gt;
        &amp;lt;H2&amp;gt;&amp;lt;A&amp;gt;Weibo Title: communication&amp;lt;/A&amp;gt;&amp;lt;/H2&amp;gt;
        &amp;lt;Textarea id=&amp;quot;Msg&amp;quot;&amp;gt;&amp;lt;/Textarea&amp;gt;
        &amp;lt;Div id=&amp;quot;Attach&amp;quot;&amp;gt;
          &amp;lt;A href=&amp;quot;javascript:void();&amp;quot; class=&amp;quot;NewTopic&amp;quot;&amp;gt;Topic&amp;lt;/A&amp;gt;
          &amp;lt;A href=&amp;quot;javascript:void();&amp;quot; class=&amp;quot;Friend&amp;quot;&amp;gt;Friends&amp;lt;/A&amp;gt;
          &amp;lt;A href=&amp;quot;javascript:void();&amp;quot; class=&amp;quot;Face&amp;quot;&amp;gt;Face&amp;lt;/A&amp;gt;
          &amp;lt;A href=&amp;quot;javascript:void();&amp;quot; class=&amp;quot;Pic&amp;quot;&amp;gt;Picture&amp;lt;/A&amp;gt;
          &amp;lt;A href=&amp;quot;javascript:void();&amp;quot; class=&amp;quot;Video&amp;quot;&amp;gt;Video&amp;lt;/A&amp;gt;
        &amp;lt;/Div&amp;gt;
        &amp;lt;Div id=&amp;quot;Send&amp;quot;&amp;gt;
          &amp;lt;Input type=&amp;quot;button&amp;quot; class=&amp;quot;sendBtn&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
          &amp;lt;Span class=&amp;quot;CountTxt&amp;quot;&amp;gt;You can still write&amp;lt;Em&amp;gt;140&amp;lt;/Em&amp;gt;words&amp;lt;/Span&amp;gt;
        &amp;lt;/Div&amp;gt;

    &amp;lt;/Div&amp;gt;
    &amp;lt;!--
    &amp;lt;Div id=&amp;quot;WR&amp;quot;&amp;gt;

    &amp;lt;/Div&amp;gt;
    --&amp;gt;
  &amp;lt;/Div&amp;gt; 
&amp;lt;/Center&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/Body&gt;&lt;/p&gt;

&lt;p&gt;&lt;/Html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;


weibo.css:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;css
        body
        {
            margin: 0px;
            background: url(&amp;lsquo;weiboPic/wrapBg.jpg&amp;rsquo;) no-repeat #EBF1F1;
        }
        #logo
        {
            margin: 30px 0 0 300px;
        }
        #Weibo
        {
            width: 800px;
            height: 200px;
            border: 1px solid #000;
        }
        /* WL: weiboLeft&lt;em&gt;/
        #WL
        {
            width: 590px;
            height: 100%;
            background: #fff;
            float: left;
        }
        /&lt;/em&gt; WR: weiboLeft */
        #WR
        {
            background: #CCEBF4;
            width: 210px;
            height: 100%;
            float: right;
        }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #Talking
    {
        text-align: left;
        margin: 0 0 0 25px;
    }
    /*增加文本框的大小*/
    #Msg
    {
        width: 540px;
        height: 80px;
        overflow: hidden;
        font-family: Tahoma, Arial;
        font-size: 14px;
        border: 1px solid gray;
    }
    #Talking H2
    {
        text-align: left;
        padding: 0px;
        margin: 0px;
        font: normal normal normal 18px/29px &#39;MicroSoft YaHei&#39; , SimHei;
    }
    #Attach
    {
        width: 540px;
    }
    #Attach a
    {
        color: #000;
        text-decoration: none;
        font-size: 14px;
    }
    .NewTopic, .Friend, .Face, .Pic, .Video
    {
        background-position: -170px -33px;
        display: inline-block;
        height: 16px;
        padding-left: 18px;
    }
    .CountTxt
    {
        color: #999;
        float: right;
        line-height: 33px;
        margin: 0 15px 0 0;
    }
    .CountTxt em
    {
        font-family: Georgia, Tahoma, Arial;
        font-size: 26px;
        position: relative;
        top: -5px;
        vertical-align: middle;
    }
    .sendBtn
    {
        float: right;
        margin: 0 20px 0 0;
        padding: 0px;
        background: url(weiboPic/bg1.png) -117px -165px no-repeat;
        line-height: 33px;
        margin-left: 14px;
        height: 30px;
        width: 112px;
        border: 0px;
        cursor: pointer;
    }
    #btnCloFri
    {
        cursor: pointer;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;

weibo.js:
//1。扩展jQuery
//需要着重掌握 拓展的写法
//通过脱离文档流  来加在朋友列表和表情列表
//学习广播的 追踪显示部分图片的功能 配合 background   background-position
//   以及坐标进行设置  当然背景框是有大小限制的 no-repeat不平铺  利用css进行
//   切换
//如果超出多少个字  则变红色警告
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;javascript
        $.fn.selectRange = function (start, end)
        {
          //please write down the topic 高亮显示
          //转化为 js对象
            var curObj = $(this).get(0);
            if (!curObj)
              return;
            else if (curObj.setSelectionRange)
            {
                curObj.focus(); curObj.setSelectionRange(start, end);
            } /* WebKit &lt;em&gt;/
            else if (curObj.createTextRange)
            {
                var range = curObj.createTextRange();
                range.collapse(true);
                range.moveEnd(&amp;lsquo;character&amp;rsquo;, end);
                range.moveStart(&amp;lsquo;character&amp;rsquo;, start);
                range.select();
            } /&lt;/em&gt; IE */
            else if (curObj.selectionStart)
            {
                curObj.selectionStart = start;
                curObj.selectionEnd = end;
            }
        };
        //====上面的代码是扩展的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function()
{

    //按钮高亮显示
    $(&#39;#Send .sendBtn&#39;).mouseover(function(){
      $(this).css(&#39;backgroundPosition&#39;,&#39;0 -195px&#39;);
    }).mouseout(function(){
        $(this).css(&#39;backgroundPosition&#39;,&#39;-117px -165px&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//-117px -165px
        });
        //计算文本框还能输入多少个字
        $(&amp;lsquo;#Msg&amp;rsquo;).change(function(){
            //还能输入多少个字
           var len= 140- $(this).val().length;
           if(len&amp;gt;=0){
                $(&amp;lsquo;#Send .CountTxt&amp;rsquo;).html(&amp;lsquo;You can still write down&lt;em&gt;&amp;rsquo;+len+&amp;rsquo;&lt;/em&gt;words&amp;rsquo;);
            }else{
              //设置 变成高亮的红色
                $(&amp;lsquo;#Send .CountTxt&amp;rsquo;).html(&amp;lsquo;Already exceed &lt;em&gt;&lt;font color=&#34;red&#34;&gt;&amp;rsquo;+Math.abs(len)+&amp;rsquo;&lt;/font&gt;&lt;/em&gt;words&amp;rsquo;);
            }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    });
    setInterval(function(){
        $(&#39;#Msg&#39;).change();
    },500);


 //显示话题
    ////有三个地方 Please write down the topic  为什么？  1: 为了添加Topic 点击事件需要 2：在朋友列表和表情列表
    //为什么？
    $(&#39;#Attach .NewTopic&#39;).click(function(){

        if($(&#39;#Msg&#39;).val().length==0){
          //selectRange的作用就是去除掉 从第一个字符到最后一个字符
          //已方便我们输入话题
            $(&#39;#Msg&#39;).val(&#39;#Please write down the topic#&#39;).selectRange(1,28);
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//显示朋友
        $(&amp;lsquo;#Attach .Friend&amp;rsquo;).click(function(){
            var friendsList = [&amp;lsquo;Foleide&amp;rsquo;, &amp;lsquo;Risse&amp;rsquo;, &amp;lsquo;LiLei&amp;rsquo;,&amp;lsquo;HanMeiMei&amp;rsquo;,&amp;lsquo;Tom&amp;rsquo;,&amp;lsquo;Turkkey&amp;rsquo;,&amp;lsquo;John&amp;rsquo;];
            if($(&amp;lsquo;#dvF&amp;rsquo;).length&amp;gt;0){
                $(&amp;lsquo;#dvF&amp;rsquo;).remove();
            }
            //增加了一个 朋友层 用于选择！！
            var dvFriends=$(&amp;rsquo;&lt;div id=&#34;dvF&#34; style=&#34;width:100px;border:1px solid blue;background-color:white;position: absolute;&#34;&gt;&lt;/div&gt;&amp;rsquo;).appendTo($(&amp;lsquo;body&amp;rsquo;));
            //设置完层的脱离文档流 后，设置他的偏移
            var dvX=$(this).offset().left+&amp;lsquo;px&amp;rsquo;;//层距离左侧的像素 注意 height() 有圆括号包裹
            var dvY=$(this).offset().top+$(this).height()+&amp;lsquo;px&amp;rsquo;;
            //设置他的上和左的坐标
            dvFriends.css({&amp;ldquo;left&amp;rdquo;:dvX,&amp;ldquo;top&amp;rdquo;:dvY});
            //添加一个关闭按钮
            //float:right 向右浮动
            $(&amp;rsquo;&lt;span style=&#34;background-color: gray;cursor: pointer; float: right;&#34;&gt;Close&lt;/span&gt;&amp;rsquo;).click(function(){
                $(this).parent().remove();
            }).appendTo(dvFriends);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        //显示朋友列表
        //clear:both 清除掉 span所具有的float效果！！
        //    规律： 如果同一级的元素有浮动的，就需要用clear:both来清除
        //否则 ulobj会跟close处在同一行当中
        //list-style-type:square
       var ulObj= $(&#39;&amp;lt;Ul style=&amp;quot;clear: both; list-style-type: square; margin: 0;padding: 0;&amp;quot;&amp;gt;&amp;lt;/Ul&amp;gt;&#39;).appendTo(dvFriends);
        for(var i=0;i&amp;lt;friendsList.length;i++){
          //设置移到的鼠标为手型
           $(&#39;&amp;lt;Li style=&amp;quot;margin-bottom: 5px; cursor: pointer;&amp;quot;&amp;gt;@&#39;+friendsList[i]+&#39;&amp;lt;/Li&amp;gt;&#39;).mouseover(function(){
             //鼠标进入时候的高亮显示
               $(this).css(&#39;backgroundColor&#39;,&#39;yellow&#39;);

               //鼠标离开又得恢复过来
           }).mouseout(function(){
               $(this).css(&#39;backgroundColor&#39;,&#39;&#39;);
           }).click(function(){
             //不太明白这边的写法 ok
             //如果用户没有输入任何内容 则替换掉原先的内容
               if($(&#39;#Msg&#39;).val()==&#39;##&#39;){
                   $(&#39;#Msg&#39;).val($(this).text());
               }else{
                 //如果用户已经输入了，则必须保证用户的数据不被覆盖
                   $(&#39;#Msg&#39;).val($(&#39;#Msg&#39;).val()+$(this).text());
               }


           }).appendTo(ulObj);
        }
    });

    //显示表情
    var userFaces = { &#39;0.gif&#39;: &#39;微笑&#39;, &#39;1.gif&#39;: &#39;撇嘴&#39;, &#39;2.gif&#39;: &#39;色&#39;, &#39;3.gif&#39;: &#39;发呆&#39;, &#39;4.gif&#39;: &#39;得意&#39;, &#39;5.gif&#39;: &#39;流泪&#39;, &#39;6.gif&#39;: &#39;害羞&#39;, &#39;7.gif&#39;: &#39;闭嘴&#39;, &#39;8.gif&#39;: &#39;睡&#39;, &#39;9.gif&#39;: &#39;大哭&#39;, &#39;10.gif&#39;: &#39;尴尬&#39;, &#39;11.gif&#39;: &#39;发怒&#39;, &#39;12.gif&#39;: &#39;调皮&#39;, &#39;13.gif&#39;: &#39;呲牙&#39;, &#39;14.gif&#39;: &#39;惊讶&#39;, &#39;15.gif&#39;: &#39;难过&#39;, &#39;16.gif&#39;: &#39;酷&#39;, &#39;17.gif&#39;: &#39;冷汗&#39;, &#39;18.gif&#39;: &#39;抓狂&#39;, &#39;19.gif&#39;: &#39;吐&#39;, &#39;20.gif&#39;: &#39;偷笑&#39;, &#39;21.gif&#39;: &#39;可爱&#39;, &#39;22.gif&#39;: &#39;白眼&#39;, &#39;23.gif&#39;: &#39;傲慢&#39;, &#39;24.gif&#39;: &#39;饥饿&#39;, &#39;25.gif&#39;: &#39;困&#39;, &#39;26.gif&#39;: &#39;惊恐&#39;, &#39;27.gif&#39;: &#39;流汗&#39;, &#39;28.gif&#39;: &#39;憨笑&#39;, &#39;29.gif&#39;: &#39;大兵&#39;, &#39;30.gif&#39;: &#39;奋斗&#39;, &#39;31.gif&#39;: &#39;咒骂&#39;, &#39;32.gif&#39;: &#39;疑问&#39;, &#39;33.gif&#39;: &#39;嘘&#39;, &#39;34.gif&#39;: &#39;晕&#39;, &#39;35.gif&#39;: &#39;折磨&#39;, &#39;36.gif&#39;: &#39;衰&#39;, &#39;37.gif&#39;: &#39;骷髅&#39;, &#39;38.gif&#39;: &#39;敲打&#39;, &#39;39.gif&#39;: &#39;再见&#39;, &#39;40.gif&#39;: &#39;擦汗&#39;, &#39;41.gif&#39;: &#39;抠鼻&#39;, &#39;42.gif&#39;: &#39;鼓掌&#39;, &#39;43.gif&#39;: &#39;糗大了&#39;, &#39;44.gif&#39;: &#39;坏笑&#39;, &#39;45.gif&#39;: &#39;左哼哼&#39;, &#39;46.gif&#39;: &#39;右哼哼&#39;, &#39;47.gif&#39;: &#39;哈欠&#39;, &#39;48.gif&#39;: &#39;鄙视&#39;, &#39;49.gif&#39;: &#39;委屈&#39;, &#39;50.gif&#39;: &#39;快哭了&#39;, &#39;51.gif&#39;: &#39;阴险&#39;, &#39;52.gif&#39;: &#39;亲亲&#39;, &#39;53.gif&#39;: &#39;吓&#39;, &#39;54.gif&#39;: &#39;可怜&#39;, &#39;55.gif&#39;: &#39;菜刀&#39;, &#39;56.gif&#39;: &#39;西瓜&#39;, &#39;57.gif&#39;: &#39;啤酒&#39;, &#39;58.gif&#39;: &#39;篮球 &#39;, &#39;59.gif&#39;: &#39;乒乓&#39;, &#39;60.gif&#39;: &#39;咖啡&#39;, &#39;61.gif&#39;: &#39;饭&#39;, &#39;62.gif&#39;: &#39;猪头&#39;, &#39;63.gif&#39;: &#39;玫瑰&#39;, &#39;64.gif&#39;: &#39;凋谢&#39;, &#39;65.gif&#39;: &#39;示爱&#39;, &#39;66.gif&#39;: &#39;爱心&#39;, &#39;67.gif&#39;: &#39;心碎&#39;, &#39;68.gif&#39;: &#39;蛋糕&#39;, &#39;69.gif&#39;: &#39;闪电&#39;, &#39;70.gif&#39;: &#39;炸弹&#39;, &#39;71.gif&#39;: &#39;刀&#39;, &#39;72.gif&#39;: &#39;足球&#39;, &#39;73.gif&#39;: &#39;瓢虫&#39;, &#39;74.gif&#39;: &#39;便便&#39;, &#39;75.gif&#39;: &#39;月亮&#39;, &#39;76.gif&#39;: &#39;太阳&#39;, &#39;77.gif&#39;: &#39;礼物&#39;, &#39;78.gif&#39;: &#39;拥抱&#39;, &#39;79.gif&#39;: &#39;强&#39;, &#39;80.gif&#39;: &#39;弱&#39;, &#39;81.gif&#39;: &#39;握手&#39;, &#39;82.gif&#39;: &#39;胜利&#39;, &#39;83.gif&#39;: &#39;抱拳&#39;, &#39;84.gif&#39;: &#39;勾引&#39;, &#39;85.gif&#39;: &#39;拳头&#39;, &#39;86.gif&#39;: &#39;差劲&#39;, &#39;87.gif&#39;: &#39;爱你&#39;, &#39;88.gif&#39;: &#39;NO&#39;, &#39;89.gif&#39;: &#39;OK&#39;, &#39;90.gif&#39;: &#39;爱情&#39;, &#39;91.gif&#39;: &#39;飞吻&#39;, &#39;92.gif&#39;: &#39;跳跳&#39;, &#39;93.gif&#39;: &#39;发抖&#39;, &#39;94.gif&#39;: &#39;怄火&#39;, &#39;95.gif&#39;: &#39;转圈&#39;, &#39;96.gif&#39;: &#39;磕头&#39;, &#39;97.gif&#39;: &#39;回头&#39;, &#39;98.gif&#39;: &#39;跳绳&#39;, &#39;99.gif&#39;: &#39;挥手&#39;, &#39;100.gif&#39;: &#39;激动&#39;, &#39;101.gif&#39;: &#39;街舞&#39;, &#39;102.gif&#39;: &#39;献吻&#39;, &#39;103.gif&#39;: &#39;左太极&#39;, &#39;104.gif&#39;: &#39;右太极&#39;, &#39;105.gif&#39;: &#39;淡定&#39;, &#39;106.gif&#39;: &#39;晕&#39;, &#39;107.gif&#39;: &#39;不满&#39;, &#39;108.gif&#39;: &#39;睡觉&#39;, &#39;109.gif&#39;: &#39;小调皮&#39;, &#39;110.gif&#39;: &#39;咒骂&#39;, &#39;111.gif&#39;: &#39;发怒&#39;, &#39;112.gif&#39;: &#39;偷笑&#39;, &#39;113.gif&#39;: &#39;微笑&#39;, &#39;114.gif&#39;: &#39;震惊&#39;, &#39;115.gif&#39;: &#39;囧&#39; };
    $(&#39;#Attach .Face&#39;).click(function(){

        if($(&#39;#dvfaceImg&#39;).length&amp;gt;0){
            $(&#39;#dvfaceImg&#39;).remove();
        }
       var dvFace= $(&#39;&amp;lt;div id=&amp;quot;dvfaceImg&amp;quot; style=&amp;quot;width:370px;border:1px solid blue;background-color: white;position: absolute;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;).appendTo($(&#39;body&#39;));
       //和朋友列表相同的操作过程！！！
        var dvXX=$(this).offset().left-100+&#39;px&#39;;
        var dvYY=$(this).offset().top+$(this).height()+&#39;px&#39;;
        //最终设置他的坐标
        dvFace.css({&amp;quot;left&amp;quot;:dvXX,&amp;quot;top&amp;quot;:dvYY});
        //显示 表情  关闭
        $(&#39;&amp;lt;Span style=&amp;quot;float: left;&amp;quot;&amp;gt;Expression&amp;lt;/Span&amp;gt;&#39;).appendTo(dvFace);
        $(&#39;&amp;lt;Span style=&amp;quot;float: right;cursor: pointer; background-color: gray;&amp;quot;&amp;gt;close&amp;lt;/Span&amp;gt;&#39;).click(function(){

            $(this).parent().remove();//删除层
        }).appendTo(dvFace);

        //显示表情
       var dvfaceimage= $(&#39;&amp;lt;div style=&amp;quot;clear: both;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;).appendTo(dvFace);
        for(var key in userFaces){
          //显示的文件夹路径得设置正确
          //注意 1： userFaces[key]在 表情上面的title
          //     2： 小手功能
          //     3： 点击功能  单机事件
            $(&#39;&amp;lt;Img src=&amp;quot;weiboPic/faces/&#39;+key+&#39;&amp;quot; title=&amp;quot;&#39;+userFaces[key]+&#39;&amp;quot; /&amp;gt;&#39;).mouseover(function(){
                $(this).css(&#39;cursor&#39;,&#39;pointer&#39;);

            }).click(function(){
              //不清楚 这边为什么这样写  同样的 在friend也是如此
                //if($(&#39;#Msg&#39;).val()==&#39;#Please write down the topic#&#39;){
                if($(&#39;#Msg&#39;).val()==&#39;##&#39;){
                    $(&#39;#Msg&#39;).val( &#39;[&#39;+$(this).attr(&#39;title&#39;)+&#39;]&#39;);
                }else{
                    $(&#39;#Msg&#39;).val($(&#39;#Msg&#39;).val()+&#39;[&#39;+$(this).attr(&#39;title&#39;)+&#39;]&#39;);
                }


            }).appendTo(dvfaceimage);
        }
    });

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSDOM14-19节笔记代码April1th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/jsdom14-19jie-bi-ji-dai-ma-april1th/</link>
      <pubDate>Mon, 11 May 2015 14:58:44 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/jsdom14-19jie-bi-ji-dai-ma-april1th/</guid>
      <description>&lt;p&gt;续先前的JSDOM1-15:&lt;a href=&#34;http://www.rupeng.com/forum/thread-45297-1-1.html&#34; target=&#34;_blank&#34;&gt;http://www.rupeng.com/forum/thread-45297-1-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;21:图片移动，脱离文档流的案例&lt;/p&gt;

&lt;p&gt;脱离文档流： 对象.style.position=&amp;lsquo;absolute&amp;rsquo;;
新建了一个图片控件，并让其在页面中随鼠标移动。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;Head&amp;gt;
&amp;lt;Title&amp;gt; Let bird fly&amp;lt;/Title&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

onload=function()
{
/*
document.onmousemove=function()
{
var imObj = document.getElementById(&#39;im&#39;);
//脱离文档流

imObj.style.position=&#39;absolute&#39;;
imObj.style.left=window.event.clientX+&#39;px&#39;;
imObj.style.top=window.event.clientY+&#39;px&#39;;
};
*/
document.getElementById(&#39;ak&#39;).onmouseover=function()
{
if(!document.getElementById(&#39;im1&#39;))
{
var imgObj=document.createElement(&#39;img&#39;);
imgObj=&#39;im1&#39;;
imgObj.src=&#39;bird.png&#39;;
//脱离文档流
imgObj.style.position=&#39;absolute&#39;;
imgObj.style.left=this.offsetLeft+&#39;px&#39;;
imgObj.style.top=this.offsetTop+this.offsetHeight+&#39;px&#39;;
}
};
};
&amp;lt;/script&amp;gt;

&amp;lt;/Head&amp;gt;

&amp;lt;Body&amp;gt;
&amp;lt;img id=&amp;quot;im&amp;quot; src=&amp;quot;bird.png&amp;quot;/&amp;gt;

&amp;lt;A id=&amp;quot;ak&amp;quot; href=&amp;quot;http://www.baidu.com&amp;quot;&amp;gt;百度&amp;lt;/A&amp;gt;
&amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;22： 四个案例&lt;/p&gt;

&lt;p&gt;案例1：一个列表框进行动态属性的赋值 并获取点击对象的值
                  注意：setAttribute and gettAttribute的用法
                           循环添加所有表格的点击事件
案例2：产生一个登陆界面
                  注意：innerText和innerHTML的配合使用 ，设置控件的内容
                           为了增加用户的体验感觉checkbox一般设置对象.style.cursor=pointer
                            createElement 和appendChild的配合使用
案例3: 小图变大图
                   注意：JSON数据库的创建
                             循环的显示小图片
                             图片的onmouseover and onmouseout事件的响应
                              层的style.display=none;的意思是不显示该层
案例4:   搜索框
                   注意：onfocus  and onblur(鼠标焦点离开的事件）
                            一般会使用设置为gray，文本框为&amp;rsquo;请输入搜索内容&amp;rsquo;; 使用的时候设置为black，并且文本框为空。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; When click the button ,then generate the div&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      // 学会添加层
      //数据库 包含照片信息  其中左边的key是小照片，右边是大照片信息
       var datasPic = {
        &amp;quot;mv/1-1.jpg&amp;quot;: [&amp;quot;mv/1.jpg&amp;quot;, &amp;quot;小丽&amp;quot;, &amp;quot;163cm&amp;quot;],
        &amp;quot;mv/2-1.jpg&amp;quot;: [&amp;quot;mv/2.jpg&amp;quot;, &amp;quot;小红&amp;quot;, &amp;quot;165cm&amp;quot;],
        &amp;quot;mv/3-1.jpg&amp;quot;: [&amp;quot;mv/3.jpg&amp;quot;, &amp;quot;小花&amp;quot;, &amp;quot;150cm&amp;quot;]
        };


        //案例1：一个列表框进行动态属性的赋值 并获取点击对象的值
      onload=function()
      {
        //点击列表 产生分数来！！
        var tds=document.getElementById(&#39;nameRank&#39;).getElementsByTagName(&#39;td&#39;);
        for(var i=0;i&amp;lt;tds.length;i++)
        {
          tds[i].setAttribute(&#39;score&#39;,(i+1)*20);
          tds[i].onclick=function()
          {
            alert(this.getAttribute(&#39;score&#39;));
          };
        }

        //案例2：产生一个登陆界面
        document.getElementById(&#39;generate&#39;).onclick=function()
        {
          //创建一个层
          var dvObj=document.createElement(&#39;div&#39;);
          dvObj.id=&#39;dv&#39;;
          dvObj.style.width=&#39;300px&#39;;
          dvObj.style.height=&#39;200px&#39;;
          dvObj.style.marginBottom=&#39;200px&#39;;
          dvObj.style.border=&#39;1px solid yellow&#39;;
          document.body.appendChild(dvObj);

          //c创建两个P标签
          var P1= document.createElement(&#39;p&#39;);
          //本想着添加标签来着
          P1.innerText=&#39;用户名:&#39;;
          var name=document.createElement(&#39;input&#39;);
          name.type=&#39;text&#39;;
          P1.appendChild(name);

          //第二个标签
          var P2 = document.createElement(&#39;p&#39;);
          //妙用innerHTML保持对齐！
          P2.innerHTML=&#39;密 码:&#39;;
          var pwd=document.createElement(&#39;input&#39;);
          pwd.type=&#39;password&#39;;
          P2.appendChild(pwd);

          //复选框

          var chk = document.createElement(&#39;input&#39;);
          chk.type = &#39;checkbox&#39;;
          chk.id = &#39;chkPwd&#39;;
          var labelChk = document.createElement(&#39;label&#39;);
          labelChk.innerText = &#39;记住我的登录状态&#39;;
          labelChk.setAttribute(&#39;for&#39;, chk.id); //设置属性
          labelChk.style.cursor = &#39;pointer&#39;;//设置鼠标的样式 编程手的样式
          var pObj3 = document.createElement(&#39;p&#39;);
          pObj3.appendChild(chk);
          pObj3.appendChild(labelChk);

          //登陆和取消按钮
          var btnLogin = document.createElement(&#39;input&#39;);
          btnLogin.type = &#39;submit&#39;;
          btnLogin.value = &#39;登录&#39;;
          btnLogin.marginRight=&#39;10px&#39;
          var btnEsc = document.createElement(&#39;input&#39;);
          btnEsc.type = &#39;button&#39;;
          btnEsc.value = &#39;取消&#39;;
          var pObj4 = document.createElement(&#39;p&#39;);
          pObj4.appendChild(btnLogin);
          pObj4.appendChild(btnEsc);



          //添加控件
          dvObj.appendChild(P1);
          dvObj.appendChild(P2);
          dvObj.appendChild(pObj3);
          dvObj.appendChild(pObj4);

        }


      //案例3: 小图变大图
      //0 先有了json数据库
      //1 也可以先加载小图

      //2
        var dvSObj=document.getElementById(&#39;dvSmall&#39;);
        //先把小图给显示出来
        for(var key in datasPic)
          {
            var imObj=document.createElement(&#39;img&#39;);
            imObj.src=key;
            imObj.setAttribute(&#39;userKey&#39;,key);
            imObj.style.marginRight=&#39;10px&#39;;//目的是添加右间距/
            dvSObj.appendChild(imObj);
            //添加小图的鼠标的到来事件
            imObj.onmouseover=function()
            {
              var arrs=datasPic[this.getAttribute(&#39;userKey&#39;)];
              document.getElementById(&#39;dvBig&#39;).style.display=&#39;block&#39;;
              document.getElementById(&#39;imBig&#39;).src=arrs[0];
              document.getElementById(&#39;spName&#39;).innerText=arrs[1];
              document.getElementById(&#39;spHeight&#39;).innerText=arrs[2];
            };
            //添加小图的鼠标的 离开事件
            imObj.onmouseout=function()
            {
              document.getElementById(&#39;dvBig&#39;).style.display=&#39;none&#39;;
            };
          }

          //案例4:   搜索框
          //获得焦点的事件
          document.getElementById(&#39;searchValue&#39;).onfocus=function()
          {
            if(this.style.color==&#39;gray&#39;&amp;amp;&amp;amp; this.value==&#39;请输入搜索词&#39;)
              {
                this.style.color=&#39;black&#39;;
                this.value=&#39;&#39;;
                
              }
          }
          //失去焦点的事件
          document.getElementById(&#39;searchValue&#39;).onblur=function()
          {
            if(this.value==&#39;&#39;)
              {
                this.style.color=&#39;gray&#39;;
                this.value=&#39;请搜索搜索关键词&#39;;
              }
          }

      };

    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Table border=&amp;quot;1&amp;quot; id=&amp;quot;nameRank&amp;quot;&amp;gt;
      &amp;lt;Tr&amp;gt;
        &amp;lt;Td&amp;gt;第一名&amp;lt;/Td&amp;gt;
        &amp;lt;Td&amp;gt;第二名&amp;lt;/Td&amp;gt;
        &amp;lt;Td&amp;gt;第三名&amp;lt;/Td&amp;gt;
        &amp;lt;Td&amp;gt;第四名&amp;lt;/Td&amp;gt;
        &amp;lt;Td&amp;gt;第五名&amp;lt;/Td&amp;gt;
      &amp;lt;/Tr&amp;gt;
      &amp;lt;/Table&amp;gt;

      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;generate&amp;quot; value=&amp;quot;登陆栏&amp;quot;/&amp;gt;

      &amp;lt;Div id=&amp;quot;dvSmall&amp;quot;&amp;gt;

      &amp;lt;/Div&amp;gt;

      &amp;lt;!--display:none 表示不显示 也就是刚开始不会显示div层--&amp;gt;
      &amp;lt;Div id=&amp;quot;dvBig&amp;quot; style=&amp;quot;background-Color:orange; border:1px solid yellow; width:200px;display:none;&amp;quot;&amp;gt;
          大头像:&amp;lt;br/&amp;gt;
          &amp;lt;Img id=&amp;quot;imBig&amp;quot; src=&amp;quot;#&amp;quot; alt=&amp;quot;如果没有图片 You will see me&amp;quot;/&amp;gt;
          姓名:&amp;lt;Span id=&amp;quot;spName&amp;quot;&amp;gt;&amp;lt;/Span&amp;gt;&amp;lt;br/&amp;gt;
          升高:&amp;lt;Span id=&amp;quot;spHeight&amp;quot;&amp;gt;&amp;lt;/Span&amp;gt;&amp;lt;br/&amp;gt;

      &amp;lt;/Div&amp;gt;

      &amp;lt;Div id=&amp;quot;search&amp;quot;&amp;gt;
        &amp;lt;Input type=&#39;text&#39; value=&amp;quot;请输入搜索词&amp;quot; id=&amp;quot;searchValue&amp;quot; style=&amp;quot;color:gray&amp;quot;/&amp;gt;
        &amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;23 表格的提交的两种触发方式&lt;/p&gt;

&lt;p&gt;submit按钮的click()
form的submit()
区别：
            调用submit按钮的点击事件click();
            这种情况下 如果onsubmit被赋值了，比如
        //处理click的提交事件  type=subomit的click()事件会触发 onsubmit监听器
        if(document.getElementById(&amp;lsquo;searchValue&amp;rsquo;).value==&amp;lsquo;Please input the search value&amp;rsquo;)
          {
            document.getElementById(&amp;lsquo;fm&amp;rsquo;).onsubmit=function()
            {
              return false;
            };
复制代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        那么submit按钮 失去作用，即使再输入内容 也没用！！
        document.getElementById(&#39;sm&#39;).click(); 也就是click()的调用需要经过onsubmit的匿名函数过程。
        submit()不会触发 onsubmit的匿名函数，即使文本框没有内容也直接提交。
        直接达到高层的表单form，进行提交，
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Test onclick() and onsubmit() &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        document.getElementById(&#39;searchValue&#39;).onfocus=function()
        {
           if(this.style.color==&#39;gray&#39;&amp;amp;&amp;amp;this.value==&#39;Please input the search value&#39;) 
             {
               this.value=&#39;&#39;;
               this.style.color=&#39;black&#39;;
             }
        }
        document.getElementById(&#39;searchValue&#39;).onblur=function()
        {
            if(this.value==&#39;&#39;)
              {
                this.value=&#39;Please input the search value&#39;;
                this.style.color=&#39;gray&#39;;
              }
        }

        //处理click的提交事件  type=subomit的click()事件会触发 onsubmit监听器
        if(document.getElementById(&#39;searchValue&#39;).value==&#39;Please input the search value&#39;)
          {
            document.getElementById(&#39;fm&#39;).onsubmit=function()
            {
              return false;
            };
          }
          document.getElementById(&#39;dv&#39;).onclick=function()
          {
            //点击层的 时候调用submit的点击事件
            //这种情况下 即使再输入内容 也没用！！
        //    document.getElementById(&#39;sm&#39;).click();
            //submit不会触发 onsubmit的匿名函数
            //直接达到高层的表单form，进行提交，
            document.getElementById(&#39;fm&#39;).submit();
          }
          document.getElementById(&#39;sm&#39;).onclick=function()
          {
            //this.click();
            document.getElementById(&#39;sm&#39;).click();
          }

      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;
    
  &amp;lt;Body&amp;gt;
    &amp;lt;Form action=&amp;quot;http://www.baidu.com&amp;quot; method=&amp;quot;get&amp;quot; id=&amp;quot;fm&amp;quot;&amp;gt;
      &amp;lt;Input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;Please input the search value&amp;quot; id=&amp;quot;searchValue&amp;quot; style=&amp;quot;width:300px;height:20px;color:gray;
      border:1px solid red&amp;quot;/&amp;gt; 
      &amp;lt;Input type=&amp;quot;submit&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;baidu&amp;quot; id=&amp;quot;sm&amp;quot;/&amp;gt;
      &amp;lt;Div id=&amp;quot;dv&amp;quot; style=&amp;quot;width:300px;height:200px;background-color:green;&amp;quot;&amp;gt;
        &amp;lt;/Div&amp;gt;
      &amp;lt;/Form&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;24：正则表达式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   如果有了// 单句注释符，那么new RegExp(&#39;&#39;)就可以不用了
   注意1： test函数类似于java的match函数
               exec函数类似于java的matches函数。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三个功能： 1：找到六位数字
                 2：确认文本框的内容是否为邮箱，若是为红色
                 3：替换操作，支持链式替换 *.replace().replace&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Test Regex Expression &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var testString=&#39;12345&#39;;

      //1 网页字节数较多 不推荐
      var reg= new RegExp(&#39;\\d{5}&#39;);
      alert(reg.test(testString)); 
      //2 网页字节数较少 推荐  增加体验性

      var reg=/\d{5}/; //  //类似.Net的 @（）可以直接使用正则表达式 而不需要考虑具体的语言
      alert(reg.test(testString));

      
    &amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

      //获得所有匹配的内容
      var msg=&#39;昌平:102206,平和:363708,中国电信:10000&#39;;
      var reg=/\d{6}/g;
      var result;
      while(result=reg.exec(msg))
        {
          alert(result);
        }
    &amp;lt;/script&amp;gt;



    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        document.getElementById(&#39;email&#39;).onblur=function()
        {
          // di第一个错误  A-Z 写成了a-z
          // 第二个错误  var reg =  写成了 var=reg=
          var reg=/^[\d\w_.-]+@[\d\w]+([.][a-zA-Z]+){1,2}$/;
          //var reg=/^[0-9a-zA-Z_.-]+@[0-9a-zA-Z]+([.][a-zA-Z]+){1,2}$/;
          if(reg.test(this.value))
            {
              this.style.backgroundColor=&#39;red&#39;;
              alert(&#39;邮箱&#39;);
            }
        }
      }
    &amp;lt;/script&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      
      var msg = &#39;   去掉左右空格    &#39;;
      //注意// 不需要用 单引号括起来
      msg = msg.replace(/^\s+/,&#39;&#39;).replace(/\s+$/,&#39;&#39;);
      alert(&#39;===&#39;+msg+&#39;===&#39;);
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
      &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;email&amp;quot; name=&amp;quot;&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;25:测试键盘的keyCode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  注意如果不放在onload中调用控件没有效果，为undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test Tab Shift &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      //window.event.keyCode=

      //如果不放在onload中是没有效果
      onload=function()
      {
        var texts=document.getElementsByName(&#39;name&#39;);
        for(var i=0;i&amp;lt;texts.length;i++)
        {
          texts[i].onkeydown=function()
          {
            //alert(window.event.keyCode);
            //让enete键具备 tab的工呢过
            if(window.event.keyCode==13)
              {
                //IE可以实现
                window.event.keyCode=9;
                //google如何实现
              }
          };
        }
      };
      
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;26:测试密码的强弱&lt;/p&gt;

&lt;p&gt;密码强弱等级协定：
         1：初始的密码等级为0
         2：当只出现数字或者只出现字母或者只出现特殊字符则密码等级加1
         3： 如果数字、字母、特殊字符 三者有两种出现 则再加上1&lt;br /&gt;
         4： 如果都出现  在原先基础上再加1
         5： 如果位数小于6 － 1  所有最少应该是0&lt;/p&gt;

&lt;p&gt;第一：获取文本框的内容&lt;/p&gt;

&lt;p&gt;第二：进行函数的级别验证
第三：设置表格的背景颜色&lt;/p&gt;

&lt;p&gt;注意1   if(msg.match(/[^\d\w]/)) //既不是数字也不是字母
注意2  在进行 新的级别的设置时候需要循环把表格背景颜色设置为white&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for(var i=0;i&amp;lt;tds.length;i++)
             {
               tds[i].style.backgroundColor=&#39;white&#39;;
             }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体实验如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Test the strong week and medium of the password &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

      /*
         1：初始的密码等级为0
         2：当只出现数字或者只出现字母或者只出现特殊字符则密码等级加1
         3： 如果数字、字母、特殊字符 三者有两种出现 则再加上1   
         4： 如果都出现  在原先基础上再加1 
         5： 如果位数小于6 － 1  所有最少应该是0
      */

     function getPasswordLevel(msg)
     {
       var level=0;
       if(msg.match(/\d/))
         {
           level++; //如果匹配数字则加上1
         }
        if(msg.match(/\w/))
          {
            level++; //如果也找到字母
          }
        if(msg.match(/[^\d\w]/)) //既不是数字也不是字母
           {
            level++;
           }
        if(msg.length&amp;lt;=6)
          {
            level--;
          }
          return level;
     }

     onload=function()
     {
       document.getElementById(&#39;password&#39;).onkeyup=function()
       {
         var tds=document.getElementById(&#39;tr1&#39;).getElementsByTagName(&#39;td&#39;);
         if(this.value.length&amp;gt;0) //value的值的长度
           {
             for(var i=0;i&amp;lt;tds.length;i++)
             {
               tds[i].style.backgroundColor=&#39;white&#39;;
             }
              var r =getPasswordLevel(this.value); 
              if(r &amp;lt;=1)
                {
                  tds[0].style.backgroundColor=&#39;red&#39;;
                }
              else if(r ==2)
                {
                  tds[0].style.backgroundColor=&#39;yellow&#39;;
                  tds[1].style.backgroundColor=&#39;yellow&#39;;
                }
              else if(r ==3)
                {
                  tds[0].style.backgroundColor=&#39;blue&#39;;
                  tds[1].style.backgroundColor=&#39;blue&#39;;
                  tds[2].style.backgroundColor=&#39;blue&#39;;
                }

           }
       }
     }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;
  &amp;lt;Body&amp;gt;

    &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;password&amp;quot; value=&amp;quot;&amp;quot; name=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;Table id=&amp;quot;tb&amp;quot;&amp;gt;
      &amp;lt;Tr id=&amp;quot;tr1&amp;quot;&amp;gt;
        &amp;lt;Td&amp;gt;弱&amp;lt;/Td&amp;gt;
        &amp;lt;Td&amp;gt;中&amp;lt;/Td&amp;gt;
        &amp;lt;Td&amp;gt;强&amp;lt;/Td&amp;gt;
      &amp;lt;/Tr&amp;gt;
      &amp;lt;/Table&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;27:百度搜索&lt;/p&gt;

&lt;p&gt;功能1： 输入一个字可以出现智能提示板（暂时是指调用JSON的数据  而不是数据库的内容）
功能2：可以获取智能提示板的内容，并鼠标扫过的时候出现红色 离开为白色  点击则把该对象内容附到搜索框中&lt;/p&gt;

&lt;p&gt;注意点: 能力校验（暂时不太清楚 userAgent)&lt;/p&gt;

&lt;p&gt;具体实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test Search by Baidu &amp;lt;/Title&amp;gt;
  &amp;lt;/Head&amp;gt;
  &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    #main
    {
      width:250px;
      height:200px;
      margin-left:200px;
      margin-top:300px;
      background-color:green;
    }
  &amp;lt;/style&amp;gt;

  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    onload=function()
    {
      var keyWords = {
          &amp;quot;小明&amp;quot;: [&amp;quot;小明是谁&amp;quot;, &amp;quot;小明很机智&amp;quot;, &amp;quot;小明滚出去&amp;quot;],
          &amp;quot;地主&amp;quot;: [&amp;quot;斗地主&amp;quot;, &amp;quot;地主还有没有&amp;quot;, &amp;quot;地主就是土豪&amp;quot;],
          &amp;quot;挖&amp;quot;: [&amp;quot;挖掘机&amp;quot;, &amp;quot;挖掘机技术那加强&amp;quot;, &amp;quot;挖土豆&amp;quot;],
          &amp;quot;我&amp;quot;: [&amp;quot;我爱北京&amp;quot;, &amp;quot;我爱北京天安门&amp;quot;, &amp;quot;我是苍&amp;quot;],
          &amp;quot;苍&amp;quot;:[&amp;quot;苍天大地&amp;quot;,&amp;quot;苍老师是大家的&amp;quot;,&amp;quot;苍天有井独自空&amp;quot;],
          &amp;quot;平&amp;quot;:[&amp;quot;平凡的世界&amp;quot;,&amp;quot;平白无故&amp;quot;,&amp;quot;平常&amp;quot;]
      };

      function funShow()
      {
        //如果在数据库中存在的话  则创建一个层
        if(keyWords[this.value])
          {
            //create the div
            if(document.getElementById(&#39;dv&#39;))
              {
                //不是 直接&#39;dv&#39;
                document.body.removeChild(document.getElementById(&#39;dv&#39;));
              }
            //开始创建
              var divObj=document.createElement(&#39;div&#39;);
              divObj.id=&#39;dv&#39;;
              divObj.width=&#39;300px&#39;;
              //不要少了  脱离文档流，才可以重新设置坐标
              divObj.style.position=&#39;absolute&#39;;
              divObj.style.border=&#39;1px solid purple&#39;;
              divObj.style.left=this.offsetLeft+&#39;px&#39;;
              //divObj.style.left=tihs.offsetLeft+&#39;px&#39;;
              divObj.style.top=this.offsetHeight+this.offsetTop+&#39;px&#39;;
              document.body.appendChild(divObj);

              for(var i=0; i&amp;lt; keyWords[this.value].length;i++)
              {
                var pObj=document.createElement(&#39;p&#39;);
                pObj.innerHTML=keyWords[this.value][i];
                pObj.style.margin=&#39;5px&#39;;
                divObj.appendChild(pObj);
                pObj.onmouseover=function()
                {
                  this.style.backgroundColor=&#39;red&#39;;
                  this.style.cursor=&#39;pointer&#39;;
                }
                pObj.onmouseout=function()
                {
                  this.style.backgroundColor=&#39;&#39;;
                };
                //增加了点击的事件
                pObj.onclick=function()
                {
                  //alert(this.value);
                  document.getElementById(&#39;searchValue&#39;).value=this.innerText;
                }
              }
          }
        }
            //firefox下检测状态改变只能用oninput,且需要用addEventListener来注册事件。
            if (/msie/i.test(navigator.userAgent))    //ie浏览器
            {
                document.getElementById(&#39;searchValue&#39;).onpropertychange = funShow;
            }
            else {//非ie浏览器，比如Firefox
                document.getElementById(&#39;searchValue&#39;).addEventListener(&amp;quot;input&amp;quot;, funShow, false);
            }


    }
  &amp;lt;/script&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Div id=&amp;quot;main&amp;quot; &amp;gt;
      &amp;lt;Input type=&amp;quot;text&amp;quot; name=&amp;quot;&amp;quot; id=&amp;quot;searchValue&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;&amp;quot; id=&amp;quot;tijiao&amp;quot; value=&amp;quot;Baidu It&amp;quot;/&amp;gt;
    &amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;28：JS常用习惯&lt;/p&gt;

&lt;p&gt;多用js内部的函数
少用全局变量
利用数据结构来定义对象
尽可能使用switch代替else-if语句
减少字节数，增加用户体验&lt;/p&gt;

&lt;p&gt;29：FireFox(FF)和IE的一些不同点&lt;/p&gt;

&lt;p&gt;IE:innerText    FF:textContent
IE:srcElement(事件源）   FF：target
IE:attachEvent   FF:addEventListener   来绑定事件
&lt;a href=&#34;http://www.360doc.com/content/09/0319/12/16915_2855107.shtml&#34; target=&#34;_blank&#34;&gt;http://www.360doc.com/content/09/0319/12/16915_2855107.shtml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JQuery是一个好东西，主要目的是为了统一不同浏览器使用DOM的不同点，屏蔽了不友好的功能！ 这也是下阶段的学习目标。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSDOM7-13节笔记代码March31th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/jsdom7-13jie-bi-ji-dai-ma-march31th/</link>
      <pubDate>Mon, 11 May 2015 14:58:44 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/jsdom7-13jie-bi-ji-dai-ma-march31th/</guid>
      <description>&lt;p&gt;连接到前文JavaScript 7-11节笔记代码&lt;/p&gt;

&lt;p&gt;8: 注册和调用的不同：
注册
  Onclick=function(){}; //匿名函数的注册行为
  Onclick=ff;
调用
   Onclick=ff();&lt;/p&gt;

&lt;p&gt;9:计时器
setInterval反复性计时器（随着一定时间之后 再跳出来）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Var setId=setInterval(function()
{
Alert(‘你名函数’);
}，1000);
clearInterval(setId);
setTimeout一次性计时器：
Var setID= setTimeOut(function()
{
Alert(‘这是一次性计时器’);
},1000);
clearTimeOut(setId);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;计时器小案例1：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;onload=function()
{
        var i = 10;
        setIntervar(function()
            {
               i--;
               var btnObj=document.getElementById(&#39;btn&#39;);//获得btn对象
               btnObj.value=i;//设置该对象的value值即可！
            },1000);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经这么一写：&lt;/p&gt;

&lt;p&gt;规律：所有的标签都可以有id-value对 或者name-value对象 或者class-value对
          完全可以通过document对象获得所有的标签元素的id，name,class进行对应标签内容的设置&lt;/p&gt;

&lt;p&gt;计时器小案例2：
//跑马灯效果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;setIntervale(function()
    {
        var tt=document.title;
        document.title = tt.substring(1)+tt.substr(0,1); //1-尾部  + 0-1的字符
},1000 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10 页面加载事件（3个）
前面接触最多的就是onload ,另外还有onunload,onbeforeload
Onload:页面加载后触发
Onunload 页面退出后触发
Onbeforeunload: 页面关闭之前触发（发表帖子 和   你确定退出？）&lt;/p&gt;

&lt;p&gt;11 刷新后，返回的页面
回顾window.location.href(‘www.baidu.com’); 类似于window.navigaete(‘’)&lt;/p&gt;

&lt;p&gt;12 Document.write的两个作用
动态的创建控件(但是只能在页面加载时候动态创建  ) 但是有一个缺点：在IE中会删掉之前的控件标签，在源代码浏览时候，发现原先的标签都没有了
镶嵌广告&lt;/p&gt;

&lt;p&gt;1.打开 news.baidu.com/newscode&lt;br /&gt;
输入关键字获得新闻的代码
2.复制代码
代码包含两个部分：
样式部分：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;style type=text/css&amp;gt; div{font-size:12px;font-family:arial}.baidu{font-size:14px;line-height:24px;font-family:arial} a,a:link{color:#0000cc;}
.baidu span{color:#6f6f6f;font-size:12px} a.more{color:#008000;}a.blk{color:#000;font-weight:bold;}&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Js脚本部分：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script language=&amp;quot;JavaScript&amp;quot; type=&amp;quot;text/JavaScript&amp;quot; src=&amp;quot;http://news.baidu.com/ns?word=title%3A%E9%A3%8E%E5%8A%9B%E5%8F%91%E7%94%B5&amp;amp;tn=newsfcu&amp;amp;from=news&amp;amp;cl=2&amp;amp;rn=5&amp;amp;ct=0&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明src其实就是document.write的实现！！但是为什么？原理暂时不知道&lt;/p&gt;

&lt;p&gt;查询src里面内容的方式：
1：notepad
2：open-?黏贴进 src的地址
3： 就可以在记事本看到src所代表的新闻内容，他其实就是document.write()的内容！为了保证百度更新新闻的时候他也能更新新闻，所以采用这种document.write()来实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        //第一个功能动态加载控件标签  但是在IE中会使其他的控件消失
        //d当然这边加载 会把原先的页面的控件给隐藏掉！！
//        document.write(&#39;&amp;lt;Font color=&amp;quot;red&amp;quot; size=&amp;quot;6&amp;quot;&amp;gt;Today is &amp;lt;/font&amp;gt;&#39;);
//       document.write(&#39;&amp;lt;Input type=&amp;quot;button&amp;quot; value=&amp;quot;click me&amp;quot;\&amp;gt;&#39;);

      }
      &amp;lt;/script&amp;gt;
&amp;lt;style type=text/css&amp;gt; div{font-size:12px;font-family:arial}.baidu{font-size:14px;line-height:24px;font-family:arial} a,a:link{color:#0000cc;}
.baidu span{color:#6f6f6f;font-size:12px} a.more{color:#008000;}a.blk{color:#000;font-weight:bold;}&amp;lt;/style&amp;gt;

  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;

&amp;lt;script language=&amp;quot;JavaScript&amp;quot; type=&amp;quot;text/JavaScript&amp;quot; src=&amp;quot;http://news.baidu.com/ns?word=title%3A%E9%A3%8E%E5%8A%9B%E5%8F%91%E7%94%B5&amp;amp;tn=newsfcu&amp;amp;from=news&amp;amp;cl=2&amp;amp;rn=5&amp;amp;ct=0&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;13 获得页面元素的三种方法
Document.getElementById(‘btn’)&amp;mdash;-&amp;gt;最常用的方式
Document.getElementByName(‘fds’) &amp;mdash;-&amp;gt;name=”fds”
Document.getElementByTagName(‘Input’)&amp;mdash;-&amp;gt;标签名&lt;/p&gt;

&lt;p&gt;14获取坐标点
顶级对象window包含一个比较重要的对象event可以由此获得当前对象、页面、屏幕&lt;/p&gt;

&lt;p&gt;1：当前对象作为参考点 &amp;ndash;&amp;gt;offsetX|Y
2：当前页面作为参考点 &amp;mdash;&amp;gt;clientX|Y
3：：当前屏幕作为参考点&amp;ndash;&amp;gt;screenX|Y&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;hellow&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
//      alert(document.getElementById(&#39;btn&#39;).titleLabel.text)
     // alert(window.event.button);
      alert(screen.width+&#39;,&#39;+screen.height);
      onload=function()
      {
        document.getElementById(&#39;ak&#39;).onclick=function()
        {
          alert(new Date().toLocaleTimeString());
          window.event.returnValue=false;//IE Opera  google支持  火狐不支持
        }
        document.getElementById(&#39;dv&#39;).onmousemove=function()
        {
          //鲁棒性最好的参数
          if(arguments.length!=0)
            {
              //火狐 google  IE不行
              document.getElementById(&#39;ipClient&#39;).value=arguments[0].clientX+&#39;,&#39;+arguments[0].clientY;
            }else
            {

              document.getElementById(&#39;ipClient&#39;).value=event.clientX+&#39;,&#39;+event.clientY;
            }
          //也可以另外一种鲁棒性的优化
          //能力检测方式！ 
          if(window.event)//判断如果存在则是IE不存在则是火狐  window.event是IE下的重要的属性
            {

              document.getElementById(&#39;ipClient2&#39;).value=event.clientX+&#39;,&#39;+event.clientY;
            }else
            {
              document.getElementById(&#39;ipClient2&#39;).value=arguments[0].clientX+&#39;,&#39;+arguments[0].clientY;
            }
          //火弧+google可以通过  IE不行
          

          //下面代码google和IE支持
          //相对于页面的左上角
            document.title=event.clientX+&#39;,&#39;+event.clientY;
          //相对于屏幕的左上角
            document.getElementById(&#39;btn&#39;).value=event.screenX+&#39;,&#39;+event.screenY;            
            document.getElementById(&#39;ip1&#39;).value=event.screenX+&#39;,&#39;+event.screenY;            
          //相对于当前对象的左上角（this)对象

            document.getElementById(&#39;ip&#39;).value=event.offsetX+&#39;,&#39;+event.offsetY;            
        }
  
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;
  

  &amp;lt;Body&amp;gt;
      &amp;lt;Div id=&amp;quot;dv&amp;quot; color=&amp;quot;red&amp;quot;&amp;gt;
      &amp;lt;button type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; class=&amp;quot;button&amp;quot;&amp;gt;
          屏幕值
      &amp;lt;/button&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;ipClient&amp;quot; value=&amp;quot;页面左上角偏移&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;ipClient2&amp;quot; value=&amp;quot;页面左上角偏移&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;ip&amp;quot; value=&amp;quot;对象的左上角偏移&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;ip1&amp;quot; value=&amp;quot;屏幕的偏移坐标&amp;quot;/&amp;gt;
        hello
      &amp;lt;/Div&amp;gt;
      &amp;lt;Div&amp;gt;
        &amp;lt;A id=&amp;quot;ak&amp;quot; href=&amp;quot;www.baidu.com&amp;quot;&amp;gt;百度&amp;lt;/A&amp;gt;
        &amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15：剪切板clipboard&lt;/p&gt;

&lt;p&gt;当在网页复制的时候或者ctrl+C的时候，会激活body的oncopy函数。
当在网页黏贴的时候或者ctrl+V的时候，会激活body的onpaste函数。
        由此可以模拟页面的进制复制和黏贴的案例，具体如代码所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test copy  clipdata&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&#39;text/javascript&#39;&amp;gt;
      // 一复制则激活oncopy函数
/*
      onload=function()
      {
        document.body.oncopy=function()
        {
          alert(&#39;不让复制&#39;);
          return false;
        };
        document.getElementById(&#39;txt&#39;).onpaste=function()
        {
          alert(&#39;不能黏贴&#39;);
          return false
        };

      };
*/
      onload=function()
      {
        document.body.oncopy=function()
        {
          setTimeout(function()
                      {
                        //IE支持！！  opera 火狐不支持
//出现此错误是因为 window.clipboardData 为 IE 专有，其他浏览器均没有此对象。
                        if(window.clipboardData)
                          {
                            var dataFromClip=clipboardData.getData(&#39;text&#39;)+&#39;你这个拷贝党&#39;;
                              alert(dataFromClip);
                              clipboardData.setData(&#39;text&#39;,  dataFromClip);
                          }else
                            {
                              alert(&#39;Opera不知道如何做了  Opera        无操作剪贴板的对象。&#39;);
                             // window.location=dataFromClip;
                              alert(&#39;&amp;lt;Strong&amp;gt;复制&amp;lt;/Strong&amp;gt;成功！&#39;)
                              return false;
                            }

                      },10);
       };

       };
      document.onclick=function()
      {

        document.write(&#39;hello&#39;);
      }


    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;txt&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt;
    good weather!
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;16：this和事件源srcElement
     this只记录当前对象的id
     alert(window.event.srcElement.id) 只记录最初加载完body第一次点击的id；&lt;/p&gt;

&lt;p&gt;而srcElement其实是可以和事件冒泡的规律相结合的。
事件冒泡是指内层事件的触发，会由内至外的触发外层事件。
为了只是显示最内层的事件，可以用srcElement.id,比如：&lt;/p&gt;

&lt;p&gt;注意点：
    如果text/javscript 则 不会去检查 fucntion的错误！如果写成text/javascript
    则客户端浏览器会去检查 js的语法。
一般规律：
   一定要注意 style里面用的是 background-color  而 在js中用的是  backgroundColor 两者是不同的写法
    并且这个是一个基本的规律！ js中去除了破折号  然后大写后一个单词首字母。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;事件冒泡程序&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      // 如果text/javscript 则 不会去检查 fucntion的错误！如果写成text/javascript
      //则客户端浏览器会去检查 js的语法！
      onload=function()
      {
         document.getElementById(&#39;div1&#39;).onclick=function()
        {
        //  alert(this.id);
        alert(window.event.srcElement.id);
        };
        document.getElementById(&#39;p1&#39;).onclick=function()
        {
          alert(this.id);
        };
        document.getElementById(&#39;str1&#39;).onclick=function()
        {
          alert(this.id);
          //opera IE可以！
          window.event.cancelBubble=true;
          // 火狐e.stopPropagation();
        };
      };
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;!--一定要注意 style里面用的是 background-color  而 在js中用的是  backgroundColor 两者是不同的写法
    并且这个是一个基本的规律！ js中去除了破折号  然后大写后一个单词首字母--&amp;gt;
    &amp;lt;Div id=&amp;quot;div1&amp;quot; style=&amp;quot;width:300px;height:200px;background-color:red;cursor:pointer;&amp;quot;&amp;gt;
      &amp;lt;!--&amp;lt;Div id=&amp;quot;div1&amp;quot; style=&amp;quot;width:300px;height:200px;backgroundColor=red;cursor:pointer;&amp;quot;&amp;gt; 一定要注意不要写成=号形式 style里面写成json形式--&amp;gt;
        
        &amp;lt;!--&amp;lt;P id= &amp;quot;p1&amp;quot; style=&amp;quot;width:100px;height:100px;background-color:blue;cursor:pointer;&amp;quot;&amp;gt;这是第二层文字 --&amp;gt;
          &amp;lt;P id= &amp;quot;p1&amp;quot; style=&amp;quot;width:100px;height:100px;background-color:blue;cursor:pointer;&amp;quot;&amp;gt;
        &amp;lt;Strong id=&amp;quot;str1&amp;quot;&amp;gt;这是第三层文字&amp;lt;/Strong&amp;gt; 
      &amp;lt;/P&amp;gt;
    &amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;17：innerText和innerhtml&lt;/p&gt;

&lt;p&gt;注意1：innerhtml 不要写成innerHtml 否则是undefined
注意2：  var btnObjAgree=document.getElementsByName(&amp;lsquo;agree&amp;rsquo;);
             var timeControl=document.getElementById(&amp;lsquo;time&amp;rsquo;);
            正因为Id没有s 所以他必然是唯一的， 而name TagName都是可以重复 所以他的Element是复数的
案例1：四个按钮 分别显示 设置innerText 设置innerhtml  获取innerText 获取innerhtml
     注意：
        //1   在添加文本时候 Text模式是直接添加无效果  而html是有效果
        //2   在获取文本时候  Text模式是直接获得文本   而html是包含着标签信息
       另外//在firefox不行!!firefox and  Ie is a pair of enemy
          //In Firefox , You should use the statement below
          // dvObj.contentText=&amp;rdquo;&lt;/p&gt;

&lt;p&gt;具体如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;

  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;Test  InnerText And InnerHtml IN fireFox and IE ! &amp;lt;/Title&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      div
      {
        width:300px;
        height:200px;
        background-color:green;
        // 在style中使用 json形式的数据结构
        // 在js中使用  =形式的数据结构
      }
      &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        var dvObj=document.getElementById(&#39;dv&#39;);
        document.getElementById(&#39;btn1&#39;).onclick=function()
        {
          //显示原始的内容  不带上效果
          //Ie  google可以
          dvObj.innerText=&#39;&amp;lt;A href=&amp;quot;http://www.163.com&amp;quot;&amp;gt;网易&amp;lt;/A&amp;gt;&#39;;
          //在firefox不行!!firefox and  Ie is a pair of enemy
          //In Firefox , You should use the statement below
          // dvObj.contentText=&#39;&#39;
        }

        //1   在添加文本时候 Text模式是直接添加无效果  而html是有效果 
        //2   在获取文本时候  Text模式是直接获得文本   而html是包含着标签信息
        document.getElementById(&#39;btn2&#39;).onclick=function()
        {
          //直接添加上效果
          //document.getElementById(&#39;dv&#39;).innerHtml=&#39;&amp;lt;A href=&amp;quot;www.163.com&amp;quot;&amp;gt;网易&amp;lt;/A&amp;gt;&#39;;
          //注意大小写 否则不能显示出 结果
          document.getElementById(&#39;dv&#39;).innerhtml=&#39;&amp;lt;A href=&amp;quot;http://www.163.com&amp;quot;&amp;gt;网易&amp;lt;/A&amp;gt;&#39;;
        }
        document.getElementById(&#39;btn3&#39;).onclick=function()
        {
          alert(dvObj.innerText);
        }
        document.getElementById(&#39;btn4&#39;).onclick=function()
        {
          alert(dvObj.innerhtml);
          //alert(dvObj.innerHtml);
        }


      };
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;innerText insert&amp;quot; id=&amp;quot;btn1&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;innerHtml insert&amp;quot; id=&amp;quot;btn2&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;innerText get&amp;quot; id=&amp;quot;btn3&amp;quot;/&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;innerHtml get&amp;quot; id=&amp;quot;btn4&amp;quot;/&amp;gt;
    &amp;lt;Div id=&amp;quot;dv&amp;quot;&amp;gt;
    &amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案例2：   innerText和计时器联合的一个小程序
             功能需求： 起先按钮是灰色，显示“请仔细阅读协议(5)”  并随时间递减，
                              当回归到0时，则按钮变成可选状态，并其值设置为“同意”。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          实现如下：
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Three small practices&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

        onload=function()
        {
          var btnObjs=document.getElementsByName(&amp;quot;name&amp;quot;);
          for(var i =0; i&amp;lt; btnObjs.length;i++)
          {
            //你再点击之前得把所有的其他颜色都给他恢复成默认
            //这点很重要 ！！ 否则你会发现之前点过的按钮依然是红色的！没有
            //恢复回默认的状态
            btnObjs.onclick=function()
            //对这个网页的逻辑不是特别清楚！ 应该是点击之后才触发的事件
            //而不是你想着我让他点的时候  他就触发！！必须有一个介质！
            //这个介质说大点叫做计算机，说小点叫做onclick
            {
             for(var j=0; j&amp;lt; btnObjs.length;j++)
              {
                btnObjs[j].style.backgroundColor=&#39;&#39;;
              }

                this.style.backgroundColor=&#39;red&#39;;
            }

          }

          var sec=5;
          //不要少了一个s   间接说明 name可以有多个
          //var btnObjAgree=document.getElementsByName(&#39;agree&#39;);
          // 返回的是一个name数组！！！一定得注意 单写上btnobjagree.value不起作用
          var btnObjAgree=document.getElementsByName(&#39;agree&#39;);

          //不要多了一个s   间接说明Id只能有一个
          //var btnObjAgree=document.getElementById(&#39;btn&#39;);
          var setId= setInterval(function()
                     {
                        if(sec&amp;gt; 0)
                          {
                            sec--;
                            btnObjAgree[0].value=&#39;请仔细阅读下列协议(&#39;+sec+&#39;)&#39;;

                          }else
                          {
                            btnObjAgree[0].value=&#39;同意&#39;;
                            btnObjAgree[0].disabled=false;
                            clearInterval(setId);
                          }

                      },1000);

                      setInterval(function(){
                            var timeControl=document.getElementById(&#39;time&#39;);
                            //timeControl.innerText=new Date().toLocalTimeString();//别写错了Locale而不是Local
                            timeControl.innerText=new Date().toLocaleTimeString();

                      },1000);
          };
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;小明&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; name=&amp;quot;agree&amp;quot; value=&amp;quot;请仔细阅读下列协议(5)&amp;quot; disabled=&amp;quot;disabled&amp;quot;/&amp;gt;

    &amp;lt;P id=&amp;quot;time&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案例3：通过一个JSON数据结构，解析到一个表格中，其中表格分为两列，第一列是网址名字(innerText)，第二列是网址的连接（innerhtml）&lt;/p&gt;

&lt;p&gt;注意 ：
1:再进行能力测试的时候，typeof不能写成typeOf
2:  //如果不加入下面一行代码则无法显示！！！甚至调试不出来
          document.body.appendChild(tableObj);
3: JSON数据结构使用逗号进行分隔，不同于在&lt;style type=&#34;text/css&#34;&gt; 中使用分号进行分隔；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Create JSon database and insert them into the table with innerText and Innerhtml&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;


      onload=function()
      {
        document.getElementById(&#39;create&#39;).onclick=function()
        {
        /*
        var dic={&amp;quot;如鹏&amp;quot;:&amp;quot;http://www.rupeng.com&amp;quot;; 
                &amp;quot;百度&amp;quot;:&amp;quot;http://www.baidu.com&amp;quot;;
                &amp;quot;网易&amp;quot;:&amp;quot;http://www.163.com&amp;quot;;
                &amp;quot;搜狗&amp;quot;:&amp;quot;http://www.sougou.com&amp;quot;;
                &amp;quot;新浪&amp;quot;:&amp;quot;http://www.sina.com.cn&amp;quot;;
                &amp;quot;github&amp;quot;:&amp;quot;http://www.github.com&amp;quot;;
        };
        */

       //用逗号隔开  而不是分号
      var dic={&amp;quot;如鹏&amp;quot;:&amp;quot;http://www.rupeng.com&amp;quot;, 
                &amp;quot;百度&amp;quot;:&amp;quot;http://www.baidu.com&amp;quot;,
                &amp;quot;网易&amp;quot;:&amp;quot;http://www.163.com&amp;quot;,
                &amp;quot;搜狗&amp;quot;:&amp;quot;http://www.sougou.com&amp;quot;,
                &amp;quot;新浪&amp;quot;:&amp;quot;http://www.sina.com.cn&amp;quot;,
                &amp;quot;github&amp;quot;:&amp;quot;http://www.github.com&amp;quot;
        };

        var tableObj = document.createElement(&#39;table&#39;);
        tableObj.border=&#39;1 &#39;;
        //tableObj.border=&#39;1 dashed red&#39;;
        for(var key in dic)
          {
            //create line or record
            var trObj=document.createElement(&#39;tr&#39;);
            ///create column
            var tdObj1=document.createElement(&#39;td&#39;);

            // for the safety between firefox and Ie,so talent test
            //if(typeOf(tdObj1.innerText)==&#39;string&#39;)    typeOf应改为typeof
            if(typeof(tdObj1.innerText)==&#39;string&#39;)
            {
              tdObj1.innerText=key;
            }else
            {
              td1.textContent=key;
            }
            var tdObj2=document.createElement(&#39;td&#39;);
            tdObj2.innerhtml=&#39;&amp;lt;A href=+&#39;+dic[key]+&#39;&amp;gt;&#39;+key+&#39;&amp;lt;/A&amp;gt;&#39;;

            //add tdObj1 and tdObj2 to the line or record
            trObj.appendChild(tdObj1);
            trObj.appendChild(tdObj2);
            //add the trObj to the table
            tableObj.appendChild(trObj);


          }
          //如果不加入下面一行代码则无法显示！！！甚至调试不出来
          document.body.appendChild(tableObj);
        }     
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; value=&amp;quot;create list&amp;quot; id=&amp;quot;create&amp;quot;/&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;18：createElement 动态创建标签（无刷新评论的案例，即直接添加评论内容到页面的表格中）
      在之前我们知道只在页面加载的时候可以用document.write()来动态加载控件，那么如何在页面使用的过程中动态加载呢？
具体方法是利用 createElement(&amp;ldquo;标签名&amp;rdquo;) ，最终 会返回一个标签的对象。&lt;/p&gt;

&lt;p&gt;案例1：  创建一个层  并在层中添加按钮   插入按钮  和删除所有按钮
注意1： 给层中加一个id的作用是为了可以供document对象进行调用
注意2：firstChild and lastChild是层的属性  区分于   removeChild()  appendChild()  insertBefore()等方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;  Create Element dynamic &amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        document.getElementById(&#39;btn&#39;).onclick=function()
        {
          var divObj=document.createElement(&#39;div&#39;);

          divObj.style.width=&#39;400px&#39;;
          divObj.id=&#39;dv&#39;; //用于解决在层中添加标签的方式
          divObj.style.height=&#39;200px&#39;;
          divObj.style.backgroundColor=&#39;red&#39;;
          divObj.style.border=&#39;1px solid yellow&#39;;

          document.body.appendChild(divObj);
          
        }
        var count=0;
        document.getElementById(&#39;btnadd&#39;).onclick=function()
        {
          var inputObj=document.createElement(&#39;input&#39;);
          inputObj.type=&#39;button&#39;;
          inputObj.value=&#39;xiaoMing&#39;+count;
          count++;
          // divObj.appendChild(inputObj);//不起作用
          //解决办法  给divObj加一个Id
          document.getElementById(&#39;dv&#39;).appendChild(inputObj);

        }

        document.getElementById(&#39;btnInsert&#39;).onclick=function()
        {
          var inputInObj=document.createElement(&#39;input&#39;);
         inputInObj.type=&#39;button&#39;;
         inputInObj.value=&#39;xiaoming&#39;+count;
         count++;
         var objDivD= document.getElementById(&#39;dv&#39;);
         objDivD.insertBefore(inputInObj,objDivD.firstChild); //必须先找到层中的第一个元素！ 然后插入新的元速
          
        }

        document.getElementById(&#39;btnDelete&#39;).onclick=function()
        {
         var objDivD= document.getElementById(&#39;dv&#39;);
         //firstChild 是层的第一个元素的属性
         //lastChild 是层的最后一个元素的属性

         while(objDivD.firstChild)
           {
             objDivD.removeChild(objDivD.firstChild);
           }
         
        }
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;创建&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnadd&amp;quot; value=&amp;quot;层中创建&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnInsert&amp;quot; value=&amp;quot;层中插入&amp;quot;/&amp;gt;
      &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;btnDelete&amp;quot; value=&amp;quot;删除层中所有元素&amp;quot;/&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案例2： 提供一个评论的界面，包含昵称：
                                                 以及评论内容框和一个input的提交框
            最终把结果展示到页面的下面表格控件中&lt;/p&gt;

&lt;p&gt;注意：
       1: 在提交之后 ，进行name 和评论区域是否为空的判断
                        若评论内容为空，则把屏幕焦点移到评论区域，不进行提交
                        若名称区域为空，则把屏幕焦点移到名称区域，不进行提交&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   2：若没有问题，提交之后得清空name和评论区域的内容
   3：进行能力测试
        火狐和IE是两个不友好的朋友。
        typeof(tdObj1.innerText)==&#39;string&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Test comment submited without refresh 1&amp;lt;/Title&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      #submitArea
      {
        width:300px;
        height:300px;
        background-color:blue;
      }
      #showArea
      {
        //这边使用分号进行隔开！！ 在js中定义json数据格式 一般用逗号隔开！！
        width:400px;
        height:500;
        background-color:green;
      }
      textarea
      {
        width:200px;
        height:200px;

      }
      table
      {
        border:1px dashed yellow;
        background-color:red;
      }
      td
      {
        border:1px solid black;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        document.getElementById(&#39;tijiao&#39;).onclick=function()
        {
        //获取昵称
          var names=document.getElementById(&#39;nicheng&#39;).value;
        //获取评论内容
          var content=document.getElementById(&#39;pinglun&#39;).value;
        //保存信息到一个table中
          var tableObj=document.getElementById(&#39;tb1&#39;);

          //创建一行记录
          var trObj=document.createElement(&#39;tr&#39;);
          //创建一列
          var tdObj1=document.createElement(&#39;td&#39;);
          var tdObj2=document.createElement(&#39;td&#39;);

          //设置值
/*
          tdObj1.value=names;
          tdObj2.value=content;
*/
          //忘记了使用innerText and innerhtml
          
          if(typeof(tdObj1.innerText)==&#39;string&#39;)
          {
            tdObj1.innerText=names;
          }else
          {
            tdObj1.textContent=names;
          }
          if(typeof(tdObj2.innerText)==&#39;string&#39;)
          {
            tdObj2.innerText=content;
          }else
          {
            tdObj2.textContent=content;
          }
                  //添加列到记录中
          trObj.appendChild(tdObj1);
          trObj.appendChild(tdObj2);

          tableObj.appendChild(trObj);

          names.value=&amp;quot;&amp;quot;;
          content.value=&amp;quot;&amp;quot;;

          document.getElementById(&#39;nicheng&#39;).value=&amp;quot;&amp;quot;;
          document.getElementById(&#39;nicheng&#39;).focus();
          document.getElementById(&#39;pinglun&#39;).value=&amp;quot;&amp;quot;;
                    

        }
      }
         
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Div id=&amp;quot;submitArea&amp;quot;&amp;gt;
      &amp;lt;Label&amp;gt;昵称:&amp;lt;/Label&amp;gt;&amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;nicheng&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;Textarea id=&amp;quot;pinglun&amp;quot; rows=&amp;quot;15&amp;quot; cols=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;/Textarea&amp;gt;
      &amp;lt;br/&amp;gt;
      &amp;lt;input type=&amp;quot;submit&amp;quot; id=&amp;quot;tijiao&amp;quot; value=&amp;quot;提交&amp;quot;/&amp;gt;
    &amp;lt;/Div&amp;gt;

    &amp;lt;Div id=&amp;quot;showArea&amp;quot;&amp;gt;
      &amp;lt;Table id=&amp;quot;tb1&amp;quot;&amp;gt;
        
      &amp;lt;/Table&amp;gt;
    &amp;lt;/Div&amp;gt;

  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案例延展
案例3： 上面并没有进行名称区域和评论区域为空的判断
       另外的，也可以使用table.insertRow(-1)  并利用返回来的行对象创建列insertCell(-1)来创建
        一个好处是不需要像createElement，在结尾需要进行appendChild添加节点的错做。
注意点：列的值设置需要用innerText或者innerhtml进行设置（style部分保持一样）&lt;/p&gt;

&lt;p&gt;具体如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; Test comment submited without refresh 2&amp;lt;/Title&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
      #submitArea
      {
        width:300px;
        height:300px;
        background-color:blue;
      }
      #showArea
      {
        //这边使用分号进行隔开！！ 在js中定义json数据格式 一般用逗号隔开！！
        width:400px;
        height:500;
        background-color:green;
      }
      textarea
      {
        width:200px;
        height:200px;

      }
      table
      {
        border:1px dashed yellow;
        background-color:red;
      }
      td
      {
        border:1px solid black;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        document.getElementById(&#39;tijiao&#39;).onclick=function()
        {
        //获取昵称
          var names=document.getElementById(&#39;nicheng&#39;).value;
        //获取评论内容


        //增加一个输入参数值的有效性 判断！
             if(names==&amp;quot;&amp;quot;)
              {
               // alert(names+typeof(names));
                alert(&#39;请输入昵称内容&#39;);
                document.getElementById(&#39;nicheng&#39;).focus();
                return ;
              }else
              {
                var content=document.getElementById(&#39;pinglun&#39;).value;

                //alert(content+typeof(content));
                  if(content==&amp;quot;&amp;quot;)
                  {
                    alert(&#39;请输入评论内容&#39;);
                    document.getElementById(&#39;pinglun&#39;).focus();
                    return false;
                  }


              }


        //保存信息到一个table中
          var tableObj=document.getElementById(&#39;tb1&#39;);

          //不需要CreateElement之后还需要 appendChild的操作
          //创建一行记录
          var trObj=tableObj.insertRow(-1);
          //创建一列
          var tdObj1=trObj.insertCell(-1);
          var tdObj2=trObj.insertCell(-1);

          //设置值
/*
          tdObj1.value=names;
          tdObj2.value=content;
*/
          //忘记了使用innerText and innerhtml
          
          if(typeof(tdObj1.innerText)==&#39;string&#39;)
          {
             tdObj1.innerText=names;
          }else
          {
             tdObj1.textContent=names;
          }
          if(typeof(tdObj2.innerText)==&#39;string&#39;)
          {
            tdObj2.innerText=content;
          }else
          {
            
            tdObj2.textContent=content;
          }
                  //添加列到记录中
          //names.value=&amp;quot;&amp;quot;;
          //content.value=&amp;quot;&amp;quot;;

          document.getElementById(&#39;nicheng&#39;).value=&amp;quot;&amp;quot;;
          document.getElementById(&#39;nicheng&#39;).focus();
          document.getElementById(&#39;pinglun&#39;).value=&amp;quot;&amp;quot;;
                    

        }
      }
         
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Div id=&amp;quot;submitArea&amp;quot;&amp;gt;
      &amp;lt;Label&amp;gt;昵称:&amp;lt;/Label&amp;gt;&amp;lt;Input type=&amp;quot;text&amp;quot; id=&amp;quot;nicheng&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;Textarea id=&amp;quot;pinglun&amp;quot; rows=&amp;quot;15&amp;quot; cols=&amp;quot;10&amp;quot;&amp;gt; &amp;lt;/Textarea&amp;gt;
      &amp;lt;br/&amp;gt;
      &amp;lt;input type=&amp;quot;submit&amp;quot; id=&amp;quot;tijiao&amp;quot; value=&amp;quot;提交&amp;quot;/&amp;gt;
    &amp;lt;/Div&amp;gt;

    &amp;lt;Div id=&amp;quot;showArea&amp;quot;&amp;gt;
      &amp;lt;Table id=&amp;quot;tb1&amp;quot;&amp;gt;
        
      &amp;lt;/Table&amp;gt;
    &amp;lt;/Div&amp;gt;

  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;19：一个综合的小案例：
   功能： 1点击按钮，则奇数行为红色，偶数行蓝色
              2鼠标移动时候，对应的对象变红色，其他的默认颜色：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt; change the table&#39;s even and odd line&#39;s color&amp;lt;/Title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      onload=function()
      {
        //获得点击的按钮
        document.getElementById(&#39;changeColor&#39;).onclick=function()
        {
          //如何获得表格的长度？？？
          var tds=document.getElementById(&#39;tb1&#39;).getElementsByTagName(&#39;td&#39;);
          for(var i=0;i&amp;lt;tds.length;i++)
          {
            //当为奇数的时候  其实也可以用css解决方式
            if(i%2==0)
              {
                tds.style.backgroundColor=&#39;red&#39;;
              }else
              {
                tds.style.backgroundColor=&#39;blue&#39;;
              }
          }
        };

        //进行鼠标移动变色的事件
          var tds1=document.getElementById(&#39;tb1&#39;).getElementsByTagName(&#39;td&#39;);
          for(var j=0;j&amp;lt;tds1.length;j++)
          {
            tds1[j].onmousemove=function()
            {
              for(var k=0; k&amp;lt;tds1.length;k++)
              {
                  tds1[k].style.backgroundColor=&#39;&#39;;  
              }  
              this.style.backgroundColor=&#39;red&#39;;
            }
          }
      };
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; id=&amp;quot;changeColor&amp;quot; value=&amp;quot;change color of the table&amp;quot;/&amp;gt;

    &amp;lt;Table id=&amp;quot;tb1&amp;quot;&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;第一行&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;第二行&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;第三行&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;第四行&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;第五行&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;第六行&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;/Table&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;小结： 学会了添加事件，认识了事件冒泡过程，理解了document.write的两个作用（document.writeln暂时不管 实际上只有&lt;br&gt;才是真正的网页换行）
          并对innerText和innerHtml进行区分，结合createElement可以动态的创建标签，弥补了document.write的不足之处（只在网页加载的时候创建），
           再次利用JSon数据结构来动态显示数据，我们会发现所有的html代码中犹如一颗颗树，可以利用三种调用标签的方式来调用所有的元素，可是我们
           总是需要写那么长的代码，可以简化？有。&lt;/p&gt;

&lt;p&gt;20：最后通过一个较典型的案例来结尾：
          功能1: 把JSON数据结构进行table侠士
                    功能2：设置复选框的全选
                     功能3：设置title的走马灯效果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;Title&amp;gt;
        Tree! Tree ! Everywhere fills with trees.
    &amp;lt;/Title&amp;gt;


    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var de = document.documentElement;
      alert(de.tagName);

      var head=document.getElementsByTagName(&amp;quot;Head&amp;quot;);
      var body=document.getElementsByTagName(&amp;quot;Body&amp;quot;);

      alert(head);
     // alert(head.firstChild.nodeName);
      alert(body);

      var imgObj=document.getElementsByTagName(&amp;quot;img&amp;quot;);
      var imgObj1=document.getElementsByTagName(&amp;quot;34&amp;quot;);
      alert(imgObj.alt);
      alert(imgObj1.alt);

      //用于把JSON的数据结构 生成一个列表
      function createTable()
      {
        var div=document.getElementById(&amp;quot;news&amp;quot;);
        var table=document.createElement(&amp;quot;table&amp;quot;);
        table.border=1;
        //创建一个JSON数据结构，用于存储网络地址d
        var newsBlog={&amp;quot;如鹏网站&amp;quot;:&amp;quot;http://www.rupeng.com&amp;quot;,
          &amp;quot;网易博客&amp;quot;:&amp;quot;http://www.163.com&amp;quot;,
          &amp;quot;sina网站&amp;quot;:&amp;quot;http://www.sina.com&amp;quot;};//可以进行无限的添加
        for(var name in newsBlog)
          {
            //创建行列结构
            var tr = document.createElement(&amp;quot;tr&amp;quot;); //创建一个tr对象
            var td1 = document.createElement(&amp;quot;td&amp;quot;); //创建一个第一列td1
            var td2 = document.createElement(&amp;quot;td&amp;quot;); //创建一个第一列td1

            //设置行列属性
            td1.innerText=name;
            td2.innerhtml=&amp;quot;&amp;lt;a href=&amp;quot;+newsBlog[name]+&amp;quot;&amp;gt;&amp;quot;+newsBlog[name]+&amp;quot;&amp;lt;/A&amp;gt;&amp;quot;;

            //添加节点
            tr.appendChild(td1);
            tr.appendChild(td2);
            //添加行到表中
            table.appendChild(tr);

          }
          //div层添加table节点
          div.appendChild(table);
          table.style.listStyle=&amp;quot;none&amp;quot;;
          table.style.color=&amp;quot;blue&amp;quot;;
      }

      //设置全选
      function setCheckedAll()
      {
        //获取所有name=&amp;quot;setall&amp;quot;的标签   注意多一个s
        var allBtns= document.getElementsByName(&amp;quot;setall&amp;quot;);
        //var allBtns= document.getElementByName(&amp;quot;setall&amp;quot;);
        //获取id=”all&amp;quot;的标签节点
        var setOpenBtn = document.getElementById(&amp;quot;all&amp;quot;);
        for(var i = 0; i &amp;lt; allBtns.length; i++)
        {
          allBtns.checked = setOpenBtn.checked;
          allBtns.onclick = function()
          {
            var b = true;
            //为什么要进行一个循环
            //因为  再进行单选时候 得清楚所有之前的checkbox的状态！
            for(var i = 0 ; i&amp;lt; allBtns.length; i++)
            {
              if(!allBtns.checked)
                {
                  b = false;
                  break;
                }
                setOpenBtn.checked = b;
            }
          }
        }

      }

      //设置标签title的走马灯效果
      function scroll()
      {
        var title=document.title;
        var first=title.charAt(0);
        var last =title.substring(1,title.length);
        document.title=last+first;
      }
      setInterval(&amp;quot;scroll()&amp;quot;,500);

      /*
      鼠标事件
      onclick
      ondbclick
      onkeydown
      onkeyup
      onkeypress
      onmousedown
      onmousemove
      onmouseout
      onmouseover
      onmouseup
       
       
      */

    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;

  &amp;lt;Body&amp;gt;
    &amp;lt;Div value=&amp;quot;全选区&amp;quot;&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;setall&amp;quot; /&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;setall&amp;quot; /&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;setall&amp;quot; /&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;setall&amp;quot; /&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;setall&amp;quot; /&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;setall&amp;quot; /&amp;gt;
      &amp;lt;Input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;&amp;quot; id=&amp;quot;all&amp;quot;/&amp;gt;
    &amp;lt;/Div&amp;gt;
    &amp;lt;Div id =&amp;quot;news&amp;quot;&amp;gt;

    &amp;lt;/Div&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; value=&amp;quot;生成列表&amp;quot;/&amp;gt;
    &amp;lt;H1&amp;gt;Tree ! Everything can become trees.&amp;lt;/H1&amp;gt;
    &amp;lt;P&amp;gt;Html代码层层嵌套像一颗颗&amp;lt;Em&amp;gt;树&amp;lt;/Em&amp;gt;一样。&amp;lt;/P&amp;gt;
    &amp;lt;Div&amp;gt;一层一层的数&amp;lt;Img id=&amp;quot;34&amp;quot; src=&amp;quot;&amp;quot; alt=&amp;quot;如果没有图片会显示我&amp;quot;/&amp;gt;&amp;lt;/Div&amp;gt;
  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面为止是到第JSDom15的内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>March15th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/march15th/</link>
      <pubDate>Mon, 11 May 2015 14:58:44 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/march15th/</guid>
      <description>&lt;p&gt;一、练习总结
        1.利用jq插入节点有4个一致性很强的： append，prepend，after，before。其中append和prepend都是对于子节点的添加。after和befor是对于兄弟节点的添加。
        2.ChildNode和Childen是不同的，因为ChildNode会把空格远算进去。那么Each遍历的是啥？
        3.对于“：”不要乱用。要明确到底有哪些!
        4.对于 ：什么的，都是起到一个修饰作用。
        5. :even 是选择偶数  :odd是选择奇数  :eq(index)   :gt(index)   :lt(index)   关于gt理解是greate than 是大于，less than是小于。:not
        6.Jq的索引是从0开始的。
        7.子节点的事件会传递给父节点!？这个叫做事件冒泡.不懂。
        8.对于冒号修饰符的使用，可以重复多个配合一起使用：比如。$(&amp;ldquo;table:first  tr:even&amp;rdquo;).css(&amp;ldquo;background&amp;rdquo;, &amp;ldquo;#ffaacc&amp;rdquo;);
        9.change是在文本域丢失焦点的时候才会触发的。
        10.关于 $(&amp;ldquo;ul li&amp;rdquo;) 和 $(&amp;ldquo;ul&amp;gt;li&amp;rdquo;)是不同的，前者的空格表示的是后台元素，而大于号表示的子代元素。后代元素是包括了子代孙元素的。而子代元素只有子代。
        11.空格不要乱打!空格表示的是后代，不要忽略这个问题了。&lt;/p&gt;

&lt;p&gt;一、前端知识
        1.Javascript刷新页面的几种方法：
                1）  history.go(0)
                2）  location.reload()
                3)     location=location
                4)     location.assign(location)
                5)     document.execCommand(&amp;lsquo;Refresh&amp;rsquo;)
                6)     window.navigate(location)
                7）  location.replace(location)
                8） document.URL=location.href
                说明一下，jQuery没有发现刷新页面的方法。
        2.remove() detach()都有移除的作用，且他们返回值都是这个被移除的对象。如果重新将这个添加上去，remove绑定的事件会消失，而detach的不会消失。
        3.empty() 是清空所有的后台节点。
        4.warp()是包裹的：ex $(&amp;ldquo;#city&amp;rdquo;).wrap(&amp;rdquo;&lt;strong&gt;&lt;/strong&gt;&amp;rdquo;);
        5.clone()是克隆的意思，如果添加了true表示克隆事件，如果不加true只克隆外形不克隆事件。
        6.repalceWith()，replaceAll()2个repalce方法是替换，需要注意的，一旦替换，之前的元素会消失。
        7.关于val()和text()区别。对于input这种单标签而言，val()就是他们的值，对于&lt;li&gt;或者&lt;p&gt;这种双标签而言就是用text()。
                注意了input的文本框的值是value。
        8.对于focus和blur都是在刚触发事件的某一个时候触发的事件。
        9.next()，pre()，siblings()，三个都是获取同辈元素。next是之后的，pre是之前的，sibling()是获取所有的同辈元素。
        10.(selector).each(function(){     &amp;hellip;.       });
        11.$(selector).children(&amp;ldquo;.bb&amp;rdquo;)这个就是选出selector子节点中符合要求：类名为bb的所有节点。
        12.window.onload 是在Dom加载完毕且关联元素加载完毕后才执行。而$(document).ready()是在DOM加载完毕后就执行，效率更高。
        13.window.onload只执行一次，$(document).ready()执行多次。
        14.JQ的事件比起JS来说，少了on这个2个前缀。
        15.这2个状态不能记忆混淆了  :hiden :visible  一个是隐藏，一个是可见。 hide()   visible()
        16.链式编程为同一个元素添加不同状态的方法可以分开写，也可以使用bind来把绑定不停形态下的方法，当然还有更简单的方法&lt;br /&gt;
         $(&amp;ldquo;#panel .head&amp;rdquo;).mouseover(function () { }).mouseleave(function () { });&lt;br /&gt;
        17.(&amp;ldquo;selector&amp;rdquo;).toggle(fun1,fun2,fun3,&amp;hellip;);用于模拟在这个selector上的鼠标单击事件。表示的是这个对于这个selecor依次点击 会触发事件f1,f2,f3&amp;hellip;触发完毕后会从头开始轮询。
        18.return false 比 event.stopPropagation() 和 event.preventDefault()更好用。可以代替这2个。
        19.事件冒泡是因为从小到大，都有某一个相同的事件被触发，会从里到外依次触发。
        20.事件捕获和事件冒泡是一个相反的过程，捕获是从外到内，冒泡是从内到外。
一、JQ学习
        1.$(selector).bind(funName1,func1).bind(funName2,func2)&amp;hellip; 这种写法不方便，JQ提供了一套简写的机制：$(selector).fucName1(func1).funName2(func2)
        2.可以为一个selector绑定多个事件。
        3.对于状态判定可以使用  $(selector).is(&amp;rdquo;:visible&amp;rdquo;)   注意了：visible 是可见的。
        4.在this的写方法，又犯了一个经典错误：   $(this) 才是正确的。但是 $(&amp;ldquo;this&amp;rdquo;)就是错误的。this的理解应该是触发这个事件的对象。
        5.JQ有2个合成事件，一个是hover一个是toggle，其中hover是鼠标的enter和leave，其写法为  $(selector).hover(enter,leave)
                还有一个是toggle(fun1,fun2&amp;hellip;)这个是模拟鼠标点击事件。
        6.当某一个对象要解绑某个事件的时候，可以使用：  $(selector).unbind(funcName) 或者 $(selector).unbind() ，前者解绑某一个方法，后者解绑所有的方法。
        7.one(funcName,func) 用在触发一次的事件上。
        8.JQ中的动画有hide()和show()，要实现动画效果，括号中需要给毫秒为单位的值，就可以实现动画效果了。
        9.fadeIn()和fadeOut()可以改变不透明度。括号中同样可以给出参数，fadeIn是慢慢显示，fadeOut是慢慢消失。
        10.slideUp()，slideDown()分别是改变所选的宽度。
        11.   :checked 被选中和  checked=&amp;ldquo;checked&amp;rdquo;是有区别的。个人理解：被选中不一定会有checked=&amp;ldquo;checked&amp;rdquo; 但是一定可以通过状态 :checked 来获取。
        12.总结 ：对于要获取处于某个状态的元素，可以使用  :状态   来获取。
        13.对于使用多个属性来取值，可以使用  $(&amp;ldquo;selector[id=123][name=lcf]&amp;ldquo;)
        14.JQ中支持在Childen(&amp;rdquo;:checked&amp;rdquo;)来选取子元素中被选取了的元素。
        15.JQ中，只有要括号，就可以在括号里面写筛选条件。
        16.对于利用Jq添加上去的东西，可以为其添加一个id获取class，方便进行处理。
        17.JQ中移除替换都会删除以前的元素。
        18.$(selector).toggle 用于切换状态，当前显示就变成隐藏，当前隐藏就是变成显示。
        19.$(selector).toggleClass(&amp;ldquo;className&amp;rdquo;)如果当前选择的有这个类就删除，没有就添加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1.思考：要想实现Jquery这样的“链式编程”那么每个方法的返回值就应该是调用者本身，即return  this.
    2.导入Jqeruy的时候，特别注意了，要有2个script，第一个script是利用src导入jquery的文件，不要在里面写jquery代码。第二个写script才开始写jquery代码。
    3.Jqeruy中是可以有多个 $(document).ready(function(){.....});
    4.如果某个函数在页面加载完了就执行了，考虑这个函数是不是没有放在括号里面的function(){写在这里};
    5.Jqeruy中的事件和JS中不一样：
            onClikc ---click
    6.Jquery中事件的函数是写在里面的，比如规范写法如下：
             $(&amp;quot;#bj&amp;quot;).click(function () {
            alert(&amp;quot;HH&amp;quot;);
        });
       这个时候如果写成这样：
        $(&amp;quot;#bj&amp;quot;).click(alert(&amp;quot;HH&amp;quot;));
        表示的意思就不一样了，这个就是说函数执行到这个地方就开始执行。而且没有绑定函数。
    7.如果子元素为当前的this，那么next是父元素的下一个，而不是子元素的!？
    8.再次强调，this是Dom对象，在Jquery使用的时候，要转换为Jquery对象$(this)
    9.对于某个属性赋值或者获取值使用的是  attr(&amp;quot;name&amp;quot;,&amp;quot;lcf&amp;quot;)  或者 var myName=attr(&amp;quot;name&amp;quot;)
    10.判断2个字符串相等使用的是==，且支持三目运算符。
    11.JS中变量的类型：boolean 字符串  数值类型。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;四、练习总结二
        1.Jquery中属性可以通过[ name=bb]  来匹配，也可以通过  .attr(&amp;ldquo;bb&amp;rdquo;) 来获取，同时 .attr(&amp;ldquo;bb&amp;rdquo;,&amp;ldquo;love&amp;rdquo;)来赋值;。
        2.操作文本节点可以通过文本节点的父节点来操作。比如&lt;p id=&#34;mm&#34;&gt;我爱你&lt;/p&gt;。通过id为mm获取到p然后text()就可以了。
        3.在html中标签就是元素，元素就是标签，完全可以这么理解。
        4.对于属性的操作可以使用attr来，如果要取值使用    $(&amp;ldquo;#bb&amp;rdquo;).attr(&amp;ldquo;value&amp;rdquo;) 可以获取id为bb的value值。如果要赋值  $(&amp;ldquo;#bb&amp;rdquo;).attr(&amp;ldquo;value&amp;rdquo;,&amp;ldquo;我爱你&amp;rdquo;);
        5.对于value更有更简单的操作就是 val()。上面的等价于  $(&amp;ldquo;#bb&amp;rdquo;).val(&amp;ldquo;123&amp;rdquo;)这个赋值                 $(&amp;ldquo;#bb&amp;rdquo;).val();这个取值。
        6.append是在被选定节点的内部添加上XXX，prepend是在某个元素前（仍然在内部）添加子节点。
        7.after和append添加方式和6的append和prepend相同，但是这2个添加的是兄弟节点。
        8.关于6和7，如果我们要添加一个东西就直接写就是了，比如：   $(&amp;ldquo;#bj&amp;rdquo;).after(&amp;rdquo;&lt;li&gt;成都&lt;/li&gt;&amp;rdquo;); 这种形式。&lt;/p&gt;

&lt;p&gt;1.对于JS来说，在Web中，最重要的应用之一就是DOM。
        2.Dom是针对HTML和XML操作的一个API。
        3.Dom将一个文档表示为一颗家族树（父，兄，子 节点）
        4.几个常用的API。
                getElementById 只能用document来使用，通过id查找一个节点。
                getElementsByTagName  返回的是一个数组，通过指定的标签名去寻找，不必作用于整个文档。
                hasChildNodes 调用的节点是否含有子节点。
        5.Dom中的节点有文本节点（Text），属性节点（Attribute），元素节点（Element）。
        6.以上3类节点中，都有如下属性：
                nodeName：只读，标识的是给定节点的名字，该节点为只读属性。对于文本节点返回的是 #text 的字符串。
                noteType：只读，返回值为int，标识节点的类型。元素节点 1，属性节点 2，文本节点 3。（从小到大的记忆顺序）
                nodeValue: 可读，可写。返回当前节点的值，属性节点返回属性的值，文本节点返回文本的值，元素节点啥都没有。
        7.Dom中常用方法：
                replaceChild()：返回值是一个指向新的或者旧的节点。（？）作用是吧一个父元素中的子节点替换为另外一个子节点。
                        ex:        var reference = element.replaceChild(newChild,oldChild);
                getAttribute(): 返回的是指定元素的给凌属性的值。
                        ex:        var attributeValue = element.getAttribute(attributeName);
                setAttribute(key,value)：为指定的元素添加某个属性，如果此属性已经存在就刷新，如果不存在就添加。
                        ex:      var para = document.createElement(“p”);           para.setAttribute(“id”,”fineprint”);
                createElement(eleName):通过指定的标签名字来创建一个元素节点。这个新创建的节点没实际添加到某个节点上。
                        ex:        var oP = document.createElement(&amp;ldquo;p&amp;rdquo;);
                createTextNode()：创建一个包含指定文本的文本节点。返回值为一个指向新建文本节点的指针。
                        ex: var oText=document.createTextNode(&amp;ldquo;HEllo world&amp;rdquo;);
                appendChild()：为指定的元素添加一个节点到最后一个节点后。
                insertBefore()：在指定的节点前面添加。
                        ex:        var reference = element.insertBefore(newNode,targetNode);
                        注：Dom没有提供insertAfter()方法：就是在插入节点的下一个节点之前添加，就是在指定节点的前面添加。
                removeChild()：在指定节点中的子节点删除一个节点。
                        注：一定要是父节点去调用然后括号里面是自己点。
                        ex： var message = document.getElementById(“fineprint”);
                                        var container = message.parentNode;
                                        container.removeChild(message);
        8.Dom中常用属性
                ChildNodes：返回的是指定父节点的所有子节点。
                        注：文本节点和属性节点，肯定不含有子节点了，如果调用这个属性，会返回空数组。
                firstChild:返回的是指定元素的第一个子节点。
                        ex:node.ChileNodes[0]和firstChild 是相同的。
                lastChild:和first想法，最后一个。
                nextSibling：指定节点的下一个子节点。
                previousSibling:指定节点的上一个子节点。
                parentNode：返回的是指定节点的父节点。
二、JavaScript练习总结
        1.window.onload=function(){&amp;hellip;}表示的是在页面加载完成后便开始运行。
        2.node.insertBefor(new node,null)。这样调用就可以在指定的前面添加了!
        3.如果网页乱码，可以在&lt;head&gt;&lt;/head&gt;之间加上：  &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
        4.特别说明：insertBefor这个方法。3个参数：  paraentNode.insertBefor(newNode,childNodeInParaNode);
                就是说哪个Node来调用insertBefore方法就是在那个Node的子节点中插入，其中第一个参数是要插入的节点，第二个参数是自己点中要在哪个指定的子元素前面。
                注：第二个节点可是是null，就表示在最后添加，同AppendChild。特别注意了。
        5.getElementByTagName(&amp;ldquo;标签&amp;rdquo;)，这个里面输入的是HTML的标签。
        6.对于元素节点的nodeName，其返回值永远是大小的标签。
        7.忘记nodeValue吧，使用value就够了，前面的需要区分下。
        8.value这个属性可读可写。
        9.对于使用firstChild和lastChild不是我们所见的第一个。这个特别注意了。
        10.通常来说firstNode和lastNode获取的是文本节点。
        11.对于文本节点，如果要设置他的值，需要使用nodeValue而不是value。比如说firstChild和lastChild获取的都是属于文本节点。
        12.为某一个节点添加 可以使用innderHtml也可以使用 创建一个TextNode然后添加到某个节点上去。
        13.对于replaceChild，parentNode.replaceChild(newChild，childInParane).这个方法的作用是父节点调用替换某个子节点，第一个节点一般都是新的节点，第二个节点
        14.几个不加括号的地方:
                window.onload=function myFunc(){&amp;hellip;}
        15.在JS中，方法带了括号表示运行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.Jquery是对JavaScript进行封装后的库，其主旨是“写的少，做的多”
    2.在Jquery中Jquery是一个顶级对象，所有的方法都在这个对象下，且 $ 是这个方法的别名。
    3.Dom对象和Jqeruy对象是不同的，只有Jquery对象才能调用Jquery的方法，Dom对象不可以。
    4.Jquery的对象在形式上用 $开头比如   var   $node=$(&amp;quot;button&amp;quot;);
    5.Jqeruy对象转Dom对象一般通过下标来获取，比如   var  firstNode=$node[0];或者  var  secodNode=$node.get[0];
    6.Dom对象转Jquery对象  就是在Dom对象前面加上$就行了，比如说:   var  $node =$(document.getElementById(&amp;quot;ok&amp;quot;));
    7.this永远是Dom对象而$(this)
    8.Jqery的选择器：
            id选择器  #id         ${&amp;quot;#idName&amp;quot;}
            class选择器  .class        ${&amp;quot;.className&amp;quot;}
            所有元素选择器  ${elementName}    ${&amp;quot;p&amp;quot;}
    8.选择器是Jquery的基础，以下为基本的选择器 #为id选择器  .为类选择器  $(&amp;quot;div&amp;quot;) 是所有的名为div的选择器， $(&amp;quot;*&amp;quot;)是选择的所有。
    9.层次选择器:        
            $(&amp;quot;body   div&amp;quot;)：选取的是body里面的div，包括子元素中的子元素。
            $(&amp;quot;body &amp;gt; div&amp;quot;)： 选取的是body子元素中的div        特别注意：这个选取的才是子元素,而且子元素中所有的。
            $(&amp;quot;.one + div&amp;quot;)：选取的是class为one的兄弟节点中下一个div。
            $(&amp;quot;.one ~ div&amp;quot;)： 选取的是class为one后面的所有的div   推荐写法                  $(&amp;quot;.one&amp;quot;).next(&amp;quot;div&amp;quot;)  
            注：对于第一个 选取的是body下面的所有div就是依次遍历所有的div。而第二是选取的body下面的第一层子元素的div。
    10.基本过滤器中有3个很重要：
            $(&amp;quot;div:first&amp;quot;)：div中第一个节点。
            $(&amp;quot;div:last&amp;quot;)：div中最后一个节点。
            $(&amp;quot;:focus&amp;quot;)：当前正在focus的。
            $(&amp;quot;:animate&amp;quot;):当前正在运行的。
    11.几个内容过滤器：
            $(&amp;quot;div:contains(txt)&amp;quot;)：div下内容包含txt的所有，不仅仅是第一个。
            $(&amp;quot;div:empty&amp;quot;):div下内容为empty的
    12.属性过滤器
            $(div[tille=bb]):选取div下有属性名为title，值为bb的元素。
            $(div[title]):选取含有title属性的元素。
            $(div[title]*=bb):选取div下属性值title中带有bb的元素。
            $(div[title]^=bb):选取div下属性为title以bb开头的元素。
            $(div[title]$=bb):选取div下title属性以bb结尾的元素。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多个时间段的笔记，未整理，周末抽空整理!
一、复习DOM
        1.对于JS来说，在Web中，最重要的应用之一就是DOM。
        2.Dom是针对HTML和XML操作的一个API。
        3.Dom将一个文档表示为一颗家族树（父，兄，子 节点）
        4.几个常用的API。
                getElementById 只能用document来使用，通过id查找一个节点。
                getElementsByTagName  返回的是一个数组，通过指定的标签名去寻找，不必作用于整个文档。
                hasChildNodes 调用的节点是否含有子节点。
        5.Dom中的节点有文本节点（Text），属性节点（Attribute），元素节点（Element）。
        6.以上3类节点中，都有如下属性：
                nodeName：只读，标识的是给定节点的名字，该节点为只读属性。对于文本节点返回的是 #text 的字符串。
                noteType：只读，返回值为int，标识节点的类型。元素节点 1，属性节点 2，文本节点 3。（从小到大的记忆顺序）
                nodeValue: 可读，可写。返回当前节点的值，属性节点返回属性的值，文本节点返回文本的值，元素节点啥都没有。
        7.Dom中常用方法：
                replaceChild()：返回值是一个指向新的或者旧的节点。（？）作用是吧一个父元素中的子节点替换为另外一个子节点。
                        ex:        var reference = element.replaceChild(newChild,oldChild);
                getAttribute(): 返回的是指定元素的给凌属性的值。
                        ex:        var attributeValue = element.getAttribute(attributeName);
                setAttribute(key,value)：为指定的元素添加某个属性，如果此属性已经存在就刷新，如果不存在就添加。
                        ex:      var para = document.createElement(“p”);           para.setAttribute(“id”,”fineprint”);
                createElement(eleName):通过指定的标签名字来创建一个元素节点。这个新创建的节点没实际添加到某个节点上。
                        ex:        var oP = document.createElement(&amp;ldquo;p&amp;rdquo;);
                createTextNode()：创建一个包含指定文本的文本节点。返回值为一个指向新建文本节点的指针。
                        ex: var oText=document.createTextNode(&amp;ldquo;HEllo world&amp;rdquo;);
                appendChild()：为指定的元素添加一个节点到最后一个节点后。
                insertBefore()：在指定的节点前面添加。
                        ex:        var reference = element.insertBefore(newNode,targetNode);
                        注：Dom没有提供insertAfter()方法：就是在插入节点的下一个节点之前添加，就是在指定节点的前面添加。
                removeChild()：在指定节点中的子节点删除一个节点。
                        注：一定要是父节点去调用然后括号里面是自己点。
                        ex： var message = document.getElementById(“fineprint”);
                                        var container = message.parentNode;
                                        container.removeChild(message);
        8.Dom中常用属性
                ChildNodes：返回的是指定父节点的所有子节点。
                        注：文本节点和属性节点，肯定不含有子节点了，如果调用这个属性，会返回空数组。
                firstChild:返回的是指定元素的第一个子节点。
                        ex:node.ChileNodes[0]和firstChild 是相同的。
                lastChild:和first想法，最后一个。
                nextSibling：指定节点的下一个子节点。
                previousSibling:指定节点的上一个子节点。
                parentNode：返回的是指定节点的父节点。
二、JavaScript练习总结
        1.window.onload=function(){&amp;hellip;}表示的是在页面加载完成后便开始运行。
        2.node.insertBefor(new node,null)。这样调用就可以在指定的前面添加了!
        3.如果网页乱码，可以在&lt;head&gt;&lt;/head&gt;之间加上：  &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
        4.特别说明：insertBefor这个方法。3个参数：  paraentNode.insertBefor(newNode,childNodeInParaNode);
                就是说哪个Node来调用insertBefore方法就是在那个Node的子节点中插入，其中第一个参数是要插入的节点，第二个参数是自己点中要在哪个指定的子元素前面。
                注：第二个节点可是是null，就表示在最后添加，同AppendChild。特别注意了。
        5.getElementByTagName(&amp;ldquo;标签&amp;rdquo;)，这个里面输入的是HTML的标签。
        6.对于元素节点的nodeName，其返回值永远是大小的标签。
        7.忘记nodeValue吧，使用value就够了，前面的需要区分下。
        8.value这个属性可读可写。
        9.对于使用firstChild和lastChild不是我们所见的第一个。这个特别注意了。
        10.通常来说firstNode和lastNode获取的是文本节点。
        11.对于文本节点，如果要设置他的值，需要使用nodeValue而不是value。比如说firstChild和lastChild获取的都是属于文本节点。
        12.为某一个节点添加 可以使用innderHtml也可以使用 创建一个TextNode然后添加到某个节点上去。
        13.对于replaceChild，parentNode.replaceChild(newChild，childInParane).这个方法的作用是父节点调用替换某个子节点，第一个节点一般都是新的节点，第二个节点
        14.几个不加括号的地方:
                window.onload=function myFunc(){&amp;hellip;}
        15.在JS中，方法带了括号表示运行。
一、JS基础细节
        1.JS如果写在内部，通常推荐写在head的title下面。
        2.window.onload=function(){&amp;hellip;}是在整个文档DOM树加载完毕后触发的函数。
        3.获取元素而言，最常用的3个方式 byId，byTagName，byName。前两者最常用。
        4.通常来说，找节点，常用的方法是 firstChild或者lastChild和byTagName3个方法，其他的方法比如ChildNodes不常用。
        5.（重点）对于一个方法，后面没有加括号的方法，被调用是只可能是情况允许了，被触发了。一个方法一旦加了括号表示的就是马上调用这个方法。
        6.对于for循环为每一个节点赋值的情况，这样的东西没有反应解释：
                for(i=0;i&lt;nodes.length;i++){
                        nodes[i].onclick=function(){
                                alert(nodes[i].nodeValue);    //改成  alert(this.nodeValue);
                        }
                }
                结合第5点来理解，先是赋值然后才是应用。对于这个方法alert()而言，中间的过程是OK的，但是到了最后i在不停的增加，知道i等于了length。alert的成了这个不存在的最大的value了，就错了。
                先是指向，然后点击了才会触发。
        7.整个项目的window.onload只能有一个。Jquery没有这个限制。
        8.每一个节点都有3个属性，nodeName,nodeType,nodeValue。
        9.说明： 对于 &lt;li name=&#34;myName&#34; id=&#34;nameId&#34;&gt;BB&lt;/li&gt; 这一句代码中就包括了3个节点：文本节点BB 元素节点&lt;li&gt; 属性节点 id和name.
        10.获取节点的方式有3种，byId，byTagName，byName。对于子节点有3种方式firstChildNode，lastChildNode，byTagName
        11.对于以下代码：
                &lt;ul id=&#34;city&#34;&gt;                                                                                                                                                                     &lt;ul id=&#34;city2&#34;&gt;&lt;li&gt;北京&lt;/li&gt;&lt;/ul&gt;
                        &lt;li&gt;北京&lt;/li&gt;
                &lt;/ul&gt;
                第一种的firstChild获取到的是一个文本节点，而且这个文本节点是空的。第二获取到的就是元素节点就是li这个节点。所以对于HTML来说换行与否还是很有必要的。
        12.（重要。）文本节点一定是元素节点的子节点。
        13.对于文本节点的赋值使用nodeValue。nodeType，元素为1，属性为2，文本节点为3.
        14.value通常对于属性节点而言，他的值。而nodeValue对于文本节点的值。
        15.常用的JS事件，onclick、onchange
一、复习JS
        1.对于HTML 的DOM而言，最上面的Document文档节点，最上层节点。Text文本节点，Element元素节点，Attribute属性节点。
        2.文本节点一定是元素的子节点。
        3.再次理解：对于匿名函数，如果要马上执行，是需要在后面写上一个括号的。对于非匿名函数，比如说对于一个button的onclick=&amp;ldquo;Run&amp;rdquo;和onclick=&amp;ldquo;Run()&amp;ldquo;意思是不同的，前者是说在onclick这个事件触发后，将要执行的动作指向Run这个方法。后者是说在onclick事件触发后运行Run这个方法。
        4.css在前，javascript在后，尽量不阻塞！因为浏览器解析是从上到下依次加载的，一旦遇到script标签，就会停止加载后面的，先对JavaScript脚本文件进行加载和运行。
        5.return false 可以阻断JS代码的运行，return也是可以的。（？区别？）
        6.关于事件冒泡不懂。。。
        7.关于createTextNode()然后Xnode.append进去和Xnode.innerHtml=&amp;ldquo;XX&amp;rdquo; 是不是不懂的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 7-11节笔记代码March28th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/javascript-7-11jie-bi-ji-dai-ma-march28th/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/javascript-7-11jie-bi-ji-dai-ma-march28th/</guid>
      <description>&lt;p&gt;function串讲笔记&lt;/p&gt;

&lt;p&gt;1：function是什么？
     JS的function类似于java和.Net的方法&lt;/p&gt;

&lt;p&gt;2：对比JS版本和Java版本的两个变量的求和，得出三个不同点。
JS版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function sum(num1,num2)
{
    var ret = num1+num2;
    return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;public int sum(int num1,int num2)
{
   int ret= num1+num2;
  return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相同点：
函数名字
参数列表
变量声明
返回值
不同点：
JS的函数声明没有修饰符
JS的函数声明没有返回值
JS的函数声明的参数列表没有变量类型&lt;/p&gt;

&lt;p&gt;由这三个不同点我们可以提出三个问题
为什么没有修饰符？
为什么没有返回值类型？
为什么参数列表没有变量类型？&lt;/p&gt;

&lt;p&gt;3：JS为什么没有修饰符？
Js不是面向对象的语言，虽然有对象但不是真正的对象。&lt;/p&gt;

&lt;p&gt;Js的对象是模拟出来的，没有封装的概念，所以不需要使用修饰符（修饰符只是针对于对象）&lt;/p&gt;

&lt;p&gt;4：JS为什么没有返回值类型和参数列表变量类型？
这两个问题是一样的道理，都是弱类型的原因
5：由参数列表引入一个arguments对象，what is it?
  在开始了解arguments对象之前，必须说明函数的四种定义方式，如下所示：
5.1最一般的函数定义方法：
有function
有函数名称sum
有参数列表 num1,num2
可有可无的return语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function sum(num1,num2)
{
    var ret = num1+num2;
    return ret
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.2最常见的匿名类函数调用方法：
有function
没有函数名称
有变量泪飚 num1,num2
可有可无的return语句
通过一个var sum函数类型变量获得该类型，并使得sum变量具有可调用的属性。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;var sum = function(num1,num2)
{
    var ret = num1+num2;
    return ret
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;规律：页面中的js代码执行之前，浏览器会先扫描全部的js代码，遇到一个函数声明，就把此函数的声明加到全局域，从上到下扫描，若函数名称一样，后声明的函数会覆盖掉前面。
5.3较特殊的匿名类函数的声明和使用：
两个括号()()
第一个括号是匿名类函数的声明
第二个括号是匿名类的函数实参&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;(function(num1,num2)
{
   var ret=num1+num2;
   return ret;
})(3,2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特点：只会执行一次。&lt;/p&gt;

&lt;p&gt;5.4较少用的Function类产生函数对象&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;var sum = new Function();形式
var sum = Function(&amp;quot;n1&amp;quot;,&amp;quot;n2&amp;quot;,&amp;quot;alert(n1+n2); var a=3;var b=4;alert(a+b);&amp;quot;)

sum(3,3);//和其他函数声明的调用一样。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也是为什么匿名函数可以赋值给一个变量的原因，因为Function类可以产生对象，对象可以赋值给一个变量（对象只是一个引用）。
特点：效率低效。&lt;/p&gt;

&lt;p&gt;上面的五种函数声明方式都涉及到参数列表，而JS使用arguments可以获得任意长度的参数列表。
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var sum = function()
{
    var ret=0;
   for(var i=0;i&amp;lt;arguments.length;i++)
  {
    ret = ret+arguments[i];  
   }
    return ret;
}

sum(1,2);
sum(1,5,68,98);
sum(4,45,7,8,3,23,7,9);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而正因为arguments的作用导致了js不能重载。&lt;/p&gt;

&lt;p&gt;6：JS为什么不能重载？
存在arguments对象，导致参数列表可以任意长度。
弱类型决定了参数列表的变量不需要类型修饰。&lt;/p&gt;

&lt;p&gt;7：函数调用的两种方式？
标签的事件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;button id =”btn” onclick=”alert(4);var  a =3; var b=4; alert(a+b);”)
复制代码

Dom的window.onload=function(){}方式，通过document的方法获得标签地址
Window.onload=function()
{
Window.document.getElementById(“btn”).onclick=function()
{
    Show();
}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>JavaScript1-6节笔记代码March26th</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/javascript1-6jie-bi-ji-dai-ma-march26th/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/javascript1-6jie-bi-ji-dai-ma-march26th/</guid>
      <description>&lt;p&gt;js 常见 Events
属性        当以下情况发生时，出现此事件&lt;br /&gt;
onabort        图像加载被中断        元素失去焦点&lt;br /&gt;
onchange        用户改变域的内容
onclick        鼠标点击某个对象
ondblclick        鼠标双击某个对象&lt;br /&gt;
onerror        当加载文档或图像时发生某个错误&lt;br /&gt;
onfocus        元素获得焦点&lt;br /&gt;
onkeydown        某个键盘的键被按下&lt;br /&gt;
onkeypress        某个键盘的键被按下或按住&lt;br /&gt;
onkeyup        某个键盘的键被松开&lt;br /&gt;
onload        某个页面或图像被完成加载&lt;br /&gt;
onmousedown        某个鼠标按键被按下&lt;br /&gt;
onmousemove        鼠标被移动&lt;br /&gt;
onmouseout        鼠标从某元素移开&lt;br /&gt;
onmouseover        鼠标被移到某元素之上&lt;br /&gt;
onmouseup        某个鼠标按键被松开&lt;br /&gt;
onreset        重置按钮被点击&lt;br /&gt;
onresize        窗口或框架被调整尺寸&lt;br /&gt;
onselect        文本被选定&lt;br /&gt;
onsubmit        提交按钮被点击&lt;br /&gt;
onunload        用户退出页面&lt;br /&gt;
一、复习DOM
        1.对于JS来说，在Web中，最重要的应用之一就是DOM。
        2.Dom是针对HTML和XML操作的一个API。
        3.Dom将一个文档表示为一颗家族树（父，兄，子 节点）
        4.几个常用的API。
                getElementById 只能用document来使用，通过id查找一个节点。
                getElementsByTagName  返回的是一个数组，通过指定的标签名去寻找，不必作用于整个文档。
                hasChildNodes 调用的节点是否含有子节点。
        5.Dom中的节点有文本节点（Text），属性节点（Attribute），元素节点（Element）。
        6.以上3类节点中，都有如下属性：
                nodeName：只读，标识的是给定节点的名字，该节点为只读属性。对于文本节点返回的是 #text 的字符串。
                noteType：只读，返回值为int，标识节点的类型。元素节点 1，属性节点 2，文本节点 3。（从小到大的记忆顺序）
                nodeValue: 可读，可写。返回当前节点的值，属性节点返回属性的值，文本节点返回文本的值，元素节点啥都没有。
        7.Dom中常用方法：
                replaceChild()：返回值是一个指向新的或者旧的节点。（？）作用是吧一个父元素中的子节点替换为另外一个子节点。
                        ex:        var reference = element.replaceChild(newChild,oldChild);
                getAttribute(): 返回的是指定元素的给凌属性的值。
                        ex:        var attributeValue = element.getAttribute(attributeName);
                setAttribute(key,value)：为指定的元素添加某个属性，如果此属性已经存在就刷新，如果不存在就添加。
                        ex:      var para = document.createElement(“p”);           para.setAttribute(“id”,”fineprint”);
                createElement(eleName):通过指定的标签名字来创建一个元素节点。这个新创建的节点没实际添加到某个节点上。
                        ex:        var oP = document.createElement(&amp;ldquo;p&amp;rdquo;);
                createTextNode()：创建一个包含指定文本的文本节点。返回值为一个指向新建文本节点的指针。
                        ex: var oText=document.createTextNode(&amp;ldquo;HEllo world&amp;rdquo;);
                appendChild()：为指定的元素添加一个节点到最后一个节点后。
                insertBefore()：在指定的节点前面添加。
                        ex:        var reference = element.insertBefore(newNode,targetNode);
                        注：Dom没有提供insertAfter()方法：就是在插入节点的下一个节点之前添加，就是在指定节点的前面添加。
                removeChild()：在指定节点中的子节点删除一个节点。
                        注：一定要是父节点去调用然后括号里面是自己点。
                        ex： var message = document.getElementById(“fineprint”);
                                        var container = message.parentNode;
                                        container.removeChild(message);
        8.Dom中常用属性
                ChildNodes：返回的是指定父节点的所有子节点。
                        注：文本节点和属性节点，肯定不含有子节点了，如果调用这个属性，会返回空数组。
                firstChild:返回的是指定元素的第一个子节点。
                        ex:node.ChileNodes[0]和firstChild 是相同的。
                lastChild:和first想法，最后一个。
                nextSibling：指定节点的下一个子节点。
                previousSibling:指定节点的上一个子节点。
                parentNode：返回的是指定节点的父节点。
二、JavaScript练习总结
        1.window.onload=function(){&amp;hellip;}表示的是在页面加载完成后便开始运行。
        2.node.insertBefor(new node,null)。这样调用就可以在指定的前面添加了!
        3.如果网页乱码，可以在&lt;head&gt;&lt;/head&gt;之间加上：  &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
        4.特别说明：insertBefor这个方法。3个参数：  paraentNode.insertBefor(newNode,childNodeInParaNode);
                就是说哪个Node来调用insertBefore方法就是在那个Node的子节点中插入，其中第一个参数是要插入的节点，第二个参数是自己点中要在哪个指定的子元素前面。
                注：第二个节点可是是null，就表示在最后添加，同AppendChild。特别注意了。
        5.getElementByTagName(&amp;ldquo;标签&amp;rdquo;)，这个里面输入的是HTML的标签。
        6.对于元素节点的nodeName，其返回值永远是大小的标签。
        7.忘记nodeValue吧，使用value就够了，前面的需要区分下。
        8.value这个属性可读可写。
        9.对于使用firstChild和lastChild不是我们所见的第一个。这个特别注意了。
        10.通常来说firstNode和lastNode获取的是文本节点。
        11.对于文本节点，如果要设置他的值，需要使用nodeValue而不是value。比如说firstChild和lastChild获取的都是属于文本节点。
        12.为某一个节点添加 可以使用innderHtml也可以使用 创建一个TextNode然后添加到某个节点上去。
        13.对于replaceChild，parentNode.replaceChild(newChild，childInParane).这个方法的作用是父节点调用替换某个子节点，第一个节点一般都是新的节点，第二个节点
        14.几个不加括号的地方:
                window.onload=function myFunc(){&amp;hellip;}
        15.在JS中，方法带了括号表示运行。
        16.
三、问题
        2.innerHtml和innerText的区别？
        3.window.onload=function(){} 在一个页面只能写一次。
        4.关于parenNode和parentElement区别？&lt;/p&gt;

&lt;p&gt;2.innerHtml和innerText的区别？
从字面意义来讲 innerHtml操作标签内的html代码 , 而innerText操作标签内的文本 , 当标签内只有文本时这两个方法是一样的 , 区别就在标签内还要子标签时,写代码测试就知道了&lt;/p&gt;

&lt;p&gt;3.window.onload=function(){} 在一个页面只能写一次。
这个是&amp;rdquo;重量级&amp;rdquo;的加载完成事件 , 只能注册一次,jQuery的ready()就很方便&lt;/p&gt;

&lt;p&gt;4.关于parenNode和parentElement区别？
parentNode 是Node类的属性 , 而parentElement是Element类的属性 , 很多情况下可以通用,只是属于两个不同的体系,使用时尝试着看看效果就好&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;Html&amp;gt;
&amp;lt;Head&amp;gt;

&amp;lt;!--script 一定要小写--&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
//javascript内部注释使用//表示单行注释  /**/表示快注释
//javascript大小写敏感
//javascript可以用var表示所有数值类型，代替int,String,boolean等
//按F5刷新，进行调试
//变量和数组的定义
//变量定义


var name=&#39;字符串&#39;;
var age=39;

//数组定义
//一定要数组用  [] 进行定义，元素之间用逗号隔开   []吃过亏
//map数组用{} 定义 键值对之间用逗号隔开
var apples=[&#39;ap1&#39;,&#39;ap2&#39;];
var arr={&amp;quot;name&amp;quot;:&#39;张三&#39;,&#39;age&#39;:45};

//打印alert
alert(name);
alert(age);
for(var i=0;i&amp;lt;apples.length;i++)
{
    alert(apples[i]);
}

for(var key in arr)
{
    alert(key+&#39;===&#39;+arr[key]);
}

//数值类型的转换
var n = &#39;fsf&#39;;
if(isNaN(n))
  {
    alert(&#39;不能使用&#39;);
  }else
    {
      alert(&#39;可以使用&#39;);
    }
var num=&#39;100&#39;
var n = Number(num);
alert(n);

alert(parseFloat(&#39;100.3&#39;));//转小数
alert(parseInt(&#39;100&#39;))//转整数

//函数定义  及参数获取
// 在浏览器的源码窗口中 ，加入 断点，进行断点调试,单步调试(F8 快捷键 在Opera中）

function sum()
{
  var apple=0;
  //循环语句的使用
  //内置变量arguments的调用
  for(var i=0;i&amp;lt;arguments.length;i++)
  {
    apple+=arguments[i];
  }
  //不加入return 没有返回值 则sumofmoney=undefined
  return apple;
}

var sumOfMoney=sum(1,3,4,5,6,2);
alert(&#39;1+2+3+4+5+6+2==&#39;+sumOfMoney);


//注意转义字符
alert(&amp;quot;D:\\Program Files \\ok\\fd&amp;quot;);
alert(&#39;D:\\Program Files \\ok\\fd&#39;);


//匿名方法是需要着重学习的
//1
var ff = function()
{
  alert(&#39;go home!&#39;);
}
ff();

//一个易错点
//btn.onclick=function(){} onclick后面不能家少年宫()
//2
(function(n1,n2)
{
   alert(n1+n2);
}
)(1,2);
//3
onload=function()
{
  document.getElementById(&#39;btn&#39;).onClick=function()
  {
    alert(&amp;quot;You are clicking  the button&amp;quot;)
  }
};



//字符串的常用方法
alert(&#39;I am from the God&#39;.length);
alert(&#39;I am from the God&#39;.charAt(3));
alert(&#39;I am from the God&#39;.charAt(9));
alert(&#39;I am from the God&#39;.substring(3,9));
alert(&#39;I am from the God&#39;.indexOf(&#39;t&#39;));
var  names = &#39;I am from the God&#39;.split(&#39; &#39;);
for(var name in names)
  {
    alert(name+&#39;=&#39;+names[name]);
  }
for(var i=0;i&amp;lt;names.length;i++)
{
  alert(names[i]);
}

//杨老师练习1
alert(&#39;杨1&#39;);
window.onload=function()
{
  var buttons=document.getElementsByName(&#39;button1&#39;);
  for(var i=0;  i &amp;lt; buttons.length;i++)
  {
    //alert(buttons[i]   onclick不能写成onClick  大小写敏感
    buttons[i].onclick=function()
    {
        alert(i);
    };
  }
}
//杨老师练习2
alert(&#39;杨2&#39;);
function aa()
{
  alert(&#39;aaa&#39;);
  return function(){alert(&#39;bbb&#39;);};
}
alert(aa);
alert(aa());
// alert(aa());打印是aaa,和function(){alert(&amp;quot;bbb&amp;quot;);}以为执行函数方法题内容,返回的是一个匿名函数,返回的是函数体字符串. 
alert(aa()());
//alert(aa()());打印的是aaa,bbb,undefined ,先执行aa()，函数体内容aaa，返回字符串function(){alert(&amp;quot;bbb&amp;quot;);}，再执行function(){alert(&amp;quot;bbb&amp;quot;);}()，
//这时该方法名是：function(){alert(&amp;quot;bbb&amp;quot;);}，先打印bbb，在打印undefined，因为该方法名未定义， 
//杨老师练习3
alert(&#39;杨3&#39;);
//每隔1s重复的执行  烦人，注释掉
//setInterval(aa,1000);
//setInterval(aa(),1000);
//杨老师练习4
alert(&#39;杨4&#39;);
//setInterval(alert(&#39;a&#39;),1000); //每隔1s显示a
//setInterval(function(){alert(&amp;quot;a&amp;quot;);},1000);  //返回一个函数 因为未被执行，这个函数没有任何东西
//杨老师练习5
alert(&#39;杨5&#39;);
var s1=&amp;quot;aaa&amp;quot;;
var s2=new String(&amp;quot;aaa&amp;quot;);
alert(s1 instanceof Object); //false
alert(s2 instanceof Object);//true
alert(s1 instanceof String);//false
alert(s2 instanceof String);// true
alert(typeof(s1));  //string
alert(typeof(s2)); //object
//杨老师练习6
alert(&#39;杨6&#39;);
var x=1;
var y=0;
var z=0;
function add(n)
{
  n=n+1;
  return n;
}
y=add(x);
//js只会用最新的函数定义
function add(n)
{
  n=n+3;
  return n;
}

z=add(x);
alert(&#39;y=&#39;+y+&#39;z=&#39;+z);//y-4  z=4  只用最新的
//杨老师练习7
alert(&#39;杨7&#39;);
var add1=function(n)
{
   n = n+1;
   return n;
}
y=add1(x);
add1 =function(n)
{
  n= n +3;
  return n;
}
z= add1(x);
alert(&#39;y=&#39;+y+&#39; z=&#39;+z);
//杨老师练习8
alert(&#39;杨8&#39;);
var s1=&amp;quot;aaa&amp;quot;; // --------------------&amp;gt;是String类型 非对象
var s2= new String(&#39;aaa&#39;);
alert(s1 instanceof Object);
alert(s2 instanceof Object);
alert(s1 instanceof String);
alert(s2 instanceof String);
alert(typeof(s1));
alert(typeof(s2));


//杨老师练习9
alert(&#39;杨9&#39;);
alert(&#39;易错点： btn.onclick=function(){}  onclick后面别跟()&#39;)

&amp;lt;/script&amp;gt;

&amp;lt;/Head&amp;gt;

&amp;lt;Body&amp;gt;
  &amp;lt;Div&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮1&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮2&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮3&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮4&amp;quot;/&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;button1&amp;quot; value=&amp;quot;按钮5&amp;quot;/&amp;gt;
  &amp;lt;/Div&amp;gt;
  &amp;lt;Div&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;click&amp;quot; id=&amp;quot;btn&amp;quot;/&amp;gt;
  &amp;lt;/Div&amp;gt;
  &amp;lt;Div&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;Br/&amp;gt;
    &amp;lt;A href=&amp;quot;javascript:alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;显示时间&amp;lt;/A&amp;gt;
    &amp;lt;/Br&amp;gt;
    &amp;lt;A href=&amp;quot;javascript:void(0);&amp;quot;&amp;gt;显示时间&amp;lt;/A&amp;gt;
    &amp;lt;/Br&amp;gt;
    &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;显示时间&amp;quot;,onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;/&amp;gt;
  &amp;lt;Div&amp;gt;
&amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么jquery.js有那么多的&lt;br /&gt;
name : function(){}, 的写法？ 他们是什么意思？&lt;/p&gt;

&lt;p&gt;JQuery.js中出现如下的书写方式：&lt;/p&gt;

&lt;p&gt;success：function(data){}
类似于function success(data){}
不过是面向对象的写法，把这个方法当成一个prototype对象&lt;/p&gt;

&lt;p&gt;引入JSON对象
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，易于阅读和编写，同时也易于机器解析和生成。{a:&amp;ldquo;a&amp;rdquo;}这就是一
个JSON数据。 JSON数据是用键值对的形式存储的。冒号（:）前面的是键，冒号后面的是值。JSON,的每一个值之间可以用分号（;）隔
开。大的类可以用{}大括号包围他其中的值，集合可以用[]中括号，包围值
&amp;ldquo;名称/值&amp;rdquo;对的集合 不同语言中，它被理解为对象(object)，记录(record)，结构(struct)，字典(dictionary)，哈希表(hash table)，键列表(keyed list)等
值的有序列表 多数语言中被理解为数组(array)&lt;/p&gt;

&lt;p&gt;使用：
JSON以一种特定的字符串形式来表示 JavaScript 对象。如果将具有这样一种形式的字符串赋给任意一个 JavaScript 变量，那么该变&lt;/p&gt;

&lt;p&gt;量会变成一个对象引用.
比如：
您可以使用以下JSON形式来表示User对象：
{&amp;ldquo;UserID&amp;rdquo;:11, &amp;ldquo;Name&amp;rdquo;:&amp;ldquo;tht&amp;rdquo;, &amp;ldquo;Email&amp;rdquo;:&amp;ldquo;18039010◎qq.com&amp;rdquo;};
然后如果把这一字符串赋予一个JavaScript变量，那么就可以直接使用对象的任一属性了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;Html&amp;gt;
  &amp;lt;Head&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        var User={&amp;quot;UserId&amp;quot;:11,&amp;quot;Name&amp;quot;:&amp;quot;Ye Zhaoliang&amp;quot;,&amp;quot;Email&amp;quot;:&amp;quot;977962857@qq.com&amp;quot;};
        alert(User.Name);

        //利用JSon对象方式  定义两个User对象
        var User1={&amp;quot;UserId&amp;quot;:12,&amp;quot;Name&amp;quot;:{&amp;quot;FirstName&amp;quot;:&amp;quot;Ye&amp;quot;,&amp;quot;LastName&amp;quot;:&amp;quot;Zhaoliang&amp;quot;},&amp;quot;Email&amp;quot;:&amp;quot;977962857@qq.com&amp;quot;};
        var User2={&amp;quot;UserId&amp;quot;:13,&amp;quot;Name&amp;quot;:{&amp;quot;FirstName&amp;quot;:&amp;quot;Ye&amp;quot;,&amp;quot;LastName&amp;quot;:&amp;quot;Wangliang&amp;quot;},&amp;quot;Email&amp;quot;:&amp;quot;977962859@qq.com&amp;quot;};
        alert(User1.Name.LastName+&amp;quot; love you!&amp;quot;);

        //用数组存储一个用户列表
        var Users=[User1,User2];
        alert(Users.length);
        for(var i=0;i&amp;lt;Users.length;i++)
        {
          alert(Users[i].UserId+&amp;quot; &amp;quot;+Users[i].Name.LastName);
        }
    &amp;lt;/script&amp;gt;
  &amp;lt;/Head&amp;gt;
  &amp;lt;Body&amp;gt;

  &amp;lt;/Body&amp;gt;
&amp;lt;/Html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由此引出面向对象的JavaScript编程。&lt;/p&gt;

&lt;p&gt;![./image/java/object.gif][JSON对象的格式描述，用逗号分隔开多个对象，一个对象用{}组合，每个对象的属性用:分隔，冒号前面表示属性 &amp;hellip;]&lt;/p&gt;

&lt;p&gt;![./image/java/array.gif][用[]表达多个数组元素，元素之间不分类型，用逗号分隔元素]&lt;/p&gt;

&lt;p&gt;1: JS中单引号和双引号有什么区别？为什么在字符串中用单引号括起来，而不是双引号？
           一方面因为Html代码的属性值一般是使用双引号。
           JSON的数据格式一般是使用双引号的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       再进行字符串拼接的一般原则是： 单引号的内部可包含双引号（如若包含则加转义字符），双引号的内部可包含单引号（如若包含则加转义字符）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以字符串如果用单引号修饰就可以内部引用Html的属性。
比如
&lt;Div class=&#34;global-notify&#34; id=&#34;global-message&#34;&gt;
var str=&amp;rsquo;&lt;Div class=&#34;global-notify&#34; id=&#34;global-message&#34;&gt;&amp;lsquo;
复制代码
更多的是考虑到前端，会使用HTML的属性值，而Html的属性值都是用双引号包裹，所以如果再用单引号括起来不需要进行转义。
另外可能就是大家习惯。&lt;/p&gt;

&lt;p&gt;2：Javascript也有事件编程&lt;/p&gt;

&lt;p&gt;button中的onclick=&amp;ldquo;js代码&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;input type=“button” onclick=“ js代码&#34; /&gt;
复制代码&lt;/p&gt;

&lt;p&gt;href超链接的特殊的调用事件的方法：&lt;/p&gt;

&lt;p&gt;&lt;a href=“javascript:js代码”&gt;热点文字&lt;/a&gt;
复制代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      只有超链接的href中的JavaScript中才需要加“javascript:”，因为它不是事件，而是把”javascript:”看成像“http:”、“ftp:”、“thunder://”、“ed2k://”、“mailto:”一样的网络协议，交             由js解析引擎处理。只有href中，这是一个特例。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3：数据类型
基本数据类型：
Boolean
Number   &amp;mdash;-&amp;gt;小数和整数
        &amp;mdash;-parseInt(&amp;ldquo;)
        &amp;mdash;-parseFloat(&amp;ldquo;)
String
Null  &amp;mdash;-&amp;gt;
Undefined &amp;mdash;&amp;gt;未定义(未初始化)
               var ul ;    &amp;mdash;&amp;gt;ul is undefined
                    typeof(ul) &amp;mdash;-&amp;gt;undefined
                    typeof(null)&amp;mdash;-&amp;gt;null&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  == 非严格等于
  ===严格等于
     null==undefined -----&amp;gt;true
     null===undefined-----&amp;gt;false
      为什么？
      ===先判断类型是否一致，再判断值
       null对象是有着特殊意义的值，此时变量的值是&amp;quot;已知状态&amp;quot;(这和mysql的null不太一样，mysql直接就是不知道，那肯定就是无法判断）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用数据类型：
Object &amp;mdash;-&amp;gt;函数
          &amp;mdash;-&amp;gt; new Date()
          &amp;mdash;-&amp;gt; 数组    var apple=[&amp;lsquo;shanxi&amp;rsquo;,&amp;lsquo;yantai&amp;rsquo;];
          &amp;mdash;-&amp;gt;null&lt;/p&gt;

&lt;p&gt;方法：
instanceof &amp;mdash;&amp;ndash;&amp;gt;属于某种类型？
typeof(object) &amp;mdash;&amp;mdash;-&amp;gt;是什么类型的？&lt;/p&gt;

&lt;p&gt;4：javascript中没有方法重载&lt;/p&gt;

&lt;p&gt;所以在运行时候会事先确定好函数，一般是最靠近调用函数的函数定义
        function f1()
        {
          alert(&amp;lsquo;ell&amp;rsquo;);
        }
        function f1(name)
        {
          alert(name);
        }
        // f1();  得到undefined  ，直接选择最新的当做 f1的函数
        //这点和java很不一样
        f1(&amp;lsquo;fd&amp;rsquo;); //得到fd
复制代码&lt;/p&gt;

&lt;p&gt;5：String  Boolean  Number 等可以拓展其方法，使用类的静态属性prototype进行设置
比如：
String.prototype.IseMaile = function ()
复制代码&lt;/p&gt;

&lt;p&gt;6：js文件引入javascript的好处是?      1:多文档共享  js
      2:减少网络流量&lt;/p&gt;

&lt;p&gt;使用方法 ： &amp;lt;Link src=&amp;rdquo;*.js&amp;rdquo; type=&amp;ldquo;text/javascript&amp;rdquo;&lt;/p&gt;

&lt;p&gt;存在疑问：Dom  and Bom的区别？&lt;/p&gt;

&lt;p&gt;Broser object model (BOM)
Document object model(Dom)
Bom模型有window对象  ，而Dom没有。&lt;/p&gt;

&lt;p&gt;Bom对象结构：&lt;/p&gt;

&lt;p&gt;Window  &amp;mdash; document  &amp;mdash;&amp;mdash;authors
                                  &amp;mdash;&amp;mdash;forms
                                  &amp;mdash;&amp;mdash;images
                                 &amp;mdash;&amp;mdash;-links
                                 &amp;mdash;&amp;mdash;-location &amp;hellip;
            &amp;mdash;- frames
            &amp;mdash;- history
            &amp;mdash;- location
            &amp;mdash;- navigator
            &amp;mdash;- screen
根节点是：window
      window对象是Bom模型的核心，包含6个对象，document,frames,history,location,navigator,screen对象&lt;/p&gt;

&lt;p&gt;Dom对象结构：&lt;/p&gt;

&lt;p&gt;document  &amp;mdash;&amp;mdash;authors
                &amp;mdash;&amp;mdash;forms
                &amp;mdash;&amp;mdash;images
                &amp;mdash;&amp;mdash;-links
                &amp;mdash;&amp;mdash;-location&amp;hellip;&lt;/p&gt;

&lt;p&gt;根节点是:document&lt;/p&gt;

&lt;p&gt;联系：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;document.write(&#39;test&#39;);
window.document.write(&#39;test&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;![./images/java/dom.png][某个dom的树状节点层次图（可以进行实例化]&lt;/p&gt;

&lt;p&gt;14.this事件
事件中的this。除了可以使用event.srcElement&lt;/p&gt;

&lt;p&gt;在事件响应函数中，this表示发生事件的控件。&lt;/p&gt;

&lt;p&gt;只有在事件响应函数才能使用this获得发生事件&lt;/p&gt;

&lt;p&gt;的控件，在事件响应函数调用的函数中不能使用&lt;/p&gt;

&lt;p&gt;（这里的this表示window对象），如果要使用则&lt;/p&gt;

&lt;p&gt;要将this传递给函数或者使用event.srcElement&lt;/p&gt;

&lt;p&gt;。(*)this和event.srcElement的语义是不一样&lt;/p&gt;

&lt;p&gt;的，this就是表示当前监听事件的这个对象，&lt;/p&gt;

&lt;p&gt;event.srcElement是引发事件的对象：事件冒泡&lt;/p&gt;

&lt;p&gt;。&lt;/p&gt;

&lt;p&gt;14.动态创建元素
Element(元素)
document.write只能在页面加载过程中才能动态&lt;/p&gt;

&lt;p&gt;创建。
可以调用document的createElement方法来创建&lt;/p&gt;

&lt;p&gt;具有指定标签的DOM对象，然后通过调用某个元素&lt;/p&gt;

&lt;p&gt;的appendChild();方法将新创建元素添加到相应&lt;/p&gt;

&lt;p&gt;的元素下。//父元素对象.removeChild(子元素&lt;/p&gt;

&lt;p&gt;对象);删除元素。
createElement(‘element’);创建一个节点
appendChild(node); 追加一个节点
removeChild(node);移除一个节点
replaceChild(new,old);替换一个节点
insertBefore(new,参照);把节点加到前面（插&lt;/p&gt;

&lt;p&gt;到某个节点前面）
方法：
属性：
firstChild
lastChild&lt;/p&gt;

&lt;p&gt;15.getElementsByTagName() 方法可返回带有指&lt;/p&gt;

&lt;p&gt;定标签名的对象的集合。
16.IE中body的事件范围
IE中如果在body上添加onclick、onmousemove等&lt;/p&gt;

&lt;p&gt;事件响应，那么如果页面没有满，则 “body 中&lt;/p&gt;

&lt;p&gt;最后一个元素以下（横向不限制）” 的部分是无&lt;/p&gt;

&lt;p&gt;法响应事件的，必须使用代码在document上监听&lt;/p&gt;

&lt;p&gt;那些事件，比如document.onmousemove =&lt;/p&gt;

&lt;p&gt;MovePic
document.body.onmousedown=function(){}
document.onmousedown=function(){}
注意加文档定义与不加文档定义的也不一样。
如果为整个文档注册事件可以使用：&lt;/p&gt;

&lt;p&gt;document.onxxxx事件。
17.onmouseover事件会在鼠标指针移动到指定的&lt;/p&gt;

&lt;p&gt;对象上时触发事件发生
element.setAttribute()        把指定属性设置或更&lt;/p&gt;

&lt;p&gt;改为指定值。
18. dvObj.style.width=&amp;lsquo;300px&amp;rsquo;;
   dvObj.style.height=&amp;lsquo;200px&amp;rsquo;;
   dvObj.style.border=&amp;lsquo;1px solid red&amp;rsquo;;
加&amp;rdquo;的是因为给变量赋值必须是一个正确的类型&lt;/p&gt;

&lt;p&gt;。数字就是数字字符串就是字符串
19.&lt;p&gt; 标签定义段落。
border:1px solid green; 边框：1像素，实心&lt;/p&gt;

&lt;p&gt;，绿色
20.form对象
document.getElementById(‘btn1’).click()&lt;/p&gt;

&lt;p&gt;。搜索引擎的，智能提示，点击后相当于点击了&lt;/p&gt;

&lt;p&gt;“搜索”按钮。
常用：click(),focus(),blur();//相当于通过&lt;/p&gt;

&lt;p&gt;程序来触发元素的单击、获得焦点以及失去焦点&lt;/p&gt;

&lt;p&gt;的事件。
form对象是表单的Dom对象。
方法：submit()提交表单，但是不会触发&lt;/p&gt;

&lt;p&gt;onsubmit事件。
实现autopost，也就是焦点离开控件以后页面立&lt;/p&gt;

&lt;p&gt;即提交，而不是只有提交submit按钮以后才提交&lt;/p&gt;

&lt;p&gt;，当光标离开的时候触发onblur事件，在onblur&lt;/p&gt;

&lt;p&gt;中调用form的submit方法。
在点击submit后form的onsubmit事件被触发，在&lt;/p&gt;

&lt;p&gt;onsubmit中可以进行数据校验，如果数据有问题&lt;/p&gt;

&lt;p&gt;，返回false即可取消提交&lt;/p&gt;

&lt;p&gt;21.不同浏览器的差异
&lt;form&gt; 标签用于为用户输入创建 HTML 表单。&lt;/p&gt;

&lt;p&gt;表单能够包含 input 元素，比如文本字段、复选&lt;/p&gt;

&lt;p&gt;框、单选框、提交按钮等等。表单还可以包含&lt;/p&gt;

&lt;p&gt;menus、textarea、fieldset、legend 和&lt;/p&gt;

&lt;p&gt;label 元素。表单用于向服务器传输数据。
onsubmit 事件会在表单中的确认按钮(Submit)被点击时发生。
submit() 提交表单。 是form中的一个方法
onsubmit 在提交表单之前调用。是一个事件&lt;/p&gt;

&lt;p&gt;1: js的for循环的var i = 0的再认识
经过var定义的是一个全局变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        //一个重要错误   var i =0 其实就是定义了一个全局变量i = 0
        //所有的js都可以调用
        for(var i=0;i&amp;lt;Users.length;i++)
        {
          alert(Users[i].UserId+&amp;quot; &amp;quot;+Users[i].Name.LastName);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是for之后alert(i)的值是 Users.length&lt;/p&gt;

&lt;p&gt;所以可以在for之前直接定义 var i = 0;即可&lt;/p&gt;

&lt;p&gt;2：以二进制读取，10进制输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        alert(parseInt(&#39;100&#39;,8));//以8进制
        alert(parseInt(&#39;100&#39;,2));// 以2进制读取，并10进制显示
        alert(parseInt(&#39;100&#39;,10));// 以10进制 默认方式
        alert(parseInt(&#39;100&#39;,16));// 以16进制

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3： onload在页面加载完后在加载的部分js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;        //很重要  onload  只在页面加载完控件才执行，所以确保id有效！！
        //否则可能报错
        onload=function()
        {
          document.getElementById(&#39;btn&#39;).onclick=function()
          {
            alert(&#39;hello&#39;);
          };
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4：Html的事件在学习&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;      &amp;lt;Input type=&amp;quot;button&amp;quot; name=&amp;quot;time&amp;quot; value=&amp;quot;show current time&amp;quot; onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;/&amp;gt;
      &amp;lt;!--会跳转到最前面   #z只是一个页面最前面的一个锚--&amp;gt;
      &amp;lt;A href=&amp;quot;#&amp;quot; onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;百度&amp;lt;/A&amp;gt;
      &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;!--直接在当前位置打印出时间： javascript: 类似于http://  ftp://--&amp;gt;
&amp;lt;A href=&amp;quot;javascript:alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;网易&amp;lt;/A&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;A href=&amp;quot;javascript:void(0);&amp;quot; onclick=&amp;quot;alert(new Date().toLocaleTimeString());&amp;quot;&amp;gt;新浪&amp;lt;/A&amp;gt;
&amp;lt;A href&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>javascript闭包训练</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/javascriptbi-bao-xun-lian/</link>
      <pubDate>Mon, 11 May 2015 14:58:43 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/javascriptbi-bao-xun-lian/</guid>
      <description>&lt;p&gt;javascript  闭包训练&lt;/p&gt;

&lt;p&gt;闭包其实就是保存着内部定义函数的一张表，该表保存着函数头、函数变量（变量当前状态的值）、函数实现。&lt;/p&gt;

&lt;p&gt;利用  一个outFun 和一个innerFun进行实验《Learning jQuery 4th edition》&lt;/p&gt;

&lt;p&gt;case 1:  闭包传递，内部函数可以被传递到外头&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;      $(function(){
        //函数被封在一个闭包中 可以像数据一样传来传去
        var globalInner;
        function outFun()
        {

          console.log(&#39;Inside the outFun&#39;);
          function innerFun()
          {
            console.log(&#39;inside the innerFun of the OutFun&#39;);
          }
          globalInner=innerFun;
          console.log(&#39;innerFun():&#39;);
          innerFun();
          console.log(&#39;return Begin&#39;)
          return innerFun;
        }

        console.log(&#39;outFun:&#39;)
        outFun();
        console.log(&#39;globalInner:&#39;);
        globalInner();
        console.log(&#39;Test outFun return&#39;);
        outFun()();

      }) ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;复制代码
测试结果：&lt;/p&gt;

&lt;p&gt;outFun:
TestCloser.html:12 Inside the outFun
TestCloser.html:18 innerFun():
TestCloser.html:15 inside the innerFun of the OutFun
TestCloser.html:20 return Begin
TestCloser.html:26 globalInner:
TestCloser.html:15 inside the innerFun of the OutFun
TestCloser.html:28 Test outFun return
TestCloser.html:12 Inside the outFun
TestCloser.html:18 innerFun():
TestCloser.html:15 inside the innerFun of the OutFun
TestCloser.html:20 return Begin
TestCloser.html:15 inside the innerFun of the OutFun
复制代码&lt;/p&gt;

&lt;p&gt;case 2:  内部变量 和外部变量的区别&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;      $(function(){
        console.log(&#39;测试InnerFunPig的局部变量&#39;);
        //局部变量是存在的
        //alert(&#39;hhell&#39;);
        function outFunPig()
        {

          function innerFunPig()
          {
            //局部变量 重新赋值
            var innerVar=1;
            console.log(&#39;innerVar:&#39;+innerVar);
            innerVar++;

          }
          return innerFunPig;
        }

        var out1= outFunPig();
        out1();
        out1();
        var out2= outFunPig();
        out2();
        out2();

        console.log(&#39;测试outFunCat的全局变量&#39;);
        //测试全局变量
        var globalVar=1;
        function outFunCat()
        {

          function innerFunCat()
          {
            //局部变量 重新赋值
            console.log(&#39;innerVar:&#39;+ globalVar);
            globalVar++;

          }
          return innerFunCat;
        }

        var out3= outFunCat();
        out3();
        out3();
        var out4= outFunCat();
        out4();
        out4();

        console.log(&#39;测试outFunDog的内部变量&#39;);
        //测试半全局变量
        function outFunDog()
        {

          //半全局变量
          var semiGlobalVar=1;
          function innerFunDog()
          {
            //局部变量 重新赋值
            console.log(&#39;innerVar:&#39;+ semiGlobalVar );
             semiGlobalVar++;

          }
          return innerFunDog;
        }

        var out5= outFunDog();
        out5();
        out5();
        var out6= outFunDog();
        out6();
        out6();



      });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果2：
测试InnerFunPig的局部变量
4TestCloser.html:44 innerVar:1
TestCloser.html:58 测试outFunCat的全局变量
TestCloser.html:67 innerVar:1
TestCloser.html:67 innerVar:2
TestCloser.html:67 innerVar:3
TestCloser.html:67 innerVar:4
TestCloser.html:81 测试outFunDog的内部变量
TestCloser.html:91 innerVar:1
TestCloser.html:91 innerVar:2
TestCloser.html:91 innerVar:1
TestCloser.html:91 innerVar:2
复制代码&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
