<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp | Macro Life</title>
    <link>https://jueqingsizhe66.github.io/tags/lisp/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <description>Lisp</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â©2020</copyright><lastBuildDate>Sun, 01 Nov 2015 17:26:23 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>Lisp</title>
      <link>https://jueqingsizhe66.github.io/tags/lisp/</link>
    </image>
    
    <item>
      <title>Think in the variable and macro in the common lisp</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/11/01/think-in-the-variable-and-macro-in-the-common-lisp/</link>
      <pubDate>Sun, 01 Nov 2015 17:26:23 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/11/01/think-in-the-variable-and-macro-in-the-common-lisp/</guid>
      <description>&lt;p&gt;As you all know we can use defun to define a function in the common lisp,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;
(defun add (x)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
(defun foo (a b c)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;  a b c))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Definition above is the most essential method to create a function. Due to the&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;convience&lt;/strong&gt; we will have to think about the variables and functions again.&lt;/p&gt;
&lt;p&gt;Writing thinking path: from thinking the variables to functions and get the knowledge of the common lisp.&lt;/p&gt;
&lt;h2 id=&#34;i-variables&#34;&gt;I. Variables&lt;/h2&gt;
&lt;p&gt;We we execute one function ,we should let the interpreter know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;call the Mac first? or call the compiler first?&lt;/li&gt;
&lt;li&gt;Mac will not get the value of the variables ,but change the expression to  another forms&lt;/li&gt;
&lt;li&gt;But compiler will directly get the value of the variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Variables can be shown with &amp;amp;key,&amp;amp;optional,&amp;amp;rest,&amp;amp;body forms etc.&lt;/p&gt;
&lt;h3 id=&#34;keyword-variables&#34;&gt;keyword variables&lt;/h3&gt;
&lt;p&gt;The variables start with colon( it means :) is the keyword variables, but there are exception,&lt;/p&gt;
&lt;p&gt;such as in the defsystem(asdf grammer), you can depends on other system (depends on :macro-utilities)&lt;/p&gt;
&lt;p&gt;here macro-utilities is called as a system,not the keyword variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;
(defun foo (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;key&lt;/span&gt; a (b &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) (c &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; c-p)) 
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;  a b c c-p))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;optional-variables&#34;&gt;optional variables&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;
(defun foo (a &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; (b &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) (c &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; c-p))  &lt;span style=&#34;color:#75715e&#34;&gt;;;c-supplied-p&lt;/span&gt;

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;  a b c c-p))

&lt;span style=&#34;color:#75715e&#34;&gt;;; it means the variables b and c is optional ,if b is not written in the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; the parameter list, the interpreter will set b = 20,similary  c.&lt;/span&gt;

(defun make-rectangle (width &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; (height width)) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; the rectangle will set height =width when height is not supplied.&lt;/span&gt;

(defun foo (a &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; (b &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) (c &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; c-supplied-p)) 

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;  a b c c-supplied-p))


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rest-variables&#34;&gt;rest variables&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;
(defun &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)

(defun &lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; numbers) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)

(defmacro when (&lt;span style=&#34;color:#66d9ef&#34;&gt;condition&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; body)
    &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;condition&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;body) &lt;span style=&#34;color:#75715e&#34;&gt;;; The difference between , and ,@ in the `() is ,@ will delete the brace more than once &lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (if condition then-part [else-part])&lt;/span&gt;
)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;body--variables&#34;&gt;body  variables&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;macro-definition&#34;&gt;macro definition&lt;/h3&gt;
&lt;p&gt;I think Mac(Macro-&amp;gt; defmacro) is a form to change the input of the variables.Actually it is&lt;/p&gt;
&lt;p&gt;most powerful tool in the lisp programming&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)

(defun backwords (str) 
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt; str))

(backwords (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;;; take care not (backwords &amp;#39;(&amp;#34;hello world&amp;#34; t format))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So when you execute the backwords macro, the interpreter will tell the Mac to do the works.&lt;/p&gt;
&lt;p&gt;When  he finished his work. The compiler will continue execute the result of the Mac. That&lt;/p&gt;
&lt;p&gt;is the process of the macro function.&lt;/p&gt;
&lt;h2 id=&#34;ii-functions&#34;&gt;II. Functions&lt;/h2&gt;
&lt;p&gt;Orient Object Programming&#39;s CLOS is  to tell you how to rearrange the functions and variables into one class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;iii-format-function&#34;&gt;III. Format function&lt;/h2&gt;
&lt;p&gt;format is a most powerful decorate function to output in the common lisp.&lt;/p&gt;
&lt;p&gt;so every field in the format function , you should take note &lt;em&gt;~&lt;/em&gt; ,such as &lt;em&gt;~a&lt;/em&gt;, &lt;em&gt;~{~}&lt;/em&gt;, &lt;em&gt;~%&lt;/em&gt;, &lt;em&gt;~:a&lt;/em&gt;, &lt;em&gt;~r&lt;/em&gt;,&lt;em&gt;~d&lt;/em&gt; etc&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-common-lisp&#34; data-lang=&#34;common-lisp&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;added-later&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
