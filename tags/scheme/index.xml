<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scheme | Macro Life</title>
    <link>https://jueqingsizhe66.github.io/tags/scheme/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tags/scheme/index.xml" rel="self" type="application/rss+xml" />
    <description>scheme</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Fri, 11 Aug 2017 20:13:42 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/img/icon-192.png</url>
      <title>scheme</title>
      <link>https://jueqingsizhe66.github.io/tags/scheme/</link>
    </image>
    
    <item>
      <title>From Little Scheme to Season Scheme</title>
      <link>https://jueqingsizhe66.github.io/blog/2017/08/11/from-little-scheme-to-season-scheme/</link>
      <pubDate>Fri, 11 Aug 2017 20:13:42 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2017/08/11/from-little-scheme-to-season-scheme/</guid>
      <description>&lt;p&gt;The Little Scheme(TLS) 提出了&lt;code&gt;rember&lt;/code&gt;,&lt;code&gt;multirember&lt;/code&gt;,&lt;code&gt;multirember*&lt;/code&gt;以及&lt;code&gt;multirember&amp;amp;Col collector&lt;/code&gt;等系列函数的定义，而在The Season Scheme(TSS) 进一步改进了&lt;code&gt;rember&lt;/code&gt;系列函数， 使用&lt;code&gt;let&lt;/code&gt;、&lt;code&gt;letrec&lt;/code&gt;、&lt;code&gt;letcc&lt;/code&gt;进行改写，并结合&lt;code&gt;leftmost&lt;/code&gt;和&lt;code&gt;deep&lt;/code&gt;函数的想法，又提出了&lt;code&gt;rember&lt;/code&gt;的函数，该函数表示删除最左边的函数。在此过程中，剖析每一个简单的函数(并由此带来智趣)， 并进行改进，升级，提炼，从中可以体味到&lt;a href=&#34;http://blog.sina.com.cn/s/blog_bffd70da0101f4sl.html&#34;&gt; 华罗庚老先生 &lt;/a&gt;说的”书越读越薄，并积厚薄书”的感觉,从繁杂中感受直观的本质， 借以理解事物，从另外一个角度看待事物。&lt;/p&gt;
&lt;p&gt;一、The Little Scheme
rember
multirember
multiremberStar
multiremberStarCol
二、The Season Scheme
rember-let
rember-letrec
rember-letcc
rember star
depthStar improvement&lt;/p&gt;
&lt;h1 id=&#34;the-little-scheme&#34;&gt;一、The Little Scheme&lt;/h1&gt;
&lt;p&gt;scheme的核心数据结构是List，通过list进行算法的演算，而rember是其中的一种算法，用于去除其中的一个元素。 并在rember的同级函数中，也定义了subst，member，insert left, insert right等。在TLS书中也提出了这些函数的相同之处并最终使用insert-g来统一各个函数，这是不错的思想。&lt;/p&gt;
&lt;h2 id=&#34;11-rember&#34;&gt;1.1 rember&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (test?)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
              ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((test? a (car lat))
               (cdr lat))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
               (cons (car lat)
                     ((multirember-f test?) a (cdr lat))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another related procedures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; insertL
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; old lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat)
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((eq? (car lat) old)
       (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (cons old (cdr lat))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (insertL &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; old (cdr lat)))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; insertLR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat)
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((eq? (car lat) oldL)
       (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (cons oldL (cdr lat))))
      ((eq? (car lat) oldR)
       (cons oldR (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (cdr lat))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons (car lat) (insertLR &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进一步可以参考 &lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/05/18/the-little-scheme-and-part-of-tss/&#34;&gt; TLS and TSS Backup &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了更进一步删除一个列表(未嵌套多个list)时候所有的元素(定义为lat version)&lt;/p&gt;
&lt;h2 id=&#34;12-multirember&#34;&gt;1.2 multirember&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; multirember-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (test?)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
              ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((test? a (car lat))
               ((multirember-f test?) a (cdr lat)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
               (cons (car lat)
                     ((multirember-f test?) a (cdr lat))))))))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another related procedures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; multiinsertLR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat)
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((eq? (car lat) oldL)
       (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (cons oldL (multiinsertLR &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)))))
      ((eq? (car lat) oldR)
       (cons oldR (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (multiinsertLR &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons (car lat) (multiinsertLR &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)))))))


&lt;span style=&#34;color:#75715e&#34;&gt;;(insertL &amp;#39;a &amp;#39;b &amp;#39;(a b c (a b c)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a a b c (a b c))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;(insertLR &amp;#39;water &amp;#39;a &amp;#39;b &amp;#39;(a bc b c d (a c b)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(water a bc b c d (a c b))&lt;/span&gt;

 (multiinsertLR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;)))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;))
&amp;gt; (insertLR &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;)))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;water&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;13-multirember&#34;&gt;1.3 multirember*&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-rakcet&#34; data-lang=&#34;rakcet&#34;&gt;(define multiinsertLR*
  (lambda (new oldL oldR lat)
    (define atom?
      (lambda (x)
        (and  (not (pair? x)) (not (null? x)))))
    (cond
      ((null? lat)
       &#39;())
      ((atom? (car lat))
       (cond 
         ((eq? (car lat) oldL)
          (cons new (cons oldL (multiinsertLR* new oldL oldR (cdr lat)))))
         ((eq? (car lat) oldR)
          (cons oldR (cons new (multiinsertLR* new oldL oldR (cdr lat)))))
         (else
          (cons (car lat) (multiinsertLR* new oldL oldR (cdr lat))))))
      (else
       (cons (multiinsertLR* new oldL oldR (car lat))
             (multiinsertLR* new oldL oldR (cdr lat)))))))


(define evens-only*
  (lambda (l)

    (define atom?
      (lambda (x)
        (and (not (pair? x)) (not (null? x)))))
    (cond
      ((null? l) &#39;())
      ((atom? (car l))
       (cond
         ((even? (car l))
          (cons (car l) (evens-only* (cdr l))))
         (else (evens-only* (cdr l)))))
      (else
       (cons (evens-only* (car l))
             (evens-only* (cdr l)))))))


&amp;gt; (multiinsertLR* &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (water a b water c d))
&amp;gt; (multiinsertLR &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (a b c d))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another related procedures:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-rakect&#34; data-lang=&#34;rakect&#34;&gt;(define multiinsertLR*let
  (lambda (new oldL oldR lat)
    (define atom?
      (lambda (x)
        (and  (not (pair? x)) (not (null? x)))))
    (cond
      ((null? lat)
       &#39;())
      ((atom? (car lat))
        (let ((rest (multiinsertLR* new oldL oldR (cdr lat))))
          (cond 
            ((eq? (car lat) oldL)
             (cons new (cons oldL rest)))
            ((eq? (car lat) oldR)
             (cons oldR (cons new rest)))
            (else
             (cons (car lat) rest)))))
      (else
       (let ((first (multiinsertLR* new oldL oldR (car lat)))
             (rest (multiinsertLR* new oldL oldR (cdr lat))))
       (cons first rest))))))



(define multiinsertLR*letrec
  (lambda (new oldL oldR lat)
    (define atom?
      (lambda (x)
        (and  (not (pair? x)) (not (null? x)))))
    (define mul-help
      (lambda (lat)
        (cond
          ((null? lat)
           &#39;())
          ((atom? (car lat))
           (cond 
             ((eq? (car lat) oldL)
              (cons new (cons oldL (mul-help  (cdr lat)))))
             ((eq? (car lat) oldR)
              (cons oldR (cons new (mul-help  (cdr lat)))))
             (else
              (cons (car lat) (mul-help  (cdr lat))))))
          (else
           (cons (mul-help  (car lat))
                 (mul-help  (cdr lat)))))))
    (mul-help lat)))

&amp;gt; (multiinsertLR*let &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (water a b water c d))
&amp;gt; (multiinsertLR* &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (water a b water c d))
&amp;gt; (multiinsertLR &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (a b c d))

(multiinsertLR*letrec &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (water a b water c d))



(define multiinsertLR*letreclet
  (lambda (new oldL oldR lat)
    (define atom?
      (lambda (x)
        (and  (not (pair? x)) (not (null? x)))))
    (define mul-help
      (lambda (lat)
        (cond
          ((null? lat)
           &#39;())
          ((atom? (car lat))
           (let ((rest (mul-help  (cdr lat))))
           (cond 
             ((eq? (car lat) oldL)
              (cons new (cons oldL rest)))
             ((eq? (car lat) oldR)
              (cons oldR (cons new rest)))
             (else
              (cons (car lat) rest)))))
          (else
           (let ((first (mul-help  (car lat)))
                 (rest (mul-help  (cdr lat))))
           (cons first rest))))))
    (mul-help lat)))

(multiinsertLR*letreclet &#39;water &#39;a &#39;b &#39;(a b c d a b (a b c d)))
&#39;(water a b water c d water a b water (water a b water c d))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;14-multiremberstar-and-collector&#34;&gt;1.4 multiremberstar and collector&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; multirember*co
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat col)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; atom?
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; (not (pair? x)) (not (null? x)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      (( null? lat)
       (col (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt; ()) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt; ())))
      ((atom? (car lat))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
         ((eq? ( car lat) a)
         (multirember*co a (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; ( newlat seen)
                          (col newlat (cons (car lat)
                                            seen)))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        (multirember*co a (cdr lat)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat seen)
                         (col (cons (car lat) newlat) seen))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (multirember*co a (car lat)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (al as)
                         (multirember*co a (cdr lat)
                                         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (dl ds)
                                           (col (cons al dl)
                                                (cons as ds))))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another related procedures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; col
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x y)
      (null? y)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; a-friend
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x y)
      (length x)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; a-friend-y
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x y)
      (length y)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; a-friend-z
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x y)
      (cons x (cons y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; a-friend-zp
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x y z)
      (cons x (cons y (cons z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; evens-only*col
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l col)

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; atom?
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; (not (pair? x)) (not (null? x)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((atom? (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
         ((even? (car l))
          (evens-only*col (cdr l)
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                            (col (cons (car l) newlat) (* (car l) L) R))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (evens-only*col (cdr l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                                      (col newlat L
                                           (+ (car l) R)))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (evens-only*col (car l)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (al ale ari)
                         (evens-only*col (cdr l)
                                         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (dl dle dri)
                                           (col (cons al dl)
                                                (* ale dle)
                                                (+ ari dri))))))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; multiinsertLRo
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR lat col)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((eq? (car lat) oldL)
       (multiinsertLRo &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                         (col (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (cons oldL newlat))
                              (+ L &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) R))))
      ((eq? (car lat) oldR)
       (multiinsertLRo &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                         (col (cons oldR (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; newlat))
                              L (+ R &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (multiinsertLRo &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                         (col (cons (car lat) newlat)
                              L
                              R)))))))




(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; multiinsertLR*o
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR lat col)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; atom?
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; (not (pair? x)) (not (null? x)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((atom? (car lat))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) oldL)
          (multiinsertLR*o &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                            (col (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; (cons oldL newlat))
                                 (+ L &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) R))))
         ((eq? (car lat) oldR)
          (multiinsertLR*o &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                            (col (cons oldR (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; newlat))
                                 L (+ R &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
          (multiinsertLR*o &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (newlat L R)
                            (col (cons (car lat) newlat)
                                 L
                                 R))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (multiinsertLR*o &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (car lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (al ale ari)
                          (multiinsertLR*o &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; oldL oldR (cdr lat)
                                           (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (dl dle dri)
                                             (col (cons al dl)
                                                  (+ ale dle)
                                                  (+ ari dri))))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;the-season-scheme&#34;&gt;二、The Season Scheme&lt;/h1&gt;
&lt;p&gt;由&lt;code&gt;member&lt;/code&gt;和&lt;code&gt;rember&lt;/code&gt;又可以深入进行剖析，于是引进了&lt;code&gt;member&lt;/code&gt;的升级版本&lt;code&gt;two-in-a-lat&lt;/code&gt;,未包含TSS的最后一个two-in-a-lat的实现，并通过let,letrec,letcc改写TLS中的rember系列函数，在结合leftmost和deep(Later on,deep有两外一层意思就是产生n层的pizza)函数，升级rember到删除最左边的一个元素。&lt;/p&gt;
&lt;p&gt;Member实际上在所有的函数的实现中都有对应的组成，他是一个十分重要的组成部分，包括基于member的union,intersect,intersectall函数的，一个相对基础的函数。
the definition of member&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; (eq? a (car lat))
           (member a (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; member-letrec version&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
      ((yes? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                 ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                 ((eq? (car l) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (yes? (cdr l)))))))
      (yes? l))))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在让我们看看two-in-a-lat的引申(通过member)
Two -in -a -lat&lt;/p&gt;
&lt;p&gt;包含two-in-a-lat(用member2代替),并附加sum-of-prefix和scramble函数的实现，目的是说如果你想让函数知道额外的信息，可以通过增加参数的方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; member-letrec-ju?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((yes? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                      ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; (eq? a (car l))
                           (yes? a (cdr l))))))))
      (yes? lat))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; member2?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (preceding lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; (eq? preceding (car lat))
                (member2? (car lat) (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; (member2? &amp;#39;a &amp;#39;(a b c))  bugs!&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; memberContinue?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; M2?
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (preceding lat)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
          ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; (eq? preceding (car lat))
                    (M2? (car lat) (cdr lat)))))))
    (M2? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() lat)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; memberContinueAlter?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((M2? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (preceding lat)
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((pre (car lat)))
                         (&lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; (eq? preceding pre)
                                (M2? pre (cdr lat)))))))))
             (M2? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() lat))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; sum-of-prefixes
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; sum-of-prefixes-b
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (sonssf tup)     &lt;span style=&#34;color:#75715e&#34;&gt;; sonssf stands for &amp;#39;sum of numbers seen so far&amp;#39;&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
          ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (cons (+ sonssf (car tup))
                      (sum-of-prefixes-b
                       (+ sonssf (car tup))
                       (cdr tup)))))))
    (sum-of-prefixes-b &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; tup)))

&lt;span style=&#34;color:#75715e&#34;&gt;;  (sum-of-prefixes &amp;#39;(1 2 3 4))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 3 6 10)&lt;/span&gt;


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; sum-of-prefixes1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
      ((S (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (sss tup)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
              ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((first (car tup)))
                (cons (+ sss first)
                      (S (+ sss first) (cdr tup)))))))))
(S &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; tup))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; scramble-b
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup rev-pre)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; one?
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
        (= n  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; sub1
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
        (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; pick
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n lat)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
          ((one? n) (car lat))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (pick (sub1 n) (cdr lat))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons (pick (car tup) (cons (car tup) rev-pre))
             (scramble-b (cdr tup)
                         (cons (car tup) rev-pre)))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; scramble
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((scramble-b
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup rev-pre)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; one?
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
                    (= n  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; sub1
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
                    (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; pick
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n lat)
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                      ((one? n) (car lat))
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (pick (sub1 n) (cdr lat))))))
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                  ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((first (car tup)))
                     (cons (pick first (cons first rev-pre))
                     (scramble-b (cdr tup)
                                 (cons first rev-pre)))))))))
      (scramble-b tup &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))




(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; scramble2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((one?
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
                (= n  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
             (sub1
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n)
                (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
             (pick
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (n lat)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                  ((one? n) (car lat))
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (pick (sub1 n) (cdr lat))))))
             (scramble-b
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (tup rev-pre)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                  ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((first (car tup)))
                     (cons (pick first (cons first rev-pre))
                           (scramble-b (cdr tup)
                                       (cons first rev-pre)))))))))
      (scramble-b tup &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;##2.1 rember-let&lt;/p&gt;
&lt;p&gt;Note: use let to define the repeated expression, so simplify the definition of the procedure.&lt;/p&gt;
&lt;h2 id=&#34;22-rember-letrec&#34;&gt;2.2 rember-letrec&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;; see at the TSS&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
        ((R (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lat)
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                ((eq? (car lat) a) (cdr lat))
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                 (cons (car lat) (R (cdr lat))))))))
      (R lat))))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们想要进一步实现rember-beyond-first(保留删除元素之前的所有元素)和rember-upto-last(只保留删除元素之后的元素)&lt;/p&gt;
&lt;h2 id=&#34;23-rember-letcc&#34;&gt;2.3 rember-letcc&lt;/h2&gt;
&lt;p&gt;Rember-Beyond-first&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; The rember-beyond-first function rembers everything beyond first match&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember-beyond-first
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
      ((R (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lat)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
              ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((eq? (car lat) a) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                (cons (car lat) (R (cdr lat))))))))
      (R lat))))
	

(rember-beyond-first
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;roots&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;noodles&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;spaghetti&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;spatzle&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;bean-thread&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;roots&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;potatoes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;yam&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;others&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;rice&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;(noodles spaghetti spaghetti bean-thread)&lt;/span&gt;

Rember-upto-last


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define-syntax&lt;/span&gt; letcc
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;syntax-rules&lt;/span&gt; ()
    ((letcc ?k ?body &lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;)
     (call/cc (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (?k) ?body &lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember-upto-last
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat) &lt;span style=&#34;color:#75715e&#34;&gt;; Look Ma, no cons   &lt;/span&gt;
    (letcc skip
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; 
          ((R
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                ((null? l) (void))
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ()
                        (R (cdr l))
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                          ((eq? a (car l))
                           (skip (cdr l)))
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (void)))))))))
        (R lat)
        lat))))

	

(rember-upto-last
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;roots&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;noodles&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;spaghetti&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;spatzle&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;bean-thread&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;roots&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;potatoes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;yam&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;others&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;rice&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;(potatoes yam others rice)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;24-remberstar&#34;&gt;2.4 remberstar&lt;/h2&gt;
&lt;p&gt;the definition of leftmost&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; leftmost-fixed-let
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((atom? (car l)) (car l))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((a (leftmost-fixed (car l))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
           ((atom? a) a)
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (leftmost-fixed (cdr l)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;(leftmost-fixed-let &amp;#39;((() a b) (c d))) ;; bug fixed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(leftmost-fixed-let &amp;#39;(((y) b) (c d)))   ; &amp;#39;y&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(leftmost-fixed-let &amp;#39;(((y) ()) () (e))) ; &amp;#39;y&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(leftmost-fixed-let &amp;#39;(((() y) ())))     ; &amp;#39;y&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(leftmost-fixed-let &amp;#39;(((()) ()))) ; &amp;#39;()&lt;/span&gt;



&lt;span style=&#34;color:#75715e&#34;&gt;;;letcc version&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; leftmost-letcc
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
      ((lm (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l out)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
               ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
               ((atom? (car l)) (out (car l)))
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
                  (lm (car l) out)
                  (lm (cdr l) out)))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
      (call-with-current-continuation
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (skip)
         (lm l skip))))))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the definition of deep&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; deep
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (m)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pizza&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (cons (deep (sub1 m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; toppings &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; deepB
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (m)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((zero? m)
       (call-with-current-continuation
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (jump)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;set!&lt;/span&gt; toppings jump)
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pizza&lt;/span&gt;)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (cons (deepB (sub1 m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; deep&amp;amp;co
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (m k)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((zero? m) (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pizza&lt;/span&gt;))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (deep&amp;amp;co (sub1 m)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) (k (cons x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))))))

(deep&amp;amp;co &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x))          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;
(deep&amp;amp;co &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x))          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;
(deep&amp;amp;co &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((pizza))&lt;/span&gt;


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; deep&amp;amp;coB
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (m k)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((zero? m)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ()
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;set!&lt;/span&gt; toppings k)
         (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pizza&lt;/span&gt;)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (deep&amp;amp;coB (sub1 m)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x)
                   (k (cons x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))))))

(deep&amp;amp;coB &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;
(deep&amp;amp;coB &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (x) x)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，再看看由leftmost结合rember得到rember star.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The rember1* function removes the leftmost occurrence of a in l&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember1*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((atom? (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
         ((eq? (car l) a) (cdr l))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
           (cons (car l) (rember1* a (cdr l))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
          ((equal? (rember1* a (car l)) (car l)) &lt;span style=&#34;color:#75715e&#34;&gt;; if the list with &amp;#39;a&amp;#39; removed doesn&amp;#39;t change&lt;/span&gt;
           (cons (car l) (rember1* a (cdr l))))  &lt;span style=&#34;color:#75715e&#34;&gt;; then recurse&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            (cons (rember1* a (car l)) (cdr l)))))))) &lt;span style=&#34;color:#75715e&#34;&gt;; otherwise remove &amp;#39;a&amp;#39;&lt;/span&gt;

	


&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of rember1*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(rember1*
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;Swedish&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;rye&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;mustard&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;turkey&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((Swedish rye) (French (mustard turkey)) salad)&lt;/span&gt;

(rember1*
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pasta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;pasta&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;noodles&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;sauce&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;tomatoes&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((pasta) pasta (noodles meat sauce) meat tomatoes)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是letrec version of rember1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember1*-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
        ((R (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                ((atom? (car l))
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((first (car l))
                       (second (cdr l)))
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                     ((eq? first a) second)
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                      (cons first (R second))))))
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((first (car l))
                        (second (cdr l)))
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                      ((equal? (R first) first) &lt;span style=&#34;color:#75715e&#34;&gt;; if the list with &amp;#39;a&amp;#39; removed doesn&amp;#39;t change&lt;/span&gt;
                       (cons first (R second)))  &lt;span style=&#34;color:#75715e&#34;&gt;; then recurse&lt;/span&gt;
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                       (cons (R first) second))))))))) &lt;span style=&#34;color:#75715e&#34;&gt;; otherwise remove &amp;#39;a&amp;#39;&lt;/span&gt;
      (R l))))
(rember1*-letrec
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;Swedish&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;rye&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;mustard&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;turkey&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt;))
(rember1*-letrec
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pasta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;pasta&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;noodles&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;sauce&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;tomatoes&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the version of letcc (我暂时不太理解)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; rember1* via letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; rember1*-letcc
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
        ((rm (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a l oh)
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                 ((null? l) (oh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;no&lt;/span&gt;))
                 ((atom? (car l))
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (eq? (car l) a)
                      (cdr l)
                      (cons (car l) (rm a (cdr l) oh))))
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((new-car
                         (call-with-current-continuation
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (oh)
                            (rm a (car l) oh)))))
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (atom? new-car)
                        (cons (car l) (rm a (cdr l) oh))
                        (cons new-car (cdr l)))))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((new-l
             (call-with-current-continuation
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (oh)
                (rm a l oh)))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (atom? new-l)
            l
            new-l)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of rember1*-letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(rember1*-letcc
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;Swedish&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;rye&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;mustard&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;turkey&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;salad&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((Swedish rye) (French (mustard turkey)) salad)&lt;/span&gt;

(rember1*-letcc
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pasta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;pasta&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;noodles&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;sauce&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;meat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;tomatoes&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((pasta) pasta (noodles meat sauce) meat tomatoes)&lt;/span&gt;

(rember1*-letcc
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;bar&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;baz&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((foo bar) baz)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the definition of union&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; union2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (set1 set2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt; ((member? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (a lat)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt; ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                              ((eq? a (car lat)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (member? a (cdr lat))))))
             (A (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (set1)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                  ((null? set1) set2)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((p1 (A (cdr set1))))
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (member? (car set1) set2)
                         p1
                         (cons (car set1) p1))))))))
      (A set1))))
      (union2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the definition of intersect&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; intersect
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (set1 set2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())  &lt;span style=&#34;color:#75715e&#34;&gt;; don&amp;#39;t forget the 1st commandment&lt;/span&gt;
      ((member? (car set1) set2)
       (cons (car set1) (intersect (cdr set1) set2)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        (intersect (cdr set1) set2)))))
&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of intersect&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect &amp;#39;(a b x c d) &amp;#39;(q w e x r t y a))     ; &amp;#39;(a x)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect &amp;#39;(a b x c d) &amp;#39;())                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect &amp;#39;() &amp;#39;())                             ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect &amp;#39;() &amp;#39;(a b x c d))                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect &amp;#39;(a b x c d) &amp;#39;(a b x c d))           ; &amp;#39;(a b x c d)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;intersect letrec version&lt;/p&gt;
&lt;p&gt;use letrec to remove arguments that do not change for recursive applications&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; intersect-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (set1 set2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
      ((I (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (set)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
              ((null? set) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((member? (car set) set2)
               (cons (car set) (I (cdr set))))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                (I (cdr set)))))))
      (I set1))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of intersect-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect-letrec &amp;#39;(a b x c d) &amp;#39;(q w e x r t y a))     ; &amp;#39;(a x)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect-letrec &amp;#39;(a b x c d) &amp;#39;())                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect-letrec &amp;#39;() &amp;#39;())                             ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect-letrec &amp;#39;() &amp;#39;(a b x c d))                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersect-letrec &amp;#39;(a b x c d) &amp;#39;(a b x c d))           ; &amp;#39;(a b x c d)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the definition of intersectall&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; The intersectall function finds intersect of a bunch of sets&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; intersectall
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lset)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((null? (cdr lset)) (car lset))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        (intersect (car lset)
                   (intersectall (cdr lset)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of intersectall&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall &amp;#39;((a) (a) (a)))                   ; &amp;#39;(a)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall &amp;#39;((a) () (a)))                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall &amp;#39;())                              ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall &amp;#39;((a b c d) (b c d e) (c d e f))) ; &amp;#39;(c d)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Obeying the 12th commandment&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; intersectall-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lset)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
      ((A (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lset)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
              ((null? (cdr lset)) (car lset))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                (intersect (car lset)
                           (A (cdr lset))))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
        ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (A lset))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of intersectall-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-letrec &amp;#39;((a) (a) (a)))                   ; &amp;#39;(a)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-letrec &amp;#39;((a) () (a)))                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-letrec &amp;#39;())                              ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-letrec &amp;#39;((a b c d) (b c d e) (c d e f))) ; &amp;#39;(c d)&lt;/span&gt;


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; intersectall-ap
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lset)
    (call-with-current-continuation
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (hop)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
          ((A (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (lset)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                  ((null? (car lset)) (hop &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
                  ((null? (cdr lset)) (car lset))
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                    (I (car lset)
                       (A (cdr lset)))))))
           (I (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (s1 s2)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec&lt;/span&gt;
                  ((J (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (s1)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                          ((null? s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                          ((member? (car s1) s2)
                           (cons (car s1) (J (cdr s1))))
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                            (J (cdr s1)))))))
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
                    ((null? s2) (hop &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (J s1)))))))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
            ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (A lset))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of intersectall-ap&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-ap &amp;#39;((a) (a) (a)))                   ; &amp;#39;(a)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-ap &amp;#39;((a) () (a)))                    ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-ap &amp;#39;())                              ; &amp;#39;()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(intersectall-ap &amp;#39;((a b c d) (b c d e) (c d e f))) ; &amp;#39;(c d)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后再透过deep star的写法优化过程来体会TSS的函数精髓。
depthStar improvement&lt;/p&gt;
&lt;p&gt;通过depth进一步阐释letrec的意义（从原始的depth到depth-let 然后depth-let-if，以及更为清晰版本的depth-let-max,然后最后浓缩到最后的6行代码depth-max。
depth&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; The depth* function finds the max depth of an s-expression&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; depth*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((atom? (car l)) (depth* (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
          ((&amp;gt; (depth* (cdr l))
              (add1 (depth* (car l))))
           (depth* (cdr l)))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
(add1 (depth* (car l)))))))))


(depth* &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(depth* &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;margarine&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt;))) &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(depth* &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;let version:
depth-let&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; depth*-let
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((atom? (car l)) (depth*-let (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((rightPart (depth*-let (cdr l)))
             (leftPart (add1 (depth*-let (car l)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
           ((&amp;gt; rightPart
               leftPart)
            rightPart)
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            leftPart)))))))

(depth*-let &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(depth*-let &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;margarine&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt;))) &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(depth*-let &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;let-if version:
depth-let-if&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; depth*-let-if
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((atom? (car l)) (depth*-let-if (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((rightPart (depth*-let-if (cdr l)))
             (leftPart (add1 (depth*-let-if (car l)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&amp;gt; rightPart leftPart)
            rightPart
            leftPart))))))

(depth*-let-if &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(depth*-let-if &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;margarine&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt;))) &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(depth*-let-if &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

depth-let-max version:
depth-let-max&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; depth*-let-max
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((atom? (car l)) (depth*-let-max (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((rightPart (depth*-let-max (cdr l)))
             (leftPart (add1 (depth*-let-max (car l)))))
         (max rightPart leftPart)))))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;

(depth*-let-max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(depth*-let-max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;margarine&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt;))) &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(depth*-let-max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

depth-max version:
depth-max

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define&lt;/span&gt; depth*-max
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; (l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((atom? (car l)) (depth*-max (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
         (max (depth*-max (cdr l)) (add1 (depth*-max (car l))))))))

(depth*-max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;peppers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;pickled&lt;/span&gt;)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(depth*-max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;margarine&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#e6db74&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;bitter&lt;/span&gt;))) &lt;span style=&#34;color:#e6db74&#34;&gt;butter&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(depth*-max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用链接，&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/14/si-ji-mo-si-de-le-yuan-schemers/&#34;&gt; Scheme清单 &lt;/a&gt;
&lt;a href=&#34;https://groups.google.com/forum/#!forum/racket-users&#34;&gt; Google racket User group &lt;/a&gt;
&lt;a href=&#34;https://groups.google.com/forum/#!topic/racket-users/cPuTr8lrXCs&#34;&gt; Gossip about the decision tree &lt;/a&gt;
GreghenderShoot 1970&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/greghendershott&#34;&gt; Github Repo &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/greghendershott/fear-of-macros&#34;&gt; Fear of macro &lt;/a&gt; Tell us the history of macro, overcome the fear of macro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/greghendershott/frog&#34;&gt; frog &lt;/a&gt; one static website generator tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.greghendershott.com/&#34;&gt; His Website &lt;/a&gt;
Tonyg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tonyg?tab=repositories&#34;&gt; Github Repo &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tonyg.github.io/racket-bitsyntax/&#34;&gt; His opensource tools: Bitsyntax &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://botbot.me/freenode/racket/&#34;&gt; racket freenote robot, Gossip Platform &lt;/a&gt;
Husk scheme&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/justinethier/husk-scheme&#34;&gt; husk repo &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://justinethier.github.io/husk-scheme/manual/getting-started.html&#34;&gt; husk get started &lt;/a&gt;
&lt;a href=&#34;https://github.com/alaricsp/chicken-scheme&#34;&gt; chicken scheme &lt;/a&gt;
&lt;a href=&#34;http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-2.html#%25_toc_start&#34;&gt; R5RS html file &lt;/a&gt;
root of lisp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.paulgraham.com/rootsoflisp.html&#34;&gt; original site &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hlpp/scheme/tree/master/tests&#34;&gt; define implement &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BTW, one very good vim tips, you can use &lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34;&gt; Vimfiler &lt;/a&gt;, with shortkey &lt;code&gt;m&lt;/code&gt; and then &lt;code&gt;r&lt;/code&gt; to rename the file in the editor page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>program-as-data</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/03/30/program-as-data/</link>
      <pubDate>Wed, 30 Mar 2016 13:23:21 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/03/30/program-as-data/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/HtDP2e/part_three.html&#34;&gt;A program is like an essay. The first version is a draft, and drafts demand editing.&lt;/a&gt;
Program is also can be seen as data.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直觉认识proc,提取body。&lt;/li&gt;
&lt;li&gt;对比识别。&lt;/li&gt;
&lt;li&gt;加壳。&lt;/li&gt;
&lt;li&gt;三行表格，n列迭代。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body)) env)
 = (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body env)) val) env)

 = (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body ([var=val] env))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;函数其实也是expression，它可以被consume也可以被produce.凭着这个脑中的
印象是否可以帮助你继续理解abstration和程序即数据的思想。&lt;/p&gt;
&lt;p&gt;所有的函数和数据犹如花生的壳和仁的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/lisp/peanut.jpeg&#34; alt=&#34;peanut&#34;&gt;&lt;/p&gt;
&lt;p&gt;只有加壳就相当于是创建一层抽象，把类似的东西包裹起来，或者也可以换着一种思路
（每个壳里面都包着类似的花生仁，只不过可能存在些许不同）&lt;/p&gt;
&lt;h3 id=&#34;two-similar-functions&#34;&gt;Two similar functions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; Los -&amp;gt; Boolean&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; does l contain &amp;#34;dog&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;contains-dog?&lt;/span&gt; l)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;alse]
    [else
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt;
       (string=? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;contains-dog?&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; l)))]))

	
&lt;span style=&#34;color:#75715e&#34;&gt;; Los -&amp;gt; Boolean&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; does l contain &amp;#34;cat&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;contains-cat?&lt;/span&gt; l)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;alse]
    [else
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt;
       (string=? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;contains-cat?&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; l)))]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading&#34;&gt;加壳&lt;/h3&gt;
&lt;p&gt;加上一个函数皮，并封上一层。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; String Los -&amp;gt; Boolean&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; determines whether l contains the string s&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;contains?&lt;/span&gt; s l)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;alse]
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(string=? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) s)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;contains?&lt;/span&gt; s (&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; l)))]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们就可以类似的改写了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; Los -&amp;gt; Boolean&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; does l contain &amp;#34;dog&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;contains-dog?&lt;/span&gt; l)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;contains?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt; l))
	
	
&lt;span style=&#34;color:#75715e&#34;&gt;; Los -&amp;gt; Boolean&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; does l contain &amp;#34;cat&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;contains-cat?&lt;/span&gt; l)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;contains?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt; l))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个典型的过程就是函数抽象。进一步可以参考&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/HtDP2e/part_three.html&#34;&gt;HowToDesginProgram&lt;/a&gt;和&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/BTLS/&#34;&gt;TheLittleScheme&lt;/a&gt;.
Note: 你需要解析的其实是花生仁，但是你不得不先把壳打开或者通过另外一种方式，比如红外线等技术把它识别出来。&lt;/p&gt;
&lt;p&gt;也就是说进一步归纳的话，你首先得recognise识别出来，然后才能进行解析（提取其中的蛋白质、脂肪、热量等）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/lisp/baby.png&#34; alt=&#34;mybaby&#34;&gt;&lt;/p&gt;
&lt;p&gt;保护它的壳，给它提供营养，防止它受到感染和伤害。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pressbin.com/tools/excel_to_html_table/index.html&#34;&gt;表格转换链接&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;慢工才能出细活，通过三行表格n列迭代的形式(也可以进一步加大计算量变成n行表格n列迭代)理解递归迭代的过程,在一定的时间，进行一系列的列计算，并让时间推进，直到满足你想要的结果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scheme环境的几种表现形式-represtations</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/03/03/schemehuan-jing-de-ji-chong-biao-xian-xing-shi-represtations/</link>
      <pubDate>Thu, 03 Mar 2016 02:05:32 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/03/03/schemehuan-jing-de-ji-chong-biao-xian-xing-shi-represtations/</guid>
      <description>&lt;p&gt;scheme的解释器的构造，都需要enviroment类型的参与，environment类型的抽象确是影响到语言的具体性能。&lt;/p&gt;
&lt;p&gt;主要有以下四种类型(另一种未实现)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;环境关联表形式出现(cons cons&amp;hellip;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;环境的列表出现 (list var val env)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;环境的过程实现(lambda ()形式)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;环境的一种较为特殊的形式成堆变量的实现(list (list var) (list val))&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;此时是每一次都把一个键值对存入到环境中，逐次存入的过程(采用 &lt;em&gt;cons cons的形式&lt;/em&gt;)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

empty-env  is &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体实现如下所示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; val env)
    (cons (cons var val)
	  env)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; search-var)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
     ((null? env)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;report-no-binding-found&lt;/span&gt; search-var))
     ((eqv? (caar env) search-var)
      (cdr (car env)))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; (cdr env) search-var)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-no-binding-found
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search-var&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No binding for: &amp;#34;&lt;/span&gt; search-var)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
	  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一种比较特殊的就是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; a=1 b=2  a=3  c=5

 ((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))

 empty-env is &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;针对当前的关联表的一个很小的拓展&lt;/p&gt;
&lt;h3 id=&#34;has-binding-&#34;&gt;增加一个&lt;code&gt;has-binding&lt;/code&gt; 实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;has-binding?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; var)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
     ((null? env) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
     ((eqv? (caar env) var) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; (cdr env) var)))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;extend-env&#34;&gt;拓展一个列表输入的功能&lt;code&gt;extend-env*&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var-list&lt;/span&gt; val-list env)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? var-list)
	env
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; (car var-list))
	      (&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; (car val-list)))
	  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env*&lt;/span&gt; (cdr var-list)
		       (cdr val-list)
		       (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val env))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(A) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) e) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(A B C) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) e) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;此时使用一个标志位&lt;code&gt;extend-env&lt;/code&gt;每一次都把一个键值对存入到list环境中，&lt;!-- raw HTML omitted --&gt;嵌套&lt;!-- raw HTML omitted --&gt;存入的过程(采用 &lt;em&gt;cons cons的形式&lt;/em&gt;)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt; 
   (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extend-env&lt;/span&gt; var exp (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;;;;====其实&amp;#39;extend-env 有点多余&lt;/span&gt;
                         (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extend-env&lt;/span&gt; var exp (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;;;====其实&amp;#39;extend-env 有点多余&lt;/span&gt;
                                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))))))

 (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;且看具体实现如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; empty-env : () -&amp;gt; Env&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;empty-env&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; extend-env : Var * Schemeval * Env -&amp;gt; Env&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; val env)
    (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extend-env&lt;/span&gt; var val env)))     &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;==================&amp;gt;关键位置&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; apply-env : Env * Var -&amp;gt; Schemeval&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-env-rec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; search-var all)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
     ((eqv? (car env) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;empty-env&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;report-no-binding-found&lt;/span&gt; search-var all))
     ((eqv? (car env) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extend-env&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;saved-var&lt;/span&gt; (cadr env))        &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;==================&amp;gt;关键位置  &lt;/span&gt;
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;saved-val&lt;/span&gt; (caddr env))           &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;==================&amp;gt;关键位置&lt;/span&gt;
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;saved-env&lt;/span&gt; (cadddr env)))         &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;==================&amp;gt;关键位置&lt;/span&gt;
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? search-var saved-var)
	    saved-val
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env-rec&lt;/span&gt; saved-env search-var all))))  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;==================&amp;gt;不断更新最新的位置look up variable in the saved-env&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;report-invalid-env&lt;/span&gt; env)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; search-var)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env-rec&lt;/span&gt; env search-var env)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;display-env-rec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? (car env) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extend-env&lt;/span&gt;)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;saved-var&lt;/span&gt; (cadr env))
	      (&lt;span style=&#34;color:#a6e22e&#34;&gt;saved-env&lt;/span&gt; (cadddr env)))
	  (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ~a &amp;#34;&lt;/span&gt; saved-var)
	  (&lt;span style=&#34;color:#a6e22e&#34;&gt;display-env-rec&lt;/span&gt; saved-env)))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;display-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;env: &amp;#34;&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;display-env-rec&lt;/span&gt; env)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;newline&lt;/span&gt;)))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;display-env&lt;/span&gt; e)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-no-binding-found
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search-var&lt;/span&gt; all)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;display-env&lt;/span&gt; all)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No binding for&amp;#34;&lt;/span&gt; search-var)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-invalid-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bad environment&amp;#34;&lt;/span&gt; env)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;环境的过程实现是比较难理解的，因为该过程更少了递归的逐渐减少的表像，感觉所有都不变。&lt;/p&gt;
&lt;p&gt;具体实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; data definition:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Env = Var -&amp;gt; Schemeval&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; empty-env : () -&amp;gt; Env&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
    (cons (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search-var&lt;/span&gt;)
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;report-no-binding-found&lt;/span&gt; search-var))
	  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;))))


&lt;span style=&#34;color:#75715e&#34;&gt;;; extend-env : Var * Schemeval * Env -&amp;gt; Env&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;saved-var&lt;/span&gt; saved-val saved-env)
    (cons (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search-var&lt;/span&gt;)
	    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? search-var saved-var)
		saved-val
		(&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; saved-env search-var)))
	  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))

&lt;span style=&#34;color:#75715e&#34;&gt;;; apply-env : Env * Var -&amp;gt; Schemeval&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; search-var)
    ((car env) search-var)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;)
    ((cdr env))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-no-binding-found
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search-var&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No binding for ~s&amp;#34;&lt;/span&gt; search-var)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-invalid-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bad environment: ~s&amp;#34;&lt;/span&gt; env)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env?&lt;/span&gt; e) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;如果若有的定义扎堆存在呢？也就是把所有变量放在一个列表中，值放在一个列表里面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; x=3 y=4 z=5 c=6

 表现为 ((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y z c) (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))

 此时 empty-env is (()  ())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; val env)
    (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
	   (list var) (list val))
          env)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var-list&lt;/span&gt; val-list env)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? var-list)
	env
	(cons (list var-list val-list)
	      env))))

&lt;span style=&#34;color:#75715e&#34;&gt;;; return a pair, for distinguish with val is #f&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-current
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals search-var)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? vars)
	(cons &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? (car vars) search-var)
	    (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt; (car vals))
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-current&lt;/span&gt; (cdr vars) (cdr vals) search-var)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; search-var)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? env)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;report-no-binding-found&lt;/span&gt; search-var)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-current&lt;/span&gt; (caar env) (cadar env) search-var)))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(car val) (cdr val)
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; (cdr env) search-var))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-no-binding-found
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search-var&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No binding for: &amp;#34;&lt;/span&gt; search-var)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;has-binding?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; var)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? env)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-current&lt;/span&gt; (caar env) (cadar env) var)))
	  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(car val)
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;
	      (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; (cdr env) var))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; e))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;e (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) e))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b c d) (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;has-binding?&lt;/span&gt; e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;上述所谈的4种环境的实现，其实也就对应着四种不同的解释器的实现。环境实现的不同，对应者整个解释器的提取过程也就不一样。
整个解释器独立的解释每一个表达式的时候，所采用的方法也就会有所不一样。所以设计一个好的environment，对应的就是设计一个好的
数据结构，用于程序program解析的时候需要使用到的变量或者表达式数据，至关重要！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>插入排序</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/28/cha-ru-pai-xu/</link>
      <pubDate>Sun, 28 Feb 2016 16:42:54 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/28/cha-ru-pai-xu/</guid>
      <description>&lt;p&gt;排序算法是一种比较常见的算法，一般包括冒泡排序，插入排序，快速排序等。
本文主要是关于插入排序。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;如何把一个数字插入到一个列表中&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;;; using insert sort here

(define insert
  (lambda (lst elem)
    (cond ((null? lst) (list elem))
	  ((&amp;lt; elem (car lst))
	   (cons elem lst))
	  (else (cons (car lst)
		      (insert (cdr lst) elem))))))

(define sort-rec
  (lambda (prev now)
    (if (null? now)
	prev
	(sort-rec (insert prev (car now))
		  (cdr now)))))
(define sort
  (lambda (lst)
    (sort-rec &#39;() lst)))


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading-1&#34;&gt;提取出判断条件&lt;/h2&gt;
&lt;p&gt;利用pred代表小于号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define insert
  (lambda (lst elem pred)
     (cond
        ((null? lst) (list elem))
        ((pred elem (car lst))
          (cons elem lst))
        (else (cons (car lst)
                    (insert (cdr lst) elem pred))))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(insert &#39;(1 2 3) &#39;4 &amp;lt;)
    (1 2 3 4)
(insert &#39;(1 2 3) &#39;0 &amp;lt;)
    (0 1 2 3)
(insert &#39;(1 3 2) &#39;4 &amp;lt;)
    (1 3 2 4)    ==&amp;gt; 这不是我们想要的
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析发现 insert仅仅是在判断满足条件的时候，直接退出，不管后面的大小问题，
&lt;!-- raw HTML omitted --&gt;我们不可以判断该元素之后的所有的字符的情况&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;然而该程序当作一个最小的模块，也就是加入我逐个提出判断列表，最终实现的是每提取一个元素
都和新构成的排序列表进行判断，那么也就算判断完成。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;对一个列表进行插入排序&lt;/h2&gt;
&lt;p&gt;在原先insert的基础上，书写了sort-rec和sort-predicate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sort-rec 逐个判断最新的元素和新的临时列表的比较&lt;/li&gt;
&lt;li&gt;sort-predicate 仅仅是选择判断的标准。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;(define sort-rec
  (lambda (prev now pred)
    (if (null? now)
        prev
        (sort-rec (insert prev (car now) pred)
                  (cdr now)
                  pred))))

(define sort/predicate
   (lambda (pred lst)
      (sort-rec &#39;() lst pred)))

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;sort-rec的prev在逐渐的变大，而now的部分在不断的变小&lt;/li&gt;
&lt;li&gt;也就是 sort-rec 的第一号位置不断变大，第二号位由于cdr作用不断变小。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sort/predicate&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))

    prev          now
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  ()         (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)        (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)      (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)    (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)  ()

计算结束&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;返回prev的值
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我们就可以获得正确的结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sort/predicate &amp;lt; &#39;(1 6 5 7))
    (1 5 6 7)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;defineletrec&#34;&gt;利用内部define和letrec改写程序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;采用内部的define实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以保护函数的实现（只被使用一次）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sort/predicate1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pred&lt;/span&gt; lst)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sort-rec
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; now pred)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? now)
           prev
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort-rec&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; prev (car now) pred)
                    (cdr now)
                    pred))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insert
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lst&lt;/span&gt; elem pred)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((null? lst) (list elem))
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;pred&lt;/span&gt; elem (car lst))
           (cons elem lst))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lst)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (cdr lst) elem pred))))))

     (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort-rec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() lst pred)))

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort/predicate1&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;采用letrec实现sort/predicate,主要是用&lt;code&gt;(letrec (() ...) ...)&lt;/code&gt; 结构&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sort/predicate2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pred&lt;/span&gt; lst)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;sort-rec&lt;/span&gt;
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; now pred)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? now)
                   prev
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort-rec&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; prev (car now) pred)
                            (cdr now)
                            pred))))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lst&lt;/span&gt; elem pred)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  ((null? lst) (list elem))
                  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;pred&lt;/span&gt; elem (car lst))
                   (cons elem lst))
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lst)
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (cdr lst) elem pred)))))))
      
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort-rec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() lst pred))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sort/predicate2&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-3&#34;&gt;结论&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;每隔离一层抽象，相当于增加了一种变化&lt;/li&gt;
&lt;li&gt;了解插入排序的实现过程。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>The Fifth interpreter with the implementation of letrec(Important)</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/28/the-fifth-interpreter-with-the-implementation-of-letrec-important/</link>
      <pubDate>Sun, 28 Feb 2016 06:02:57 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/28/the-fifth-interpreter-with-the-implementation-of-letrec-important/</guid>
      <description>&lt;p&gt;letrec的作用是可以定义内部函数。它的实现类似于let，只不过let实现的主要是局部变量，而他是局部的过程（持保留意见)&lt;/p&gt;
&lt;h2 id=&#34;1&#34;&gt;错误1.&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;  (define-datatype environment environment?
    (empty-env)
    (extend-env
     (bvar symbol?)  ;;;这边是一个 所以是symbol?
     (bval expval?)
     (saved-env environment?))
    (extend-env-rec
     (id symbol?)
     (bvar (list-of symbol?)) ;;这边和proc-val的定义发生了冲突  一个是symbol? 另外一个则是(list-of symbol?)
     (body expression?)
     (saved-env environment?)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在实际的extend-env-rec的实现中，则是调用了proc-val，所以并且传入到proc-val，为了保证一致性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;;;;;;;;;;;;;;; environment constructors and observers ;;;;;;;;;;;;;;;;
(define apply-env
  (lambda (env search-sym)
    (cases environment env
           (empty-env ()
                      (error &#39;apply-env &amp;quot;No binding for ~s&amp;quot; search-sym))
           (extend-env (var val saved-env)
                       (if (eqv? search-sym var)
                           val
                           (apply-env saved-env search-sym)))
           (extend-env-rec (p-name b-var p-body saved-env)
                           (if (eqv? search-sym p-name)
                             ;; (proc-val (procedure b-var p-body env))  ;;;注意这里的变化！
                              (proc-val (procedure b-var p-body env #t)) ;;修改了一个bug 目的是可以追踪的作用
                               (apply-env saved-env search-sym))))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以需要对应的修改proc-val&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ;; proc? : SchemeVal -&amp;gt; Bool
  ;; procedure : Var * Exp * Env -&amp;gt; Proc
  (define-datatype proc proc? ;;;注意这边的变化 影响到apply-procedure
    (procedure
     ;(var symbol?)  ;;;为了保证和environment的define-datatype一直改为(list-of symbol?)
     (var (list-of symbol?))
     (body expression?)
     (env environment?)
     (trace boolean?))) ;;;需要考虑#t #f
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2&#34;&gt;错误2.&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; (run &amp;quot;letrec double(x)=+(x,6) in (double 10)&amp;quot;)
enter: (x) = #(struct:num-val 10)
. . cdr: contract violation
  expected: pair?
  given: (num-val 10)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因在于原先的call-exp并没有遍历的过程，而新改进的apply-procedure则是需要遍历，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        (call-exp (rator rand)
                 (let ((proc (expval-&amp;gt;proc (value-of rator env)))
                       (arg (value-of rand env))) 
                   (apply-procedure proc arg)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改进的call-exp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        (call-exp (rator rands)
                 (let ((proc (expval-&amp;gt;proc (value-of rator env)))
                       (args (map (lambda (x) (value-of x env)) rands)))
                   (apply-procedure proc args)))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading&#34;&gt;额外错误&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt; data-structures.scm:7:11: all-defined: not a provide sub-form in: (all-defined)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个错误是因为现在都是在使用&lt;code&gt;(all-defined-out)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;为什么还是会出现如下的错误&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;letrec double(x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            = if zero?(x) then 0 else -((double -(x,1)), 2)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       in (double 6)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; extend-env-rec: bad value for bvar field: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(x)
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(3) then 0 else -(3,2)&amp;#34;&lt;/span&gt;) 
(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Fourth Interpreter about the traceproc</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/27/the-fourth-interpreter-about-the-traceproc/</link>
      <pubDate>Sat, 27 Feb 2016 21:49:18 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/27/the-fourth-interpreter-about-the-traceproc/</guid>
      <description>&lt;p&gt;程序的过程追踪能力体现着一个独特的优势，本文在&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/&#34;&gt;First Interpreter&lt;/a&gt;,&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/27/the-second-interpreter-from-one/&#34;&gt;Second Interpreter&lt;/a&gt;,&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/27/the-third-interpreter-implementing-proc/&#34;&gt;Third Interpreter&lt;/a&gt;基础上实现新的解释器功能。&lt;/p&gt;
&lt;p&gt;实现效果:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    enter: x = #(struct:num-val 30)
    exting: result = #(struct:num-val 29)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;老阮不狂谁会得？出门一笑大江横！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;langscm&#34;&gt;lang.scm修改程序追踪部分&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;;;增加了trace-proc&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traceproc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; expression) traceproc-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至于proc的语法并不需要做任何的修改。&lt;/p&gt;
&lt;h2 id=&#34;data-structuresscm-&#34;&gt;data-structures.scm 进行部分修改&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在修改trace-proc实现的情况下还得修改proc?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原先的proc?实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; proc? : SchemeVal -&amp;gt; Bool&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; procedure : Var * Exp * Env -&amp;gt; Proc&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; proc proc?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; symbol?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; expression?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; environment?)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改进后的&lt;code&gt;proc?&lt;/code&gt;实现,注意trace 是&lt;code&gt;boolean?&lt;/code&gt;类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; proc? : SchemeVal -&amp;gt; Bool&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; procedure : Var * Exp * Env -&amp;gt; Proc&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; proc proc?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; symbol?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; expression?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; environment?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt; boolean?)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;interpscm-&#34;&gt;interp.scm 修改程序追踪部分&lt;/h2&gt;
&lt;p&gt;由于proc?的类型实现发生了变化，所以需要进行对应的修改apply-procedure和value-of。&lt;/p&gt;
&lt;h3 id=&#34;apply-procedure&#34;&gt;apply-procedure的修改&lt;/h3&gt;
&lt;p&gt;原先的apply-procedure实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-procedure
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proc1&lt;/span&gt; val)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; proc proc1
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body saved-env)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val saved-env))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改进后的apply-procedure增加了trace?的判断&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; apply-procedure : Proc * ExpVal -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 79&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-procedure
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proc1&lt;/span&gt; val)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; proc proc1
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body saved-env trace?)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;trace? (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;enter: ~a = ~a\n&amp;#34;&lt;/span&gt; var val) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;**proc**&lt;/span&gt;)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val saved-env))))
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;trace? (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exting: result = ~a\n&amp;#34;&lt;/span&gt; value) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;**proc**&lt;/span&gt;)
                    value)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;value-of-&#34;&gt;value-of 的修改&lt;/h3&gt;
&lt;p&gt;原先的value-of实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; var body env)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新改进的的value-of 实现:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; var body env &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;traceproc-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; var body env &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;测试追踪修改的结果&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc(x) -(x, 1)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(proc(x) -(x,1)  30)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let f = traceproc (x) -(x,1) in (f 30)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(proc(f)(f 30)  proc(x)-(x,1))&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in -(x,1)&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;diff-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var-exp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;const-exp&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) (list (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
    enter: x = &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(struct:num-val &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
    exting: result = &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(struct:num-val &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;老阮不狂谁会得？出门一笑大江横！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The third Interpreter implementing Proc</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/27/the-third-interpreter-implementing-proc/</link>
      <pubDate>Sat, 27 Feb 2016 14:35:50 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/27/the-third-interpreter-implementing-proc/</guid>
      <description>&lt;p&gt;Scheme解释器的好处是可以不断的拓展自己语言的能力，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/&#34;&gt;The First-interpreter-from-eopl&lt;/a&gt;创建了一个较为简单let-language，实现了较为简单的减法运算和let局部变量赋值等功能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/27/the-second-interpreter-from-one/&#34;&gt;The Second Interpreter from on&lt;/a&gt;第一次扩展了基础的let-language，实现了四则运算，逻辑判断，列表操作,列表赋值等。&lt;/li&gt;
&lt;li&gt;这个版本的解释器进一步拓展了过程定义和过程调用的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;1. proc-language 的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;2. Y-comb 的实现过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;3. 新语言的Y+实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;langscm&#34;&gt;lang.scm增加了过程定义和调用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;;;new stuff&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; expression)
       proc-exp)
      
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
       call-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interpscm&#34;&gt;interp.scm增加了过程定义和调用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;value-of 增加了proc-exp和call-exp的内部语言形式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;;;;新增的proc-exp 和call-exp&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; var body env)))
        
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rator&lt;/span&gt; rand)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;proc&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; rator env)))
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; rand env)))
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-procedure&lt;/span&gt; proc arg)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;apply-procedure 用于proc的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;;; proc-exp&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;; apply-procedure : Proc * ExpVal -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 79&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-procedure
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proc1&lt;/span&gt; val)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; proc proc1
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body saved-env)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val saved-env))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-structuresscm&#34;&gt;data-structures.scm增加了过程定义和调用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在expval中拓展了proc?的判断&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; expval expval?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; number?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;boolean&lt;/span&gt; boolean?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt;
     (car expval?)
     (cdr expval?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;;;新增的proc-exp&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; 
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; proc?))
    )
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;增加expval-&amp;gt;proc类型转换的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;proc其实就是一个closure的具体实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;;;新增的expval-&amp;gt;proc 和proc类&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; expval-&amp;gt;proc : ExpVal -&amp;gt; Proc&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-&amp;gt;proc
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt;) proc)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proc&lt;/span&gt; v)))))
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; proc? : SchemeVal -&amp;gt; Bool&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; procedure : Var * Exp * Env -&amp;gt; Proc&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; proc proc?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; symbol?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; expression?)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; environment?)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;增加过程定义和调用的测试结果&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;. data-structures.scm:102:11: expression?: unbound identifier in module in: expression?
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2&#34;&gt;错误2&lt;/h3&gt;
&lt;p&gt;如果按照错误1,把具体的expression?实现放入&lt;code&gt;data-structures.scm&lt;/code&gt;中，则会出现&lt;a href=&#34;#error1&#34;&gt;错误1&lt;/a&gt;的问题。&lt;/p&gt;
&lt;p&gt;expression?现在定义如下,具体参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/26/some-notations-in-the-design-of-the-language/&#34;&gt;Some notations&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expression ::= (var-exp ())
           ::= (const-exp ())
           ::= (zero?-exp ())
           ::= (if-exp ())
           ::= (diff-exp ())
           ::= (cons-exp ())
           ::= (car-exp ())
           ::= (cdr-exp ())
           ::= (null?-exp ())
           ::= (emptylist-exp)
           ::= (list-exp ())
           ::= (let-exp ())
           ::= (proc-exp ())
           ::= (call-exp ())
           ::= (letrec-exp ())  ;;并未再此体现

           ::= (less?-exp ())
           ::= (greater?-exp ())
           ::= (equal?-exp ())

           ::= (print-exp ())
           ::= (unpack-exp ())
           ::= (cond-exp ())

           ::= (add-exp ())
           ::= (mult-exp ())
           ::= (div-exp ())

           ::= (let*-exp ())

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;expression?实现如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ;; datatype ;;;
  (define-datatype expression expression?
    (var-exp
     (id symbol?))
    (const-exp
     (num number?))
    (zero?-exp
     (expr expression?))
    (if-exp
     (predicate-exp expression?)
     (true-exp expression?)
     (false-exp expression?))
    ;;四则运算
    (minus-exp
     (body-exp expression?))
    (diff-exp
     (exp1 expression?)
     (exp2 expression?))
    (add-exp
     (exp1 expression?)
     (exp2 expression?))
    (mult-exp
     (exp1 expression?)
     (exp2 expression?))
    (div-exp
     (exp1 expression?)
     (exp2 expression?))
    
    ;;逻辑比较
    (equal?-exp
     (exp1 expression?)
     (exp2 expression?))
    (less?-exp
     (exp1 expression?)
     (exp2 expression?))
    (greater?-exp
     (exp1 expression?)
     (exp2 expression?))
    
    ;;列表操作
    (emptylist-exp)
    (cons-exp
     (exp1 expression?)
     (exp2 expression?))
    (car-exp
     (body expression?))
    (cdr-exp
     (body expression?))
    (null?-exp
     (body expression?))
    ;;list实现
    (list-exp
     (args (list-of expression?)))
    
    ;; cond实现
    (cond-exp
     (conds (list-of expression?))
     (acts (list-of expression?)))
  
    ;;let let*
    (let-exp
     (vars (list-of symbol?))  ;;;symbol不能写成symbols
     (vals (list-of expression?))
     (body expression?))
    
    (let*-exp
     (vars (list-of symbol?)) ;(vars (list-of symbols?))
     (vals (list-of expression?))
     (body expression?))
    
    ;;print实现
    (print-exp
     (arg expression?))
    ;;unpack实现
    (unpack-exp
     (args (list-of symbol?));(args (list-of identifier?))
     (vals expression?)
     (body expression?))
    
    ;;proc
    (proc-exp
     (var (list-of symbol?))
     (body expression?))
    (call-exp
     (rator expression?)
     (rand (list-of expression?)))
    
    )
  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为什么添加上expression？反而出现如下的错误？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(require &amp;quot;data-structures.scm&amp;quot;)
(require &amp;quot;lang.scm&amp;quot;)  =》 There are some problems here.
top.scm:8:11: module: identifier already imported from: &amp;quot;data-structures.scm&amp;quot; at: expression in: &amp;quot;lang.scm&amp;quot;
  #(174 21)
  #(235 10)
module: identifier already imported from a different source in:
  expression
  &amp;quot;lang.scm&amp;quot;
  &amp;quot;data-structures.scm&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析发现是因为lang.scm其实已经定义了expression?, &lt;code&gt;sllgen:make-define-datatypes&lt;/code&gt;中通过the grammer定义了所有的expression?的实现。
所以如果在&lt;code&gt;top.scm&lt;/code&gt;中同时导入&lt;code&gt;lang.scm&lt;/code&gt; 和&lt;code&gt;data-structures.scm&lt;/code&gt;则会报错，重复定义。
&lt;strong&gt;&lt;code&gt;于是仅仅在data-structures.scm中增加require &amp;quot;lang.scm&amp;quot;即可&lt;/code&gt;&lt;/strong&gt;,
&lt;!-- raw HTML omitted --&gt;结果通过！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;正确的测试结果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proc(x) -(x, 1)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(proc(x) -(x,1)  30)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(proc(f)(f 30)  proc(x)-(x,1))&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in -(x,1)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;;new stuff, the Currying&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let f = proc (x) proc (y) -(x, -(0, y)) in ((f 10) 20)&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;diff-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var-exp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;const-exp&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) (list (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;关于y-combination可以参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2015/05/17/cong-lambdadao-simple-plus-complexjie-shi-qi-zai-dao-shu-xing-chou-xiang/&#34;&gt;从lambda到simple+complex解释器再到树形抽象&lt;/a&gt;疑问关于y-comb的实现。
进一步可以参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Fixed-point combinator] &lt;a href=&#34;https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus&#34;&gt;5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Church and Turing] &lt;a href=&#34;http://www.yinwang.org/blog-cn/2013/07/13/church-turing/&#34;&gt;6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Neil Jones的computation and complexity,使用一种while语言] &lt;a href=&#34;http://www.diku.dk/~neil/comp2book2007/book-whole.pdf&#34;&gt;7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matthias Felleisen 和 Matthew Flatt 的[《Programming Languages and Lambda Calculi》] &lt;a href=&#34;http://www.cs.utah.edu/~mflatt/past-courses/cs7520/public_html/s06/notes.pdf&#34;&gt;8&lt;/a&gt; 教你认识lambda&lt;/li&gt;
&lt;li&gt;[最经典的Y combinator] &lt;a href=&#34;http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html&#34;&gt;9&lt;/a&gt; 看了10遍以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;y-comb&#34;&gt;Y-comb基本思想&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;通过增加一层lambda表达式，进行更高一级抽象&lt;/li&gt;
&lt;li&gt;beta规约原则&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fact 
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;( x y) (&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;  x y))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; arg) ==  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; arg))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最为基本的fact实现是(构建与已经存在的fact)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fact
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? x)
      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而如果运用思想1(也就是隐藏fact的调用，而使用局部过程变量procedure),则变换为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fact
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? x)
           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))


((&lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt; fact) &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是有了下面的推导过程(把fact的表达式多给他还原 ，可以参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/26/some-notations-in-the-design-of-the-language/&#34;&gt;还原方法Some-notations&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fact
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
       ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;;吸收5&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
       ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;;吸收5&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))))


  (((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            (* n ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            (* n ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))))
   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

 (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fact1
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
       ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;;吸收5&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))))
     ((&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt; F) x))))


  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg)))))))

  (((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))))
   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;如何吸收F 形成(F F)的形式 产生循环的调用过程&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 只能是通过lambda 算子 构造proc 从而获得完整的表达式&lt;/span&gt;
  (((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt; F) arg)))  &lt;span style=&#34;color:#75715e&#34;&gt;;;一定要保证lambda封闭  &lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))))
   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt; F) arg)))  &lt;span style=&#34;color:#75715e&#34;&gt;;;一定要保证lambda封闭&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; procedure) arg)))))))

((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))) &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到每增加一层(lambada (arg) &amp;hellip;) ，也就是(lambda (arg) (lambda (arg2)  (lambda (arg) &amp;hellip; )))，
也就是  &lt;code&gt;&amp;lt;procedure&amp;gt;::= (lambda (arg) (&amp;lt;expression&amp;gt; |&amp;lt;procedure&amp;gt;)) | &amp;lt;procedure&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let makemult = proc (maker) proc (x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      if zero?(x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            then 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      else
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            -(((maker maker) -(x,1)), -4)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let times4 = proc (x) ((makemult makemult) x) in (times4 3)&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; ==&amp;gt; (num-val 12)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;times&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let makemult = proc (maker) proc (x) proc(y)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      if zero?(x) then 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      else -((((maker maker) -(x, 1)) y), -(0, y))
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let times = proc(x) proc(y)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    (((makemult makemult) x) y)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in ((times 3) 8)&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; -&amp;gt; (num-val 24)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let makemult = proc (maker) proc (x) proc(y)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      if zero?(x) then 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      else -((((maker maker) -(x, 1)) y), -(0, y))
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let times = proc(x) proc(y)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    (((makemult makemult) x) y)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let f = proc(func) proc(num)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        if zero?(num)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           then 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        else
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           ((times ((func func) -(num, 1))) num)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let fact = proc (x) ((f f) x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in (fact 5)&amp;#34;&lt;/span&gt;)


(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终提取一个更为精简的y-comb&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let makerec = proc (f)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        let d = proc (x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          proc (z) ((f (x x)) z)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        in proc (n) ((f (d d)) n)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     in let maketimes4 = proc (f) proc (x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          if zero?(x)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;             then 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          else -((f -(x,1)), -4)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let times4 = (makerec maketimes4) in (times4 3)&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-2&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Y-comb是一个痛苦和希望的承载者(持保留意见)，韵味十足.又像一个走过岁月年轮，在家等待着归家儿女的思妇，祈祷，承担。
Y-Comb需要丝丝宁静,雨夜飘过。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Second Interpreter from One</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/27/the-second-interpreter-from-one/</link>
      <pubDate>Sat, 27 Feb 2016 01:04:52 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/27/the-second-interpreter-from-one/</guid>
      <description>&lt;p&gt;在[First Interpreter From EOPL][1]中我们定义了一个最为基本的解释器，包含解释以下解释部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;const-exp&lt;/li&gt;
&lt;li&gt;diff-exp&lt;/li&gt;
&lt;li&gt;zero?-exp&lt;/li&gt;
&lt;li&gt;if-exp&lt;/li&gt;
&lt;li&gt;var-exp&lt;/li&gt;
&lt;li&gt;let-exp&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这六种是比较基础的形式，在此基础上我们可以增加四则运算，加入list操作，加入逻辑比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;1. 增加四则运算&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1.1&#34;&gt;1.1 lang.scm修改四则运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1.2&#34;&gt;1.2 interp.scm修改四则运算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1.3&#34;&gt;1.3 测试四则运算结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;2. 增加逻辑比较&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2.1&#34;&gt;2.1 lang.scm修改逻辑比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2.2&#34;&gt;2.2 interp.scm修改逻辑比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2.3&#34;&gt;2.3 测试逻辑比较结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;3. 加入列表操作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#3.1&#34;&gt;3.1 lang.scm修改列表操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3.2&#34;&gt;3.2 interp.scm修改列表操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3.3&#34;&gt;3.3 data-structures.scm增加了expval值类型和4个操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3.4&#34;&gt;3.4 测试修改列表操作结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;4. list具体实现&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#4.1&#34;&gt;4.1 lang.scm修改list具体实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.2&#34;&gt;4.2 interp.scm修改list具体实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.3&#34;&gt;4.3 data-structures.scm修改list的具体实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.4&#34;&gt;4.3 测试list具体实现结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;5. cond条件比较&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#5.1&#34;&gt;5.1 lang.scm修改cond条件比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.2&#34;&gt;5.2 interp.scm修改cond条件比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.3&#34;&gt;5.3 测试cond条件比较结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6&#34;&gt;6. print显示&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#6.1&#34;&gt;6.1 lang.scm修改print显示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6.2&#34;&gt;6.2 interp.scm修改print显示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6.3&#34;&gt;6.3 测试print显示结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7&#34;&gt;7. let的改进和let*的加入&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#7.1&#34;&gt;7.1 let改进之interp.scm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7.2&#34;&gt;7.2 let改进之lang.scm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7.3&#34;&gt;7.3 let改进结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7.4&#34;&gt;7.4 let*的lang.scm具体实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7.5&#34;&gt;7.5 let*的interp.scm具体实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7.6&#34;&gt;7.6 let*的测试结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8&#34;&gt;8. unpack列表赋值&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#8.1&#34;&gt;8.1 unpack的interp.scm修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8.2&#34;&gt;8.2 unpack的lang.scm修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8.3&#34;&gt;8.3 测试unpack修改结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在the-grammer增加如下expressions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;;;;new add + * /&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) add-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) mult-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) div-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在value-of增加如下expressions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;           (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
		    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
			  (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
		      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1))
			    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val2)))
			(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
			 (+ num1 num2)))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;mult-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1))
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val2)))
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
                          (* num1 num2)))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;div-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
		    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
			  (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
		      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1))
			    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val2)))
			(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
			 (/ num1 num2)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在原先减法的基础上增加了乘法、加法和除法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = -(4,1) in +(x,1)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = -(4,1) in *(x,2)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = -(4,1) in /(x,2)&amp;#34;&lt;/span&gt;)

结果:
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;;;增加逻辑比较&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;equal?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) equal?-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;less?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) less?-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greater?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) greater?-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;minus&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) minus-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;       (less?-exp (exp1 exp2)
                (let ((val1 (value-of exp1 env))
                      (val2 (value-of exp2 env)))
                  (let ((num1 (expval-&amp;gt;num val1))
                        (num2 (expval-&amp;gt;num val2)))
                    (bool-val
                     (&amp;lt; num1 num2)))))

       (greater?-exp (exp1 exp2)
                (let ((val1 (value-of exp1 env))
                      (val2 (value-of exp2 env)))
                  (let ((num1 (expval-&amp;gt;num val1))
                        (num2 (expval-&amp;gt;num val2)))
                    (bool-val
                     (&amp;gt; num1 num2)))))
    (minus-exp (body-exp)
              (let ((val1 (value-of body-exp env)))
                (let ((num (expval-&amp;gt;num val1)))
                  (num-val (- 0 num)))))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;h3 id=&amp;quot;2.3&amp;quot;&amp;gt; 2.3 测试增加逻辑比较结果&amp;lt;/h3&amp;gt;

``` scheme
(run &amp;quot;if less?(1, 2) then 1 else 2&amp;quot;)
(run &amp;quot;if greater?(2, 1) then minus(1) else minus(2)&amp;quot;)

    (num-val 1)
    (num-val -1)
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;; 增加list比较&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;;;new stuff&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cons&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) cons-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) car-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdr&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) cdr-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emptylist&amp;#34;&lt;/span&gt;) emptylist-exp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) null?-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;;;;增加了list操作&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-exp&lt;/span&gt; ()
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; val1 val2)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;car-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-car&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body env)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-cdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body env)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;null?-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp&lt;/span&gt;)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-null?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp env)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;修改expval部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增加了&lt;code&gt;pair-val&lt;/code&gt;和&lt;code&gt;emptylist-val&lt;/code&gt; 两个语言的新值，这也是区分之前的&lt;a href=&#34;#1&#34;&gt;四则运算&lt;/a&gt;和&lt;a href=&#34;#2&#34;&gt;逻辑比较&lt;/a&gt;的过程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt;
     (car expval?)
     (cdr expval?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;增加了4个expval类型变换操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;增加4个expval-&amp;gt;操作&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-&amp;gt;pair
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (car cdr)
		     (cons car cdr))
	   (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pair&lt;/span&gt; v)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-car
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (car cdr) car)
	   (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;car&lt;/span&gt; v)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-cdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (car cdr) cdr)
	   (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cdr&lt;/span&gt; v)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-null?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt; () (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;))
	   (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cons(1, 2)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car (cons (1, 2))&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdr (cons (1, 2))&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null? (emptylist)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null? (cons (1, 2))&amp;#34;&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 4
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        in cons(x,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          cons(cons(-(x,1),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    emptylist),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   emptylist))&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;错误的测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car (3 5 3)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; parsing: at line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: looking for &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; found number &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; in production
((string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car&amp;#34;&lt;/span&gt;) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;non-term&lt;/span&gt; expression) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&amp;lt;procedure:car-exp&amp;gt;))
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car (3,5)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; parsing: at line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: looking for &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; found literal-string111 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; in production
((string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car&amp;#34;&lt;/span&gt;) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;non-term&lt;/span&gt; expression) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&amp;lt;procedure:car-exp&amp;gt;))
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null? ()&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; parsing: at line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: nonterminal &amp;lt;expression&amp;gt; can&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin &lt;/span&gt;with literal-string111 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car (cons (3,5))&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体原因是car-exp的定义是通过expval-car的实现，而expval-car接受的是cons创造的数据结构，所以出现了问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;car-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-car&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body env)))


(&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt;
 (car expval?)
 (cdr expval?))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;)


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-car
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (car cdr) car)   &lt;span style=&#34;color:#75715e&#34;&gt;;;v在这边是expval类型,更具体来说是pair-val,其他类型没有对应的操作&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;;;而在当前的情况细 pair-val只能通过cons创建！！&lt;/span&gt;
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;car&lt;/span&gt; v)))))


并需要增加pair-var?的数据类型

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; expval expval?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; number?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;boolean&lt;/span&gt; boolean?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt;
     (car expval?)
     (cdr expval?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;))


可以参考value-of中关于cons-exp的定义&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; val1 val2)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-&#34;&gt;注意操作符后面不是必须直接跟上括号(空格会被直接忽略) 而是应该保证括号的对称性。&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* (3,4&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; parsing: at line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: looking for &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; found end-marker &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; in production
((string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;non-term&lt;/span&gt; expression) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;non-term&lt;/span&gt; expression) (string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&amp;lt;procedure:mult-exp&amp;gt;))
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+(3,4)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*(3,4)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;separated-list&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; ) list-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;增加一个apply-elm用于list操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; used as map for the list&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-elm
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; elem env))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;增加了list类型&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;;; 增加了list操作&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-val&lt;/span&gt; (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-elm&lt;/span&gt; env) args)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;增加了list-val的实现:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;增加了list的具体实现&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;list-val
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? args)
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;)
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (car args)
		  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-val&lt;/span&gt; (cdr args))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list(1, 2, 3)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;car(cdr(list(1, 2, 3)))&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 4
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in list(x, -(x,1), -(x,3))&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;emptylist-val&lt;/span&gt;))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;增加了cond具体语法&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; new stuff&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cond&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;==&amp;gt;&amp;#34;&lt;/span&gt; expression) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;) cond-exp)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;增加一个cond-val，之所以不在类似&lt;a href=&#34;#3&#34;&gt;加入列表实现&lt;/a&gt;和&lt;a href=&#34;#4&#34;&gt;list具体实现&lt;/a&gt;添加val转换，是因为cond-val涉及到value-of
程序，所以需要放在interp.scm中,放在apply-elm之后即可.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;增加了cond-val的处理&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;new stuff&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;cond-val
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;conds&lt;/span&gt; acts env)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((null? conds)
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cond-val&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No conditions got into #t&amp;#34;&lt;/span&gt;))
	  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;bool&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; (car conds) env))
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; (car acts) env))
	  (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-val&lt;/span&gt; (cdr conds) (cdr acts) env)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在value-of中增加了具体的实现&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;;;;增加了cond操作&lt;/span&gt;
        	   (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;conds&lt;/span&gt; acts)
		     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-val&lt;/span&gt; conds acts env))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;less?(1, 2)&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cond less?(1, 2) ==&amp;gt; 2 end&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cond less?(2, 1) ==&amp;gt; 1 greater?(2, 2) ==&amp;gt; 2  greater?(3, 2) ==&amp;gt; 3 end&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; new stuff&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;) print-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;;;;增加了print&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;print-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; arg env)))
                    &lt;span style=&#34;color:#75715e&#34;&gt;;(print val)  ;;编译不通过 改为display&lt;/span&gt;
                    (display val) &lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print( less? (1, 2))&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(struct:bool-val &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;heading&#34;&gt;一个问题&lt;/h3&gt;
&lt;p&gt;怎么会有问题？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (run &amp;quot;let x = 30
      in let x = -(x,1)
             y = -(x,2)
         in -(x, y)&amp;quot;)
. . parsing: at line 3: looking for &amp;quot;in&amp;quot;, found identifier y in production
((string &amp;quot;let&amp;quot;) (term identifier) (string &amp;quot;=&amp;quot;) (non-term expression) (string &amp;quot;in&amp;quot;) (non-term expression) (reduce #&amp;lt;procedure:let-exp&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析原先的let设计程序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        (let-exp (var exp1 body)       
                (let ((val1 (value-of exp1 env)))
                  (value-of body
                           (extend-env var val1 env))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个具体实现其实并没有实现多重let的过程，所以导致有问题，所以下一步的关键问题是如何实现嵌套的let-exp解析。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;增加两个let-exp的辅助程序&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; let-exp的嵌套实现&lt;/span&gt;
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value-of-vals
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt; env)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? vals)
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()
         (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; (car vals) env)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of-vals&lt;/span&gt; (cdr vals) env)))))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env-list
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals env)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? vars)
         env
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var1&lt;/span&gt; (car vars))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (car vals)))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env-list&lt;/span&gt; (cdr vars) (cdr vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var1 val1 env))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;改变letexp的具体实现&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;       (let-exp (var exp1 body)       &lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;               (let ((val1 (value-of exp1 env)))&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;                (value-of body&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;                          (extend-env var val1 env))))&lt;/span&gt;
        
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals body)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;_vals&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of-vals&lt;/span&gt; vals env)))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env-list&lt;/span&gt; vars _vals env))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;    (expression&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;     (&amp;#34;let&amp;#34; identifier &amp;#34;=&amp;#34; expression &amp;#34;in&amp;#34; expression)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;     let-exp)&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; 
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; expression) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; expression) 
        let-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还是没改好？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;link: bad variable linkage;
 reference to a variable that is uninitialized
  reference phase level: 0
  variable module: &amp;quot;/home/canbetter/let-lang/lang.scm&amp;quot;
  variable phase: 0
  reference in module: &amp;quot;/home/canbetter/let-lang/interp.scm&amp;quot; in: a-program?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因出现在let语法中增加了 &lt;code&gt;(arbno ...)&lt;/code&gt;操作。&lt;/p&gt;
&lt;p&gt;这个问题可以赘述到cond-exp的实现,其中也涉及到arbno的第一次键入。但是为什么会出现未初始化变量的情况？&lt;/p&gt;
&lt;p&gt;但是主要还是因为保存得不彻底！！导致了并未初始化，重新保存即可。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = -(4,1) in let x =+(x,1) in -(x,10)&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-6&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = -(4,1) in let x =+(x,1)  y=-(x,10) in -(x,y)&amp;#34;&lt;/span&gt;)

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; x=4 y=-(3,10)=-7  所以-(x,y)=11而不是 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么如何实现一个let*，使得let中的x变化的值立即反映到y中。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;该实现方式基本上和&lt;a href=&#34;#7.2&#34;&gt;let的语法&lt;/a&gt;一样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let*&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; expression) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; expression) let*-exp)
      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;增加了一个extend-env-list-iter操作,由于也是存在value-of所以放入interp.scm中。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env-list-iter
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals env)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? vars)
         env
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var1&lt;/span&gt; (car vars))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; (car vals) env)))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env-list-iter&lt;/span&gt; (cdr vars) (cdr vals)
                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var1 val1 env))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;let*的类型定义&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;let*-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals body)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env-list-iter&lt;/span&gt; vars vals env)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 30
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let x = -(x,1)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;             y = -(x,2)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         in -(x, y)&amp;#34;&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 30
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in let* x = -(x,1)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;             y = -(x,2)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;         in -(x, y)&amp;#34;&lt;/span&gt;)


    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;增加了extend-env-list-exp的操作，用于针对unpack的特殊的环境拓展,当然可以把它放在data-structures.scm中&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;;; 关于unpack的操作&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env-list-exp
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals env)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? vars)
         env
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var1&lt;/span&gt; (car vars))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-car&lt;/span&gt; vals)))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env-list-exp&lt;/span&gt; (cdr vars)
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-cdr&lt;/span&gt; vals)
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var1 val1 env))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;unpack-exp的具体实现:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;        (&lt;span style=&#34;color:#a6e22e&#34;&gt;unpack-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals body)
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;_vals&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; vals env)))
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env-list-exp&lt;/span&gt; vars _vals env))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;new stuff&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unpack&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; identifier) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; expression) unpack-exp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; new testcase&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let u = 7
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in unpack x y = cons(u, cons(3,emptylist))
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      in -(x,y)&amp;#34;&lt;/span&gt;)


(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;;;(x y)= (7 3)  -(7,3)=4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-1&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;这是这对[First Interpreter From EOPL][1] 的8个方面的拓展，对于认识语言的设计有很大的帮助。&lt;/p&gt;
&lt;p&gt;1[]:http://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some notations in the design of the language</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/26/some-notations-in-the-design-of-the-language/</link>
      <pubDate>Fri, 26 Feb 2016 15:35:17 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/26/some-notations-in-the-design-of-the-language/</guid>
      <description>&lt;p&gt;What does it mean by Kleene star? What can it be used for?
It is not so important,but a good tools to record the grammer
of the language.目的就是如何更简洁地定义语法。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;几个基本字符&lt;/h2&gt;
&lt;h3 id=&#34;nonterminal-symbols&#34;&gt;Nonterminal Symbols&lt;/h3&gt;
&lt;p&gt;指代被定义的集合名字(These are the names of the sets being defined)，比如List-of-Int,List-of-Char&amp;hellip;,
这些集合有时候也被叫做语义分类(syntactic categories)&lt;/p&gt;
&lt;p&gt;而且一般是of连接词是小写，其他表征类型的是大写(capitalized)。
这是一个习惯，当然如果指引某个单一的元素的时候我们会用小写字母，
比如 Expression is a nonterminal, 可以写成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  e &amp;lt;- Expression  or
  e is an expression
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然我们也可以写成更为简单的形式，叫做Backus-Naur Form(BNF),即用尖括号包裹小写字母表达式，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;expression&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;terminal-symbols&#34;&gt;Terminal Symbols:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;left parenthesis 左括号 &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;right parenthesis 右括号 &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;period 句号 点号  &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;productionthe-rules&#34;&gt;Production(The rules)&lt;/h3&gt;
&lt;p&gt;The rules are called productions.每一个Production包含left-handside（lhs),right-handside(rhs),并用&lt;code&gt;::=&lt;/code&gt;来连接
lhs和rhs，&lt;code&gt;::=&lt;/code&gt;也被读作&lt;em&gt;is or can be&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lhs一般是nonterminal symbol,表征的是语义类(syntactic category)&lt;/li&gt;
&lt;li&gt;rhs一般是由terminal symbols(比如left and right parenthesis ,or period)和nonterminal symbols 组合起来。&lt;/li&gt;
&lt;li&gt;rhs的主要作用是用来按照其他语义分类(每一行都叫做一种语义分类）和Terminal symbolsl指定(specify)对应语义类
的构造成员的方法(a method of constructing the members of the syntactic category)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Int ::= (1 2 3 ....)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Double ::= (1.11246 1.2 1.3 ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Char ::= (a b c ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Float ::= (1.1 1.2 1.3 ...)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List-of-Int ::= ()&lt;/code&gt;
&lt;code&gt;List-of-Int ::= (Int . List-of-Int)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Lists ::= ()|(Scheme Val . List)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然有时候我们也可以忽略第二个语义类的List-of-Int,比如&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ()&lt;/code&gt;
&lt;code&gt;            ::= (Int . List-of-Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然我们也可以只用一行来表示语义类（归一为一条语义）：使用vertical bar(| ),也被读作or&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ()|(Int . List-of-Int)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外我们也可以使用一种更为简洁的形式： 使用 Kleene Star利用大括号(flower braces), &lt;code&gt;{}*&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ({Int}*)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中&lt;code&gt;*&lt;/code&gt;表示的是0个或者0个以上，也可以变换为&lt;code&gt;+&lt;/code&gt;。
&lt;code&gt;+&lt;/code&gt;:表示的是一个或者一个以上.&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ({Int}+)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然我们也可以规定Int之间的分割标志,利用seperation list&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;&lt;code&gt;List-of-Int ::= ({Int}*(,))  &lt;/code&gt;
表示的是&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;8
1,2
3,4,6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;List-of-Int ::= (&lt;code&gt;{Int}*(;)&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8
1;2
3;4;6
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;syntactic-derivation&#34;&gt;语义推导(Syntactic derivation)练习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(14 . ()) is a List-of-Int?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;List-of-Int
=&amp;gt; (Int . (List-of-Int))
=&amp;gt; (14  . (List-of-Int))
=&amp;gt; (14  . ())

so, it is true.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(-7 . (3 . (14 . ()))) is a List-of-Int?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;List-of-Int
=&amp;gt; (Int . (List-of-Int))
=&amp;gt; (-7  . (List-of-Int))
=&amp;gt; (-7  . (3 . (List-of-Int)))
=&amp;gt; (-7  . (3 . (14 . (List-of-Int))))
=&amp;gt; (-7  . (3 . (14 . ())))

so, it is true.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(a b c) is a S-list?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;S-list = ({S-exp}(`*`))
S-exp  = Symbol | S-list
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;S-list
=&amp;gt; ({S-exp}(*))
=&amp;gt; {Symbol | S-list}(*)
=&amp;gt; {a | S-list}(*)
=&amp;gt; {a b |S-list}(*)
=&amp;gt; {a b c}

so, it is S-list
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(bar (biz 4 6) (foo 1 2)) is a binary tree?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树是非常重要的数据结构，它的定义形式是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Bintree ::= Int| (Symbol Bintree Bintree)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以我们可以这样解析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Bintree
=&amp;gt;(Int|(Symbol Bintree Bintree))
=&amp;gt;(bar (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree)))
=&amp;gt;(bar (biz (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree))) 
       (foo (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree))))
=&amp;gt;(bar (biz 4 6) 
       (foo (Int|(Symbol Bintree Bintree)) (Int|(Symbol Bintree Bintree))))
=&amp;gt;(bar (biz 4 6) 
       (foo 1 2))

So,it is true

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(lambda (x) (+ x 6)) is a lambda calculus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lambda calculus 是程序语言设计中十分重要的小型语言。该门语言仅仅包含&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量引用(varient references)&lt;/li&gt;
&lt;li&gt;单参过程(procedures that takes a single argument)&lt;/li&gt;
&lt;li&gt;过程调用(procedure calls)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;定义如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   LcExp ::= Identifier
         ::= (lambda (Identifier) LcExp)
         ::= (LcExp LcExp)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以我们可以判断如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; LcExp
=&amp;gt; Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)
=&amp;gt; (lambda (Identifier) LcExp)
=&amp;gt; (lambda (x) Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp))
=&amp;gt; (lambda (x) (LcExp LcExp))
=&amp;gt; (lambda (x) (+ Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)
                  Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)))
=&amp;gt; (lambda (x) (+ x
                  Identifier|(lambda (Identifier) LcExp)|(LcExp LcExp)))
=&amp;gt; (lambda (x) (+ x
                  6))

So, it is true.


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading-1&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;上米那说的List-of-Int,Bintree，Lambda calculus等都可以叫做一种语义类，是一门语言
包含的原始类型。上面的syntatic derivation也可以被用来当作理论证明的一种入门，本质是递归理论。&lt;/p&gt;
&lt;p&gt;而其实他们都可以当作最为基本的解释器，因为他们在不断的解析他们所识别的expressions，上面的LcExp,
List-exp等都叫做expressions，也是解释器的元素。&lt;/p&gt;
&lt;p&gt;而假如我们有一个函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nth-element : List * Int -&amp;gt; SchemeVal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;他说明的是nth-element是一个接受List和Int作为形参并返回SchemeVal的过程，也就是它属于LcExp范畴。&lt;/p&gt;
&lt;h2 id=&#34;substkleene-star&#34;&gt;subst采用kleene star进行书写&lt;/h2&gt;
&lt;p&gt;subst的定义是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subst : Sym * Sym * S-list -&amp;gt; S-list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面的实现过程从最为原始的只能处理lat的形式变为能够处理任意嵌套的expressions形式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket

&lt;span style=&#34;color:#75715e&#34;&gt;;;替换在slist中old值出现的值为new值（引用值）&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst-original
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old slist)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? slist)
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;
	       (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? (car slist) old)
               new
               (car slist))
	 (&lt;span style=&#34;color:#a6e22e&#34;&gt;subst&lt;/span&gt; new old (cdr slist))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;map改进失败&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst-wrong
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lst)
    (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eq? x old) new old)) lst)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;通过map 简化subst-original的原始写法&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst-map
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lst)
    (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eq? x old) new x)) lst)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;通过subst改进S-expression to list-expression&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old slist)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? slist)
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;
	 (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;sexp&lt;/span&gt; (car slist)))
	   (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(symbol? sexp)
	       (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? sexp old)
               new
               sexp)
	       (&lt;span style=&#34;color:#a6e22e&#34;&gt;subst&lt;/span&gt; new old sexp)))
	 (&lt;span style=&#34;color:#a6e22e&#34;&gt;subst&lt;/span&gt; new old (cdr slist))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;通过map 改进subst&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst-map-improve
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lst)
    (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(symbol? x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eq? x old) new x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;subst-map&lt;/span&gt; new old x))) lst)))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;subst-original&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; b) d b))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a a c (a a) d a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;subst-map&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; b) d b))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a a c (b b) d a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;subst-wrong&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; b) d b))  &lt;span style=&#34;color:#75715e&#34;&gt;;;;错误在于所有的非old值都替换为old值了&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(b a b b b a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;subst&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; b) d b))
&lt;span style=&#34;color:#75715e&#34;&gt;;;&amp;#39;(a a c (a a) d a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;subst-map-improve&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; b) d b))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a a c (a a) d a)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个拓展的例子虽然和表达式的注释主题关系不大，但是确是对于递归递归理论的进一步阐述。递归要求满足两个条件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;递归出口(null? slt)  (zero? (car lst)) &amp;hellip;&lt;/li&gt;
&lt;li&gt;逐渐朝向递归出口的算子 (cdr lst) (- n 1) &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;define-datatype&#34;&gt;define-datatype的运用&lt;/h2&gt;
&lt;p&gt;具体实现可以查看&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/&#34;&gt;The Implementation of Define-datatype&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;lc-exp-s-list&#34;&gt;Lc-Exp 和S-list的具体实现&lt;/h3&gt;
&lt;p&gt;上文所提记得Lc-Exp的定义为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    lc-exp  ::=identifier
            ::=(lambda (identifier) Lc-exp
            ::=(lc-exp lc-exp)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它使用define-datatype的实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-datatype lc-exp lc-exp?
    (var-exp (var identifier?))
    (lambda-exp (bound-var identifier?)
                (body lc-exp?))
    (app-exp (rator lc-exp?)
             (rand lc-exp?))
)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而S-list的定义再现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   S-list   ::=({S-exp}*) 
   S-exp:=Symbol|S-list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;他对应的实现如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-datatype s-list s-list?
    (empty-s-list)
    (non-empty-s-list
        (first s-exp?)
        (rest s-list?))
)
(define-datatype s-exp s-exp?
    (symbol-s-exp (sym symbol?))
    (s-list-s-exp (slst s-list?))
)

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;expression--expval&#34;&gt;expression 和 expval的具体定义和实现&lt;/h3&gt;
&lt;p&gt;在Interpreter的过程中肯定涉及到expression的设计和value值的表现（&lt;strong&gt;把exp和val的键值对叫做解释器的字典&lt;/strong&gt;）
expression的具体定义是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expression ::= (var-exp ())
           ::= (const-exp ())
           ::= (zero?-exp ())
           ::= (if-exp ())
           ::= (diff-exp ())
           ::= (cons-exp ())
           ::= (car-exp ())
           ::= (cdr-exp ())
           ::= (null?-exp ())
           ::= (emptylist-exp)
           ::= (list-exp ())
           ::= (let-exp ())
           ::= (proc-exp ())
           ::= (call-exp ())
           ::= (letrec-exp ())  ;;并未再此体现
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体实现如下所示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;; datatype ;;;
(define-datatype expression expression?
  (var-exp
   (id symbol?))
  (const-exp
   (num number?))
  (zero?-exp
   (expr expression?))
  (if-exp
   (predicate-exp expression?)
   (true-exp expression?)
   (false-exp expression?))
  (diff-exp
   (exp1 expression?)
   (exp2 expression?))
  (emptylist-exp)
  (cons-exp
   (exp1 expression?)
   (exp2 expression?))
  (car-exp
   (body expression?))
  (cdr-exp
   (body expression?))
  (null?-exp
   (body expression?))
  (list-exp
   (args (list-of expression?)))
  (let-exp
   (vars (list-of symbols?))
   (vals (list-of expression?))
   (body expression?))
  (proc-exp
   (var (list-of symbol?))
   (body expression?))
  (call-exp
   (rator expression?)
   (rand (list-of expression?))))

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;expval的定义(主要是用于scheme value)如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; expval ::= (num-val ())
        ::= (bool-val ())
        ::= (proc-val ())
        ::= (pair-val ())
        ::= (emptylist-val)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体实现如下 所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;; an expressed value is either a number, a boolean or a procval.
(define-datatype expval expval?
  (num-val
   (value number?))
  (bool-val
   (boolean boolean?))
  (proc-val
   (proc proc?))
  (pair-val
   (car expval?)
   (cdr expval?))
  (emptylist-val))

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;proc的具体定义如下，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  proc ::= (procedure ())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;proc的实现如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; proc? : SchemeVal -&amp;gt; Bool
;; procedure : Var * Exp * Env -&amp;gt; Proc
(define-datatype proc proc?
  (procedure
   (var (list-of symbol?))
   (body expression?)
   (env environment?)))


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然具体的Define-datatype的定义还得配合&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/&#34;&gt;cases的作用&lt;/a&gt;进行实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>First Interpreter from EOPL</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/</link>
      <pubDate>Thu, 25 Feb 2016 11:20:09 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/</guid>
      <description>&lt;p&gt;这是EOPL一个最为基本的解释器，后面的解释器都在此基础上进行改造，所以
得理解各个部分，并知道如何使用和改造。最终告诉的是解释器如何解释表达式(每一种语言的表达式)。
&lt;strong&gt;解释器解释表达式的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;1. 测试Interpreter程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;2. 测试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;3. 反思结果&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#3.1&#34;&gt;3.1 非expressions部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3.2&#34;&gt;3.2 expressions部分&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;4. 是解决问题，还是抽象问题？科学性何在?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#4.1&#34;&gt;4.1 科学性问题何在？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.2&#34;&gt;4.2 一个解释器该解决哪些问题？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.3&#34;&gt;4.3 抽象的目的是什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;5.一个解释器的具体实现&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#5.1&#34;&gt;5.1 语言前端表现形式&lt;/a&gt; lang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.2&#34;&gt;5.2 语言数据结构&lt;/a&gt; data-structures&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.3&#34;&gt;5.3 语言中间阶段&lt;/a&gt; environments&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.4&#34;&gt;5.4 语言核心阶段&lt;/a&gt; interpreter&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.5&#34;&gt;5.5 语言的初始化&lt;/a&gt; drscheme-init&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.6&#34;&gt;5.6 语言的测试程序&lt;/a&gt; tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5.7&#34;&gt;5.7 语言前端封装测试&lt;/a&gt;Top&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;
;;测试一个
(run-tests! run equal-answer? 
   &#39;(
      (positive &amp;quot;11&amp;quot; 11)
    ))

;;测试二个
(run-tests! run-fn equal-answer? 
   &#39;(
     (positive &amp;quot;11&amp;quot; 11)   
     (if-eval-test-true &amp;quot;if zero?(-(11,11)) then 3 else 4&amp;quot; 3)
    ))
   
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;one test: positive&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    test: positive
    correct

    no bugs found

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;two tests:positive if-else&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    test: positive
    correct

    test: if-eval-test-true
    correct

    no bugs found
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;结果测试很理想并没有错误，并且可以在test中不断增加判断语句。
而run-test的解析分为两个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;expressions 这部分的工作主要是value-of&lt;/li&gt;
&lt;li&gt;非expressions  这部分的主要工作就是sligen通过the-grammer的定义进行解析&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;这部分需要配合value-of的define-datatype进行对应的变化，且看the-grammer代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;the-grammar
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;program&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;) a-program)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt;) const-exp)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
        diff-exp)
      
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zero?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
       zero?-exp)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt; expression)
       if-exp)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier&lt;/span&gt;) var-exp)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let&amp;#34;&lt;/span&gt; identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; expression)
       let-exp)   

      ))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到if,then,else都被当作不变的地方，而其中三个expressions被传动到value-of做进一步的解析。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;继续看value-of的部分，则是对if-exp,var-exp,let-exp,letrec-exp,diff-exp,zerp?-exp?等进行解析的过程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value-of
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(exp env)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expression exp

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;const-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; num))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;var-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; env var))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;diff-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val2)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
                (- num1 num2)))))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;zero?-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? num1)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))))
              
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2 exp3)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;bool&lt;/span&gt; val1)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp3 env))))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; exp1 body)       
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val1 env))))

        )))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/&#34;&gt;cases的实现&lt;/a&gt;,以及&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/&#34;&gt;cases的作用&lt;/a&gt;
当然&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/#1&#34;&gt;TLS&lt;/a&gt;也提供了比如*const,*application等的定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;第一大部分 定义好整体框架&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;meaning
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;expression-to-action&lt;/span&gt; e) e table))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中的&lt;code&gt;(expression-to-action)&lt;/code&gt;就会产生对应的&lt;code&gt;*const*,*identifier*,*lambda* ,*cond*,*quote*,*application*&lt;/code&gt;以及&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/#2&#34;&gt;TSS&lt;/a&gt;中新增加的&lt;code&gt;*set*,*define*,*let*&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这两个部分是比较有趣的地方，规范了语言的前端部分，犹如左右手交换来交换去和penrose-stair&lt;img src=&#34;https://jueqingsizhe66.github.io/images/penrose-stair.png&#34; alt=&#34;penrose-stair&#34;&gt;
,进一步可以看看&lt;a href=&#34;http://df.xq0510.blog.163.com/blog/static/16013465820108704920944/&#34;&gt;盗墓笔记(inception)的评述&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;科学进步的每一步发展，不是通过不断抽象来直觉抽取出进步，而是通过直觉发现问题，在利用抽象的方式进行求解，从而获得进步。
而抽象其实就是通过&lt;strong&gt;interface&lt;/strong&gt;和&lt;strong&gt;implementation&lt;/strong&gt;来进行，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interface的定义就是通过&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/&#34;&gt;define-datatype&lt;/a&gt;进行，&lt;/li&gt;
&lt;li&gt;implementation则是通过cases进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;现象和本质的探寻，透过现象看到本质，现象的产生都有其内在的原理，科学关注的是内在的本质联系。
scheme这门语言可以透过不断的抽象，产生许许多多的语言，但是这些语言层是否真的对科学问题有帮助，
这是值得怀疑的地方！科学必须要有怀疑！科学必须找寻问题所在，从而探索产生原因（持保留意见）。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;最基本的我觉得应该有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;词法解析问题
解决我输入的字符串，该如何由scan&amp;amp;parse进行解析&lt;/li&gt;
&lt;li&gt;语义解析问题
解决我得到的表达式(expression),它怎么由value-of进行解析，到底是const-exp,var-exp,proc-exp,let-exp等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实语言系列的表达主要有&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;imperative language(C,fortran)&lt;/li&gt;
&lt;li&gt;functional programming language(Lisp,ML,Haskell,Scheme)&lt;/li&gt;
&lt;li&gt;message passing language(OOP: Java,C++,)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;他们在解析程序的过程中都离不开上述的两个基本问题的解析，他们也被叫做&lt;strong&gt;前端(front-end)&lt;/strong&gt;。&lt;img src=&#34;https://jueqingsizhe66.github.io/images/lisp/front-end.png&#34; alt=&#34;front-end&#34;&gt;&lt;/p&gt;
&lt;p&gt;而任何语言如果仅仅有这个value的过程，而不会产生任何的effects，
比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print&lt;/li&gt;
&lt;li&gt;read&lt;/li&gt;
&lt;li&gt;modify the memory state or file system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那就太没有意思了，所以语言的完成需要他拓充到操作系统的处理、IO处理、显示处理，增加它的趣味性，而不是一味的解决问题（持保留意见）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;词法解析使我们获得从字符串到对应的语言的const-exp等的exp形式&lt;/li&gt;
&lt;li&gt;语义解析部分则是我们对const-exp等的具体实现部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以本质上来说这两点也是抽象的组成部分（&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/15/data-representation-the-same-interface-with-different-implementation/&#34;&gt;接口和实现&lt;/a&gt;）,所以本质上解决解释器的实现问题，其实就是&lt;strong&gt;如何抽象的问题?&lt;/strong&gt;。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在于解决现实出现的科学问题。
也就是这些问题都能够被设定的接口和实现通过递归进行解释，并最终获得结果(result or outcome)。&lt;/p&gt;
&lt;p&gt;而为什么要绕来绕去的谈这些问题呢？ 因为interpreter的实现过程本质也是递归的思想，在不断规约到一个结论。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;参考EOPL第三章.&lt;/p&gt;
&lt;p&gt;一般过程是先思考新语言的表现形式lang.scm，设定几个数据类型放入data-structures.scm中,
然后我们需要给这两个阶段设定bridge，也就是环境封装.这样我们就可以写一个解释器interpreter,解释并获得最终结果。
简而言之，其实我们就是想看看计算机是如何解释我们输入的这句话，具体就是&lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-35.html#%25_sec_5.5&#34;&gt;&lt;strong&gt;解释器如何解析输入的表达式&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语言&lt;a href=&#34;#5.1&#34;&gt;前端表现形式&lt;/a&gt; lang&lt;/li&gt;
&lt;li&gt;语言&lt;a href=&#34;#5.2&#34;&gt;数据结构&lt;/a&gt; data-structures&lt;/li&gt;
&lt;li&gt;语言&lt;a href=&#34;#5.3&#34;&gt;中间阶段&lt;/a&gt; environments&lt;/li&gt;
&lt;li&gt;语言&lt;a href=&#34;#5.4&#34;&gt;核心阶段&lt;/a&gt; interpreter&lt;/li&gt;
&lt;li&gt;语言的&lt;a href=&#34;#5.5&#34;&gt;初始化&lt;/a&gt; drscheme-init&lt;/li&gt;
&lt;li&gt;语言的&lt;a href=&#34;#5.6&#34;&gt;测试程序&lt;/a&gt; tests&lt;/li&gt;
&lt;li&gt;语言&lt;a href=&#34;#5.7&#34;&gt;前端封装测试&lt;/a&gt;Top&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为lang.scm&lt;/p&gt;
&lt;p&gt;该阶段的主要目的就是定义新生成的语言该是如何使用的？也就是语法部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; lang

  &lt;span style=&#34;color:#75715e&#34;&gt;;; grammar for the LET language&lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl.ss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl&amp;#34;&lt;/span&gt;)                
  
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drscheme-init.scm&amp;#34;&lt;/span&gt;)
  
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;all-defined-out&lt;/span&gt;))

  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; grammatical specification ;;;;;;;;;;;;;;;;&lt;/span&gt;
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;the-lexical-spec
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;whitespace&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;whitespace&lt;/span&gt;) skip)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;comment&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; (not &lt;span style=&#34;color:#e6db74&#34;&gt;#\newline&lt;/span&gt;))) skip)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;letter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;letter digit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;)))
       symbol)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;digit&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; digit)) number)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; digit (&lt;span style=&#34;color:#a6e22e&#34;&gt;arbno&lt;/span&gt; digit)) number)
      ))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;the-grammar
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;program&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;) a-program)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt;) const-exp)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
        diff-exp)
      
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zero?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
       zero?-exp)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt; expression)
       if-exp)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier&lt;/span&gt;) var-exp)

      (&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;
       (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let&amp;#34;&lt;/span&gt; identifier &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; expression &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; expression)
       let-exp)   

      ))
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; sllgen boilerplate ;;;;;;;;;;;;;;;;&lt;/span&gt;
  
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sllgen:make-define-datatypes&lt;/span&gt; the-lexical-spec the-grammar)
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;show-the-datatypes
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() (&lt;span style=&#34;color:#a6e22e&#34;&gt;sllgen:list-define-datatypes&lt;/span&gt; the-lexical-spec the-grammar)))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;scan&amp;amp;parse
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sllgen:make-string-parser&lt;/span&gt; the-lexical-spec the-grammar))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;just-scan
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sllgen:make-string-scanner&lt;/span&gt; the-lexical-spec the-grammar))
  
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为data-structures.scm&lt;/p&gt;
&lt;p&gt;该阶段的主要目的就是定义对应的类型该具有什么样的接口，这些接口的实现部分在第四部分有具体的体现。
这部分就是程序的&lt;strong&gt;类型接口的转换部分&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; data-structures (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl.ss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl&amp;#34;&lt;/span&gt;)

  &lt;span style=&#34;color:#75715e&#34;&gt;;; data structures for let-lang.&lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;all-defined-out&lt;/span&gt;))               &lt;span style=&#34;color:#75715e&#34;&gt;; too many things to list&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; expressed values ;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; an expressed value is either a number, a boolean or a procval.&lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; expval expval?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; number?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;boolean&lt;/span&gt; boolean?)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; extractors:&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; expval-&amp;gt;num : ExpVal -&amp;gt; Int&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 70&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-&amp;gt;num
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;) num)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num&lt;/span&gt; v)))))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; expval-&amp;gt;bool : ExpVal -&amp;gt; Bool&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 70&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-&amp;gt;bool
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expval v
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool&lt;/span&gt;) bool)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-extractor-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bool&lt;/span&gt; v)))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expval-extractor-error
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant&lt;/span&gt; value)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;eopl:error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;expval-extractors&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Looking for a ~s, found ~s&amp;#34;&lt;/span&gt;
	variant value)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; environment structures ;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; example of a data type built without define-datatype&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env-record
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() 
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extended-env-record
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sym&lt;/span&gt; val old-env)
      (cons (list sym val) old-env)))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env-record? null?)
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;environment?
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env-record?&lt;/span&gt; x)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(pair? x)
               (symbol? (car (car x)))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval?&lt;/span&gt; (cadr (car x)))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;environment?&lt;/span&gt; (cdr x))))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extended-env-record-&amp;gt;sym
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
      (car (car r))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extended-env-record-&amp;gt;val
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
      (cadr (car r))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extended-env-record-&amp;gt;old-env
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
      (cdr r)))

)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为environments.scm&lt;/p&gt;
&lt;p&gt;该阶段的主要目的是为了解释当遇到一些变量或者之后的解释器的lambda（将在下一个版本解释器体现），如何保存下来
，并供对应程序使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; environments (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl.ss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl&amp;#34;&lt;/span&gt;) 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; builds environment interface, using data structures defined in&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; data-structures.scm. &lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data-structures.scm&amp;#34;&lt;/span&gt;)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; init-env empty-env extend-env apply-env)

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; initial environment ;;;;;;;;;;;;;;;;&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; init-env : () -&amp;gt; Env&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; usage: (init-env) = [i=1, v=5, x=10]&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (init-env) builds an environment in which i is bound to the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; expressed value 1, v is bound to the expressed value 5, and x is&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; bound to the expressed value 10.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 69&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;init-env 
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; 
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt;
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env&lt;/span&gt;))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; environment constructors and observers ;;;;;;;;;;;;;;;;&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env-record&lt;/span&gt;)))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;empty-env? 
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env-record?&lt;/span&gt; x)))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-env
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sym&lt;/span&gt; val old-env)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;extended-env-record&lt;/span&gt; sym val old-env)))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-env
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt; search-sym)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-env?&lt;/span&gt; env)
	(&lt;span style=&#34;color:#a6e22e&#34;&gt;eopl:error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apply-env&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No binding for ~s&amp;#34;&lt;/span&gt; search-sym)
	(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;sym&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extended-env-record-&amp;gt;sym&lt;/span&gt; env))
	      (&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extended-env-record-&amp;gt;val&lt;/span&gt; env))
	      (&lt;span style=&#34;color:#a6e22e&#34;&gt;old-env&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extended-env-record-&amp;gt;old-env&lt;/span&gt; env)))
	  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? search-sym sym)
	    val
	    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; old-env search-sym))))))

  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为interp.scm&lt;/p&gt;
&lt;p&gt;该阶段的主要目的就是编写针对第3阶段生成的var-exp、const-exp等expval的解析，算是核心部分，最终的结果的产生地，
后面的几个阶段只不过是针对这部分内容做了一些前端的准备，算是死门，而这部分和前面的词法解析、类型转换接口算是一个语言的生门部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; interp (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl.ss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl&amp;#34;&lt;/span&gt;)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; interpreter for the LET language.  The \commentboxes are the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; latex code for inserting the rules into the code in the book.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; These are too complicated to put here, see the text, sorry.&lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drscheme-init.scm&amp;#34;&lt;/span&gt;)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lang.scm&amp;#34;&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data-structures.scm&amp;#34;&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;environments.scm&amp;#34;&lt;/span&gt;)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; value-of-program value-of)

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; the interpreter ;;;;;;;;;;;;;;;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; value-of-program : Program -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 71&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value-of-program 
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pgm&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; program pgm
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;a-program&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 (&lt;span style=&#34;color:#a6e22e&#34;&gt;init-env&lt;/span&gt;))))))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; value-of : Exp * Env -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 71&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value-of
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(exp env)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expression exp

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;const-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; num))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;var-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; env var))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;diff-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val2)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
                (- num1 num2)))))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;zero?-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? num1)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))))
              
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2 exp3)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;bool&lt;/span&gt; val1)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp3 env))))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; exp1 body)       
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val1 env))))

        )))


  )

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为drscheme-init.scm&lt;/p&gt;
&lt;p&gt;该阶段主要目的是编写测试需要的套件，提供测试是否成功的判断标准。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; drscheme-init.scm - compatibility file for DrScheme&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; usage: (require &amp;#34;drscheme-init.scm&amp;#34;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; makes structs printable, and provides basic functionality for&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; testing.  This includes pretty-printing and tracing.&lt;/span&gt;


(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; drscheme-init mzscheme

  &lt;span style=&#34;color:#75715e&#34;&gt;;; show the contents of define-datatype values&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;print-struct&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pretty.ss&amp;#34;&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;all-from&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pretty.ss&amp;#34;&lt;/span&gt;)))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;trace.ss&amp;#34;&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;all-from&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;trace.ss&amp;#34;&lt;/span&gt;)))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; make-parameter)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; 
   run-experiment
   run-tests!
   stop-after-first-error
   run-quietly
   )
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; safely apply procedure fn to a list of args.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; if successful, return (cons #t val)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; if eopl:error is invoked, returns (cons #f string), where string is the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; format string generated by eopl:error.  If somebody manages to raise a &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; value other than an exception, then the raised value is reported.&lt;/span&gt;
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-safely
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; args)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;with-handlers&lt;/span&gt; ([(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exn&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; catch any error&lt;/span&gt;
                       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exn&lt;/span&gt;)          &lt;span style=&#34;color:#75715e&#34;&gt;; evaluate to a failed test result&lt;/span&gt;
                         (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; 
                               (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exn?&lt;/span&gt; exn)
                                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;exn-message&lt;/span&gt; exn)
                                   exn)))])  
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([actual (apply proc args)])
          (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt; actual)))))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; run-experiment :&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;  ((a ...) -&amp;gt; b) * (a ...) * b * (b * b -&amp;gt; bool)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;  -&amp;gt; (cons bool b)&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; usage: (run-experiment fn args correct-answer equal-answer?)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Applies fn to args.  Compares the result to correct-answer. &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Returns (cons bool b) where bool indicates whether the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; answer is correct.&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;run-experiment
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; args correct-answer equal-answer?)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;let*&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-safely&lt;/span&gt; fn args))
           &lt;span style=&#34;color:#75715e&#34;&gt;;; ans is either the answer or the args to eopl:error&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;error-thrown?&lt;/span&gt; (not (car result)))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt; (cdr result)))
          
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eqv? correct-answer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&lt;/span&gt;)
             error-thrown?
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal-answer?&lt;/span&gt; ans correct-answer))
         ans))))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;stop-after-first-error (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;run-quietly (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;))
   
  &lt;span style=&#34;color:#75715e&#34;&gt;;; run-tests! : (arg -&amp;gt; outcome) * (any * any -&amp;gt; bool) * (list-of test)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;             -&amp;gt; unspecified&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; where:&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; test ::= (name arg outcome)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; outcome ::= ERROR | any&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; usage: (run-tests! run-fn equal-answer? tests)&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; for each item in tests, apply run-fn to the arg.  Check to see if&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; the outcome is right, comparing values using equal-answer?.&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; print a log of the tests.&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; at the end, print either &amp;#34;no bugs found&amp;#34; or the list of tests&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; failed. &lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Normally, run-tests! will recover from any error and continue to&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; the end of the test suite.  This behavior can be altered by&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; setting (stop-after-first-error #t).&lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run-tests!&lt;/span&gt; run-fn equal-answer? tests)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;tests-failed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for-each&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test-item&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; (car test-item))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;pgm&lt;/span&gt; (cadr test-item))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;correct-answer&lt;/span&gt; (caddr test-item)))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test: ~a~%&amp;#34;&lt;/span&gt; name)
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;let* &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;run-experiment&lt;/span&gt;
		     run-fn (list pgm) correct-answer equal-answer?))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;correct?&lt;/span&gt; (car result))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;actual-answer&lt;/span&gt; (cdr result)))
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt;
                   (not correct?)
                   (not (&lt;span style=&#34;color:#a6e22e&#34;&gt;run-quietly&lt;/span&gt;)))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~a~%&amp;#34;&lt;/span&gt; pgm)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;correct outcome: ~a~%&amp;#34;&lt;/span&gt; correct-answer)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;actual outcome:  &amp;#34;&lt;/span&gt;)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;pretty-display&lt;/span&gt; actual-answer)))
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;correct?
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;correct~%~%&amp;#34;&lt;/span&gt;)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;incorrect~%~%&amp;#34;&lt;/span&gt;)
                   &lt;span style=&#34;color:#75715e&#34;&gt;;; stop on first error if stop-after-first? is set:&lt;/span&gt;
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stop-after-first-error&lt;/span&gt;)
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;incorrect outcome detected&amp;#34;&lt;/span&gt;)) 
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;tests-failed
                         (cons name tests-failed)))))))
       tests)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? tests-failed)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no bugs found~%&amp;#34;&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;incorrect answers on tests: ~a~%&amp;#34;&lt;/span&gt;
            (reverse tests-failed)))))

  )  
  
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为tests.scm&lt;/p&gt;
&lt;p&gt;该阶段的主要目的就是编写测试语句，包括常量、变量、表达式、if、diff、let等语句的使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; tests mzscheme
  
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; test-list)

  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; tests ;;;;;;;;;;;;;;;;&lt;/span&gt;
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;test-list
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(
  
      &lt;span style=&#34;color:#75715e&#34;&gt;;; simple arithmetic&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;positive-const&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;11&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;negative-const&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-33&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-33&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-arith-1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(44,33)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
  
      &lt;span style=&#34;color:#75715e&#34;&gt;;; nested arithmetic&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;nested-arith-left&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(-(44,33),22)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-11&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;nested-arith-right&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(55, -(22,11))&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;)
  
      &lt;span style=&#34;color:#75715e&#34;&gt;;; simple variables&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;test-var-1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;test-var-2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(x,1)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;test-var-3&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(1,x)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-9&lt;/span&gt;)
      
      &lt;span style=&#34;color:#75715e&#34;&gt;;; simple unbound variables&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;test-unbound-var-1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; error)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;test-unbound-var-2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(x,foo)&amp;#34;&lt;/span&gt; error)
  
      &lt;span style=&#34;color:#75715e&#34;&gt;;; simple conditionals&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-true&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(0) then 3 else 4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-false&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(1) then 3 else 4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
      
      &lt;span style=&#34;color:#75715e&#34;&gt;;; test dynamic typechecking&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;no-bool-to-diff-1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(zero?(0),1)&amp;#34;&lt;/span&gt; error)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;no-bool-to-diff-2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-(1,zero?(0))&amp;#34;&lt;/span&gt; error)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;no-int-to-if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if 1 then 2 else 3&amp;#34;&lt;/span&gt; error)

      &lt;span style=&#34;color:#75715e&#34;&gt;;; make sure that the test and both arms get evaluated&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;;; properly. &lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-eval-test-true&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(-(11,11)) then 3 else 4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-eval-test-false&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(-(11, 12)) then 3 else 4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
      
      &lt;span style=&#34;color:#75715e&#34;&gt;;; and make sure the other arm doesn&amp;#39;t get evaluated.&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-eval-test-true-2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(-(11, 11)) then 3 else foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-eval-test-false-2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zero?(-(11,12)) then foo else 4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)

      &lt;span style=&#34;color:#75715e&#34;&gt;;; simple let&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-let-1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

      &lt;span style=&#34;color:#75715e&#34;&gt;;; make sure the body and rhs get evaluated&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;eval-let-body&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in -(x,1)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;eval-let-rhs&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = -(4,1) in -(x,1)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

      &lt;span style=&#34;color:#75715e&#34;&gt;;; check nested let and shadowing&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;simple-nested-let&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in let y = 4 in -(x,y)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;check-shadowing-in-body&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in let x = 4 in x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;check-shadowing-in-rhs&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let x = 3 in let x = -(x,1) in x&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

      ))
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;保存为top.scm&lt;/p&gt;
&lt;p&gt;该阶段的目的就是测试这个新的解释器语言到底有没有用？他是否能够解释从tests中导入的
程序片段？是否测试通过。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; top (&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl.ss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eopl&amp;#34;&lt;/span&gt;)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; top level module.  Loads all required pieces.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Run the test suite with (run-all).&lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drscheme-init.scm&amp;#34;&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data-structures.scm&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;; for expval constructors&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lang.scm&amp;#34;&lt;/span&gt;)             &lt;span style=&#34;color:#75715e&#34;&gt;; for scan&amp;amp;parse&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;interp.scm&amp;#34;&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; for value-of-program&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tests.scm&amp;#34;&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;; for test-list&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; since this is the top-level module, we don&amp;#39;t really need to&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; provide anything, but we do so just in case.  &lt;/span&gt;

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; run run-all)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; test-all)

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test-all&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;run-all&lt;/span&gt;))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; here are some other things that could be provided:&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;;   (provide (all-defined-out))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;   (provide (all-from &amp;#34;interp.scm&amp;#34;))&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;   (provide (all-from &amp;#34;lang.scm&amp;#34;))&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;; interface to test harness ;;;;;;;;;;;;;;;;&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; run : String -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 71&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;run
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of-program&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;scan&amp;amp;parse&lt;/span&gt; string))))
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; run-all : () -&amp;gt; unspecified&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; runs all the tests in test-list, comparing the results with&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; equal-answer?  &lt;/span&gt;

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;run-all
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;run-tests!&lt;/span&gt; run equal-answer? test-list)))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;equal-answer?
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt; correct-ans)
      (equal? ans (&lt;span style=&#34;color:#a6e22e&#34;&gt;sloppy-&amp;gt;expval&lt;/span&gt; correct-ans))))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sloppy-&amp;gt;expval 
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sloppy-val&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((number? sloppy-val) (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; sloppy-val))
        ((boolean? sloppy-val) (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; sloppy-val))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;eopl:error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sloppy-&amp;gt;expval&lt;/span&gt; 
                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t convert sloppy value to expval: ~s&amp;#34;&lt;/span&gt;
                     sloppy-val)))))
    
  &lt;span style=&#34;color:#75715e&#34;&gt;;; run-one : symbol -&amp;gt; expval&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; (run-one sym) runs the test whose name is sym&lt;/span&gt;
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;run-one
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test-name&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;the-test&lt;/span&gt; (assoc test-name test-list)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((assoc test-name test-list)
           &lt;span style=&#34;color:#66d9ef&#34;&gt;=&amp;gt; &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; (cadr test))))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eopl:error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;run-one&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no such test: ~s&amp;#34;&lt;/span&gt; test-name))))))
 
  &lt;span style=&#34;color:#75715e&#34;&gt;;; (run-all)&lt;/span&gt;
  
  )


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>Chicago really only has 7 characters?</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/24/chicago-really-only-has-7-characters/</link>
      <pubDate>Wed, 24 Feb 2016 17:19:30 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/24/chicago-really-only-has-7-characters/</guid>
      <description>&lt;p&gt;我在听&lt;a href=&#34;http://v.youku.com/v_show/id_XMTQ3NDEwODUyNA==.html&#34;&gt;SICP的优酷视频&lt;/a&gt;时，听到“芝加哥也可以说是具有7个字符，同时他也可以表述为美国的中西部伊利诺伊州的全美第三大国际大都市”.
它可以仅仅表示语言的表面意思，也可以表示语言中的隐含意思。这体现了语言实现的一种魅力，Chicago really only has 7 characters?&lt;/p&gt;
&lt;h2 id=&#34;value&#34;&gt;Value&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value，价值。&lt;/li&gt;
&lt;li&gt;scheme的每一个程序都是由exressions构成，每一个expression都对应一个expression value，简称expval。&lt;/li&gt;
&lt;li&gt;expval对应的有exp-val和den-val。&lt;/li&gt;
&lt;li&gt;exp-val表示表达式的值，也就是可能是变量绑定也可能是列表(表达式)的值；而den-val单单只是变量绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了分析每一个价值的过程，姑且把程序写为&amp;laquo;expressions&amp;raquo;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;expressions=((lambda (x) (+ x 3)) 10)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么scheme如何解析？&lt;/p&gt;
&lt;p&gt;假定我们的解析程序叫做value-of,init-env是我们的初始环境(变量绑定或者字典),[10]表示scheme-val(每一种语言都有着自己的value),
[x=10]init-env表示拓展的环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; &amp;lt;&amp;lt;expressions&amp;gt;&amp;gt;)
         =(&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; &amp;lt;&amp;lt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&amp;gt;&amp;gt;)
         =(&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) init-env)
         =(&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; &amp;lt;&amp;lt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))&amp;gt;&amp;gt; init-env) 
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; init-env))
         =(&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; x &amp;lt;&amp;lt;(+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))&amp;gt;&amp;gt; init-env) 
                           [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;])
         =(&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; &amp;lt;&amp;lt;(+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))&amp;gt;&amp;gt; [x=10]init-env) 
         =(&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; + [x=10]init-env)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; x [x=10]init-env)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; [x=10]init-env)
                )
         = (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; + [x=10]init-env)
                           [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]
                           [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] 
                )
         =(+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;val-num&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;])  (&lt;span style=&#34;color:#a6e22e&#34;&gt;val-num&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]))
         =(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刚开始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也许你不可能替代&amp;laquo;&amp;raquo;表达式的意思，&lt;/li&gt;
&lt;li&gt;你也可能不理解解析10的过程，&lt;/li&gt;
&lt;li&gt;你也分不清出解析lambda和+的不同（一种是自定义程序，一种是内置operator），&lt;/li&gt;
&lt;li&gt;甚至你不可以静下心来好好分析我正在说的话。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我想表达的是，程序给你的是program or data，而你作为语言的创造者或者使用者，你需要进一步体味program是什么？
&lt;strong&gt;Does program really has only 7 characters?&lt;/strong&gt;(思考你写过的程序的各个部分的用途，如何来的？)&lt;/p&gt;
&lt;p&gt;进一步的解析可以&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/#4&#34;&gt;参考&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;源语言到目标语言的转变&lt;/h2&gt;
&lt;p&gt;有一种程序员喜欢利用各种语言所具有的特色，组合使用语言形成自己的程序，内部是控制流动和数据流动。而从第一种语言
也就是源语言(source language)开始，利用变换，输入到第二种、第三种…… ，最终输入到目标语言(target language).程序并不是
我们想的单一性的语言调用，每一个问题都可以通过新构造一种新的语言进行求解(持保留意见)。现在已经有人能够作出输入一种输入和输出
结果，从而产生你要的scheme程序，也就是产生对应的语言解决这个问题。然而我们更需要思考的是变的表面含义。&amp;ldquo;变&amp;quot;的是什么？
可深入了解Dan. Friedman的&lt;a href=&#34;http://www.eopl3.com/&#34;&gt;EOPL&lt;/a&gt;程序设计书籍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cases的作用</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/</link>
      <pubDate>Tue, 23 Feb 2016 12:10:12 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/</guid>
      <description>&lt;p&gt;为什么要实现&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/&#34;&gt;cases&lt;/a&gt;,目的在于进一步抽象简化过程。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;原先的程序&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;      procedure :   Var * Exp * Env -&amp;gt;  Proc
apply-procedure :   Proc * ExpVal   -&amp;gt;  ExpVal
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;;; procedure : Var * Exp * Env -&amp;gt; Proc&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 79&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;procedure
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body env)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val env)))))
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;; apply-procedure : Proc * ExpVal -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 79&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-procedure
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; val)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; val)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-1&#34;&gt;简化的程序&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;apply-procedure : Proc * ExpVal -&amp;gt; ExpVal
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; apply-procedure : Proc * ExpVal -&amp;gt; ExpVal&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Page: 79&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-procedure
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proc1&lt;/span&gt; val)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; proc proc1
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body saved-env)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val saved-env))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;通过cases的proc1找到输入的expressions（scheme的expressions即是数据）,转移val分配到extend-env中，&lt;/li&gt;
&lt;li&gt;通过变量名和变量列表&lt;code&gt;(var body...)&lt;/code&gt;引入var，&lt;/li&gt;
&lt;li&gt;并形成&lt;code&gt;(var val)&lt;/code&gt;词汇表打入saved-env，&lt;/li&gt;
&lt;li&gt;最后利用value-of解析body，也就是解析由&lt;code&gt;(var body saved-env)&lt;/code&gt;构成的closure，递归解析所有的body,
如果proc1满足&lt;code&gt;(procedure (var body saved-env))&lt;/code&gt;的形式，则通过value-of进行解析.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;saved-env是假定的保存的环境变量，而对应的apply-procedure的最终结果是&lt;code&gt;(proc1 val)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;value-of&#34;&gt;value-of实现&lt;/h2&gt;
&lt;p&gt;它是在语言设计阶段比较重要的实现，在其中可以存在很多的变种。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;; value-of : Exp * Env -&amp;gt; ExpVal&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value-of
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(exp env)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; expression exp

        &lt;span style=&#34;color:#75715e&#34;&gt;;\commentbox{ (value-of (const-exp \n{}) \r) = \n{}}&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;const-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt; num))

        &lt;span style=&#34;color:#75715e&#34;&gt;;\commentbox{ (value-of (var-exp \x{}) \r) = (apply-env \r \x{})}&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;var-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-env&lt;/span&gt; env var))

        &lt;span style=&#34;color:#75715e&#34;&gt;;\commentbox{\diffspec}&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;diff-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;val2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val2)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;num-val&lt;/span&gt;
                (- num1 num2)))))

        &lt;span style=&#34;color:#75715e&#34;&gt;;\commentbox{\zerotestspec}&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;zero?-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;num&lt;/span&gt; val1)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? num1)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;bool-val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))))
              
        &lt;span style=&#34;color:#75715e&#34;&gt;;\commentbox{\ma{\theifspec}}&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;if-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;exp1&lt;/span&gt; exp2 exp3)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;bool&lt;/span&gt; val1)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp2 env)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp3 env))))

        &lt;span style=&#34;color:#75715e&#34;&gt;;\commentbox{\ma{\theletspecsplit}}&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; exp1 body)       
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;val1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; exp1 env)))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; body
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-env&lt;/span&gt; var val1 env))))
        
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; body)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;proc-val&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;procedure&lt;/span&gt; var body env)))

        (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rator&lt;/span&gt; rand)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;expval-&amp;gt;proc&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; rator env)))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value-of&lt;/span&gt; rand env)))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-procedure&lt;/span&gt; proc arg)))

        )))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在value-of中，如果exp满足&lt;code&gt;if-exp (exp1 exp2 exp3)&lt;/code&gt;则解析乘对应的，&lt;/li&gt;
&lt;li&gt;依次类推,当看到&lt;code&gt;let-exp (va exp1 body)&lt;/code&gt;的形式则对应的进行演变.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>通过Scheme读取文件</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/22/tong-guo-schemedu-qu-wen-jian/</link>
      <pubDate>Mon, 22 Feb 2016 22:54:21 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/22/tong-guo-schemedu-qu-wen-jian/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;通过IO monad的open-input-file 读取文件&lt;/li&gt;
&lt;li&gt;通过read-line 读取接口文件&lt;/li&gt;
&lt;li&gt;通过name-loop命名loop来循环读取文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通过文件句柄读取文件，这边接口就是文件句柄&lt;/li&gt;
&lt;li&gt;现在还不清楚文件模式的几种类型
&lt;ul&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;append&lt;/li&gt;
&lt;li&gt;write（是否有）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eof-object?判断是否文件末尾&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;read-file
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([port (open-input-file filename &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;:mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&lt;/span&gt;)])
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ([line (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-line&lt;/span&gt; port)]
                 [all &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;])
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         [(eof-object? line) all]
         [else
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-line&lt;/span&gt; port)
                (string-append all line &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;))])))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从这边提取出一个最常用的let loop循环可以用于很多地方，重复几条语句分析所有程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ([start &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] [toks &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()])
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;letv&lt;/span&gt; ([(&lt;span style=&#34;color:#a6e22e&#34;&gt;tok&lt;/span&gt; newstart) (&lt;span style=&#34;color:#a6e22e&#34;&gt;scan1&lt;/span&gt; s start)])
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         [(eq? tok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eof&lt;/span&gt;)
          (reverse toks)]
         [else
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; newstart (cons tok toks))])))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，比如onstack? 用于判断是否存于栈&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;onstack?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; v stk)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ([stk stk] [trace &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()])
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       [(null? stk) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;]
       [(&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(eq? u (car (car stk)))
             (eq? v (cdr (car stk))))
        (reverse (cons (car stk) trace))]
       [else
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (cdr stk) (cons (car stk) trace))]))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The implementation of define-datatype</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/</link>
      <pubDate>Fri, 19 Feb 2016 11:40:28 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/</guid>
      <description>&lt;p&gt;设计一个语言很重要的一点就是有一个工具来创建接口，define-datatype和cases就是这种工具&lt;/p&gt;
&lt;h2 id=&#34;define-datatype&#34;&gt;define-datatype&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; NOTE: datatypes are currently transparent, for the sake of EoPL&amp;#39;s&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; use of `equal?&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket/base

(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;for-syntax&lt;/span&gt; racket/base &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;private/utils.rkt&amp;#34;&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define-syntax &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; stx)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-case&lt;/span&gt; stx ()
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; name pred-name
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-name&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;field-name&lt;/span&gt; field-pred) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([variant-names (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(variant-name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))])
       &lt;span style=&#34;color:#75715e&#34;&gt;;; More syntax checks...&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for the datatype name&amp;#34;&lt;/span&gt; stx &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pred-name&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for the predicate name&amp;#34;&lt;/span&gt; stx &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pred-name&lt;/span&gt;))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt; ([vt     (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; variant-names)]
             [fields (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;field-name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))])
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; vt)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for the variant name&amp;#34;&lt;/span&gt; stx vt))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt; ([field (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; fields))])
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; field)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for the field name&amp;#34;&lt;/span&gt; stx field))))
       &lt;span style=&#34;color:#75715e&#34;&gt;;; Count the fields for each variant:&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;with-syntax&lt;/span&gt; ([(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-field-count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for/list&lt;/span&gt; ([x (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt;
                                              &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;field-name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;datum-&amp;gt;syntax&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;quote-syntax&lt;/span&gt; here)
                                       (length (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; x))
                                       &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for/list&lt;/span&gt; ([vn (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; variant-names)])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;datum-&amp;gt;syntax&lt;/span&gt;
                         vn
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-&amp;gt;uninterned-symbol&lt;/span&gt;
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~a?&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-e&lt;/span&gt; vn)))))]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-accessor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for/list&lt;/span&gt; ([vn (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; variant-names)])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;datum-&amp;gt;syntax&lt;/span&gt;
                         vn
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-&amp;gt;uninterned-symbol&lt;/span&gt;
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~a-accessor&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-e&lt;/span&gt; vn)))))]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-mutator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;generate-temporaries&lt;/span&gt; variant-names)]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;make-variant&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;generate-temporaries&lt;/span&gt; variant-names)]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;struct:variant&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;generate-temporaries&lt;/span&gt; variant-names)]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;make-variant-name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for/list&lt;/span&gt; ([vn (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; variant-names)])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;datum-&amp;gt;syntax&lt;/span&gt;
                         vn
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-&amp;gt;symbol&lt;/span&gt;
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;make-~a&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-e&lt;/span&gt; vn)))))])
         &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(begin
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;define-syntax &lt;/span&gt;name
               &lt;span style=&#34;color:#75715e&#34;&gt;;; Note: we&amp;#39;re back to the transformer environment, here.&lt;/span&gt;
               &lt;span style=&#34;color:#75715e&#34;&gt;;; Also, this isn&amp;#39;t a transformer function, so any direct&lt;/span&gt;
               &lt;span style=&#34;color:#75715e&#34;&gt;;;  use of the name will trigger a syntax error. The name&lt;/span&gt;
               &lt;span style=&#34;color:#75715e&#34;&gt;;;  can be found by `syntax-local-value&amp;#39;, though.&lt;/span&gt;
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([cert (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-local-certifier&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)])
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-dt&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pred-name&lt;/span&gt;)
                          (list (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-vt&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant-name&lt;/span&gt;)
                                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;cert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant?&lt;/span&gt;)
                                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;cert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant-accessor&lt;/span&gt;)
                                         variant-field-count)
                                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))))
             &lt;span style=&#34;color:#75715e&#34;&gt;;; Bind the predicate and selector functions:&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-values&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pred-name&lt;/span&gt;
                             variant-name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                             variant? &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                             variant-accessor &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
               &lt;span style=&#34;color:#75715e&#34;&gt;;; Create a new structure for the datatype (using the&lt;/span&gt;
               &lt;span style=&#34;color:#75715e&#34;&gt;;; datatype name in `struct&amp;#39;, so it prints nicely).&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-values&lt;/span&gt; ([(&lt;span style=&#34;color:#a6e22e&#34;&gt;struct:x&lt;/span&gt; make-x x? acc mut)
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-struct-type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; null (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-inspector&lt;/span&gt;))])
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-values&lt;/span&gt; ([(&lt;span style=&#34;color:#a6e22e&#34;&gt;struct:variant&lt;/span&gt; make-variant variant?
                                variant-accessor variant-mutator)
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-struct-type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant-name&lt;/span&gt; struct:x variant-field-count &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                                                 &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
                                                 null
                                                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-inspector&lt;/span&gt;))]
                              &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                   &lt;span style=&#34;color:#75715e&#34;&gt;;; User-available functions:&lt;/span&gt;
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;
                    x? &lt;span style=&#34;color:#75715e&#34;&gt;;; The datatype predicate&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; Create the constructor functions:&lt;/span&gt;
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let* &lt;/span&gt;([vname &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant-name&lt;/span&gt;]
                           [variant-name
                            (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;field-name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;field-pred&lt;/span&gt; field-name)
                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; vname &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad value for ~a field: ~e&amp;#34;&lt;/span&gt;
                                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;field-name&lt;/span&gt; field-name))
                              &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-variant&lt;/span&gt; field-name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))])
                      variant-name)
                    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                    variant? &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                    variant-accessor &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))))
             &lt;span style=&#34;color:#75715e&#34;&gt;;; Compatibility bindings&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-values&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-variant-name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) (values variant-name &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))))]
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; name pred-name variant &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
     &lt;span style=&#34;color:#75715e&#34;&gt;;; Must be a bad variant...&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt; ([variant (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(variant &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))])
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-case&lt;/span&gt; variant ()
         [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-name&lt;/span&gt; field &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([name &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant-name&lt;/span&gt;])
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; name)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
               &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for the variant name&amp;#34;&lt;/span&gt; stx name))
            &lt;span style=&#34;color:#75715e&#34;&gt;;; Must be a bad field:&lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt; ([field (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(field &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))])
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-case&lt;/span&gt; field ()
                [(&lt;span style=&#34;color:#a6e22e&#34;&gt;field-name&lt;/span&gt; field-pred)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([name &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;field-name&lt;/span&gt;])
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; name)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                      &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for the field name&amp;#34;&lt;/span&gt; stx name)))]
                [_else
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                  &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected a field name followed by a predicate expression, all in parentheses&amp;#34;&lt;/span&gt; stx field)])))]
         [_else
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected a variant name followed by a sequence of field declarations, all in parentheses&amp;#34;&lt;/span&gt; stx variant)]))]
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; name)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;missing predicate name and variant clauses&amp;#34;&lt;/span&gt; stx)]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cases&#34;&gt;cases&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define-syntax &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; stx)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-case&lt;/span&gt; stx ()
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; datatype expr
        clause
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
     &lt;span style=&#34;color:#75715e&#34;&gt;;; Get datatype information:&lt;/span&gt;
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([dt (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt;)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-local-value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))])
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt?&lt;/span&gt; dt)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not a datatype name&amp;#34;&lt;/span&gt; stx &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt;))

       &lt;span style=&#34;color:#75715e&#34;&gt;;; Parse clauses:&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;define-values&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;vts&lt;/span&gt; field-idss bodys else-body)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ([clauses (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(clause &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))]
                    [saw-cases null])
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? clauses)
             (values null null null &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([clause (car clauses)])
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-case*&lt;/span&gt; clause ()
                             (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b)
                               (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-e&lt;/span&gt; b) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;else&lt;/span&gt;)
                                    (not (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier-binding&lt;/span&gt; b))))
                 [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;field-id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) body0 body1 &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let* &lt;/span&gt;([variant &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;variant&lt;/span&gt;]
                         [vt (&lt;span style=&#34;color:#a6e22e&#34;&gt;ormap&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dtv&lt;/span&gt;)
                                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;vt-name (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-name-stx&lt;/span&gt; dtv))
                                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;free-identifier=?&lt;/span&gt; variant vt-name)
                                           dtv))
                                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-variants&lt;/span&gt; dt))]
                         [orig-variant (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;vt (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-name-stx&lt;/span&gt; vt))])
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; orig-variant
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                       &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not a variant of `~a&amp;#39;&amp;#34;&lt;/span&gt;
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt;))
                       stx
                       variant))

                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([field-ids (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(field-id &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))])
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt; ([fid (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; field-ids)])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;identifier?&lt;/span&gt; fid)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                           &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expected an identifier for a field&amp;#34;&lt;/span&gt; stx fid)))
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([dtv (&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-assq&lt;/span&gt; variant (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-variants&lt;/span&gt; dt))])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (= (length field-ids) (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-field-count&lt;/span&gt; dtv))
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                           &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;variant case `~a&amp;#39; for `~a&amp;#39; has wrong field count (expected ~a, found ~a)&amp;#34;&lt;/span&gt;
                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; variant)
                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-&amp;gt;datum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt;)
                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-field-count&lt;/span&gt; dtv)
                            (length field-ids))
                           stx
                           clause)))

                      &lt;span style=&#34;color:#75715e&#34;&gt;;; Check for duplicate local field ids:&lt;/span&gt;
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([dup (&lt;span style=&#34;color:#a6e22e&#34;&gt;check-duplicate-identifier&lt;/span&gt; field-ids)])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt; dup
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                           &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;duplicate field identifier&amp;#34;&lt;/span&gt; stx dup)))

                      &lt;span style=&#34;color:#75715e&#34;&gt;;; Check for redundant case:&lt;/span&gt;
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;when&lt;/span&gt; (memq orig-variant saw-cases)
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;duplicate case&amp;#34;&lt;/span&gt; stx clause))

                      &lt;span style=&#34;color:#75715e&#34;&gt;;; This clause is ok:&lt;/span&gt;
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;let-values&lt;/span&gt; ([(&lt;span style=&#34;color:#a6e22e&#34;&gt;vts&lt;/span&gt; idss bodys else)
                                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (cdr clauses) (cons orig-variant saw-cases))])
                        (values (cons vt vts)
                                (cons field-ids idss)
                                (cons &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;begin &lt;/span&gt;body0 body1 &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) bodys)
                                else))))]
                 [(&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;body0 body1 &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (null? (cdr clauses))
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
                       &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;else clause must be last&amp;#34;&lt;/span&gt; stx clause))
                    (values null null null &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;begin &lt;/span&gt;body0 body1 &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))]
                 [_else (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad clause&amp;#34;&lt;/span&gt; stx clause)])))))
       &lt;span style=&#34;color:#75715e&#34;&gt;;; Missing any variants?&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;else-body (= (length vts) (length (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-variants&lt;/span&gt; dt))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;here (map vt-name-stx vts))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;missing
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ([l (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-variants&lt;/span&gt; dt)])
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;[(null? l) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]
                   [(&lt;span style=&#34;color:#a6e22e&#34;&gt;ormap&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;free-identifier=?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-name-stx&lt;/span&gt; (car l)) i)) here)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (cdr l))]
                   [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ~a~a&amp;#34;&lt;/span&gt;
                                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-e&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-name-stx&lt;/span&gt; (car l)))
                                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (cdr l)))])))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;missing cases for the following variants:~a&amp;#34;&lt;/span&gt; missing)
          stx))

       &lt;span style=&#34;color:#75715e&#34;&gt;;; Create the result:&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;with-syntax&lt;/span&gt; ([pred (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-pred-stx&lt;/span&gt; dt)]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) (map vt-predicate-stx vts)]
                     [((&lt;span style=&#34;color:#a6e22e&#34;&gt;field-extraction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;for/list&lt;/span&gt; ([vt (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-list&lt;/span&gt; vts)])
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;with-syntax&lt;/span&gt; ([accessor (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-accessor-stx&lt;/span&gt; vt)])
                          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ([n &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
                            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= n (&lt;span style=&#34;color:#a6e22e&#34;&gt;vt-field-count&lt;/span&gt; vt))
                              null
                              (cons &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;accessor&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;n)
                                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; n)))))))]
                     [((&lt;span style=&#34;color:#a6e22e&#34;&gt;field-id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) field-idss]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) bodys]
                     [else-body (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;else-body
                                    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no variant case matched&amp;#34;&lt;/span&gt;))])
         &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([v expr])
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(not (&lt;span style=&#34;color:#a6e22e&#34;&gt;pred&lt;/span&gt; v))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cases&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not a ~a: ~s&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;datatype) v)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 [(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant?&lt;/span&gt; v)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([field-id field-extraction] &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
                    body)]
                 &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                 [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;else-body])))))]))


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;provide-datatype&#34;&gt;provide-datatype&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define-syntax &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;provide-datatype&lt;/span&gt; stx)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-case&lt;/span&gt; stx ()
    [(&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; datatype)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([dt (&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax-local-value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))])
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt?&lt;/span&gt; dt)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;raise-syntax-error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not a datatype name&amp;#34;&lt;/span&gt; stx &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datatype&lt;/span&gt;))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;with-syntax&lt;/span&gt; ([pred (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-pred-stx&lt;/span&gt; dt)]
                     [(&lt;span style=&#34;color:#a6e22e&#34;&gt;orig-variant&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) (map vt-name-stx (&lt;span style=&#34;color:#a6e22e&#34;&gt;dt-variants&lt;/span&gt; dt))])
         &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(provide datatype pred orig-variant &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)))]))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; define-datatype cases provide-datatype)



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;基本形式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; typename type-predicate-name
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;varient-name&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;field-name&lt;/span&gt; predicate)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;*)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;+
)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;cases&lt;/span&gt; type-name expression
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;variant-name&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;field-name&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;*) consequent)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;*
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;default)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般type-predicate-name 和predicate 都是胃词判断&lt;/p&gt;
&lt;h2 id=&#34;lambda-church&#34;&gt;lambda church&lt;/h2&gt;
&lt;p&gt;lambda church expression(lc-exp)::=identifier
::=(lambda (identifier) Lc-exp
::=(lc-exp lc-exp)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; lc-exp lc-exp?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;var-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; identifier?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bound-var&lt;/span&gt; identifier?)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; lc-exp?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;app-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rator&lt;/span&gt; lc-exp?)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt; lc-exp?))
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;S-list::=({s-exp}*)
s-exp:=Symbol|S-list&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; s-list s-list?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty-s-list&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;non-empty-s-list&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; s-exp?)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; s-list?))
)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-datatype&lt;/span&gt; s-exp s-exp?
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-s-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sym&lt;/span&gt; symbol?))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;s-list-s-exp&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;slst&lt;/span&gt; s-list?))
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-1&#34;&gt;进一步使用？&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>基于continuation的cps表达式，保存计算过程</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/17/ji-yu-continuationde-cpsbiao-da-shi-bao-cun-ji-suan-guo-cheng/</link>
      <pubDate>Wed, 17 Feb 2016 16:55:50 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/17/ji-yu-continuationde-cpsbiao-da-shi-bao-cun-ji-suan-guo-cheng/</guid>
      <description>&lt;p&gt;CPS其实是实现branch分支的一种scheme技术，对于程序流程的控制具有
重要的作用。下面就一个细节对CPS进行简单说明。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;r &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;call/cc&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;r k)
(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

结果&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;     ==&amp;gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;     ==&amp;gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    ==&amp;gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
分析&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;
    一般形式是 (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; [])
    []代表着continuation的值&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;而整个continuation的返回值确是(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; [c])
    在第一种情况下是3,紧接着0,最后10

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-3&#34;&gt;如果改变+1 为+3呢？&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;call/cc&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;r k)
(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

结果:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;     ==&amp;gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;     ==&amp;gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    ==&amp;gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)


分析&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;
    一般形式是 (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; [])
    []代表着continuation的值&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;而整个continuation的返回值确是(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; [c])
    在第一种情况下是3,紧接着0,最后10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cps&#34;&gt;CPS分析最好记住下面的分析方法&lt;/h2&gt;
&lt;p&gt;具体的过程参考&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/&#34;&gt;Dead_Program&lt;/a&gt;,包括rember8的修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt; trace (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))

ls | k

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) | (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x) = id
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)   | (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; (cons &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; x))) = k2
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)     | (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k2&lt;/span&gt; (cons &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; x))) = k3  ==&amp;gt;不断存储计算结果

Once we hit the &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; we apply (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cdr ls)) where k is k3 &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;ls is &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;k3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) = (&lt;span style=&#34;color:#a6e22e&#34;&gt;k2&lt;/span&gt; (cons &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))      ==&amp;gt; what is k2?
(&lt;span style=&#34;color:#a6e22e&#34;&gt;k2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) = (&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; (cons &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))  ==&amp;gt; what is id?
(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)            ==&amp;gt; what is final result?

And we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re&lt;/span&gt; done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之所以写这个note的目的也是为了能够分析continuation的返回值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scheme IO实现来自于CPS或者haskell的monod范畴思想</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/17/scheme-ioshi-xian-lai-zi-yu-cpshuo-zhe-haskellde-monodfan-chou-si-xiang/</link>
      <pubDate>Wed, 17 Feb 2016 10:58:46 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/17/scheme-ioshi-xian-lai-zi-yu-cpshuo-zhe-haskellde-monodfan-chou-si-xiang/</guid>
      <description>&lt;p&gt;scheme中IO的实现类似于CPS在原来函数的基础上增加了一个控制变量。&lt;/p&gt;
&lt;p&gt;之前曾经写过&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/&#34;&gt;CPS的控制过程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;original-style&#34;&gt;original style&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (cdr ls)]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls)))])))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cps-style&#34;&gt;cps style&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())]                           ==&amp;gt; k
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (cdr ls)]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls)))])))

&lt;span style=&#34;color:#75715e&#34;&gt;;2&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cdr ls))]                  ==&amp;gt;k
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (cons (car ls) x)))]))) ==&amp;gt; rember8

&lt;span style=&#34;color:#75715e&#34;&gt;;3&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cdr ls))]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cons (car ls) x)))]))) ==&amp;gt;  k 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个k的作用将在IO中体现出来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;o (open-output-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeting.txt&amp;#34;&lt;/span&gt;))
(display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; o)
(write-char &lt;span style=&#34;color:#e6db74&#34;&gt;#\space&lt;/span&gt; o)
(display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;world&lt;/span&gt; o)
(newline o)
(close-output-port o)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;结果：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/greeting.png&#34; alt=&#34;result&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;io&#34;&gt;其他IO语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open-input-file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;打开文件句柄 用于读操作&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;in10 (open-input-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;greeting.txt&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;;;利用read-char 读取单个字符char&lt;/span&gt;
(read-char in10)
(read-char in10)
(read-char in10)
&lt;span style=&#34;color:#75715e&#34;&gt;;;利用read 读取一个字word&lt;/span&gt;
(read in10)
(read in10)
&lt;span style=&#34;color:#75715e&#34;&gt;;;利用read-line读取一行字符&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;read-line&lt;/span&gt; in10)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;read-line&lt;/span&gt; in10)
(read in10)

&lt;span style=&#34;color:#75715e&#34;&gt;;;结果&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;#\h&lt;/span&gt;             ==&amp;gt;read-char
    &lt;span style=&#34;color:#e6db74&#34;&gt;#\e&lt;/span&gt;             ==&amp;gt;read-char
    &lt;span style=&#34;color:#e6db74&#34;&gt;#\l&lt;/span&gt;             ==&amp;gt;read-char
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lo&lt;/span&gt;             ==&amp;gt;read
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;world&lt;/span&gt;          ==&amp;gt;read
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;              ==&amp;gt;read-line
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;made in DaXi&amp;#34;&lt;/span&gt;  ==&amp;gt;read-line
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&amp;lt;eof&amp;gt;          ==&amp;gt;read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;open-input-string&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;i (&lt;span style=&#34;color:#a6e22e&#34;&gt;open-input-string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;))
 (read-char i)
    &lt;span style=&#34;color:#e6db74&#34;&gt;#\h&lt;/span&gt;       ==&amp;gt;read-char
 (read-char i)
    &lt;span style=&#34;color:#e6db74&#34;&gt;#\e&lt;/span&gt;       ==&amp;gt;read-char
 (read-char i)
    &lt;span style=&#34;color:#e6db74&#34;&gt;#\l&lt;/span&gt;       ==&amp;gt;read-char
 (read i)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lo&lt;/span&gt;       ==&amp;gt;read
 (read i)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;world&lt;/span&gt;    ==&amp;gt;read
 (read i)
    &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&amp;lt;eof&amp;gt;    ==&amp;gt;read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;open-output-string&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;定义字符串变量&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;op (&lt;span style=&#34;color:#a6e22e&#34;&gt;open-output-string&lt;/span&gt;))
(write &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&lt;/span&gt; op)
(write-char &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; op)
(display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; op)
(display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; op)

&lt;span style=&#34;color:#75715e&#34;&gt;;;获取存取的值&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-output-string&lt;/span&gt; op)


&lt;span style=&#34;color:#75715e&#34;&gt;;;结果&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello,world&amp;#34;&lt;/span&gt;    ==&amp;gt; get-output-string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中o的作用其实就是类似于k的作用，都是体现者一种程序的控制一种续延（具体未讲的十分清楚，待以后补充load等）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>let and letrec makes programming orient object</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/16/let-and-letrec-makes-programming-orient-object/</link>
      <pubDate>Tue, 16 Feb 2016 21:35:15 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/16/let-and-letrec-makes-programming-orient-object/</guid>
      <description>&lt;p&gt;面向对象已经大行其道，而在scheme是如何实现，本文仅仅是刹那的思路，
可以通过let来定义局部变量，而可以通过letrec定义method的过程来实现
面向对象的数据抽象的能力。&lt;/p&gt;
&lt;h2 id=&#34;let-&#34;&gt;let 不具备局部传递功能&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;;; x的值不会影响到局部变量的值&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
   (list  x y z))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;;;x的值会影响到局部变量的值&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
   (list  x y z))

&lt;span style=&#34;color:#75715e&#34;&gt;;结果&lt;/span&gt;
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;let&#34;&gt;第一次注意看let的实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-syntax&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;syntax-rules &lt;/span&gt;()
        ((&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; expr) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) body &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) body &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) expr &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(let ((x 2) (y 3)) (+  x y)) 转变为
((lambda (x y) (+ x y)) 2 3) 的形式.&lt;/p&gt;
&lt;h2 id=&#34;let-star-&#34;&gt;let star 具备局部传递功能&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let* &lt;/span&gt;(( x  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;  x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
  (list x  y z))


&lt;span style=&#34;color:#75715e&#34;&gt;;结果&lt;/span&gt;
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外有一种叫做fluid-let的暂时没有在这边出现&lt;/p&gt;
&lt;h2 id=&#34;letrec-&#34;&gt;letrec 具备自指的能力(递归)&lt;/h2&gt;
&lt;p&gt;如果想定义一个procedure局部变量？
如果用let 或者let*都无法达到此目的，因为他们不能自指（也就是没有递归的能力）
而如果是letrec则是拥有此功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;my-even?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-odd?&lt;/span&gt; (-  x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-odd?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-even?&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-even?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-odd?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;;只会打印出最后一个结果&lt;/span&gt;
  )


&lt;span style=&#34;color:#75715e&#34;&gt;;结果&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;named-let-letrec&#34;&gt;Named Let 一种更加紧凑的letrec&lt;/h3&gt;
&lt;p&gt;在上文，let是用来指定局部变量，而letrec是来指定procedure，
现在我们可以用Named let来使letrec写起来更加紧凑些，但是
不适合书写多个局部方法的情况，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;letrec &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;countdown&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(= i &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ole&lt;/span&gt;
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                           (display i)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;newline&lt;/span&gt;)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;countdown&lt;/span&gt; (- i &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;countdown&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)) 

结果:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ole&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;countdown ((&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= i &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ole&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
       (display i)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;newline&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;countdown&lt;/span&gt; (- i &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))

结果:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ole&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;进一步实现留待以后&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Engine your life</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/16/engine-your-life/</link>
      <pubDate>Tue, 16 Feb 2016 17:26:03 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/16/engine-your-life/</guid>
      <description>&lt;p&gt;有很多时候在思考engine是什么东西？
偶尔在一本书中看到Engine包含三个部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;clock ticks时间戳（什么时候做什么事情）&lt;/li&gt;
&lt;li&gt;success procedure&lt;/li&gt;
&lt;li&gt;failure procedure&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就是一个Engine交代了按照时间的发展，满足某个条件
该做什么事情，如果失败了该做什么东西。
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/life/listen.jpg&#34; alt=&#34;listen&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/15/data-representation-the-same-interface-with-different-implementation/&#34;&gt;博文&lt;/a&gt;并未详细说出一个数据抽象Data Abstraction 其实就是由基本的
创建部分和判断部分两部分组成。创建部分也叫做constructor比如上一篇&lt;a href=&#34;http://jueqingsizhe66.github.io/blog/2016/02/15/data-representation-the-same-interface-with-different-implementation/&#34;&gt;博文&lt;/a&gt;的
zero，successor，predecessor。而判断部分也叫做胃词部分predicate。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;constructor
&lt;ul&gt;
&lt;li&gt;add&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;modify&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;observer
&lt;ul&gt;
&lt;li&gt;false?&lt;/li&gt;
&lt;li&gt;null?&lt;/li&gt;
&lt;li&gt;zero?&lt;/li&gt;
&lt;li&gt;atom?&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而综合Engine和Data Abstraction,其实Engine也是由着constructor和observer两部分组成进行数据抽象，只不过可能引入时间的概念。&lt;/p&gt;
&lt;p&gt;而下午坐在山间，感受着潺潺的流水，Engine正如这潺潺的泉水&lt;img src=&#34;https://jueqingsizhe66.github.io/images/life/waterDown.jpg&#34; alt=&#34;waterDown&#34;&gt;，绵绵不息。一直想着让程序中复合哲学、心理门，
多一些人情味，而不是机器的呆板味。而Engine的CPS思想正好让程序体现的变化和流动的感觉，犹如潺潺的泉水,遇物则绕，有路则行。&lt;/p&gt;
&lt;p&gt;一盘池水，流下了似水流年，规则依然
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/life/reservoir.jpg&#34; alt=&#34;shuiku&#34;&gt;&lt;/p&gt;
&lt;p&gt;坚信&lt;strong&gt;任何科学问题都可以通过子语言进行求解&lt;/strong&gt;，当前语言无法解决只能说现在的语言对问题的解释不清楚，得进一步进行&lt;strong&gt;语言分层&lt;/strong&gt;,
&lt;a href=&#34;http://tianchunbinghe.blog.163.com/blog/static/7001201542402420584/&#34;&gt;每一个未解之谜都是要被解开的。&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data Representation-The Same interface with Different implementation</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/15/data-representation-the-same-interface-with-different-implementation/</link>
      <pubDate>Mon, 15 Feb 2016 16:39:26 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/15/data-representation-the-same-interface-with-different-implementation/</guid>
      <description>&lt;p&gt;我们设定一个接口，该接口实现包括三个constructor和1个observer&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;zero&lt;/li&gt;
&lt;li&gt;successor&lt;/li&gt;
&lt;li&gt;predecessor&lt;/li&gt;
&lt;li&gt;zero?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然也可以拓展该接口包括scheme-val-&amp;gt;my-val,my-val-&amp;gt;scheme-val,plus等。
下面看一下如何实现三个相同接口的实现，从而体味data abstraction(data
representation or data boundary).&lt;/p&gt;
&lt;h2 id=&#34;unary-implementation&#34;&gt;unary implementation&lt;/h2&gt;
&lt;h3 id=&#34;heading&#34;&gt;辅助测试程序&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define-syntax &lt;/span&gt;equal??
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;syntax-rules &lt;/span&gt;()
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; test-exp correct-ans)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;evaluate-ans&lt;/span&gt; test-exp))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(not (equal? evaluate-ans correct-ans))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~s returned ~s~%, should have returned ~s~%&amp;#34;&lt;/span&gt;
                 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-exp&lt;/span&gt;
                 evaluate-ans
                 correct-ans)
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OK&lt;/span&gt;)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;report-unit-tests-completed
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn-name&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unit tests completed: ~s~%&amp;#34;&lt;/span&gt; fn-name)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;zero (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-zero? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (null? n)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;successor (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (cons &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt; n)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;predecessor (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (cdr n)))
  
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;plus
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;  y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-zero?&lt;/span&gt; x)
         y
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;successor&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt; x) y)))))
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;report-unit-tests-completed&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unary-representation&lt;/span&gt;)
  )

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scheme-value-implementation&#34;&gt;scheme value implementation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;let&lt;/span&gt;()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt; zero (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-zero? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (zero? n)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;successor (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;predecessor (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;plus
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-zero?&lt;/span&gt; x)
         y
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;successor&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt; x) y)))))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~s test completed.~% &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scheme-number-presentation&lt;/span&gt;)
  )


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-inverse-implementation&#34;&gt;5-inverse implementation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;zero (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-zero? (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (=  n &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;successor (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;predecessor (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;plus
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-zero?&lt;/span&gt; x)
         y
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;successor&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt; x) y)))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;scheme-int-&amp;gt;my-int
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;successor&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;scheme-int-&amp;gt;my-int&lt;/span&gt;  (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;my-int-&amp;gt;scheme-int
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-zero?&lt;/span&gt; n) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
         (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-int-&amp;gt;scheme-int&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt; n))))))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal??&lt;/span&gt;
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-int-&amp;gt;scheme-int&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;scheme-int-&amp;gt;my-int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;scheme-int-&amp;gt;my-int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)))
   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~s unit tested completed&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reverse-number-representation&lt;/span&gt;)
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-1&#34;&gt;拓展整体的接口程序&lt;/h2&gt;
&lt;p&gt;在上面的(let &amp;hellip;.) 中都可以添加如下的接口slots,
你会发现他们的实现在任意一种实现都是一样的过程，只要4个基本接口
实现一样那他们的result is the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;scheme-int-&amp;gt;my-int
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;successor&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;scheme-int-&amp;gt;my-int&lt;/span&gt;  (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;my-int-&amp;gt;scheme-int
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-zero?&lt;/span&gt; n) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
         (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;my-int-&amp;gt;scheme-int&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt; n))))))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;plus
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-zero?&lt;/span&gt; x)
         y
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;successor&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt; x) y)))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过者三个实现过程认识[v] is the data representation of the v in certain
interface. 只要确定接口，那么实现有n种情况只要满足你的要求，从而达到问题的
求解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>shuffle cards</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/14/shuffle-cards/</link>
      <pubDate>Sun, 14 Feb 2016 14:37:43 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/14/shuffle-cards/</guid>
      <description>&lt;p&gt;这个程序是参考&lt;a href=&#34;http://www.oschina.net/code/snippet_2363209_47912&#34;&gt;洗牌&lt;/a&gt;而来，主要定位于scheme的算法运用实现。&lt;/p&gt;
&lt;p&gt;源代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket
&lt;span style=&#34;color:#75715e&#34;&gt;;四种花色分别为黑桃(spade)、红心(heart)、梅花(club)、方块(diamond)&lt;/span&gt;
 
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;suits &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;王&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;黑桃&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;红桃&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;梅花&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;方块&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;faces &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;))
 
&lt;span style=&#34;color:#75715e&#34;&gt;;生成一张牌&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;creat-card&lt;/span&gt; suit face)
    (cons suit face)
)
&lt;span style=&#34;color:#75715e&#34;&gt;;生成n副牌&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;creat-cards&lt;/span&gt; n mysuits myfaces)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;afaces&lt;/span&gt; suit myfaces)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? myfaces)
                    myfaces
                    (append (list (&lt;span style=&#34;color:#a6e22e&#34;&gt;creat-card&lt;/span&gt; suit (car myfaces))) 
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;afaces&lt;/span&gt; suit (cdr myfaces))
                     
                    )
                )
        )
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;asuits&lt;/span&gt; suits myfaces)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? suits)
                    suits
                    (append  (&lt;span style=&#34;color:#a6e22e&#34;&gt;afaces&lt;/span&gt; (car suits) myfaces)
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;asuits&lt;/span&gt; (cdr suits) myfaces)
                    )
                 
                )
         
        )
         
        &lt;span style=&#34;color:#75715e&#34;&gt;;(make-list n (asuits mysuits myfaces))&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n-cards&lt;/span&gt; n alist return) 
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= n &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                    return
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;n-cards&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) alist (append return alist))
                )
        )
        &lt;span style=&#34;color:#75715e&#34;&gt;;(n-cards 4 &amp;#39;(a b c d e) &amp;#39;())&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;n-cards&lt;/span&gt; n (&lt;span style=&#34;color:#a6e22e&#34;&gt;asuits&lt;/span&gt; mysuits myfaces) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
)
&lt;span style=&#34;color:#75715e&#34;&gt;;显示牌 &lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;print-cards&lt;/span&gt; alist &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; number)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; alist n num)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (remainder n num))
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;newline&lt;/span&gt;)
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ok&lt;/span&gt;
                )
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? alist)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;newline&lt;/span&gt;)
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;begin &lt;/span&gt;(display (car alist)) 
                           (display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; (cdr alist) (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) num)
                    )
                )
        )
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? number)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; alist &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; alist &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (car number))
        )
)
&lt;span style=&#34;color:#75715e&#34;&gt;;获取牌的花色&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-suit&lt;/span&gt; card)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;黑桃&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;红桃&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;梅花&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;方块&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;王&amp;#34;&lt;/span&gt;)   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                 )
     )
     
     (car card)
    )
)
 
&lt;span style=&#34;color:#75715e&#34;&gt;;获取牌的数值&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-face&lt;/span&gt; card)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
                       ((equal? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
                 )
     )
     
     (cdr card)
    )
)
&lt;span style=&#34;color:#75715e&#34;&gt;;洗牌&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle-card&lt;/span&gt; cards)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;append-amb&lt;/span&gt; x y return)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? x) (null? y)) return)
                      ((null? x) (append return y))
                      ((null? y) (append return x))
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;     (&lt;span style=&#34;color:#a6e22e&#34;&gt;append-amb&lt;/span&gt; (cdr y) 
                                             (cdr x) 
                                             (append return (append (list (car x)) (list (car y))))
                                 )
                      )
                 
                )
             
        )
        &lt;span style=&#34;color:#75715e&#34;&gt;;--&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt; scards)
                ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) 
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;append-amb&lt;/span&gt; (list-tail scards x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-head&lt;/span&gt; scards x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt; (length scards))
                  
                )
        )
        &lt;span style=&#34;color:#75715e&#34;&gt;;--&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; cards n)
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= n &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                    cards
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt; cards) (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
                )
        )
        &lt;span style=&#34;color:#75715e&#34;&gt;;--&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; cards (length cards))
        &lt;span style=&#34;color:#75715e&#34;&gt;;(shuffle cards)&lt;/span&gt;
)
&lt;span style=&#34;color:#75715e&#34;&gt;;分牌(deal-card &amp;#39;(1 2 3 4 5 6 7 8) 4) =&amp;gt; return ((1 5) (2 6) (3 7) (4 8))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;还没完成&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;deal-card&lt;/span&gt; alist n)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; alist n return)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? alist)
                return
                &lt;span style=&#34;color:#75715e&#34;&gt;;(append )&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ok&lt;/span&gt;
            )
        )
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; alist n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
             
)
&lt;span style=&#34;color:#75715e&#34;&gt;;--------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;返回list中k以前的sublist&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list-head&lt;/span&gt; lst k)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? k)
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()
        (append (list (car lst)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-head&lt;/span&gt; (cdr lst) (- k &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) )
     
    )
)
&lt;span style=&#34;color:#75715e&#34;&gt;;-------------test---------------&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;x (&lt;span style=&#34;color:#a6e22e&#34;&gt;creat-card&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;梅花&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;k (&lt;span style=&#34;color:#a6e22e&#34;&gt;creat-cards&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (cdr suits) (cdr (cdr faces))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;print-cards&lt;/span&gt; k)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;print-cards&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-head&lt;/span&gt; k &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;print-cards&lt;/span&gt; (list-tail k &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;(print-cards (shuffle-card k))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(display (shuffle-card n))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;运行结果&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;(黑桃 . A)  (黑桃 . 2)  (黑桃 . 3)  (黑桃 . 4)  (黑桃 . 5)  
(黑桃 . 6)  (黑桃 . 7)  (黑桃 . 8)  (黑桃 . 9)  (黑桃 . 10)  
(黑桃 . J)  (黑桃 . Q)  (黑桃 . K)  (红桃 . A)  (红桃 . 2)  
(红桃 . 3)  (红桃 . 4)  (红桃 . 5)  (红桃 . 6)  (红桃 . 7)  
(红桃 . 8)  (红桃 . 9)  (红桃 . 10)  (红桃 . J)  (红桃 . Q)  
(红桃 . K)  (梅花 . A)  (梅花 . 2)  (梅花 . 3)  (梅花 . 4)  
(梅花 . 5)  (梅花 . 6)  (梅花 . 7)  (梅花 . 8)  (梅花 . 9)  
(梅花 . 10)  (梅花 . J)  (梅花 . Q)  (梅花 . K)  (方块 . A)  
(方块 . 2)  (方块 . 3)  (方块 . 4)  (方块 . 5)  (方块 . 6)  
(方块 . 7)  (方块 . 8)  (方块 . 9)  (方块 . 10)  (方块 . J)  
(方块 . Q)  (方块 . K)  

(黑桃 . A)  (黑桃 . 2)  (黑桃 . 3)  (黑桃 . 4)  (黑桃 . 5)  
(黑桃 . 6)  (黑桃 . 7)  (黑桃 . 8)  (黑桃 . 9)  

(黑桃 . 10)  (黑桃 . J)  (黑桃 . Q)  (黑桃 . K)  (红桃 . A)  (红桃 . 2)  (红桃 . 3)  (红桃 . 4)  (红桃 . 5)  (红桃 . 6)  (红桃 . 7)  (红桃 . 8)  (红桃 . 9)  
(红桃 . 10)  (红桃 . J)  (红桃 . Q)  (红桃 . K)  (梅花 . A)  (梅花 . 2)  (梅花 . 3)  (梅花 . 4)  (梅花 . 5)  (梅花 . 6)  (梅花 . 7)  (梅花 . 8)  (梅花 . 9)  
(梅花 . 10)  (梅花 . J)  (梅花 . Q)  (梅花 . K)  (方块 . A)  (方块 . 2)  (方块 . 3)  (方块 . 4)  (方块 . 5)  (方块 . 6)  (方块 . 7)  (方块 . 8)  (方块 . 9)  
(方块 . 10)  (方块 . J)  (方块 . Q)  (方块 . K)  
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>斯基摩斯的乐园schemers</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/14/si-ji-mo-si-de-le-yuan-schemers/</link>
      <pubDate>Sun, 14 Feb 2016 14:11:54 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/14/si-ji-mo-si-de-le-yuan-schemers/</guid>
      <description>&lt;p&gt;作为一个schemer，你得去学习，编程，社交，工作，保持畅通等,
当然你最不该错过的是&lt;a href=&#34;http://www.schemers.org/&#34;&gt;斯基摩斯的乐园&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;学习&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;textbooks书本&lt;/li&gt;
&lt;li&gt;videos&lt;/li&gt;
&lt;li&gt;blogs&lt;/li&gt;
&lt;li&gt;standards 标准手册&lt;/li&gt;
&lt;li&gt;tutorials 入门书籍&lt;/li&gt;
&lt;li&gt;bibliography 参考文献&lt;/li&gt;
&lt;li&gt;other documents 其他文档&lt;/li&gt;
&lt;li&gt;education 教育&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上几个部分可以完成你学习的过程。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;编程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;implementation 通过实现一门语言&lt;/li&gt;
&lt;li&gt;libraries 通过调用库&lt;/li&gt;
&lt;li&gt;environments 通过搭建环境 了解环境&lt;/li&gt;
&lt;li&gt;Scheme Requests for Implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;社交&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;中国lisp组织&lt;/li&gt;
&lt;li&gt;google讨论组&lt;/li&gt;
&lt;li&gt;开发者邮箱&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;工作&lt;/h2&gt;
&lt;p&gt;从工作中获得消息&lt;/p&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;保持畅通&lt;/h2&gt;
&lt;p&gt;从一些具体的新闻事件中获取消息&lt;/p&gt;
&lt;h2 id=&#34;heading-5&#34;&gt;斯基摩斯清单&lt;/h2&gt;
&lt;p&gt;具体下面的事项参看&lt;a href=&#34;http://www.schemers.org/&#34;&gt;首页&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;case &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;what-would-you-like-to-do?&lt;/span&gt;)
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;learn&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;choose-from&lt;/span&gt; FAQ
                textbooks
                videos
                blogs
                standards
                tutorials
                bibliography
                other documents
                education))
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;program&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;choose-from&lt;/span&gt; implementations
                libraries
                environments
                SRFIs))
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;socialize&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;choose-from&lt;/span&gt; ABQ Lisp/Scheme - Albuquerque, NM, USA
                Chinese Lisp Users Group - China
                Bay Area Lisp &amp;amp; Scheme - Bay Area, CA, USA
                Scheme Boston &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;Boston Lisp Announce - Boston, MA, USA
                Denver Lispers - Denver, CO, USA
                Scheme UK - London, UK
                munich-lisp - Munich, Germany
                CRACL - Los Angeles, CA, USA
                Lambdaheads - Vienna, Austria
                FringeDC - Washington, DC, USA))
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;work&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;choose-from&lt;/span&gt; jobs))
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;stay-informed&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;choose-from&lt;/span&gt; events))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;choose-from&lt;/span&gt; the lighter side
                wares
                other resources)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>chicken-scheme</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/14/chicken-scheme/</link>
      <pubDate>Sun, 14 Feb 2016 13:52:48 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/14/chicken-scheme/</guid>
      <description>&lt;p&gt;它的主要住用适用于产生exe文件，并且对应产生的c代码更加的有效，
运行效率较高。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;产生可运行文件&lt;/h2&gt;
&lt;p&gt;该可运行的文件是通过chicken生成egg文件，也就是c语言,然后编译成机器代码。
所以运行效率更高一些。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;; hello-world.scm&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Running it interpreted:&lt;/span&gt;
$ csi -s hello-world&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scm 
Hello, world!

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Compiling and running the executable binary:&lt;/span&gt;
$ csc hello-world&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scm 

$ &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;/hello-world
Hello, world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://www.call-cc.org/&#34;&gt;chicken-scheme&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes from Teach yourself scheme</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/14/notes-from-teach-yourself-scheme/</link>
      <pubDate>Sun, 14 Feb 2016 11:56:24 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/14/notes-from-teach-yourself-scheme/</guid>
      <description>&lt;p&gt;The notes is published for rethinking what I am reading
in the book called [《Teach Yourself Scheme in Fixnum Days》][3].
It is a good book for introducing scheme(you&#39;d better have read
the TLS)&lt;/p&gt;
&lt;h2 id=&#34;forms&#34;&gt;Forms&lt;/h2&gt;
&lt;p&gt;All expression can be inducted into Forms,such as define,begin,set! forms.
Before, I only said the define,begin,set! expression without forms.&lt;/p&gt;
&lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;vector&lt;/li&gt;
&lt;li&gt;procedure&lt;/li&gt;
&lt;li&gt;port (原来port也是数据类型的一种，这样就并入了文件的IO)
当然也包括open-string-port相当于创建了fortran的[内部文件][4]的作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所有的形式(forms)在scheme其实都是一种对于数据的representation.要反复思考这个过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Data abstraction divides a data type into two pieces: an interface
and an implementation. The interface tells us what the data of the type
represents,what the operations on the data are,and what properties these
operations may be relied to have.The implementation provides a specific
representation of the data and code for the operations that make use
of that data representation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;implicit-and-explicit&#34;&gt;implicit and explicit&lt;/h2&gt;
&lt;p&gt;lambda 的内部自带(begin &amp;hellip;)的作用，也就是可以连接多个expressions（forms）。
而if没有，对应的when，unless conditions则是存在隐式的implicit begin的作用。
并且when和unless其实就差在一个not表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lambda implicit begin&lt;/li&gt;
&lt;li&gt;when   implicit begin&lt;/li&gt;
&lt;li&gt;unless implicit begin&lt;/li&gt;
&lt;li&gt;if     explicit begin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;macro-expansion&#34;&gt;macro expansion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;`(.. , &amp;hellip;)    叫做comon 形式&lt;/li&gt;
&lt;li&gt;`(&amp;hellip; ,@ &amp;hellip;)  叫做comon slice形式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;jumpscps&#34;&gt;Jumps(CPS)&lt;/h2&gt;
&lt;p&gt;Continuation is the special contribution of the book.&lt;/p&gt;
&lt;p&gt;[很多其他的scheme解释器和编译器.][1] [Mit_scheme][2]
[1]: &lt;a href=&#34;http://tunes.org/wiki/scheme.html&#34;&gt;http://tunes.org/wiki/scheme.html&lt;/a&gt;
[2]: &lt;a href=&#34;http://groups.csail.mit.edu/mac/projects/scheme/index.html&#34;&gt;http://groups.csail.mit.edu/mac/projects/scheme/index.html&lt;/a&gt;
[3]: &lt;a href=&#34;http://ds26gte.github.io/tyscheme/index.html&#34;&gt;http://ds26gte.github.io/tyscheme/index.html&lt;/a&gt;
[4]: &lt;a href=&#34;http://v.fcode.cn/video-internal_file.html&#34;&gt;http://v.fcode.cn/video-internal_file.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Different data types decide the different operations</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/13/different-data-types-decide-the-different-operations/</link>
      <pubDate>Sat, 13 Feb 2016 13:33:06 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/13/different-data-types-decide-the-different-operations/</guid>
      <description>&lt;p&gt;Data types such as list,vector,array,linkedlist,tree etc, all have the self operations
to add,delete,modify the content referred.&lt;/p&gt;
&lt;h2 id=&#34;list&#34;&gt;List&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;list-sum
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lst&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? lst)
       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
       (+ (car lst) (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-sum&lt;/span&gt; (cdr lst))))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vector&#34;&gt;Vector&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;vector-sum
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vec&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;vector-sum-help
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vec&lt;/span&gt; n)
        &lt;span style=&#34;color:#75715e&#34;&gt;;(if (eq? n 0)&lt;/span&gt;
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
             (vector-ref vec &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
             (+ (vector-ref vec n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-sum-help&lt;/span&gt; vec (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; (vector-length vec)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
         &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-sum-help&lt;/span&gt; vec (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))) &lt;span style=&#34;color:#75715e&#34;&gt;;;;wrong  (n)&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-sum&lt;/span&gt; (vector &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-box-function-in-the-tss&#34;&gt;The box function in the TSS&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;     box 的作用虽然有点类似 kons kar kdr
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kons (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt; kdr) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt; kar kdr))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kar (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; d) a))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kdr (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; d) d))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kdr2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; d) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;d)))))

    (&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt;))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;kdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt;))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;kdr2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Now let&#39;s see the function of the box.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; it)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sel&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;sel&lt;/span&gt; it (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;)
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;it new)))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;setbox&lt;/span&gt; box new)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt; set)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; new))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unbox&lt;/span&gt; box)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt; set)
           it)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;我们使用的前提是通过box进行cons的作用
比如setbox
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    ((lambda (it set) (set new)) it (lambda (new) (set! it new)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是 it对一个it 而set对应 (lambda (new) (set! it new))
所以这边真正起作用的就是第一个lambda里面的(set new)返回值
比如unbox&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    ((lambda (it set) it) it (lambda (new) (set! it new)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是此时 it依然对应it set对应的是(lambda (new) (set! it new))
所以这边真正起作用的就是第一个lambda里面的it返回值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;所以box只不过是提供了一种映射结构，想到那关于数据结构的创建，把所有的基于这个框架的
变体放入首个位置，类似closure的table位置
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>It&#39;s a dead program.How to let it alive?</title>
      <link>https://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/</link>
      <pubDate>Tue, 09 Feb 2016 23:20:18 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2016/02/09/its-a-dead-program-dot-how-to-let-it-alive/</guid>
      <description>&lt;p&gt;All programs are data.
All intepreters are program.
All Handware and software,or type checkers etc are interpreter.&lt;/p&gt;
&lt;p&gt;I think data conceives the soul,not only the fixed process,but changing vari-language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1&#34;&gt;1.The Little Scheme interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2&#34;&gt;2.The Season Scheme interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3&#34;&gt;3.The CPS control struture&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#3.1&#34;&gt;3.1 how to add arguments?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3.2&#34;&gt;3.2 what is the small stuff?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4&#34;&gt;4. how to evaluate or interpreter  a procedre?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#4.1&#34;&gt;4.1 ordinary tracing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4.2&#34;&gt;4.2 cps tracing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5&#34;&gt;5. It is not the end&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here below is the interpreter from TLS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket
&lt;span style=&#34;color:#75715e&#34;&gt;;;简单环境配置&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))


    &lt;span style=&#34;color:#75715e&#34;&gt;;第一大部分 定义好整体框架&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;meaning
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;expression-to-action&lt;/span&gt; e) e table)))

    &lt;span style=&#34;color:#75715e&#34;&gt;;;第二大部分 解析atom and list action&lt;/span&gt;

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expression-to-action
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom-to-action&lt;/span&gt; e))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list-to-action&lt;/span&gt; e)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom-to-action
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((number? e) *const)
       ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) *const)
       ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cons)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;car)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;null?)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;atom?)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;zero?)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;add1)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;sub1)) *const)
       ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;number?)) *const)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*identifier))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;list-to-action
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car e))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;quote))
          *quote)
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;lambda))
          *lambda)
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cond))
          *cond)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application)))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; 第三大部分 定义 6星==5个special forms 和一个general forms（*application)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;;;环境额外配置 这些配置仅仅是为了增加可读性 无任何编程技巧&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;first
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car p)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;second
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;car (cdr p)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;third
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;car (cdr (cdr p))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;text-of second)
    &lt;span style=&#34;color:#75715e&#34;&gt;;; *identifier&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;table-of first)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;formals-of second)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;body-of third)
    &lt;span style=&#34;color:#75715e&#34;&gt;;;*cond&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;question-of first)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;answer-of second)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;cond-lines-of cdr)
    &lt;span style=&#34;color:#75715e&#34;&gt;;;*application&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;function-of car)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;arguments-of cdr)

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;build
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons s1
              (cons s2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))))))
    &lt;span style=&#34;color:#75715e&#34;&gt;;;1st star&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*const
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((number? e) e)
       ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
       ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive) e)))))
    &lt;span style=&#34;color:#75715e&#34;&gt;;;2nd star&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*quote
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;text-of&lt;/span&gt; e)))
    &lt;span style=&#34;color:#75715e&#34;&gt;;;3rd star&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*lambda
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive)
       (cons table (cdr e)))))
    &lt;span style=&#34;color:#75715e&#34;&gt;;;4th star&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*identifier
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; e table initial-table)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;initial-table
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
      (car (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-table
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; table table-f)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? table) (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt; name))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry&lt;/span&gt; name
              (car table)
              &lt;span style=&#34;color:#75715e&#34;&gt;; (lambda (name)&lt;/span&gt;
                  &lt;span style=&#34;color:#75715e&#34;&gt;; (cdr table)&lt;/span&gt;
                  &lt;span style=&#34;color:#75715e&#34;&gt;; (table-f)))))))&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; name
  (cdr table)
  table-f)))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-entry
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; entry entry-f)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry-help&lt;/span&gt; name
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; entry)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; entry)
       entry-f)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-entry-help
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; names values entry-f)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? names) (&lt;span style=&#34;color:#a6e22e&#34;&gt;entry-f&lt;/span&gt; name))
       ((eq? (car names) name)
        (car values))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry-help&lt;/span&gt; name
              (cdr names)
              (cdr values)
              entry-f)))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; 5th star&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*cond
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-lines-of&lt;/span&gt; e) table)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evcon
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;else?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines))
         table))
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines))
         table)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines))
         table))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (cdr lines) table)))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;else?
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) (eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;else)))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))


    &lt;span style=&#34;color:#75715e&#34;&gt;;;6th star 你需要解析arguments的各个部分这是evlis的工作&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*application
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;function-of&lt;/span&gt; e) table)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments-of&lt;/span&gt; e) table))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evlis
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? args) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (car args) table)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (cdr args) table))))))


    &lt;span style=&#34;color:#75715e&#34;&gt;;;第四大部分 进行 apply的定义 反向运用primitive和non-primitive 去除核心的primitive和non-primitive前缀，并升级环境&lt;/span&gt;

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt; vals)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;primitive?&lt;/span&gt; fun)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-primitive&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; fun) vals))
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;non-primitive?&lt;/span&gt; fun)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-closure&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; fun) vals)))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;primitive?
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;non-primitive?
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-primitive
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; vals)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cons))
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; vals)))
       ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;car))
        (car (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
       ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr))
         (cdr (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;null?))
         (null? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?))
         (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;atom?))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;:atom?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;zero?))
         (zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;add1))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;sub1))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
        ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;number?))
         (number? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;:atom?
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
       ((null? x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
       ((eq? (car x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive))
&lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
       ((eq? (car x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive))
&lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;;closure=table+arguments+body ;;arguments 通过formals-of获取 body-of获取body&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-closure
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;closure&lt;/span&gt; vals)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body-of&lt;/span&gt; closure)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-table&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;new-entry&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;formals-of&lt;/span&gt; closure)
         vals)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-of&lt;/span&gt; closure)))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;new-entry build)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-table cons)


    &lt;span style=&#34;color:#75715e&#34;&gt;;;测试这个解释器&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;(value (cons (* (+ 1 3) 4) &amp;#39;hello)) ;;不通过&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
    &lt;span style=&#34;color:#75715e&#34;&gt;;;(value (cons (quote (* (+ 1 3) 4)) (cons &amp;#39;h &amp;#39;()))) ;;测试不通过&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here below is the interpreter from TLS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket
&lt;span style=&#34;color:#75715e&#34;&gt;;; The Seasoned Schemer&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; chapter 20&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; What&amp;#39;s in Store ?&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;abort &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;global-table &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; n)
 (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)
 (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; a)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? a))
      (not (null? a))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;text-of&lt;/span&gt; x)
 (cadr x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;formals-of&lt;/span&gt; x)
 (cadr x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;body-of&lt;/span&gt; x)
 (cddr x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccbody-of&lt;/span&gt; x)
 (cddr x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name-of&lt;/span&gt; x)
 (cadr x))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right-side-of&lt;/span&gt; x)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? (cddr x))
      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      (caddr x)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-lines-of&lt;/span&gt; x)
 (cdr x))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;else?&lt;/span&gt; x)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x)
      (eq? x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;else&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; x)
 (car x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; x)
 (cadr x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;function-of&lt;/span&gt; x)
 (car x))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments-of&lt;/span&gt; x)
 (cdr x))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt; table name)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; name))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt; name1 val table)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name2&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eq? name1 name2)
       val
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; name2))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;define?&lt;/span&gt; e)
     (eq? (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(pair? e)
           (car e)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;def&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*define&lt;/span&gt; e)
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;global-table
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name-of&lt;/span&gt; e)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;the-meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;right-side-of&lt;/span&gt; e)))
   global-table)))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; it)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sel&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;sel&lt;/span&gt; it (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;)
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;it new)))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;setbox&lt;/span&gt; box new)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt; set)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; new))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unbox&lt;/span&gt; box)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt; set)
           it)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;the-meaning&lt;/span&gt; e)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; e lookup-in-global-table))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-global-table&lt;/span&gt; name)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt; global-table name))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; e table)
 ((&lt;span style=&#34;color:#a6e22e&#34;&gt;expression-to-action&lt;/span&gt; e) e table))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*quote&lt;/span&gt; e table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;text-of&lt;/span&gt; e))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*identifier&lt;/span&gt; e table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;unbox&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt; table e)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*set&lt;/span&gt; e table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;setbox&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt; table (&lt;span style=&#34;color:#a6e22e&#34;&gt;name-of&lt;/span&gt; e))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;right-side-of&lt;/span&gt; e) table)))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*lambda&lt;/span&gt; e table)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;beglis&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body-of&lt;/span&gt; e)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multi-extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;formals-of&lt;/span&gt; e)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;box-all&lt;/span&gt; args)
        table))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (beglis es table)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (cond&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; ((null? (cdr es))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (meaning (car es) table))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (else ((lambda (val)&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;;; (beglis (cdr es) table))&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;;; (meaning (car es) table)))))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (beglis es table)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (let ((m (meaning (car es) table)))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? (cdr es))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; m&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; ((lambda (val)&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;;; (beglis (cdr es) table)) m))))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (beglis es table)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (let ((m (meaning (car es) table)))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? (cdr es))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; m&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (let ((val m))&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;;; (beglis (cdr es) table)))))&lt;/span&gt;

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;beglis&lt;/span&gt; es table)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (car es) table))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; (cdr es)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? d)
       m
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;beglis&lt;/span&gt; d table))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (box-all vals)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? vals)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#39;()&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (cons (box (car vals))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (box-all (cdr vals)))))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (box-all vals)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (letrec&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; ((rec&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;;; (lambda (vals acc)&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? vals)&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;;; acc&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;;; (rec (cdr vals)&lt;/span&gt;
                                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (cons (box (car vals)) acc))))))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (rec (reverse vals) &amp;#39;())))&lt;/span&gt;

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;box-all&lt;/span&gt; vals)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ((&lt;span style=&#34;color:#a6e22e&#34;&gt;vals&lt;/span&gt; (reverse vals))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;acc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? vals)
       acc
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (cdr vals)
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (car vals)) acc)))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;multi-extend&lt;/span&gt; names vals table)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? names)
      table
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt; (car names)(car vals)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multi-extend&lt;/span&gt; (cdr names)(cdr vals)
        table))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*application&lt;/span&gt; e table)
     ((&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;function-of&lt;/span&gt; e) table)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments-of&lt;/span&gt; e) table)))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (evlis args table)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? args)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#39;()&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; ((lambda (val)&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;;; (cons val&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;;; (evlis (cdr args) table)))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (meaning (car args) table))))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (evlis args table)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? args)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#39;()&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (cons (meaning (car args) table)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (evlis (cdr args) table))))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;;; (define (evlis args table)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;;; (letrec&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; ((rec&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;;; (lambda (args table acc)&lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;;; (if (null? args)&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;;; acc&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;;; (rec (cdr args)&lt;/span&gt;
                                    &lt;span style=&#34;color:#75715e&#34;&gt;;; table&lt;/span&gt;
                                    &lt;span style=&#34;color:#75715e&#34;&gt;;; (cons (meaning (car args) table)&lt;/span&gt;
                                        &lt;span style=&#34;color:#75715e&#34;&gt;;; acc))))))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; (rec (reverse args) table &amp;#39;())))&lt;/span&gt;

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; args table)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;loop ((&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; (reverse args))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; table)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;acc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(null? args)
       acc
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; (cdr args) table
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (car args) table)
         acc)))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; p)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args-in-a-list&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; (car args-in-a-list))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b-prim&lt;/span&gt; p)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args-in-a-list&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; (car args-in-a-list)
       (cadr args-in-a-list))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*const&lt;/span&gt; e table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
  ((number? e) e)
  ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
  ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cons&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;b-prim&lt;/span&gt; cons))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;car&lt;/span&gt; )(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; car))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cdr&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; cdr))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eq?&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;b-prim&lt;/span&gt; eq?))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;atom?&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; atom?))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;null?&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; null?))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zero?&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; zero?))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add1&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; add1))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub1&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; sub1))
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; number?))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*cond&lt;/span&gt; e table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-lines-of&lt;/span&gt; e) table))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; lines table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;else?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines)))
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines)) table))
  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines)) table)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines)) table))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (cdr lines) table))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*letcc&lt;/span&gt; e table)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;let/cc&lt;/span&gt; skip
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;beglis&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ccbody-of&lt;/span&gt; e)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name-of&lt;/span&gt; e)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a-prim&lt;/span&gt; skip) table)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; e)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;let/cc&lt;/span&gt; the-end
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;abort the-end)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;define?&lt;/span&gt; e)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;*define&lt;/span&gt; e)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;the-meaning&lt;/span&gt; e))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;the-empty-table&lt;/span&gt; name)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;abort&lt;/span&gt;
  (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no-answer&lt;/span&gt;
   (cons name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expression-to-action&lt;/span&gt; e)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; e)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom-to-action&lt;/span&gt; e)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;list-to-action&lt;/span&gt; e)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom-to-action&lt;/span&gt; e)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
  ((number? e) *const)
  ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cons&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;car&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cdr&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;null?&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eq?&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;atom?&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zero?&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add1&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub1&lt;/span&gt;) *const)
  ((eq? e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number?&lt;/span&gt;) *const)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*identifier)))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list-to-action&lt;/span&gt; e)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (car e)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; a)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;prim-of?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (eq? x a ))))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;prim-of?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;quote&lt;/span&gt;) *quote)
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;prim-of?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lambda&lt;/span&gt;) *lambda)
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;prim-of?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;letcc&lt;/span&gt;) *letcc)
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;prim-of?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set!&lt;/span&gt;) *set)
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;prim-of?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cond&lt;/span&gt;) *cond)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application)))
       *application)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;global-table (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;the-empty-table&lt;/span&gt; name)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (+ (- &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here below is the method how to change the ordinary subroutine to the continuation passing style &lt;a href=&#34;https://cgi.soic.indiana.edu/~c311/lib/exe/fetch.php?media=cps-notes.scm&#34;&gt;Ref.&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First rule: whenever we see a lambda in the code we want to CPS, we have to add an argument, and then process the body&lt;/li&gt;
&lt;li&gt;Second rule: &amp;ldquo;Don&#39;t sweat the small stuff!&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;orignial style:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (cdr ls)]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls)))])))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;incompleted cps style:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (cdr ls)]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls)))])))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Small stuff is stuff we know will terminate right away.
Don&#39;t sweat the small stuff if we know it will be evaluated.
Don&#39;t sweat the small stuff if it &lt;em&gt;might&lt;/em&gt; be evaluated, but instead
pass it to k.&lt;/p&gt;
&lt;p&gt;为了更好辨别，我们改为如下形式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;*k*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;*k*&lt;/span&gt; (cdr ls))]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;*rember8*&lt;/span&gt; (cdr ls) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;*k*&lt;/span&gt; (cons (car ls) x))))])))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;凡是加上*号的，都代表者continuation的过程。
Why don&#39;t null?, =, car, cdr, and cons count? Because they&#39;re just
small stuff, and when we combine small stuff together in small ways,
the combination remains small.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Second, all arguments are small stuff. Yep, even the lambda in the
else line, because lambda is *always* small stuff.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;complete cps style:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember8
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      [(null? ls) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())]
      [(= (car ls) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cdr ls))]
      [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember8&lt;/span&gt; (cdr ls) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cons (car ls) x)))])))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;we will develop a unimplemented language to do give an explanation to it.&lt;/p&gt;
&lt;p&gt;Here below is the main language(we can change it ,but now it is not the main cause.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;1 eval&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eval
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Exp&lt;/span&gt; Env )
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
    ((number? Exp)  Exp)
    ((symbol? Exp) (&lt;span style=&#34;color:#a6e22e&#34;&gt;looking&lt;/span&gt; Exp Env))
    ((eq? (car Exp) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;QUADE&lt;/span&gt;) (cadr Exp))
    ((eq? (car Exp) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lambda&lt;/span&gt;) 
        (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Closure&lt;/span&gt; (cdr Exp) Env))
    ((eq? (car Exp) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cond&lt;/span&gt;) 
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;（&lt;/span&gt;Evcond (cadr Exp&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt; Env))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (apply  
           (eval (car Exp) Env)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;Evlist&lt;/span&gt; (cdr Exp) Env)))))) 

&lt;span style=&#34;color:#75715e&#34;&gt;;2 apply&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PROC&lt;/span&gt; ARGS)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;primitive?&lt;/span&gt; PROC) 
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;Apply-primitive&lt;/span&gt; Proc ARGS))
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;EQ?&lt;/span&gt; (car proc) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;closure&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;EVAL&lt;/span&gt;  (cadadr proc)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;Bind&lt;/span&gt; (caadr proc) 
                ARGS
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;Caddr&lt;/span&gt; proc))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;error)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;Attention, primitvie?  apply-primitive  is not finished&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;3 Evlist&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Evlist
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; Env)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((eq? (car l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
         (cons (eval (car l) Env)
               (eval (cdr l) Env))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;4 Evcond&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Evcond
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clauses&lt;/span&gt; Env)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((eq? clauses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        ((eq? (caar clauses) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;else&lt;/span&gt;) 
            (eval (cadar clauses) Env))
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;false?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Eval&lt;/span&gt; (caar clauses) Env))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;Evcond&lt;/span&gt; (cdr clauses) Env))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;Eval&lt;/span&gt; (cadar clauses) Env)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;Attention false? is not finished.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;5 looking&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;looking
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sym&lt;/span&gt; env)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
       ((eq? env &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unbound-value&lt;/span&gt;))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
         ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vcell&lt;/span&gt;)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
               ((eq? vcell &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;looking&lt;/span&gt; sym (cdr env)))
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cdr vcell))))
           (assq sym (car env)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;6 assq&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;assq
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;syms&lt;/span&gt; alist)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? alist &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
         ((eq? syms (caar alist)) (car alist))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(assq syms (cdr alist))))))


&lt;span style=&#34;color:#75715e&#34;&gt;;7 Bind&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Bind
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals Env)
     (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-up&lt;/span&gt;  vars vals) env)))

&lt;span style=&#34;color:#75715e&#34;&gt;;8 Pair-up&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Pair-up
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vars&lt;/span&gt; vals)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((eq? vars &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
               ((eq? vals? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Too-much-arguments&lt;/span&gt;))))
         ((eq? vals &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Too-few-arguments&lt;/span&gt;))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
           (cons (cons (car vars)  (car vals))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;pair-up&lt;/span&gt; (cdr vars) (cdr vals))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now we can use the language below to interpret the form&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(eval &#39;(((lambda (x）（lambda (y) (+  x y))) 3) 4) e0)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Good explanation begin(kernal part)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

(apply (eval &#39;((lambda (x) (lambda (y) (+ x y))） 3）  e0)
       (Evlist &#39;(4) e0))

(apply (eval &#39;((lambda (x) (lambda (y) (+ x y))） 3）  e0)
       （cons (eval &#39;(4) e0) (evlist &#39;() e0)))

(apply (eval &#39;((lambda (x) (lambda (y) (+ x y))） 3）  e0)
       （cons 4 &#39;()))

(apply (eval &#39;((lambda (x) (lambda (y) (+ x y))） 3）  e0)
       &#39;(4))


(apply (apply (eval &#39;(lambda (x) (lambda (y) (+ x y))  e0)
       &#39;(3) )
      &#39;(4))

(apply (apply &#39;(closure ((x) (lambad (y) (+ x y))) e0) 
       &#39;(3) )
      &#39;(4))

(apply (eval (lambda (y) (+ x y)) e1)
      &#39;(4))

(apply &#39;(closure ((y) (+ x y)) e1)
      &#39;(4))

(eval &#39;(+ x y) e2)

(apply (Eval &#39;+ e2)  (Evlist &#39;(x y) e2))

(apply &#39;(add0101)  &#39;(3 4))   ;add0101 is the assemble executable binary code(speed fast)


（+ 3 4） = 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finished~  Good ~  Well done.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;Let&#39;s trace (rember8  (lambda (x) x))

ls | k

&#39;(1 2 8 3 4 6 7 8 5) | (lambda (x) x) = id
&#39;(2 8 3 4 6 7 8 5)   | (lambda (x) (id (cons 1 x))) = k2
&#39;(8 3 4 6 7 8 5)     | (lambda (x) (k2 (cons 2 x))) = k3

Once we hit the 8, we apply (k (cdr ls)) where k is k3 and ls is &#39;(8 3
4 6 7 8 5)

(k3 &#39;(3 4 6 7 8 5)) = (k2 (cons 2 &#39;(3 4 6 7 8 5)))
(k2 &#39;(2 3 4 6 7 8 5)) = (id (cons 1 &#39;(2 3 4 6 7 8 5)))
(id &#39;(1 2 3 4 6 7 8 5)) = &#39;(1 2 3 4 6 7 8 5)

And we&#39;re done.

&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;how to change the procedure above? Leave to you.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The-Little-Scheme-And-Part-Of-TSS</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/18/the-little-scheme-and-part-of-tss/</link>
      <pubDate>Mon, 18 May 2015 09:25:11 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/18/the-little-scheme-and-part-of-tss/</guid>
      <description>&lt;p&gt;这部分内容是我练习TLS和TSS的全部学习资料，里面有详细的记录和一些心路历程，以后慢慢修改。
总行数5800左右。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; I will introuduce The little scheme From the angles below&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; 1:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     why introuduce the concept&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; 2:  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     The main knowledge&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; 3: &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Map-reduce &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     .......&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; 4:  How you describe the function works in  your own words? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; 5:  How do you determine the output when you apply a function?Is it what you want?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     no? why no?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;Namely, Can you write down the definition of the function member? and its arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     and refer to them as you go through the next group of questions????&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Do not rush through this book! Read carefully&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; From the introuduction chapter &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; else implicit said that if the condition is wrong do it recurly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      also infer that after the recuring ,please go back to home along the Original road!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  COns &amp;#39;s function: save the buffer to the stack&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The first part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; The Basic operator&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   The primitive variables of scheme ::  car ,cdr(is pronounced as &amp;#34;could_er&amp;#34;,cons,  null? zero?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         eq?(compare two non-numericas atoms),&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         or (or asks two questions,one at a time. If the first one is true&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         .Otherwise it asks the second question and answers with whatever the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         second question answers)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         numbers,add1,sub1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  COns &amp;#39;s function: save the buffer to the stack&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))


&lt;span style=&#34;color:#75715e&#34;&gt;;;;; New added after myracet1.rkt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  I want to find ( a  h fd  fs)  but not ( a h (fd s) fs),so I want to create the lat?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  can you describe what the function lat? does in your own words? *****************&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;  lat? looks at each S-expression in a list ,in turn,and asks if each S-expression &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  is an atom ,untill it runs out of S-expression. If it runs out without encountering &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  a list,the value is #f. If it finds a list,the value is #f,false&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   What is the meaning of the question *else* ??  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             *else* asks if else if true&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                is *else* true?  Yes,because the question else is always true!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         so what is (else #f) means?  ----&amp;gt; as if else is true,If else is true--as it always is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; else implicit said that if the condition is wrong do it recurly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      also infer that after the recuring ,please go back to home along the Original road!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               --then the answer if #f ---false&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               In a word:   else is a question whose value is always (implicit)&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lat?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;lat?&lt;/span&gt; (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; New added after myracet1.rkt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;&amp;gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? n) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((zero? m) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the maning of (&amp;gt; (sub1 n) (sub1 m))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Recur, but with both arguments reduced by one&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;dd
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? n) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((zero? m) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you describe what leftmost does?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Here is our description:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       &amp;#34;The function leftmost finds the leftmost atom in a non-empty list of S-expressions that does not&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       contain the empty list&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Is left a *-function?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            It works on lists of S-expressions,but it only recurs on the car(so no)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Does leftmost need to ask questions about all three possible cases?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       No,it only needs to ask two questions,We agreed that leftmost works on non-empty&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       list that don&amp;#39;t contain empty list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       So in a word,the two discussed before,1:recur in car(not together with cdr) 2:2 questions ,not 3 questions which S-expressions&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Do you remember what (or ...) does?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            (or as questions one at a time until it finds one that is true.Then (or ...) stops,making its value true.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            If it cannot find a true argument,the value of (or...) is false&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     After so many illustration ,can you put in your own words what (and ....) does&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             We put in our words:(lispers&amp;#39; words)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             &amp;#34;(and ...) ask questions one at a time until it finds one whose value is false.Then (and ...) stops with false.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              If none of the expressions are false,(and ...) is true.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Both (and ...) and (or ...) can be expressed as abbreviations of (cond ...)-expressions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              (and a b) == (cond a b) (else #f))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              (or a b) == (cond (a #t) (else b))&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (car l))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost&lt;/span&gt;(car l))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#a6e22e&#34;&gt;quote&lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((eq? (car lat) a) (cdr lat))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
               (cons (car lat)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember&lt;/span&gt; a
                             (cdr lat)))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you write number? which is true if its argument is a numerica atom and false if it is anything else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      No:number? like add1,sub1,zero?,car , cdr, cons,null?, eq?,and atom? is a primitive function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Can you write a function no-nums which gives as a final value a lat obtained by removing all the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      numbers from the lat.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Remember to use = for numbers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 eq? for all other atoms(non-numericas atoms)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     eqan? contains two part to compare the two atoms: 1 a number   2:an atom&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Can you assume that all funtions written using eq? can be generalized by replacing eq?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          By eqan?   ------------------Yes,excpet,of course ,for eqan? itself&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqan?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a1&lt;/span&gt; a2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(number? a1) (number? a2))
       (= a1 a2))
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(number? a1) (number? a2))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(eq? a1  a2)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;after the introuction of (and  (or   define leftmost&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is eqlist?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  It is a function that determines if two lists are equals&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How many questions will eqlist? have to ask about it arguments?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             Nine  --------------------------------------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;The first time so many questions!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you explain why there are nine questions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Here are out words:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         &amp;#34;Each arguments may be either&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             ----empty&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             ----an atom consed onto a list,or&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             ----a list consed onto a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        For example,at the same time as the first argument may be the empty list,the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              seconds argument could be the empty list or have an atom or a list in the car position.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Is it okay to asK (atom? (car l2)) in the second question?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               Yes ,because we know that the second  list cannot be empty.otherwise the first question would have been true.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         And why is the third question (null? l1)???&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              At that point ,we know that when the firs argument is empty,the second argument is neither empty list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              nor a list with an atom as the first element .If(null? l1) is true now,the second argument must be a list whose first element&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              is also a list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Does this mean the questions (and (null? l1) (null? l2)) and (or (null? l1) (null? l2)) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                suffice to determine the answer in the first three cases?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             Yes .If the first question is true,eqlist? respoinse with #t; otherwise ,the answer if #f&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqlist?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l1&lt;/span&gt; l2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? l1) (null? l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? l1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l2))) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((null? l1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l1)) (null? l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l1)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l2)))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eqan?&lt;/span&gt; (car l1) (car l2)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist?&lt;/span&gt; (cdr l1) (cdr l2))))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l1)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((null? l2) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist?&lt;/span&gt; (car l1) (car l2))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist?&lt;/span&gt; (cdr l1) (cdr l2)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqlist1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l1&lt;/span&gt; l2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? l1) (null? l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(null? l1) (null? l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l1)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l2)))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eqan?&lt;/span&gt; (car l1) (car l2)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist1?&lt;/span&gt; (cdr l1) (cdr l2))))
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l1))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l2)))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist1?&lt;/span&gt; (car l1) (car l2))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist1?&lt;/span&gt; (cdr l1) (cdr l2)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; So  What is an S-expresssion? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                    An S-expression is either an atom or a (possibly empty) list of S-expressions.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      How many questions does equal? ask to determine whether two S-empty are the same?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           Four. The first argument  may be an atom or a list of S-expressions at the same time as the second argument may be&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           an atom or a list of S-expressions.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; can we summarize the second questions and the third question of the equal? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   as   (or (atom? s1) (atom? s2))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              Yes, we can&lt;/span&gt;


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;equal?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s2)) 
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqan?&lt;/span&gt; s1 s2))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s2) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist?&lt;/span&gt; s1 s2)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;equal1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s2)) 
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqan?&lt;/span&gt; s1 s2))
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; s1))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist?&lt;/span&gt; s1 s2)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; The sixth chapter:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    Is 1,3,1+3,1+3*4,cookie,3^y_5 all arithmetic expression?  Yes ,of course&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is an arithmetic expression? in your words?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       In ours:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         &amp;#34;For the purpose of this chapter,an arithmetic expression is either an atom&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         (including numbers),or two arithmetic expressions combined by +,-,*,/,or expr.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Is (n+3) an arithmetic expression?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Not really,since there are parentheses around n+3, our definition of arithmetic&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        expression does not mention parentheses....&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Could we think of (n+3) as an arithmetic expression?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Yes if we keep in mind that the parentheses are not really there (the empire&amp;#39;s new clothes)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What would you call (n+3)  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   we call it a representation for n+3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         why is (n+3) a good representation?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  Because &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                          1. (n+3) is an S-expression. &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                               It can therefore serve as an argument for a function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                          2.It stucturally resembles n+3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; True or false: (numbered? x)  True while x is 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How do you represent 3+4*5  ?                      ------&amp;gt; (3+4*5)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is numbered?     &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     It is a function that determines whether a representation? of an arithmetic expression &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      contains only number besides the +,* and expr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Now you can write a skeleton for numbered?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (define numbered?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (lambda (axep)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (cond &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (_________   _________)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (_________   _________)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (_________   _________)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (_________   _________))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the first question?        --------------(atom? axep)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (eq? (car (cdr aexp)) (quote +))  ------It is the second question&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; can you guess the third one (eq? (car (cdr aexp)) (quote *))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; And you must know the fourth one.                     (eq? (car (cdr aexp)) (quote )e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; why do we ask four,instead of two,  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          questions about the arithmetic expressions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          after all,arithmetic expressions like (1+3) are lats&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         ------------------------------Because we consider (1+3) as a representation of an arithmetic expression in &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         list form,not as a list itself.And,an arithmetic expression is either a number,or two arithmetic expressions combined&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         by + ,*,expr.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;numbered?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; aexp) (number? aexp))
      ((eq? (car (cdr aexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
      ((eq? (car (cdr aexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;)
     ((eq? (car (cdr aexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;numbered1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; aexp) (number? aexp))
      ((eq? (car (cdr aexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered?&lt;/span&gt; (car aexp))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered?&lt;/span&gt; 
              (car (cdr (cdr aexp))))))
      ((eq? (car (cdr aexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered?&lt;/span&gt; (car aexp))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered?&lt;/span&gt; 
              (car (cdr (cdr aexp))))))
     ((eq? (car (cdr aexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered?&lt;/span&gt; (car aexp))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered?&lt;/span&gt; 
              (car (cdr (cdr aexp)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Since aexp was already understood to be an arithmetic expression,could we have written numbered? in a simpler way?&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;defin&lt;/span&gt; numbered2?
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
           ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; aexp) (number? aexp))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered2?&lt;/span&gt; (car aexp))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;numbered2?&lt;/span&gt; 
                    (car (cdr (cdr aexp))))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; why can we simplify ??-&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                        because we know we&amp;#39;ve got the function right!&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; We want to value the arithmetic expressions? ------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; THe seventh commandments!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Recur on the subparts that are of the same nature:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            On the sublists of a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            on the subexpressions of an arithmetic expression&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; To (3 + 4)    &amp;#39;s value&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; nexp) nexp)
      ((eq? (car (cdr nexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (car nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (car (cdr (cdr nexp))))))
      ((eq? (car (cdr nexp)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;*))
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (car nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (car (cdr (cdr nexp))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (car nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (car (cdr (cdr nexp)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you think of a different representation of arithmetic expressions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          There are several of thme&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          (3 4 +)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          (+ 3 4)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          (plus 3 4)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          (+ (* 3 6) (expr 8 2))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         TO value (+ 3 4)&lt;/span&gt;
      
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; nexp) nexp)
      ((eq? (car nexp) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;value1&lt;/span&gt; (car (cdr nexp)))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value1&lt;/span&gt; (car (cdr (cdr nexp))))))
      ((eq? (car nexp) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;*))
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;value1&lt;/span&gt; (car (cdr nexp)))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value1&lt;/span&gt; (car (cdr (cdr nexp))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value1&lt;/span&gt; (car nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value1&lt;/span&gt; (car (cdr (cdr nexp)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;(1 2) is not a arithmetic expressions ,so we  violated The Seventh Commandments. (1 3) is not a subpart that is &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   representation of an arithmetic expression! We obviosuly  recurred on a list.But,remember,not alll lists are representations&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   of arithmetic expressions. We have to recur subexpressions.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   (3) is the (cdr (cdr nexp)) ,but (3) is not an arithmetic expressions,because there are no parentheses in our &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   definition of the arithmetic expressions.&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st-sub-exp
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car (cdr aexp))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; why do we ask else,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   because the first question is also the last question&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can we get by without (cons. ..) if we don&amp;#39;t need to ask questions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Yes remember one-liners from chapter4&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st-sub-exp1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
      (car (cdr aexp))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;nd-sub-exp
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car (cdr (cdr aexp)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;operator
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aexp&lt;/span&gt;)
    (car aexp)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nexp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; nexp) nexp)
      ((eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;operator&lt;/span&gt; nexp) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st-sub-exp1 nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;nd-sub-exp nexp))))
      ((eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;operator&lt;/span&gt; nexp) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+))
       (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st-sub-exp1 nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;nd-sub-exp nexp))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st-sub-exp1 nexp))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;nd-sub-exp nexp)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; so it we chang the (define operator ) and (1st-sub-exp1) exchangeabley ,the different form of arithmetic expressioned.&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;;;       ********************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; The Eighth Commandments:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Use help functions to abstract from representation&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       ********************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Have we seen representation? before&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                      Yes ,we just did not tell you that were representations.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             For what entities have we used representations?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             Truth-values!  Numbers!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                              Numbers are representations?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                    Yes ,for example 4 stands for the concpet four. we close the symbol because&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                    we are accustomed to arabic representation.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                              What else could we have used?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                (() () () ())  would have serve just as well&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                what about  (((((((())))))))?  How about (I V)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         Do you know how many primitives we need for numbers?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                          Four: number? ,zero?, add1,and sub1-------------------------------------------&amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                            ****Do You know how many primitives we need for list?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                   Four:   atom? null? car cdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         Let&amp;#39;s try anouther representation for numbers. How shall we represent zero now/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                       () is our choice&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         How is one represented?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                       (()) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         How is two represented?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                       (() () )&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                          Got it,What&amp;#39;s Three?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                       (() () ())&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; So now write thefunction to test zero&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sero?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (null? n)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; write a function that is like add1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;edd1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (cons (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) n)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;what about sub1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;zub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (cdr n)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; so we can rewrite +&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;plus
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;sero?&lt;/span&gt; m) n)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;edd1&lt;/span&gt; (+ n (&lt;span style=&#34;color:#a6e22e&#34;&gt;zub1&lt;/span&gt; m)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; but what&amp;#39;s lat????t&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;(define lat?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  (lambda (l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  (cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      ((null? l) #t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      ((atom? (car l)) (lat? (cdr l)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      (else #f))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; So (lat? (1 2 3))     why did you ask???  but now (lat? ((()) (()()) (()()()))) It is very false,!!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                 So you must beware of shadows!!!bugs implicit!!&lt;/span&gt;



&lt;span style=&#34;color:#75715e&#34;&gt;;;;                         &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Why dow we ask (number? aexp) when we know that aexp is an atom?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   Because we want to know if all arithmetic expressions that are atoms are numbers&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Does equal1? ask enough questions? --The first commandments!!  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              Yes,The questions cover all four possible cases&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; Now rewrite the eqlist? using equal???                --------------equal? is the most common ,which  S-expression as the arguments&lt;/span&gt;
    
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqlist1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l1&lt;/span&gt; l2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? l1) (null? l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(null? l1) (null? l2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(equal? (car l1) (car l2))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;eqlist?&lt;/span&gt; (cdr l1) (cdr l2)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; THe sixth Commandments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Simplify  only  after the function is correct.   ---------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; Can you describe what (rember1 a lat) do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          It takes an atom and a lat as its *arguments*,and makes a new *lat*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          with the *first* occurrence of the atom in the old lat removed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     How do we(lispers,implicitly) ask questions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            By using&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   (cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (__________     ____________)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (__________     ____________)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (__________     ____________)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (__________     ____________)).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     How do we  remove the first occurrence of a in the rest of lat?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             (rember a (cdr lat))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Write down the function rember and its arguments, and refer to them as you go&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; through the next sequence of questions(the unit test)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    In our words:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              &amp;#34;The function rember checked each atom of the lat , one at a time,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               to see if it was the same  as the atom &amp;#39;and&amp;#39;.If the car was not the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               same as the atom, we saved it to be consed to the final value later.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               when rember found the atom &amp;#39;and&amp;#39;,it dropped it ,and consed the previous&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               atoms back onto the rest of the lat&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  ---------------------------------cons --------------------------------------&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;cond
            ((eq? (car lat) a) (cdr lat))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember&lt;/span&gt; a
                                (cdr lat))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you rewrite rember so that it reflects the abouve description&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rembersimple
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((eq? (car lat) a) (cdr lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember&lt;/span&gt; a (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;  What is the meaning of the  (cons (car lat) (rember a (cdr lat))) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           This says to refer to the funciton rember but with the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           argument lat replaced by (cdr lat) and  that after we arrive at a value for&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (rember a (cdr lat)) we must cons (car lat) --bacon --onto it&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           This also says we recur using the function rember, with the argument lat&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           replaced by (cdr lat),and that after we arrive at a value for (rember a (cdr lat))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           we must cons (car lat)---lettuce --onto it&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is rember1  after we replace lat by a list l of S-expression &lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;quote&lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((equal? (car l) s) (cdr l))
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1&lt;/span&gt; s (cdr l))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((equal? (car l) s) (cdr l ))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1&lt;/span&gt; s 
                             (cdr l)))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  And how does that differ?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        The funciton rember now removes the first matching S-expression s in l,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  instead of the first matching atom a in lat.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    Is rember a  &amp;#34;star&amp;#34; function now? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             NO.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Why not?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          because rember recurs with the cdr of l only (not togeterh with the car of l ,,correspoding to (define leftmost)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; can we simplify rember1 ?&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;quote&lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((equal? (car l) s) (cdr l))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
          (cons (car l)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember2&lt;/span&gt; s (cdr l)&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can rember2 be further simplified????????????????????????&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   Yes,the inner(cond...) asks questions that the outer(cond...) could ask1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember3
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((equal? (car l) s) (cdr l))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember3&lt;/span&gt; s (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; &amp;#34;...*&amp;#34; makes us think &amp;#34;oh my gawd&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l ) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((eq? (car l) a)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (car l))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;; Notice that now we are recurring down the car of the list,instead of just the cdr of the list&lt;/span&gt;


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertL
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lat)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
           ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                   ((eq? (car lat) old)
                    (cons new 
                          (cons old (cdr lat))))
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertL&lt;/span&gt; new old 
                                        (cdr lat)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; after ------------------------------------&amp;lt;the (define firsts  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;In your own words, what does (insertR new old lat) do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     In our words:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             &amp;#34;It takes three arguments: the atoms new  and old,and lat.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             The function insertR builds a lat with new inserted to the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             right of the *first* occurence of old&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Which arguments changes when we recur with insertR?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           lat, because we can only  look at one of its atoms at a time.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Which questions do we ask?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       First, we ask (null? lat) .Second we ask else,because else is &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       always the last question.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Which questions do we ask about the first elements?????? Still rember the typical element&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       in the (define firsts)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     First,we ask (eq? (car lat) old ) .Then we ask else,because there are no other interesting cases&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  COns &amp;#39;s function: save the buffer to the stack&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  I want to write an procedure: which sort the list  afterwards?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            So I want the change the function&amp;#39; return value?????????????????????????&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            What I should do??&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((eq? (car lat) old)
               (cons old 
                     (cons new (cdr lat))))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR&lt;/span&gt; new old 
                                    (cdr lat)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; after the (define makeset1)&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subset
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((eq? (car lat) old)
               (cons new (cdr lat)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset&lt;/span&gt; new old 
                                  (cdr lat)))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subset2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; o1 o2 lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((eq? (car lat) o1)
               (cons new (cdr lat)))
              ((eq? (car lat) o2)
               (cons new (cdr lat)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset2&lt;/span&gt; new o1 o2
                                   (cdr lat)))))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember5
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((eq? (car lat) a) (cdr lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember5&lt;/span&gt; a (cdr lat)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;factorial 
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;lt;= x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
          (* x (&lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;  after rember ---------------------------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; In  your own words , what does (firsts l) do&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          We tried the following:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          &amp;#34;The function firsts takes one argument, a list,which is either&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          a null list or contains only non-empty lists. It builds another list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          composed of the first S-expression(atom or list  or pair) of each internal list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          REMEMBER THe Commandments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Why (define firsts&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 (lambda (l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  ...)                     Because we always state the function name,(lambda,and the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           argument(s) of the function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Why (cond ...)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           Because we need to ask questions about the actual arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Why ((null? l) ...)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           The first Commandments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Why (else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           Because we only have two equstions to ask about the list l:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                      either It is the null list,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                or it contains at least one non-empty list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                 And Because the last question is always else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Why (cons &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           Because we are building  a lsit  -----The second commandments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Why (firsts (cdr l)) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           Because we can only  look at one S-expression at at time .&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                   To look at the rest,we must recur&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         why )))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           Because these are the matching  parentheses for (cond, (lambda,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           and (define, and they always appear at the end of a function &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           definition&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        When we find a typical element of (firsts l) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 what do we do with it?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       --cons it onto the recursion --(firsts (cdr l))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     The third commandments :&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 When building a list, describe the first typical element,and then cons it onto the natural recursion&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         So What is the first typical element?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             -----------------------&amp;gt;  In the (define firsts  The typical element is (car (car l))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            What  is the natural recursion?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            -----------------------&amp;gt; (firsts (cdr l))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             ****************************we are still missing one important ingredient in our recipe!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             So what is the meaning of (cons (car (car l))  (firsts (cdr l)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                           Save (car (car l)) ,and recur with (firsts (cdr l))&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;firsts
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car (car l))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;firsts&lt;/span&gt; (cdr l)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) a)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the meaning of (cons (car lat) (multirember a (cdr lat)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Save (car lat) ---coffee ---- to be consed onto the value of (multirember a (cdr lat)) later&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Now determine (multirember a (cdr lat))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  THe Fourth commandments:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Always change at least one arguments while recuring.It must be changed to be closer to &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         termination.The changing argument must be tested in the termination condition:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   When using cdr, test termination with null?, such as (null? lat)  lat is the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   changing argument,so it occur in the terminal condition.&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiinsertR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) old)
          (cons (car lat)
                (cons new
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertR&lt;/span&gt; new old (cdr lat)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertR&lt;/span&gt; new old (cdr lat)))))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiinsertL
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) old)
          (cons new
                (cons (car lat)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertL&lt;/span&gt; new old (cdr lat)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertL&lt;/span&gt; new old (cdr lat)))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multisubset
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) old)
          (cons new
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;multisubset&lt;/span&gt; new old 
                             (cdr lat))))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
          (cons (car lat)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;multisubset&lt;/span&gt; new old 
                             (cdr lat)))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (- x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))




&lt;span style=&#34;color:#75715e&#34;&gt;; (define +&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;   (lambda (n m)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;     (cond &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;       ((zero? m) n)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;       (else (add1 (+ n (sub1 m)))))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; (define -&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;   (lambda (n m)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;     (cond &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;       ((zero? m) n)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;       (else (sub1 (- n (sub1 m)))))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Can you describe how (- n m) works??&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    It takes two numbers as arguments,and reduces the second until it hits zeros.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    It subtracts one from the result as many times as it did to cause the second &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    one to reach zero!!!&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;if add the box above the wrong to the expr define&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;  What is the natural terminal condition for a list?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              (null? l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  What is the natural terminal conditon for a tup?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              (null? tup)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; When we build a number from a list of numbers, what should the terminal condition line look like?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               ((null? tup) 0)  ,just as ((null? l) (quote ()))  is ofter the terminal conditon line&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               for lists&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     So what is the terminal condition line of addtup?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           What does addtup do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             It builds a number by totalling all the numbers in its arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is used in the natural recursion on a list?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       (cdr lat)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is used in the natural recursion on a tup?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        (cdr tup)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Why?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Because the rest of a non-empty list is a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              The rest of a non-empty tup  is a tup&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How is a number defined?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    It is either zero or it is one added to a res,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           where rest is again  a number&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; what is  the natural terminal condition for numbers?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         (zero? n)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the natural recursion on a number? (sub1 n)            (Cdr tup)  (cdr l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        (how many questions do we need to ask about a number?   ---------------&amp;lt; two&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        So The first commandments(revision)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          When recurring on a list of atoms,lat, ask two questions about it: (null? lat) and else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          When recurring on a number,n ,as two questions about it:(zero? n) and else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    and What is the terminal condition line of addtup&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           ((null? tup) 0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; So what is the natural recursion for addtup?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           (addtup (cdr tup))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     what does addtup use to build a number?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               It uses + , because + builds numbers, too!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;addtup
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? tup) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ (car tup) (&lt;span style=&#34;color:#a6e22e&#34;&gt;addtup&lt;/span&gt; (cdr tup)))))))

       &lt;span style=&#34;color:#75715e&#34;&gt;;;(cons (car tup) (addtup (cdr tup)))))))   The last line of function rember is the similar to the one in the addtup!!!!&lt;/span&gt;
       &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; The fourth commandments(revision)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Always change at least one arguments while recurring. It must be changed to be closer to termination.The changing argument must&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  be tested in the termination condition:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         when using cdr, test termination with  null? and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         when using sub1, test termination with zero&lt;/span&gt;


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; n (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiplication
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ n (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiplication&lt;/span&gt; n (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;divide
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;( n m)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&amp;lt; n m ) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;divide&lt;/span&gt; (- n m) m))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;pick 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)) (car lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n) (cdr lat))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you write number? which is true if its argument is a numerica atom and false if it is anything else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      No:number? like add1,sub1,zero?,car , cdr, cons,null?, eq?,and atom? is a primitive function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Can you write a function no-nums which gives as a final value a lat obtained by removing all the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      numbers from the lat.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; after (define rempick)  --------------------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;no-nums
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((number? (car lat))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;no-nums&lt;/span&gt; (cdr lat)))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;no-nums&lt;/span&gt; (cdr lat)))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;all-nums
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((number? (car lat))
          (cons (car lat)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;all-nums&lt;/span&gt; (cdr lat))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;all-nums&lt;/span&gt; (cdr lat))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;     after the define of eqan? (define eqan?)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;what does occur do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        the function occur which counts the number of times an atom a appears in a lat&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;occur
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) a)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;occur&lt;/span&gt; a (cdr lat))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;occur&lt;/span&gt; a (cdr lat))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;one?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? n) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;one1? 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (= n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;one11?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (= n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Guess how we can further simplify this  function ,maing it a one-liner&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       By removing the (cond )clause.&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;negativeone?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? n) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; n))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((eq? (car l) a)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l)))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l))))))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (car l))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; After rember*            (define rember*) -----------------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How are insertR* and rember* similar?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        0--------------------Each function asks three questions,. Each function recurs on the car&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  of its argument when it finds out that the argument&amp;#39;s car is a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  namely,They both recur with car,whenever the car is alist,as well as with the cdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; ******************************************************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        The first commandments(Final version)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          When recurring on  a list of atoms,lat,ask two questions about it:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       (null? lat) and else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          When recurring on a number,n ,ask two questions about it:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       (zero? n) and else.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          When recurring on a list of S-expression,l ,ask three questtion,about it:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       (null? l),(atom? (car l)) , and else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; ******************************************************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How are rember* and multirember different?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         The function multirember does not recur with the car. The function rember* recurs with the car when if&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           finds out that the car is a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; So how are all *-functions similar?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          They all ask three questions and recur with the car as well as   with the cdr,whenever the car is a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Why?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             Because all *-functions work on lists that are either &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                      ---empty&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                      ---an atom consed onto a list,or&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                      ---a list consed onto a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; ******************************************************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         TheFourthe commandments(final version)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             Always change at least one argument while recurring. &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              when recurring on alist of atoms, lat,use (cdr lat.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              When recurring on a number,n ,use (sub1 n). And  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              when recurring on a list of S-expressions,l,use (car l) and (cdr l) if neither (null? l) nor (atom? (car l) are true&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              It must be changed to be closer to termination. The changing argument must be tested in the termination condition:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     When using cdr, test termination with null? and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     When using sub1, test termination with zero?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; ******************************************************************************************************************&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertR*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((eq? (car l) old)
          (cons old
                (cons new (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR*&lt;/span&gt; new old (cdr l)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR*&lt;/span&gt; new old
                               (cdr l)))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR*&lt;/span&gt; new old
                            (car l))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR*&lt;/span&gt; new old (cdr l))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; &lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertL*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((eq? (car l) old)
          (cons new
                (cons old (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR*&lt;/span&gt; new old (cdr l)))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertL*&lt;/span&gt; new old
                               (cdr l)))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertL*&lt;/span&gt; new old
                            (car l))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;insertL*&lt;/span&gt; new old (cdr l))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;occur*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car l) a)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;occur*&lt;/span&gt; a (cdr l))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;occur*&lt;/span&gt; a (cdr l)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;occur*&lt;/span&gt; a (car l))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;occur*&lt;/span&gt; a (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  I introuduce how the (or (null? l) (atom? a))  works,Then I can go on &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;    introuducing the member&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; else implicit said that if the condition is wrong do it recurly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      also infer that after the recuring ,please go back to home along the Original road!&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car l) a)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;member*&lt;/span&gt; a (cdr l))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member*&lt;/span&gt; a (car l))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;member*&lt;/span&gt; a (cdr l)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; The function tells:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          (condition return values)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you write down the definition of the function member? and its arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     and refer to them as you go through the next group of questions????&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car lat) a)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; a (cdr lat)))))))



(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;first
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car p)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;second
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car (cdr p))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;Could  after (define subset? )        write a function (intersect?)&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect?&lt;/span&gt; 
              (cdr set1) set2)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect1?&lt;/span&gt; 
              (cdr set1) set2)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect2?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect1?&lt;/span&gt; (cdr set1) set2))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
       (cons (car set1)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (cdr set1) set2)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (cdr set1) set2)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
       (cons (car set1)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (cdr set1) set2)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (cdr set1) set2)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; In our words: It is a function that return s all the atoms&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;in set1 that are not in the set2,That is ,xxx is the (set) difference functions=&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;xxx
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;xxx&lt;/span&gt; (cdr set1) set2)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (car set1)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;xxx&lt;/span&gt; (cdr set1) set2)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;instersectall
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l-set&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? (cdr l-set)) (car l-set))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;interset&lt;/span&gt; (car l-set)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall&lt;/span&gt; (cdr l-set)))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;union
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? set1) set2)
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;union&lt;/span&gt; (cdr set1) set2))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (car set1)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;union&lt;/span&gt; (cdr set1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;build 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons s1 
                  (cons s2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))))))


&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The first part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The second part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;  myracet2.rkt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Can you write a function  insert-g that would insert either at the left or at the right!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Which pieces differ?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              The second lines differ from each other ,In insertL it is:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               ((eq? (car l) old)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                (cons new (cons old (cdr l))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               But in the insertR it is:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               ((eq? (car l) old)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                (cons new (cons old (cdr l))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Put the difference in words!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               We say:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      &amp;#34;The two functions cons old and new in a different order onto the cdr of the list l&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         So how can we get rid of the difference &amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                You probably guessed it: by passing in a function that expresses tha appropriate consing.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqL
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (cons new (cons old l))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (cons old (cons new l))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; so you can (insert-g seqL)  (insert-g seqR)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; (define insertL (insert-g seqL))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; (define insertR (insert-g seqR))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insert-g
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((eq? (car l) old)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt; new old (cdr l)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seq) new old
                                    (cdr l))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; So we can define insertL again with insert-g *****************************^-^************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Do not pass in seqL this time.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertL1
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
      (cons new (cons old l)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;; Perfect--- it is  a great abstraction!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Is it better?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Yes,Because youu do not need to remember as many names,you can&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      (rember func-name &amp;#34;your-mind&amp;#34;) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                Where func-name is seqL&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                Do you remember the definition of subst&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                Yes! it looks like insert-L  insertR  .Just the answer of the second cond-line is differenct&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((eq? (car l) old)
       (cons new (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;subst&lt;/span&gt; new old (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;subst insertL insertR the common property is else and different &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;operator so we can abstract them to the insert-g&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqS
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (cons new l)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst1 (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqS))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqrem
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    l))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;yyy
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqrem) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; a l)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;What do you yyy is?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            Surprise ! It is our old friend rember,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            Step through the evaluation of (yyy a l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                a  is sausage&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                and l is (pizza with sausage and bacon)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             What role does #f paly?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             New in the insertL and insertR   ,a is old in the insertL and insertR&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             **********************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             THe ninth commandments:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              Abstract the common patterns with a new function.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             **********************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;So can you simplify the function (define value1)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you write the funciton atom-to-function &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         which:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               1: Taes one argument x &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               2: returns the function + if (eq? x (quote +))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  returns the function * if (eq? x (quote *))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  returns the function expr if (eq? x (quote expr))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom-to-function
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+) +))
      ((eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;*) *))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;expr))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;(atom-to-function (operator nexp))&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value3
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nexp&lt;/span&gt;)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; nexp) nexp)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom-to-function&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;operator&lt;/span&gt; nexp))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;value3&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st-sub-exp nexp))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;value3&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;nd-sub-exp nexp))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((eq? (car lat) a)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; a (car lat))
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-f&lt;/span&gt; test?) a
                               (cdr lat)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; test?)  a 
                                          (cdr lat))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eq?&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; After the insturciton os a pair----&amp;gt;  &lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;first
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car p)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;second 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car (cdr p))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;third
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car (cdr (cdr p)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;third1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (car (cdr (cdr l)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;build
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons s1
                  (cons s2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; After the (define fun?)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;revrel
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? rel) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt;  (car rel))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; (car rel)))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;revrel&lt;/span&gt; (cdr rel)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;; maybe we can abstract the build part,because it&amp;#39;s the pair part&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Now do you see how representabtion aids readability????&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;         second   first is the (car (car rel))         second is (car (cdr (car rel)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; so it can hide the build inverse process &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Suppose we had the funciton revpair that reversed the two componets of a pair like this:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;revpair&lt;span style=&#34;color:#75715e&#34;&gt;;;hide the build process&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; pair) (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pair))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;revrel1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? rel) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;revpair&lt;/span&gt; (car rel))&lt;span style=&#34;color:#75715e&#34;&gt;;so it can be hided&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;revrel1&lt;/span&gt; (cdr rel)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car lat) a)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; a (cdr lat)))))))
  
&lt;span style=&#34;color:#75715e&#34;&gt;;;; The 7 chapter ,,after the numbered&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;set?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car lat) (cdr lat)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;
               )
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;set?&lt;/span&gt; (cdr lat))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; simplify set?              -------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;set1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car lat) (cdr lat)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set?&lt;/span&gt; (cdr lat))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Were you surprised to see the function member? appear in the definition of set?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       You should not be,because we have written memeber? already,and now we can &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       use it whenever we want&lt;/span&gt;
         

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;makeset
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car lat) (cdr lat))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;makeset&lt;/span&gt; (cdr lat)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;makeset&lt;/span&gt; (cdr lat)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;makeset1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;makeset&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; (car lat) (cdr lat))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Describe in your own words how the second definition of makeset works?????&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Here are our words:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         &amp;#34;&amp;#34;THe function makeset remembers to cons the first atom in the lat onto the result of the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          natural recursion ,after removing all occurences of the first atom from the rest of the lat.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subset?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; (cdr set1) set2))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; can you  write a shorter version of subset?&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subset1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt; )
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; (cdr set1) set2))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Try to write subset1? with (and ...)&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subset2?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; (cdr set1) set2))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; equip list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqset?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; set1 set2)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; set2 set1))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqset1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; set1 set2)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; set2 set1))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eqset2?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; set1 set2)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;subset?&lt;/span&gt; set2 set1))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;firsts
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? rel) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; (car rel))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;firsts&lt;/span&gt; (cdr rel)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seconds
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? rel) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; (car rel))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;seconds&lt;/span&gt; (cdr rel)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;; one important known : in the (else,things is called recur&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; in the cond&amp;#39;s first question is called the end condtion&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; multi and sigle is recognise by the doing&amp;#39;s if satisfied the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; questions!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; After te define (pair)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;Is fun? a simple one-liner?  It sure is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;How do we reprensent a finite function?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;       For us(lispers)m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                         a finite function is a list of pairs in which&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                         no first element of any pair is the same as any&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                         other first element&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fun?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;set?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;firsts&lt;/span&gt; rel))))


&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fullfun?&lt;span style=&#34;color:#75715e&#34;&gt;;;fun is also a relation&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;;;fullfun is based on the fun&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;set?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;seconds&lt;/span&gt; fun))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;fullfun&amp;#39;s another name is one-to-one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;so we can define it another way&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;one-to-one?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;fun?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;revrel&lt;/span&gt; fun))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; n (- m &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;cookies
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;bake&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;350&lt;/span&gt; degrees))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; minitus))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;mix&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;walnuts&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; cup))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chocolate-chips&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; ounces))
        mix
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;mix&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;flour&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; cups))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oatmeal&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; cups))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;salt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; teaspoon))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;baking-powder&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; teaspoon))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;baking-soda&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; teaspoon)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;mix&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eggs&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; large))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vanilla&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; teaspoon))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cream&lt;/span&gt;
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;butter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; cup))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sugar&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; cups))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Y&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;The Fifth commandments:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  When building a  value with +, always use 0 for the value of the terminating line,for adding 0 does not change the value of an addiction&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  When building a  value with *, always use 1 for the value of the termination line,for multiplying 1 does not change the value of a multiplication&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  When building a  value with cons, always consider () for the value of the terminating line&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Y&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What does (tup+ tup1 tup2) do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         It adds the first number of tup1 to the first number of tup2,then it adds the second number of tup1 to the second number of tup2,etc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               building a tup of answers,for tups of the same length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the unusal about tup+?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         It looks at each element of two tups at the same time,or in other words, it recus on two tups.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; If you recur on one tup how many questions do you have to ask?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         two,they are (null? tup) and else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; When recuring on two tups, how many question need to be asked about the tups? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Four: if the first tup is empty or none-empty,and if the second tup is empty or non-emptyy&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Do you mean the questions (and (null? tup1) (null? tup2)) (null? tup1) (null? tup2) and else &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      But can the first tup be () at the same time as the second is other than ().&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         No ,because the tups must have the same length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Does this mean (and (null? tup1) (null? tup2))  and else are the only questions we need to ask?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Yes!&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;tup+
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup1&lt;/span&gt; tup2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt; (null? tup1) (null? tup2))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (+ (car tup1) (car tup2))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;tup+&lt;/span&gt; (cdr tup1) (cdr tup2)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Why  does the natural recursion include the cdr of bouth arguments?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Because the typical element of the final value use the car of both tups,so now&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      we are ready to consider the rest of both tups -----------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;Yes the right logic&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;tup++
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup1&lt;/span&gt; tup2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? tup1) (null? tup2)) 
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((null? tup1) tup2)
      ((null? tup2) tup1)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (+ (car tup1) (car tup2))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;tup++&lt;/span&gt;  
                (cdr tup1) (cdr tup2)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; can you simplify it????????????????????????????////&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;tup+++
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup1&lt;/span&gt; tup2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? tup1) tup2)
      ((null? tup2) tup1)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (+ (car tup1) (car tup2))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;tup+++&lt;/span&gt;  
                (cdr tup1) (cdr tup2)))))))



(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom-to-function
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;+)) +)
      ((eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;*)) *)
      ((eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;^)) expr)
      ((eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?)) eq?)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;-))))
&lt;span style=&#34;color:#75715e&#34;&gt;; (rember-f (atom-to-function &amp;#39;eq?) &amp;#39;ff &amp;#39;(dfds gi ff sd))  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; In the common lisp:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;            L: (funcall test? (car l) a) ,use the funcall when invoking a function argument or a function that has &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;            not been defuned&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; (car l) a) (cdr l))&lt;span style=&#34;color:#75715e&#34;&gt;;;I think here needs atom2function&lt;/span&gt;
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember-f&lt;/span&gt; test? a 
                               (cdr l)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; The short version! &lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember1-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; (car l) a) (cdr l))&lt;span style=&#34;color:#75715e&#34;&gt;;;I think here needs atom2function&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember-f&lt;/span&gt; test? a 
                               (cdr l)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What kind of values can functions return&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  Lists and atoms&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       But in the eye of us ,all the things are the lists and atoms&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                        so we can return all the kind of values&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                        so what about function themselves? Yes&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                         such as (lambda (a l) ...) is a function of two arguments ,a and l! returns the function!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 This is calld &amp;#34;Curry-ing&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     In the scheme ,Using (define ...)give the preceding function a name,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     but in theCL: (define eq?-c  (a) (function (lambda (x) (eq x a))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     while the scheme : (define eq?-c (lambda (a) (lambda (x) (eq? x a))))&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertL-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        (( null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; (car l) old)
         (cons new (cons old (cdr l))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insertL-f&lt;/span&gt; test?) new old
                                       (cdr l))))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertR-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        (( null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; (car l) old)
         (cons old (cons new (cdr l))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insertR-f&lt;/span&gt; test?) new old
                                       (cdr l))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;The basic principle&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(name --&amp;gt;(null? ---&amp;gt;(eq?    ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ---&amp;gt;(eqan?   ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ---&amp;gt;(equal?  ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ---&amp;gt;(eqlist? ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;sometimes we abstuct the condition to adapt to different state&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; sometimes we abstuct the operations to simplify it&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember1 
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
     ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
     ((eq? (car lat) a)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember1-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; a (car lat))
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember1-f&lt;/span&gt; test?) a 
                                (cdr lat)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember1-f&lt;/span&gt; test?)  a 
                                            (cdr lat))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;((multirember1-f (atom-to-function &amp;#39;eq?)) &amp;#39;fd &amp;#39;(sgs fd gasdg fd))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&amp;#39;(sgs gasdg)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(define multirember1-eq (multirember1-f (atom-to-function &amp;#39;eq?)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;Actually:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;((multirember1-f eq?) &amp;#39;fd &amp;#39;(gsd fd gjsi fd go))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;direct apply function eq?,That doesn&amp;#39;t need (eq?, I learn from&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (multiremberT eq?-salad)&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rembern
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqrem) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; a l)))&lt;span style=&#34;color:#75715e&#34;&gt;;;seqrem doesn&amp;#39;t need (seqrem solve my ?.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqrem
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l) 
    l))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiremberT
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; (car lat))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiremberT&lt;/span&gt; test? (cdr lat)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (car lat)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiremberT&lt;/span&gt; test? 
                           (cdr lat)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eq?-c
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
      (eq? x a))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eq?-salad (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq?-c&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;salad&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;;;(multiremberT eq?-salad &amp;#39;(fsfd salad fsdf sald sg salad))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the name of the third arguments that multiremberco uses for the natural recursion?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; what is the name of the third argument ? And do you know what col stands for?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       The name col is short for &amp;#34;collector&amp;#34;, A collector is sometimes called a continuation&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiremberco
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat col)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))
      ((eq? (car lat) a)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiremberco&lt;/span&gt; a 
                      (cdr lat)
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen) 
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; newlat (cons (car lat) seen)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiremberco&lt;/span&gt; a 
                      (cdr lat)
        )             (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen)
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons (car lat) newlat)
                             seen)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;a-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
    (null? y)))
&lt;span style=&#34;color:#75715e&#34;&gt;;(multiremberco &amp;#39;tuna &amp;#39;(sfds tuna fsd jif) a-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;#f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (multiremberco &amp;#39;tuna &amp;#39;(sfds tuna1 fsd jif) a-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;#t&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;how can  you get another value in the col&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;can you write this definition differently!  Do you mean the new way where we put tuna into the definition?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  col is to a-frined what (car lat) is to tuna.   so we can replace the col with a-frined&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;new-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;a-friend&lt;/span&gt; newlat
         (cons (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;tuna) seen))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; So ANd now?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      multiremberco finds out that(null? lat) is true, which means that it uses the collector on two empty lists.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        which collector is this?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          It is new-friend.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; how does a-friend differ from new-friend ?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              New-friend uses a-friend on the empty list and &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               the value of (cons (quote tuna) (quote ()))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; And what does the old-collector do (a-friend) with such arguments?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              It answers #f,because its second argument is (tuna),which is not the empty list!&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;; I don&amp;#39;t know that the list length ,so easy but I don&amp;#39;t think it clearly!!!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;What is terminal condition ?  (null? lat)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;what is terminal condition line ? ((null? lat) 0)   (terminal_contition terminal_value)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;what is the (+1 (length (cdr lat)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        build the number with +,so the terminal condition line is ((null? lat) 0)   use (cdr lat) to closer the terminal!&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;length
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; a is tuna and lat is (and tuna)  col is a-friend&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;latest-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;a-friend&lt;/span&gt; (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;quotee&lt;/span&gt; and) newlat)
              seen))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;The third collector : the last-friend&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;last-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen)
    (length newlat)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;So  what does (multiremberco a lat f) do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      It looks at every atom of the lat to see whether &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      it is eq? to a.Those atoms that are  not  are collected in one list ls1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      it is eq? to a.The others which the answer is true    are collected in second list ls2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Finally  it determine the value of (f ls1 ls2)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Namely under the process of time(timestep=0,1,2,3,n-1),In the col it classify the data: use cons &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              while at the last time(timestep=n) in the a-friend (col) it determine the cons datas!!&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        The Tenth commandments:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            Build functions to collect more than one value at a time.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;****************************************************************************&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (multiremberco &amp;#39;tuna &amp;#39;(tunanfdfj tuan jsidjf tuna) last-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;actually&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;The basic principle&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(name --&amp;gt;(null? (col (quote()...)---&amp;gt;(eq?    ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ---&amp;gt;(eqan?   ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ---&amp;gt;(equal?  ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ---&amp;gt;(eqlist? ---&amp;gt;single (cons new (cdr l))    --&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                            ---&amp;gt;multi (cons new (name (cdr l)))--&amp;gt;(else&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;sometimes we abstuct the condition to adapt to different state&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; sometimes we abstuct the operations to simplify it&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;multiremboco sometimes we want to change the return value,so co it&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiinsertLR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; oldL oldR lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((eq? (car lat) oldL)
       (cons new 
             (cons oldL
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLR&lt;/span&gt; new oldL oldR
                                  (cdr lat)))))
      ((eq? (car lat) oldR)
       (cons oldR
             (cons new
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLR&lt;/span&gt; new oldL oldR
                                 (cdr lat)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (car lat)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLR&lt;/span&gt; new oldL oldR (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; The function multiinsertLRco is to multiinsertLR what multiremberco is to multirember&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           Does this mean that multiinsertLRco takes one more argument than multiinsertLR?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            Yes! and what kind of argument is it? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   It is a collector function.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiinsertLRco
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; oldL oldR lat col)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((eq? (car lat) oldL)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLRco&lt;/span&gt; new oldL oldR
                        (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; L R)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons new 
                                     (cons oldL newlat))
                               (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; L) R))))
      ((eq? (car lat) oldR)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLRco&lt;/span&gt; new oldL oldR
                        (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; L R)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons oldR
                                     (cons new newlat))
                               L (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; R)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLRco&lt;/span&gt; new oldL oldR 
                        (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; L R)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons (car lat) newlat)
                               L R)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;even?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (= (* (/ n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) n)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;/  &lt;span style=&#34;color:#75715e&#34;&gt;;rewrite the divide to replace the origianl divide from Drracket&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&amp;lt; n m) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (/ (- n m) m))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evens-only*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((even? (car l))
          (cons (car l)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*&lt;/span&gt; (cdr l))))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*&lt;/span&gt; (cdr l)))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*&lt;/span&gt; (car l))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*&lt;/span&gt; (cdr l)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Can you explain what (evens-only*co (carl) ...) accomplishes?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      It visits every number in the car of l and collects the list without odd numbers,the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      product of the even numbers,and the sum of the odd numbers.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      So it is the most complicated,actually not very easy to be understood!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         You can understand with another lat,so you how to associate two lat!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Youknow (even? (car l)) is in  a lat,so it do +*cons in the lat&amp;#39;s number!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evens-only*co
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; col)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((even? (car l))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (cdr l)
                         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newl&lt;/span&gt; p s)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons (car l) newl)&lt;span style=&#34;color:#75715e&#34;&gt;;if it is evens ,so cons it into the newl&lt;/span&gt;
                                (* (car l) p) s))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (cdr l)
                              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newl&lt;/span&gt; p s)
                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; newl p (+ (car l) s)))))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (car l)
                            (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;al&lt;/span&gt; ap as)
                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (cdr l)
                                             (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dl&lt;/span&gt; dp ds)
                                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons al dl)
                                                    (* ap dp)
                                                    (+ as ds))))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;the fourth collector :: the last-last-friend&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;the-last-last-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newl&lt;/span&gt; product sum)
    (cons sum 
          (cons product 
                newl))))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (evens-only*co &amp;#39;(45389 63 45 6 4 234  6 4 23 52 43) the-last-last-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(45563 7008768 6 4 234 6 4 52)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;  after the length !!!!(define length) -------------------------------------&amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  use car !!   zero?  sub1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;pick
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)) (car lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n) (cdr lat))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rempick
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)) (cdr lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rempick&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n) (cdr lat))))
      &lt;span style=&#34;color:#75715e&#34;&gt;;;;; because n  lat is occur in the terminal condition!!!!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; use the function one? to rewrite the function rempick that removes the nth atom from a lat.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rempick1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;one?&lt;/span&gt; n) (cdr lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rempick&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)
                            (cdr lat))))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;keep-looking
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; sorn lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((number? sorn)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;keep-looking&lt;/span&gt; a (&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; sorn lat) lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(eq? sorn a)))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;looking
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;keep-looking&lt;/span&gt; a (&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; lat) lat)))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (looking &amp;#39;cavier &amp;#39;(6 2 4 cavier 5 7 3))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;#t&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eternity
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt; x)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;it doesn&amp;#39;t stop ,because the goal is not absolutely, rather then&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 相对的&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; This is trivival; It&amp;#39;s not even recursive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What does shift do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   Here are our words:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     The shift function takes a pair whose first component is a pair and builds a pair&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     by shifting the second part of the first component into the second component!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     So what is the meaning of component?  --------Component can means atom,pair and list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  Now it means pair.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;shift 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pair))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pair))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; pair)))))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (shift &amp;#39;((fsd fd)(fd gs)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(fsd (fd (fd gs)))&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;align
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pora&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; pora) pora)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;a-pair?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pora))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;align&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;shift&lt;/span&gt; pora)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pora)
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;align&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; pora)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What does it  have in common with keep-looking &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Both functions change their arguments for their recursive uses but in neither&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          case is the change guaranteed to get us closer to the goal&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Why are we not guaranteed that align makes progress?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                In the second cond-line shift creates an argument for align that &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                is not a part of the original argument.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Which commandment does that violate?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              The Seventh Commandment.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Is the new argument at least  smaller than the original one?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            It does not look that way&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Why not?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           The function shift only rearranges the pair it gets.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; And?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           Both the result and the argument of shift have the same number of atoms.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you write a function that counts the number of atoms&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; After the (define intersectall)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;align do what shift can&amp;#39;t do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Such as  (align &amp;#39;(a b))         but (shift &amp;#39;(a b)) will get wrong message.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;a-pair?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((null? x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((null? (cdr x)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((null? (cdr (cdr x))) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; how can you refer to the first S-expression of a pair?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      By taking the car of the pari&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How can you refer to the second S-expression of a pair?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      By taking the car of the cdr of the pair&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How can you build a pair with two atoms?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  You cons the first ne onto the cons of the second one onto (). Thatis (cons x1 (cons x2 (quote ())))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  How can you build a pair with two S-expressions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   you cns the first one onto the cons of the second one onto ().That is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   (cons s1 (cons s2 (quote ()))) or (cons x1 (cons x2 (quote ())))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   Did you notice the difference between the last two answers?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     No ,there aren&amp;#39;t any&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Is align a partial function?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        We don&amp;#39;t now yet.There may be arguments for which it keeps aligning things.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Is there something else that changes about the arguments to align and its recursive uses?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Yes, there is .The first component of a  pair becomes simpler,though the second component becomes more complicated&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; In what way is the first component simpler?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       IT is only a part (IT intelligent technique   is equal to it) of the original pair&amp;#39;s first component.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Doesn&amp;#39;t this mean that lenght * is the wrong function for determining the length of the argument? Can you find a better function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         A better function should pay more attention to the first component&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How much more attention should we pay to the first component?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          At least twice as much&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Do you mean something like weight*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     DOes This mean that the arguments get simpler?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Yes ,the weigth* of align&amp;#39;s arguments become successively smaller&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Is align a partial function?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        No,it yields a value for every argument rather than the partial function looking and looking again.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;length*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pora&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (( atom? pora) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;length*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pora))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;length*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; pora)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;weight*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pora&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; pora) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (+ (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;weight*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pora)) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;weight*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; pora)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Here is shuffle which is like align but uses revpair from chapter7, instead of shift:(when the first component is a-pair?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       THen do revpair.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; The function shuffle and revpair swap the components of pairs when the first component is a pair...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Does this mean that shuffle is total?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        We don&amp;#39;t know yet.(actually  it is not.)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Okay,let&amp;#39;s do something interesting. What is the value of (shuffle x) where x is ((a b) (c d))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; And how are you going to do that?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          We are going to determine the value (shuffle pora) where pora is ((c d) (a b))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Doesn&amp;#39;t this mean that we need to know the value of (shuffle (revpair pora))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            where (revpair pora) is ((a b) (c d))  , yes we do.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; And?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         The function shuffle is not total because it now swaps the components of the pair again, which means that we start all over.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;shuffle
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pora&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; pora) pora)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;a-pair?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pora))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;revpair&lt;/span&gt; pora)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; pora)
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; pora)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (shuffle &amp;#39;(a (b c)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a (b c))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (shuffle &amp;#39;(a b c))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a b)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (shuffle &amp;#39;(a b))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(a b)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;         Thankyou ,Lother Collatz(1910-1990)! It doesn&amp;#39;t yield a value for 0, but otherwise nobody knows.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;C
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;one?&lt;/span&gt; n) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((even? n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; (/ n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; n)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;          Thank you,Wilhelm ackermann(1853-1946)&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;A
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; m)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? n) (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; m))
      ((zero? m) (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; n) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; n (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What does A have in common with shuffle and looking?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         A&amp;#39;s arguments ,like shuffle&amp;#39;s and looking&amp;#39;s,  do not necessarily decrease for the recursion&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Dose A always give an answer? &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Yes,it&amp;#39;s total&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Wouldn&amp;#39;t it be great if we could write a function that tells us whether some function returns with a &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; value for every  argument.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        It sure would.Now that we have seen function that never return a value or return a value so lat that &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        it is too late ,we should have some tool like this around&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Okay,let&amp;#39;s write it&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            It sounds complicated.A function can work for many different arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Then let&amp;#39;s make it simpler.For a warm-up exercise,let&amp;#39;s focus on a function that checks whether some function stops&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; for just the empty list,the simplest of all arguments.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          That world simplify it a lot&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is the beginning of this function:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; (define will-stop?  (lambda (f) ...)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What does it do?  Do will-stop? return a value for all arguments?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; That&amp;#39;s the easy part: we said that it either returns #t or #f,depending on whether the argument stops when applied to ()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Is will-stop? total then?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;   Yes,it is.It always return #t or #f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;okay here is  a function that could be an interesting argument for will-stop?&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;last-try
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;will-stop?&lt;/span&gt; last-try)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt; x)))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;;; what is (will-stop? last-try)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;; What does it do?&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is our meaning:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;    &amp;#34;we took a really close look at the two possible cases.IF we can define will-stop?,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;     then (will-stop? last-try) must yield either #t or #f.Bu it cannot- due to the very&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;     definition of what will-stop? is supposed to do.This must mean that will-stop? cannot &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;     be defined&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;     Because you know,let&amp;#39;s make up some examples.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;     what is the value of (will-stop? last-try) (eternity (quote ()))))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         That depends on the value of (will-stop? last-try)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         we said that will-stop? will stop,so it must return #t or #f,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         let&amp;#39;s say (will-stop? last-try) is #f ,yes,itis .we predict just the opposite&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;            if the value of (will-stop? last-try) is #f,which really means that last-try&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;            will not stop..&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;        So we must have been wrong about (will-stop? last-try) (because it cannot be stopped)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;               That&amp;#39;s correct.It must return #t,because will-stop? always gives an answer. we&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;               said it total(assume)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         Fine. If(will-stop? last-try) is #t. What is the value of (last-try (quote ())) in the definition of last-try.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;           Now we just need to determine the value of (and #t (eternity (quote ()))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;           which is the same as the value of (eternity (quote ()))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;           What is the value of (eternity (quote ())) &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                 It doesn&amp;#39;t have a value.we know that it doesn&amp;#39;t stop&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                 !&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         But that means that we were wrong again!!! The will-stop? neither return #f nor #t. What the hell&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                will-stop? will return?&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         So will-stop? cannot be defined.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         Is this unique?&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                Yes , it is .It makes will-stop? the first function that we can describe percisely but cannot &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                define in our language.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         Is there any way around this problem?&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                No ,thank you  ,Alan M. Turing (1912-1954)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                and Kurt Godel(1906-1978)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;         What is (define...)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;                 That is an interesting question. We just saw that (define...) doesn&amp;#39;t work for will-stop?.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;             So what are the recurive definition?&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;;               Hold tight,take a deep breath,and plunge forward when you&amp;#39;re ready.&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The second part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;****************;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The third part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;   myracet3.rkt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;length 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eternity
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt; x)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l ) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt; (cdr l))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;length&amp;lt;=1&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
       (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
          ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
               ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt; (cdr l))))))
           (cdr l))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;length &amp;lt;=2&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
             ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
              (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                       (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt;
                           (cdr l))))))
                  (cdr l))))))
         (cdr l))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Now what do you thin recursion is?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           What do you mean?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Well,we have seen how to determine the length of a list with no items,with no more that&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; one item,with no more than two items,and so on. How could we get the function length back.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           If we could write an infinite function in the style of length0 ,length1,length2..&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           then we could write lengthinfinite,which would determine the length of all lists&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           we can make.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     But we cannot write an infinite function. No we can&amp;#39;t, (yes ,we can&amp;#39;t mae it)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      And we still have all these repetitions and patterns in these functions. yes we do.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      What do these pattern look like?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               All these programs contain a function that looks like length.Perhaps we should&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;               abstract out this function: see The Ninth Commandment.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     We need a function that looks just lie length but starts with (lambda (length) ...).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Do you mean this?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;((lambda (length)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;(lambda (l)  (cond ((null? l) 0)  (else (add1 (length (cdr l)))))) eternity)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Yes,that&amp;#39;s okay. It creates length0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;so rewrite length1  in the same style&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;See below.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;we need a function that looks just like length &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;but starts with (lambda (length)...) and inside it is not &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(lambda (length) but maybe (lambda (l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;length0&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;legnth&lt;/span&gt;)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (length (cdr l))))))
    eternity)


&lt;span style=&#34;color:#75715e&#34;&gt;;length1&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
         (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (cdr l)))))))
   ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
          ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; (cdr l)))))))
    eternity))

&lt;span style=&#34;color:#75715e&#34;&gt;;;  Do we have to use length to name the argument?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;         No ,we just used f and g. As long as we are consistent,everything&amp;#39;s okay&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;length2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;length &amp;lt;=2&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l)))))))
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l)))))))
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l)))))))
   eternity)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; close,  But there are still repetitions.  True,let&amp;#39;s get rid of it.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Where should we start?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Name the function that takes length as an argument and that returns a function that looks like length.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  What&amp;#39;s a good-name for this function?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           how about mk-length  for &amp;#34;make length&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;let eternity move ahead , eternity in the first part&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; eternity))
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l))))))))

((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   &lt;span style=&#34;color:#75715e&#34;&gt;;;提取池&lt;/span&gt;
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; 
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; eternity)))
 &lt;span style=&#34;color:#75715e&#34;&gt;;;发生池&lt;/span&gt;
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;length&amp;lt;=2&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   &lt;span style=&#34;color:#75715e&#34;&gt;;;提取池&lt;/span&gt;
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; 
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; 
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; eternity))))
 &lt;span style=&#34;color:#75715e&#34;&gt;;;发生池&lt;/span&gt;
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l))))))))
 &lt;span style=&#34;color:#75715e&#34;&gt;;;length &amp;lt;=3&lt;/span&gt;
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   &lt;span style=&#34;color:#75715e&#34;&gt;;;提取池&lt;/span&gt;
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; 
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; 
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; eternity)))))

  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;              So   What is recursion like?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                             It is like an infinite tower of applications of mk-length to ab arbitrary function.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;               Do you really need an infinite tower?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                      Not really of course.Everytime we use length we only need a finite number,but we never know &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                      know many.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;               could we guess how many we need?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                     Sure,but we may not guess a large enough number!&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;               When do  we  find out that we didn&amp;#39;t guess a large enough number?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                     When we apply the function eternity that is  passed to innermost mk-length.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;               What if we could create another application of mk-length to eternity at this point?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                       That would only postpone the problem by one and besides,how could we do that?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                Well,since nobody cares what function we passwd to mk-length we could pass it mk-length initially.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                      That&amp;#39;s the right idea(right?       )             And then we invoke mk-length on eternity and the &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;;                      result of this on the cdr so that we get one more piece of this tower.&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;发生池&lt;/span&gt;
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (length (cdr l))))))))
 
 &lt;span style=&#34;color:#75715e&#34;&gt;;;how if we replace the eternity with the mk-length&lt;/span&gt;
 
 &lt;span style=&#34;color:#75715e&#34;&gt;;length0; 因为没有人关心我们到底我们传递什么给mk-length 如果他是无穷的话&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;那我们可不可以第一次初始化的时候就传递给他 mk-length 来替代eternity呢？&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;; Yes,we could even use mk-length instead of length.&lt;/span&gt;
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
                  (length (cdr l))))))))
 &lt;span style=&#34;color:#75715e&#34;&gt;;;和上面一样&lt;/span&gt;
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; (cdr l))))))))
 &lt;span style=&#34;color:#75715e&#34;&gt;;; WHy would we want to do that?&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;         All names are equal, but some names are more equal than others! (with apologies to George Orwell(1903-1950)&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;         True: as long as we use the names consistently ,we are just fine.&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;     And mk-length is a far more equal  name than length. If we use a name like mk-length, it is a  contstant reminder that&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;      the first argument to mk-length is mk-length&lt;/span&gt;
 
 &lt;span style=&#34;color:#75715e&#34;&gt;;;我们为什么想着上面的做法呢？&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;因为所有的名字都是一样的，但是有些名字是更一样比其他&lt;/span&gt;
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; 
               ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; eternity)
                (cdr l))))))))
 
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
           ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (length (cdr l)))))))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; How about this?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Yes,this looks just fine.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Let&amp;#39;s see thether it works?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Yes ,okay&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; First,we need to know the value of it?&lt;/span&gt;

 
 &lt;span style=&#34;color:#75715e&#34;&gt;;;; what would  you call this  function above?&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;        It&amp;#39;s length,of course&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;    How does it work?&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;           It keeps adding recurive uses by  passing mk-length to itself,just as it is about to expire&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;           One problem is left: it  no longer contains the function that looks like length.&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;           can you fix the (mk-length mk-length) .?&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;            We could extract this new application of mk-length to itself and call it length&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;        WHy?&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;             Because it really makes the function length.&lt;/span&gt;
 
 &lt;span style=&#34;color:#75715e&#34;&gt;;;since (mk-length mk-length returns a fucntion of one argument,&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;does (lambda (x) ((mk-length mk-length) x)) retrun a function of&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;one argument? Actually,it is a function&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
 &lt;span style=&#34;color:#75715e&#34;&gt;;;Okay ,let&amp;#39;s do this to the application of mk-length to itself&lt;/span&gt;
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; 
               ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
                  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x))
                (cdr l))))))))
  
  &lt;span style=&#34;color:#75715e&#34;&gt;;;move out the new function so that we get length back&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;Why can&amp;#39;t you move out (lambda (x) ((mk-length mk-length) x))  &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;       &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;            Because you add the (lambda (length)  which is like the definition of define.(actually are)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;            also here the meaning of length is  (lambda(x) ((mk-length mk-length) x)),so you can use the&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;            usage of lambda(length) and the definition of length in the same S-expressions!!(By zhaoliang)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;                    You know the same S-expression (the same parathese here)&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;            Is it okay to move out the function?&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;                     Yes,we just always did the opposite by replacing a name with its value. Here we&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;                     extract a value and give it a name.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;            Can we extract the function in the box(p171) that looks like length and give it a name&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;                          Yes,it does not depend on mk-length at all!&lt;/span&gt;
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
            ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (length (cdr l)))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x)))))


&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The third part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;***************;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The fourth part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;  myracet4.rkt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; Is this the right function!             ------you can check back the nottation above.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Here the definition of le(lambda (length)...) and the usage of le (lambda (le)...) is in the same &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;S-expressions!!(the same parathese)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
   ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
            ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x))))))
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (length (cdr l))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; Let&amp;#39;s separate the funtion that makes length from the function that looks like length.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
           ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Does this function have a name?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Yes ,it is called the application-order Y combinator.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;) 
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
             ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; the above function is replace the mk-length with  f ,so it looks more common!      BUt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      it lacks the definition of (le)  just the usage of le.so it means the Y combinator.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      (lambda (length)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            (lambda  (l)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 ...           ---&amp;lt; it is the definition of function length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     ((lambda  (le)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        )&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     (lambda (length)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         ))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             ----&amp;lt;  it is the definition of function le is the (lambda (length)...)) and the use &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             of the le is in the (lambda (le) ...)   Take care what the left parathese and right &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             parathese I utilize.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             ----------------------which is similar to apply-closure that contains three part&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                            table-of   form-of    body-of&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;; An entry is a pair of lists whose first list is a set. Also ,the two lists must be of equal &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; length.Make up some examples for entries&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              Here are some examples:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              ((appetizer entree beverage)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              (pate boeuf vin))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              ((appetizer entree beverage)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              (beer beer beer)  ---------------------------&amp;lt; but the second list can be not a set&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              and &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;              (( beverage dessert)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;               ((food is) (number one with us)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;How can we build an entry from a set of names and a list of values?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;           (define new-entry build)           ----&amp;gt;Try to build our examples with this function.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;What is (lookup-in-entry name entry)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;     where name is entree&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;     and entry is ((appetizer entree beverage)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                   (food tastes  good))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                ------------------------------&amp;gt;tastes&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;      What if name is dessert&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;             In this case we would like to leave the decision about what to do with the user of lookup-in-entry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;      How can we accomplish this?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;             lookup-in-entry takes an additional argument this is invoked when name is not found in the first &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                list of an entry.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;      How many arguments do you think this extra function should take?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;            We think it should take one , name. Why?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The fourth part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;***************;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The fifth part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;myracet5.rkt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))
  
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;build
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons s1
                  (cons s2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))))))
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nothing&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;nothing&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;something))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;nothing))))
   &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; Here is our dfinition of lookup-in-entry:&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-entry
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; entry entry-f)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry-help&lt;/span&gt; name
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; entry)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; entry)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;entry-f&lt;/span&gt;))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Finish the function lookup-in-entry-help-----------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-entry-help
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; names values entry-f)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? names) (&lt;span style=&#34;color:#a6e22e&#34;&gt;entry-f&lt;/span&gt; name))
      ((eq? (car names) name)
       (car values))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry-help&lt;/span&gt; name
                                  (cdr names)
                                  (cdr values)
                                  entry-f)))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     A table(based on entries) (also   called an environment) is a list of entries.Here is one example: The empty table&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     ,represented by ()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Make up some others.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Here is another one:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                          (((appetizer entree beverage)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            (pate boeuf vin))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            ((beverage desert)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             ((food is) (number one with us)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                           )&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         Define the function extend-table which takes an entry and a table (possibly the empty one)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         and create a new table by putting the new entry in front of the old table.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         (define extend-table cons)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         (lookup-in-table name table table-f)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 name is entree&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 table is (((entree dessert)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            (spaghetti spumoni))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                           ((appetizer entree beverage)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            (food tastes good)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 and &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                    table-f is (lambda (name) ...)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             -----&amp;gt; It could be either spaghetti or tastes,but lookup-in-table searches the list of entries in order&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                    So it is spaghetti&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you describe what the following function &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; represents:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            (lambda (name)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                (lookup-in-table name&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (cdr table)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     table-f))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     ---------------------------&amp;gt; This function is the action to take when the name is not found in the first entry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                  In one table there are a set of entries (set means each of the entries is different &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                  from each other)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Have we chosen a good representation for expressions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           Yes .They are all S-expressions so they can be data for functions.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What kind of functions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           For example ,value(later on ,the value is defined as another name  compiler.(like gcc  gfortran  ifort  python perl etc)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Do you remember value from chapter 6?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Recall that value is the function that returns the natural value of expressions.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the value of&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  (car (quote (a b c)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         We don&amp;#39;t even know  what (quote (a b c)) is .---------------------------------&amp;lt;&amp;lt;&amp;lt;&amp;lt;The original state of you learning english!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                          You don&amp;#39;t know &amp;#39;am&amp;#39; &amp;#39;are&amp;#39; &amp;#39;is&amp;#39; etc.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;What is the value of&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      (cons rep-a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        (cons rep-b&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          (cons rep-c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             (quote ()))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       rep-a is a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       rep-b is b&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       rep-c is c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         ==================&amp;gt;&amp;gt; It is the same as (a b c)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;And what is the value of&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; (cons rep-car&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     (cons (cons rep-quote&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              (cons &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  (cons rep-a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (cons rep-b&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                        (cons rep-c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             (quote ()))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  (quote ())))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       (quote ())))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         rep-car is car&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         rep-quote is quote&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         rep-a is a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         rep-b is b&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         rep-c is c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                        ====================&amp;gt;&amp;gt; It is the representation of the expressions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                      (car (quote (a b c)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                      ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                      The above is  what I say: Lisp is the data with program!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                              Data can be code,code can also become data!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is value of&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      (car (quote (a b c)))           &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       =====================&amp;gt;&amp;gt; a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          e is (car (quote (a b c)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       =====================&amp;gt;&amp;gt; a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           e is (quote (car (quote (a b c))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       =====================&amp;gt;&amp;gt; (car (quote (a b c)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        where&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            e is (add1 6)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                        ====================&amp;gt;&amp;gt; 7&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            e is 6&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                        ====================&amp;gt;&amp;gt; 6 .because numbers are constants&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            e is (quote nothing)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                        ====================&amp;gt;&amp;gt; nothing&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           e is ((lambda (nothing)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                    (cons nothing (quote ())))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 (quote &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                    (from nothing comes something)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                        ====================&amp;gt;&amp;gt; ((from nothing come something)).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            e is ((lambda (nothing)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     (cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                        (nothing (quote something))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                        (else (quote nothing))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  #t)             -------------------------&amp;lt; It means nothing is #t(The semtatics of language (the infer of language))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       =====================&amp;gt;&amp;gt; something&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is 6&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                        ====================&amp;gt;&amp;gt; *const&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is #f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *const&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (value e)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is #f                 ======================&amp;gt;&amp;gt; #f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is cons&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *const             -----------------------&amp;gt;I think is must be somethin wrong &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                                   -----------------------&amp;gt;I think it is primitive car&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                                   -----------------------&amp;gt;I am wrong ,primitive is also *const&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is car&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; (primitive car)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is (quote nothing)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *quote&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is nothing&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *identifier&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is (lambda (x y) (cons x y))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *lambda&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is ((lambda (nothing)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      (cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                          (nothing (quote something))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                          (else (quote nothing))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                     #t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *application&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is the type of e&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is (cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      (nothing  (quote something))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      (else (quote nothing)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                       ======================&amp;gt;&amp;gt; *cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How many types do you think there are?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                          we found six:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         *const&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         *quote&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         *identifier&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         *lambda&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         *cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                         and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                           *application&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How do you think we should represent types?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              We choose functions.We call these functions &amp;#34;action&amp;#34;;------------------------------------&amp;lt;In python ,it is called as objects&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                   or,in oop(orient object programming) ,it is called as objects&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; If actions are functions that do &amp;#34;the right thing&amp;#34;  when applied to the appropriate type of expression,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                 What should value do?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     You guessed it. It would have to find out the type of expression it was passed  and then use the associated action.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Do you remember atom-to-function from chapter8?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         We found atom-to-function usefule when we rewrote value for numbered expressions.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-table
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; table table-f)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? table) (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt; name))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry&lt;/span&gt; name
                             (car table)
                             (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; name
                                                (cdr table)
                                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt;))))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; table table-f)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; name
                     (cdr table)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt;)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Below is a function that produces the correct action (or function) for each possible S-expression:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; The top level make-up&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expression-to-action
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom-to-action&lt;/span&gt; e))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list-to-action&lt;/span&gt; e)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; IN the III-formed S-expressions suchas (quote a b), () , (lambda (#t) #t),(lambda (4) 4)  ,(lambda (car) car)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         (lambda a),(cond (3 c) (else b) (5 a)) , And (1 2) are not considered here.They can be detected by an &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         appropriate function to which S-expressions are submitted before they are passed to value.&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom-to-action
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((number? e) *const)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) *const)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cons)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;car)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;null?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;atom?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;zero?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;add1)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;sub1)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;number?)) *const)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*identifier))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; so *const is consed by three parts: primitive part ,number , #t or #f part.(not include string part, because string part is called *identifier)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;By zhaoliang&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;It means that the following identifier can see the list as its function&amp;#39;s argument!    --------------------------&amp;lt;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;list-to-action
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car e))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;quote))
          *quote)
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;lambda))
          *lambda)
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cond))
          *cond)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;; So the compiler is comming on the way............................&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       If we assuming the expression-to-action works,we can use it to define value and meanning&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))  &lt;span style=&#34;color:#75715e&#34;&gt;;;;Now table is empty set.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;meaning
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;expression-to-action&lt;/span&gt; e) e table)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; The function value, together with all the functions it uses ,is called an interpreter.(Note that: all the relevent function value use&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;The function value approximates the function eval  available in Schemes(and Lisp)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;How many arguments should actions take according to the above?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;             Two,the expression e and a table&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is the action for constants:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*const
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((number? e) e)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive) e)))))  &lt;span style=&#34;color:#75715e&#34;&gt;;;;;-----------------&amp;lt;&amp;lt;&amp;lt;&amp;lt; Yes,primitive car,primitive con,primitive cdr&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is the action for constants:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*quote
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;text-of&lt;/span&gt; e)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;first
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car p)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;second
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;car (cdr p)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;third
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;car (cdr (cdr p))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;text-of second)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Have we used the table yet?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   No, But we will in a moment.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Why do we need the table?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                   To remember the values of identifiers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; Given that the table contains the values of identifiers ,write the action of *identifier&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*identifier
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; e table initial-table)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is the initial-table ---------------------------------------------&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;initial-table
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
    (car (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; When is it used?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       Let&amp;#39;s hope never. Why?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;What is the value of (lambda (x) x)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;         We don&amp;#39;t know yet, But we know that it must be the representation for a non-primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                  function.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  How are non-primitive functions different from primitives?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   We know what primitives do;  non-primitives are defined by their argumentss and their function bodier&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                                                     ^^^^^ ^^ ^^^^^ ^^^^^^^^^^ ^^^ ^^^^^ ^^^^^^^^ ^^^^^^&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                                                     What does it mean?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                                                      arguments (x y ...)       function bodier: x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  So when we want to use a non-primitive we need to remember its formal arguments and its function body.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;       At least. Fortunately this is just the cdr of a lambda expression! Because the car of the lambda expression is lambda&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  And what else do we need to remember?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                             &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                              We wll also put the table in,just in case we might need it later&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  And How do we represent this?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;                   In a list,of course.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; Here is the action *lambda&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*lambda
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive)
           (cons table (cdr e)))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What is (meanning a table)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        where&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              e is (lambda (x) (cons x y))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              table is (((y z) ((8) 9)))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              ==========================================&amp;gt;&amp;gt;&amp;gt; (non-primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                   (   (((y z) ((8) 9)))         (x)             (cons x y)   ))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                       ^^^^^^^^^^^^^^^^^         ^^^             ^^^^^^^^^^^^^^^&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                           table                 formals             body&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;It is probably a good idea to define some help functions for getting back the parts in this three elements&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;list (i.e. the tables,the formal arguments,and the body).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;table-of first)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;formals-of second)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;body-of third)


&lt;span style=&#34;color:#75715e&#34;&gt;;;; Describe (cond...) in your own words&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      It is a special form that takes any number of cond-lines. It considers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      each line in turn. If the question part on the left is false, it looks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      at the rest of the lines.Otherwise it proceeds to answer the right part.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       If it sees an else-line,it treats that cond-line as if its question part&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       were true.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is the function evcon that does what we said in words&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evcon
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt; table)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;else?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines)))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines))
                table))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines))
                table)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines))
                table))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (cdr lines) table)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; else? determine whether the (car expression)  is else or not!&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;else?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) (eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;else)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; didn&amp;#39;t we violate the First Commandment?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Yes,we don&amp;#39;t ask (null? lines), so one of the questions in every cond better be true&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;question-of first)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;answer-of second)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Now use the function evcon to write the *cond action&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Here is the action for *cond&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*cond
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-lines-of&lt;/span&gt; e) table)))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Aren&amp;#39;t these help functions useful?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;          Yes they make things quite a bit more readable.But you already knew that.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Do you understand *cond now?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           Perhaps not&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How can you become familiar with it?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         The best way is to try an example.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         A good one (examples ) is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                (*cond e table)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       e is (cond (coffee klatsch) (else (party))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                  and &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                       table is (((coffee) (#t))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 ((klatsch party) (5 (6))))&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;cond-lines-of cdr)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Have we seen how the table gets used?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            Yes,*lambda and *identifier use it&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;But how do the identifiers get into the table?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;            In the only action we have not defined:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      *application&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      ^^^^^^^^^^^^&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                      ||||||||||||&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; How is an application represented?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        An application us a list of  expressions whose car position contains an expression whose value is a function.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;How does an application differ from a special form, like (and ...) (or ...) or (cond ...)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     An application must always determine the meaning of all its arguments.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Before we can apply a function ,do we have to get the meaning of all of its arguments?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       Yes.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Write a function evils that takes a list of (representations of) arguments and a table, and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  returns a list composed of the meaning of each argument&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evlis
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? args) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (car args) table)  &lt;span style=&#34;color:#75715e&#34;&gt;;;; really  importan  for every argument!&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (cdr args) table))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; What else do we need before we can determine the meaning of an application?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;We need to find out what its function-of means&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;And what then?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Then we apply the meaning of the function to the meaning of the arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Here is *application&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*application
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;function-of&lt;/span&gt; e) table)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments-of&lt;/span&gt; e) table))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Of course, we just have to define apply , function-of, and arguments-of correctly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;function-of car)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;arguments-of cdr)

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; How many different kinds of functions are there?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     Two: primitive and non-primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; What are the two representation of functions?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; (primitive primitive-name)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; and (non-primitive (table formals body))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      The list (table formals body) is called a  closure record.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;      Write primitive? and non-primitive?&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;primitive?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;non-primitive?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; If fun does not evaluate to either a primitive or a non-primitive as&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         in the expression ((lambda (x) (x 5)) 3) ------&amp;lt;&amp;lt;&amp;lt; This expression cannot be detected in the now preocedure&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         there is no answer. The function apply approximatly the funcion apply available in Scheme (and lisp)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt; vals)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;primitive?&lt;/span&gt; fun)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-primitive&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; fun) vals))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;non-primitive?&lt;/span&gt; fun)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-closure&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; fun) vals)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;; This is the definition of apply-primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-primitive
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; vals)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cons))
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;car))
       (car (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr))
       (cdr (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;null?))
       (null? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?))
       (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;atom?))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;:atom?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;zero?))
       (zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;add1))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;sub1))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;number?))
       (number? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;:atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((null? x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((eq? (car x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((eq? (car x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Is apply-closure  the only function left?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;        Yes,and apply-closure must extent the table&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                    extent the table?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     how could we first find the result of (f a b)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;     where&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       f is (lambda (x y) (cons x y))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       a is 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       and &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       b  is (2)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;       ===================That&amp;#39;s tricky. But we know what to do to find the meaning of (cons x y)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                               where &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                     table is (((x y)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                                                (1 (2)))).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Table is the contain of the variables defined by you!!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;  Why can we do this?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;           Here ,we don&amp;#39;t need apply-closure&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; Can you generalize the last two steps?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 Applying a non-primitive function --a closure---to&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 a list of values  is the same as finding the meaning  of &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 closure&amp;#39;s body with its table extended by an entry of the form&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 (formals values)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 In this entry,formals is the formals of closure and values is &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                                 the result of evils&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-closure
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;closure&lt;/span&gt; vals)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body-of&lt;/span&gt; closure)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-table&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;new-entry&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;formals-of&lt;/span&gt; closure)
               vals)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-of&lt;/span&gt; closure)))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;; This is a complicated function and it deserves an example.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;         In the following,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;              closure is ((((u v w)          ;;; entry name&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            (1 2 3))         ;;; entry value&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            ((x y  z)        ;;;;entry name&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                             (4 5 6)))       ;;;; entry value&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            (x y)             ;;; formal&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;                            (cons z x))        ;;; body &lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;new-entry build)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-table cons)


&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The fifth part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;****************;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The sixth part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;; myracet6.rkt ;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? a (car lat))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;member1?&lt;/span&gt; a (cdr lat)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;the most common thinking,find it and then continul&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-first?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(eq? (car lat) a)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-first?&lt;/span&gt; (car lat) (cdr lat))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; (cdr lat)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;the development, more close,but if-first-b must use&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;the two-in-a-row? ,so can we write a version which &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;didn&amp;#39;t use two-in-a-row? at all?&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-first-b?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car lat) a )
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; lat))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row-b?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;is-first-b?&lt;/span&gt; (car lat) (cdr lat))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;the is-first-b? only do the job about eq?,so why can I&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;let is-first-b? also do another thing,recur. So I&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;don&amp;#39;t need two-in-a-row? again.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-first-c?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;preceding&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car lat) preceding)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;is-first-c?&lt;/span&gt; (car lat)
                        (cdr lat)))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row-c?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-first-c?&lt;/span&gt; (car lat)
                         (cdr lat))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;although two-in-a-row-c? and two-in-a-row-b? look&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;the same in the shape;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;but the essence is not the same!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;version b, is just encasual the is-first? and two-&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;version c, is updated version, used it by itself?&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sum-of-prefixes-b
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sonssf&lt;/span&gt; tup)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? tup) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (+ sonssf (car tup))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes-b&lt;/span&gt;
                   (+ sonssf (car tup))&lt;span style=&#34;color:#75715e&#34;&gt;;;thinking hole&lt;/span&gt;
                   (cdr tup)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;not leave before,important for your thinking&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(sum-of-prefixes-b 0 &amp;#39;(1 3 5))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;two arguments&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;pick
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((eq? n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (car lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (cdr lat))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;scramble-b
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup&lt;/span&gt; rev-pre)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? tup) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; (car tup)
                   (cons (car tup) rev-pre))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;scramble-b&lt;/span&gt; (cdr tup)
                         (cons (car tup) rev-pre)))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;;&amp;gt;  (scramble-b &amp;#39;(1 1 1 3 4 2 1 1 9 2) (quote ()))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&amp;#39;(1 1 1 1 1 4 1 1 1 9)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(scramble-b &amp;#39;(2 1 1 3 4 2 1 1 9 2) (quote ())) have a bug&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&amp;gt; (scramble-b &amp;#39;(1 2 1 3 4 2 1 1 9 2) (quote ()))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;&amp;#39;(1 1 1 2 2 4 1 1 1 9)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;the base procedure&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;result     rev-pre&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1          1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1        2(tup di er wei) 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1      1(tup di san wei) 2 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2    3 1 2 1 (from here to select the index 3 so is 2)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2 2  4 3 1 2 1  (select the index 4 of lat)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2 2 4    2 4 3 1 2 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2 2 4 1  1 2 4 3 1 2 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2 2 4 1 1     1 1 2 4 3 1 2 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2 2 4 1 1 1   9 1 1 2 4 2 1 2 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;1 1 1 2 2 4 1 1 1 9   2 9 1 1 2 4 2 1 2 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;actually in the list of the lat,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;the first number in the rev-pre expose the target I &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;should get from the rev-pre,so on the one-hand,I should&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;pick-up the value according the index from varient and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;increasing lat ,on the second hand I should constuct&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;the varient list of revpre!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;step1 car the current tup &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;step2 and put it into the list of revpre&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;step3 watch the index it on the list of revpre&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;step4 put the index value into the results! ok!&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;The sixth part;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 11 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Welcome Back to the Show&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Remember member? from The Little Schemer? (http://bit.ly/4GjWdP)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; It finds if an element &amp;#39;a&amp;#39; is in a list of atoms &amp;#39;lat&amp;#39;.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? a (car lat))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; a (cdr lat)))))))



&lt;span style=&#34;color:#75715e&#34;&gt;; member? helper function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member1?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                 ((eq? (car l) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (cdr l)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; l))))


&lt;span style=&#34;color:#75715e&#34;&gt;; is-first? function finds out whether the next element in lat, if there is&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; one, is identical to this element.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-first?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(eq? (car lat) a)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; two-in-a-row? function determines whether any atom occurs twice in a row.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-first?&lt;/span&gt; (car lat) (cdr lat))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of two-in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines spaghetti parsley))           &lt;span style=&#34;color:#75715e&#34;&gt;; false&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines sardines spaghetti parsley))  &lt;span style=&#34;color:#75715e&#34;&gt;; true&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines more sardines spaghetti))     &lt;span style=&#34;color:#75715e&#34;&gt;; false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another version of two-in-a-row? that leaves decision of what to do to&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; is-first-b?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row-2?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;is-first-b?&lt;/span&gt; (car lat) (cdr lat))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; is-first-b? function for two-in-a-row-2?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;is-first-b?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car lat) a)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; lat))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of two-in-a-row-2?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines spaghetti parsley))           &lt;span style=&#34;color:#75715e&#34;&gt;; false&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines sardines spaghetti parsley))  &lt;span style=&#34;color:#75715e&#34;&gt;; true&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines more sardines spaghetti))     &lt;span style=&#34;color:#75715e&#34;&gt;; false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another version of two-in-a-row? that recurs itself instead of using&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; is-first?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row-b?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;preceding&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? (car lat) preceding)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-b?&lt;/span&gt; (car lat) (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; The final version of two-in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row-final?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-b?&lt;/span&gt; (car lat) (cdr lat))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-final?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines spaghetti parsley))           &lt;span style=&#34;color:#75715e&#34;&gt;; false&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-final?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines sardines spaghetti parsley))  &lt;span style=&#34;color:#75715e&#34;&gt;; true&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-final?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines more sardines spaghetti))     &lt;span style=&#34;color:#75715e&#34;&gt;; false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Helper function for upcoming sum-of-prefixes function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sum-of-prefixes-b
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sonssf&lt;/span&gt; tup)     &lt;span style=&#34;color:#75715e&#34;&gt;; sonssf stands for &amp;#39;sum of numbers seen so far&amp;#39;&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (+ sonssf (car tup))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes-b&lt;/span&gt;
                   (+ sonssf (car tup))
                   (cdr tup)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; sum-of-prefixes function finds the running sum of a list of numbers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sum-of-prefixes
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes-b&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; tup)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of sum-of-prefixes&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(2 3 12 29 29)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 2 3 4 5)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 2 3)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The eleventh commandment                                                   ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use additional arguments when a function needs to know what the other      ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; arguments to the function have been like so far.                           ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Remember the pick function from chapter 4 of The Little Schemer?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;pick
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;one?&lt;/span&gt; n) (car lat))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n) (cdr lat))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; It uses one? and sub1 helper functions&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;one?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (= n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; scramble-b is a helper function for scramble&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;scramble-b
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup&lt;/span&gt; rev-pre)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt; (car tup) (cons (car tup) rev-pre))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;scramble-b&lt;/span&gt; (cdr tup)
                         (cons (car tup) rev-pre)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; scramble&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;scramble
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;scramble-b&lt;/span&gt; tup &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of scramble&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;scramble&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 1 1 1 1 4 1 1 1 9)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;scramble&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 1 1 1 1 1 1 1 1)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;scramble&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 1 1 1 1 1 1 1 2 8 2)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 12 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Take Cover&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; add1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; The Y-combinator&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; length function written via Y-combinator and applied to &amp;#39;(a b c)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (length (cdr l)))))))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c))  &lt;span style=&#34;color:#75715e&#34;&gt;; produces output 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; No need to pass &amp;#39;a&amp;#39; around in multirember&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use Y-combinator not to pass it around&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((eq? a (car lat)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (cdr lat)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
               (cons (car lat) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (cdr lat))))))))
     lat)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of multirember&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c a a a x))             &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(b c x)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; multirember via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                ((eq? a (car lat)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (cdr lat)))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                  (cons (car lat) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (cdr lat))))))))
       mr)
     lat)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of multirember-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-letrec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c a a a x))      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(b c x) &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Structure of letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; ((letrec ((mr ...)) mr) values)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another way to write multirember via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-letrec-2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
               ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
               ((eq? a (car lat)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (cdr lat)))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                 (cons (car lat) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (cdr lat))))))))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; lat))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Another test of applying multirember-letrec-2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-letrec-2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c a a a x))      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(b c x) &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The twelfth commandment                                                    ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use (letrec ...) to remove arguments that do not change for recursive      ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; applications.                                                              ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Yet another way to write multirember via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-letrec-3
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
             ((null? lat) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
             ((eq? (car lat) a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; a (cdr lat)))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
               (cons (car lat) (&lt;span style=&#34;color:#a6e22e&#34;&gt;mr&lt;/span&gt; a (cdr lat))))))))
    mr))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test multirember-letrec-3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-letrec-3&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c a a a x))      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(b c x) &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The member? function determines if the given element is in the list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((eq? (car lat) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; a (cdr lat))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test member?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c x d e f))   &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c d e f))     &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; member? via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member-letrec?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
       ((&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                  ((eq? (car l) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (cdr l)))))))
     yes?)
    l)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test member-letrec?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;member-letrec?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c x d e f))   &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;member-letrec?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c d e f))     &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another member? via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member-letrec-2?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                 ((eq? (car l) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (cdr l)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; l))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test member-letrec-2?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;member-letrec-2?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c x d e f))   &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;member-letrec-2?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b c d e f))     &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The union function takes two sets and merges them&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;union
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) set2)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2) 
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;union&lt;/span&gt; (cdr set1) set2))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (car set1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;union&lt;/span&gt; (cdr set1) set2))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of union&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;union&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(tomatoes &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;macaroni casserole)
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(macaroni &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;cheese)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(tomatoes and macaroni casserole cheese)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; union via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;union-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? set) set2)
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set) set2)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (cdr set)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (cons (car set) (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (cdr set))))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; set1))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of union-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;union-letrec&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(tomatoes &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;macaroni casserole)
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(macaroni &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;cheese)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(tomatoes and macaroni casserole cheese)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The thirteenth commandment                                                 ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use (letrec ...) to hide and to protect functions.                         ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;union-letrec-protected
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? set) set2)
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;M?&lt;/span&gt; (car set) set2)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (cdr set)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (cons (car set) (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (cdr set)))))))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;M?&lt;/span&gt;
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
             ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
             ((eq? (car lat) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;M?&lt;/span&gt; a (cdr lat)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; set1))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of union-letrec-protected&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;union-letrec-protected&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(tomatoes &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;macaroni casserole)
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(macaroni &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;cheese)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(tomatoes and macaroni casserole cheese)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Fixing M? to follow 12th commandment&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;union-letrec-protected-12
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? set) set2)
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;M?&lt;/span&gt; (car set) set2)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (cdr set)))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (cons (car set) (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; (cdr set)))))))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;M?&lt;/span&gt;
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
             ((&lt;span style=&#34;color:#a6e22e&#34;&gt;N?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                      ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                      ((eq? (car lat) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;N?&lt;/span&gt; (cdr lat)))))))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;N?&lt;/span&gt; lat)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;U&lt;/span&gt; set1))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of union-letrec-protected-12&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;union-letrec-protected-12&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(tomatoes &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;macaroni casserole)
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(macaroni &lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;cheese)) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(tomatoes and macaroni casserole cheese)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The two-in-a-row? checks if a lat contains two equal elements&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
              ((eq? a (car lat)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (car lat) (cdr lat)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (car lat) (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test two-in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; &lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines spaghetti parsley))           &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines sardines spaghetti parsley))  &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines more sardines spaghetti))     &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another version of two-in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row-2?
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
            ((eq? a (car lat)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (car lat) (cdr lat)))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (car lat) (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test two-in-a-row-2?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines spaghetti parsley))           &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines sardines spaghetti parsley))  &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row-2?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(Italian sardines more sardines spaghetti))     &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The sum-of-prefixes finds the running sum of a list of numbers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sum-of-prefixes
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tup&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sss&lt;/span&gt; tup)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? tup) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (cons (+ sss (car tup))
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; (+ sss (car tup)) (cdr tup))))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; tup))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of sum-of-prefixes&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(2 3 12 29 29)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 2 3 4 5)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-of-prefixes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 2 3)&lt;/span&gt;



(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? set1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())  &lt;span style=&#34;color:#75715e&#34;&gt;; don&amp;#39;t forget the 1st commandment&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set1) set2)
       (cons (car set1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (cdr set1) set2)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (cdr set1) set2)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; It needs member? helper function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                 ((eq? (car l) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (cdr l)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; l))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of intersect&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(q w e x r t y a))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a x)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                             &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d))                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d))           &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a b x c d)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; We forgot the 12th commandment - use letrec to remove arguments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; that do not change for recursive applications&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersect-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; set2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? set) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car set) set2)
               (cons (car set) (&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; (cdr set))))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; (cdr set)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; set1))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of intersect-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(q w e x r t y a))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a x)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                             &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d))                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x c d))           &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a b x c d)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The intersectall function finds intersect of a bunch of sets&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersectall
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((null? (cdr lset)) (car lset))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (car lset)
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall&lt;/span&gt; (cdr lset)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of intersectall&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of intersectall&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                              &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b c d) (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; c d e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d e f))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(c d)&lt;/span&gt;



(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersectall-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? (cdr lset)) (car lset))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (car lset)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr lset))))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; lset))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of intersectall-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                              &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letrec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b c d) (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; c d e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d e f))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(c d)&lt;/span&gt;




&lt;span style=&#34;color:#75715e&#34;&gt;; Introducing letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersectall-letcc
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hop&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  ((null? (car lset)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;hop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
                  ((null? (cdr lset)) (car lset))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;intersect&lt;/span&gt; (car lset)
                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr lset))))))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; lset))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of intersectall-letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                              &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b c d) (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; c d e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d e f))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(c d)&lt;/span&gt;



&lt;span style=&#34;color:#75715e&#34;&gt;; intersectall that returns abruptly and promptly&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;intersectall-ap
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hop&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lset&lt;/span&gt;)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  &lt;span style=&#34;color:#75715e&#34;&gt;;;;hop one&lt;/span&gt;
                  ((null? (car lset)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;hop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
                  ((null? (cdr lset)) (car lset))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; (car lset)
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr lset)))))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
                  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;)
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                          ((null? s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; (car s1) s2)
                           &lt;span style=&#34;color:#75715e&#34;&gt;;;;get the one you need&lt;/span&gt;
                           (cons (car s1) (&lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt; (cdr s1))))
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt; (cdr s1)))))))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;;;;hop two&lt;/span&gt;
                    ((null? s2) (&lt;span style=&#34;color:#a6e22e&#34;&gt;hop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
                    (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt; s1)))))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((null? lset) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; lset))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of intersectall-ap&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-ap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(a)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-ap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)))                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-ap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                              &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;intersectall-ap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b c d) (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; c d e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d e f))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(c d)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; rember function via letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 14 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Let There Be Names&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; atom? primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))  

&lt;span style=&#34;color:#75715e&#34;&gt;; add1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; The leftmost function finds the leftmost atom in a non-empty list of&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; s-expressions that does not contain the empty list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (car l))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost&lt;/span&gt; (car l))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of leftmost&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of not-applicable leftmost&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; (leftmost &amp;#39;((() a) ()))           ; not applicable because leftmost item is an empty list&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Let&amp;#39;s fix this.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost-fixed
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (car l))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; (car l)))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; (car l)))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; (cdr l))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of leftmost-fixed&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ()) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((() x) ())))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-fixed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((()) ())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost-let
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (car l))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-let&lt;/span&gt; (car l))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; a) a)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-let&lt;/span&gt; (cdr l)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of leftmost-let&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;y&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) ()) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;y&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((() y) ())))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;y&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((()) ())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The rember1* function removes the leftmost occurrence of a in l&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember1*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car l) a) (cdr l))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
           (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*&lt;/span&gt; a (cdr l))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((equal? (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*&lt;/span&gt; a (car l)) (car l)) &lt;span style=&#34;color:#75715e&#34;&gt;; if the list with &amp;#39;a&amp;#39; removed doesn&amp;#39;t change&lt;/span&gt;
           (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*&lt;/span&gt; a (cdr l))))  &lt;span style=&#34;color:#75715e&#34;&gt;; then recurse&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
            (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*&lt;/span&gt; a (car l)) (cdr l)))))))) &lt;span style=&#34;color:#75715e&#34;&gt;; otherwise remove &amp;#39;a&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of rember1*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;salad&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Swedish&lt;/span&gt; rye) (&lt;span style=&#34;color:#a6e22e&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mustard&lt;/span&gt; salad turkey)) salad))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((Swedish rye) (French (mustard turkey)) salad)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;meat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pasta&lt;/span&gt; meat) pasta (&lt;span style=&#34;color:#a6e22e&#34;&gt;noodles&lt;/span&gt; meat sauce) meat tomatoes))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((pasta) pasta (noodles meat sauce) meat tomatoes)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; rember1* rewritten using the 12th commandment&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember1*-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((eq? (car l) a) (cdr l))
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                   (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (cdr l))))))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  ((equal? (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (car l)) (car l)) &lt;span style=&#34;color:#75715e&#34;&gt;; if the list with &amp;#39;a&amp;#39; removed doesn&amp;#39;t change&lt;/span&gt;
                   (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (cdr l))))  &lt;span style=&#34;color:#75715e&#34;&gt;; then recurse&lt;/span&gt;
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                    (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (car l)) (cdr l))))))))) &lt;span style=&#34;color:#75715e&#34;&gt;; otherwise remove &amp;#39;a&amp;#39;&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; l))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of rember1*-letrec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letrec&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;salad&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Swedish&lt;/span&gt; rye) (&lt;span style=&#34;color:#a6e22e&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mustard&lt;/span&gt; salad turkey)) salad))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((Swedish rye) (French (mustard turkey)) salad)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letrec&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;meat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pasta&lt;/span&gt; meat) pasta (&lt;span style=&#34;color:#a6e22e&#34;&gt;noodles&lt;/span&gt; meat sauce) meat tomatoes))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((pasta) pasta (noodles meat sauce) meat tomatoes)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; rember* rewritten using the 12th commandment and let&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember1*-letrec-let
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
              ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((eq? (car l) a) (cdr l))
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                   (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (cdr l))))))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;av&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (car l))))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                    ((equal? (car l) av)         &lt;span style=&#34;color:#75715e&#34;&gt;; if the list with &amp;#39;a&amp;#39; removed didn&amp;#39;t change&lt;/span&gt;
                     (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; (cdr l)))) &lt;span style=&#34;color:#75715e&#34;&gt;; then recurse&lt;/span&gt;
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                      (cons av (cdr l))))))))))  &lt;span style=&#34;color:#75715e&#34;&gt;; otherwise remove &amp;#39;a&amp;#39;&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;R&lt;/span&gt; l))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of rember1*-letrec-let&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letrec-let&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;salad&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Swedish&lt;/span&gt; rye) (&lt;span style=&#34;color:#a6e22e&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mustard&lt;/span&gt; salad turkey)) salad))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((Swedish rye) (French (mustard turkey)) salad)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letrec-let&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;meat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pasta&lt;/span&gt; meat) pasta (&lt;span style=&#34;color:#a6e22e&#34;&gt;noodles&lt;/span&gt; meat sauce) meat tomatoes))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((pasta) pasta (noodles meat sauce) meat tomatoes)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The fifteenth commandment (preliminary version)                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use (let ...) to name the values of repeated expressions.                  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The depth* function finds the max depth of an s-expression&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;depth*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (cdr l)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (cdr l))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (car l))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (cdr l)))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (car l)))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of depth*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pickled&lt;/span&gt;) peppers (&lt;span style=&#34;color:#a6e22e&#34;&gt;peppers&lt;/span&gt; pickled)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(margarine ((&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt; butter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt;))) butter)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) a) a))                                              &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; depth* rewritten using let&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;depth*-let
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let&lt;/span&gt; (cdr l)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let&lt;/span&gt; (car l))))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let&lt;/span&gt; (cdr l))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((&amp;gt; d a) d)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;a)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of depth*-let&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pickled&lt;/span&gt;) peppers (&lt;span style=&#34;color:#a6e22e&#34;&gt;peppers&lt;/span&gt; pickled)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(margarine ((&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt; butter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt;))) butter)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) a) a))                                              &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another version of depth*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;depth*-let-2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let-2&lt;/span&gt; (cdr l))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) d)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let-2&lt;/span&gt; (car l)))))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  ((&amp;gt; d a) d)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;a))))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of depth*-let&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let-2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pickled&lt;/span&gt;) peppers (&lt;span style=&#34;color:#a6e22e&#34;&gt;peppers&lt;/span&gt; pickled)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let-2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(margarine ((&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt; butter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt;))) butter)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-let-2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) a) a))                                              &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The fifteenth commandment (revised version)                                ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use (let ...) to name the values of repeated expressions in a function     ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; definition if they may be evaluated twice for one and the same use of the  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; function.                                                                  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; depth* via if&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;depth*-if
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-if&lt;/span&gt; (cdr l)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (car l))))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (cdr l))))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; d a) d a))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of depth*-if&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pickled&lt;/span&gt;) peppers (&lt;span style=&#34;color:#a6e22e&#34;&gt;peppers&lt;/span&gt; pickled)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(margarine ((&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt; butter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt;))) butter)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) a) a))                                              &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; depth* via max&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;depth*-max
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-max&lt;/span&gt; (cdr l)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-max&lt;/span&gt; (car l)))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-max&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of depth*-max&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pickled&lt;/span&gt;) peppers (&lt;span style=&#34;color:#a6e22e&#34;&gt;peppers&lt;/span&gt; pickled)))                          &lt;span style=&#34;color:#75715e&#34;&gt;; 2&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(margarine ((&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt; butter) (&lt;span style=&#34;color:#a6e22e&#34;&gt;makes&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;batter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bitter&lt;/span&gt;))) butter)) &lt;span style=&#34;color:#75715e&#34;&gt;; 4&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*-max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(c (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b) a) a))                                              &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Not interested in scramble problem, skipping it.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; leftmost via letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost-letcc
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; l skip)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; lm is leftmost-letcc&amp;#39;s helper function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lm
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; out)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; (car l)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;; can also use &amp;#39;begin&amp;#39;&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (car l) out)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (cdr l) out))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ()) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((() x) ())))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-letcc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((()) ())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; letfmost following 13th and 14th commandments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost-1314
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; out)
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
             ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
             ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; (car l)))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (car l) out)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (cdr l) out)))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; l skip))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-1314&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-1314&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ()) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-1314&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((() x) ())))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-1314&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((()) ())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; another way to follow 13th and 14th commandments&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost-13142
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; out)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                 ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; (car l)))
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (car l) out)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (cdr l) out)))))))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; l skip))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-13142&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-13142&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ()) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-13142&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((() x) ())))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-13142&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((()) ())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; yet another way&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leftmost-131422
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                   ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
                   ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt; (car l)))
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (car l))
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; (cdr l))))))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;lm&lt;/span&gt; l))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-131422&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; d)))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-131422&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ()) () (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-131422&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((() x) ())))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost-131422&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((()) ())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; rember1* via letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember1*-letcc
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;rm&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l oh)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
               ((null? l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;oh&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&lt;/span&gt;))
               ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(eq? (car l) a)
                  (cdr l)
                  (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rm&lt;/span&gt; a (cdr l) oh))))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;new-car&lt;/span&gt;
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
                           (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oh&lt;/span&gt;)
                             (&lt;span style=&#34;color:#a6e22e&#34;&gt;rm&lt;/span&gt; a (car l) oh)))))
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; new-car)
                     (cons (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;rm&lt;/span&gt; a (cdr l) oh))
                     (cons new-car (cdr l)))))))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;new-l&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oh&lt;/span&gt;)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rm&lt;/span&gt; a l oh)))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; new-l)
          l
          new-l)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of rember1*-letcc&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letcc&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;salad&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Swedish&lt;/span&gt; rye) (&lt;span style=&#34;color:#a6e22e&#34;&gt;French&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mustard&lt;/span&gt; salad turkey)) salad))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((Swedish rye) (French (mustard turkey)) salad)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letcc&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;meat&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;pasta&lt;/span&gt; meat) pasta (&lt;span style=&#34;color:#a6e22e&#34;&gt;noodles&lt;/span&gt; meat sauce) meat tomatoes))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((pasta) pasta (noodles meat sauce) meat tomatoes)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;rember1*-letcc&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; bar) baz))
&lt;span style=&#34;color:#75715e&#34;&gt;; ==&amp;gt; &amp;#39;((foo bar) baz)&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 16 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Ready, Set, Bang!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; sub1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; add1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; atom? primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))  

&lt;span style=&#34;color:#75715e&#34;&gt;; member? helper function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;member?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                 ((null? l) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
                 ((eq? (car l) a) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
                 (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; (cdr l)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;yes?&lt;/span&gt; l))))


&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples start here&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sweet-tooth
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;)
    (cons food (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;last &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;angelfood&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-tooth&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fruit&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(fruit cake)&lt;/span&gt;
last                        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;angelfood&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The sweet-toothL function saves the last food&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sweet-toothL
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;last food)
    (cons food (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-toothL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chocolate&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(chocolate cake)&lt;/span&gt;
last                        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;chocolate&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-toothL&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fruit&lt;/span&gt;)       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(fruit cake)&lt;/span&gt;
last                        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;fruit&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;ingredients &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())

&lt;span style=&#34;color:#75715e&#34;&gt;; The sweet-toothR function builds a list of foods&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sweet-toothR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;ingredients
      (cons food ingredients))
    (cons food (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-toothR&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chocolate&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(chocolate cake)&lt;/span&gt;
ingredients                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(chocolate)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-toothR&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fruit&lt;/span&gt;)       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(fruit cake)&lt;/span&gt;
ingredients                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(fruit chocolate)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-toothR&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cheese&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(cheese cake)&lt;/span&gt;
ingredients                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(cheese fruit chocolate)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sweet-toothR&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;carrot&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(carrot cake)&lt;/span&gt;
ingredients                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(carrot cheese fruit chocolate)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The deep function wraps pizza in n parenthesis&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The deepR1 function remembers the numbers deep has seen so far&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Ns1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepR1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns1 (cons n Ns1))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; n)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deepR1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepR1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
Ns1                         &lt;span style=&#34;color:#75715e&#34;&gt;; (3)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepR1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;
Ns1                         &lt;span style=&#34;color:#75715e&#34;&gt;; (0 3)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The deepR function remembers the numbers and the results&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Ns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Rs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; n)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
      result)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deepR&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepR&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
Ns                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(3)&lt;/span&gt;
Rs                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepR&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((pizza)))))&lt;/span&gt;
Ns                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(5 3)&lt;/span&gt;
Rs                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))) (((pizza))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepR&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
Ns                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(3 5 3)&lt;/span&gt;
Rs                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))) (((((pizza))))) (((pizza))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The nineteenth commandment                                                 ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use (set! ...) to remember valuable things between two distinct uses of a  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; function.                                                                  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The find function finds pizza in Rs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;find
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; Ns Rs)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; rs)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((= (car ns) n) (car rs))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr ns) (cdr rs)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; Ns Rs))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of find&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Ns Rs)              &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; Ns Rs)              &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((pizza)))))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;(find 7 Ns Rs)             ; not applicable at this time&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The deepM function either uses find or computes pizza (temporary version)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM-tmp
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; n Ns)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepR&lt;/span&gt; n))))

Ns                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(3 5 3)&lt;/span&gt;
Rs                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))) (((((pizza))))) (((pizza))))&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cdr Ns))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cdr Rs))

Ns                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(5 3)&lt;/span&gt;
Rs                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))) (((pizza))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The final deepM version&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; n Ns)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; n)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
        result))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deepM&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Redefining deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((((((pizza)))))))))&lt;/span&gt;

Ns                          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(9 8 7 6 5 3)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Redefining deepM to folow 16th commandment&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;member?&lt;/span&gt; n Ns)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; n)))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
          result)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Tests of the new deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((((((pizza))))))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((((((((((((pizza))))))))))))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Better answer for find on empty lists&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;find
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; Ns Rs)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; rs)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? ns) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
              ((= (car ns) n) (car rs))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr ns) (cdr rs)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; Ns Rs))))

&lt;span style=&#34;color:#75715e&#34;&gt;; And a better deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; exists)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; n)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
            result)
          exists)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of the new deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((((((pizza))))))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((((((((((((pizza))))))))))))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;              Take a deep breath or a deep pizza, now.                      ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Our good, old friend length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; length via set!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; length via set! again&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;h
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (cdr l)))))))
    h))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The seventeenth commandment (final version)                                ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Use (set! x ...) for (let ((x ...)) ...) only if there is at least one     ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; (lambda ... between it and the (let ...), or if the new value for x is a   ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; function that refers to x                                                  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another way to write length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h1              &lt;span style=&#34;color:#75715e&#34;&gt;; h1 is actually an anonymous name&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;()
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;h1
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;h1&lt;/span&gt; (cdr l)))))))
    h1))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another way&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h2              &lt;span style=&#34;color:#75715e&#34;&gt;; h2 is actually an anonymous name&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;h2&lt;/span&gt; (cdr l)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;() h2))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; length again&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;h
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
          ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (cdr l)))))))
    h))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Let&amp;#39;s eliminate parts that are specific to length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;L
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; (cdr l))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;h
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;L&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; arg))))
    h))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Y-bang - the applicative-order imperative y-combinator&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; (discovered by Peter Landin)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y-bang
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; arg)))))
      h)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lengthz (&lt;span style=&#34;color:#a6e22e&#34;&gt;Y-bang&lt;/span&gt; L))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test length&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())        &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a b x))   &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; depth* via Y-bang&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;D
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? s) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car s)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (cdr s)))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
          (max (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (car s))) (&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; (cdr s))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;depth* (&lt;span style=&#34;color:#a6e22e&#34;&gt;Y-bang&lt;/span&gt; D))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test depth*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                &lt;span style=&#34;color:#75715e&#34;&gt;; 1&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;pizza&lt;/span&gt;)) ()))    &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The bizarre function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;biz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;x (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; x))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= a x)
          &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Another way to write bizarre&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;x1 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; anonymous var&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;biz
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;x1 (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; x1))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= a x1)
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; The Y-Combinator&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x)))))))

((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; biz) &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;; ((Y-bang biz) 5)          ; doesn&amp;#39;t compute... why?&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 17 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; We Change, Therefore We Are!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The atom? primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))  

&lt;span style=&#34;color:#75715e&#34;&gt;; The sub1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; The add1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; The deep function wraps pizza in m parenthesis&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? m)
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
      (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The deepM function remembers calls to deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The deepM function uses find function to find n in Ns and return &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; the correct value from Rs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;find
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; Ns Rs)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; rs)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? ns) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
              ((= (car Ns) n) (car Rs))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr ns) (cdr rs)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; Ns Rs))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? m)
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
              (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; exists)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; n)))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
              result)
            exists))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; No need to use letrec in deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM-letrec
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? m)
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
                (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-letrec&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; exists)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; n)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
            result)
          exists)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of the new deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-letrec&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-letrec&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; No need for D in deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM-D
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; exists)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
                           (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? m)
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
                             (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-D&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))) n)))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
            result)
          exists)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of the new deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-D&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-D&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; No need for the 2nd lambda &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM-2nd
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; exists)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
                            (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-2nd&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
            result)
          exists)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Test of the new deepM&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-2nd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza)))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-2nd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The consC function counts number of conses needed to build&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; n-deep pizza&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;consC
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;N (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; N))
      (cons x y))))

&lt;span style=&#34;color:#75715e&#34;&gt;; No way to get N out of this consC, so we need the counter&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; function that will hold the count&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;counter &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;; And a modification of consC&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;consC
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;counter (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;() N))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;N (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; N))
      (cons x y))))
        
&lt;span style=&#34;color:#75715e&#34;&gt;; And we need to modify deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? m)
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;consC&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((pizza)))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; 5&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((pizza))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; 12                ;;; (5 + 7) &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Let&amp;#39;s determine how many cons&amp;#39;es are necessary to find&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; values of (deep 0) ... (deep 1000).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;supercounter
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; n)
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;()
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; n)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Try out supercounter&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;supercounter&lt;/span&gt; deep)         &lt;span style=&#34;color:#75715e&#34;&gt;; 500512    ;;; not 500500 as expected&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Need to wipe out counter before using it again&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;set-counter &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;consC
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;counter (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;() N))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;set-counter
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;N x)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;N (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; N))
      (cons x y))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;set-counter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;; Try out supercounter again&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;supercounter&lt;/span&gt; deep)

&lt;span style=&#34;color:#75715e&#34;&gt;; How many conses are used by (deepM 5)?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Need to modify deepM to use consC first.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepM-consC
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;Rs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;Ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; n Ns Rs)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; exists)
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? n)
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;consC&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-consC&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Rs (cons result Rs))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;Ns (cons n Ns))
            result)
          exists)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; How many conses are used by (deepM 5)?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((pizza)))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; 500505    ;;; because we forgot to reset counter&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;set-counter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepM-consC&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((pizza)))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; 5&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; ??? the book says it should be 0, I get 12, why?&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;supercounter&lt;/span&gt; deepM-consC)  &lt;span style=&#34;color:#75715e&#34;&gt;; ??? how did this work? it didn&amp;#39;t take an argument?&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Book has also talks about conses in rember* function but I am not interested&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; in it at the moment.&lt;/span&gt;



&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 18 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; We Change, Therefore We Are the Same!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The atom? primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))  

&lt;span style=&#34;color:#75715e&#34;&gt;; The sub1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; The add1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (+ n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; The lots function creates lots of eggs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lots
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;egg&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; n)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; The lenkth function counts the eggs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lenkth
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lenkth&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of lots and lenkth&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg egg)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lenkth&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))       &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lenkth&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))       &lt;span style=&#34;color:#75715e&#34;&gt;; 5&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lenkth&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;))      &lt;span style=&#34;color:#75715e&#34;&gt;; 15&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Create 4 eggs from 3 eggs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;egg&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; consC, counter, set-counter from chapter 17&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;counter (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;set-counter (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;() &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;consC
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;counter (&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;() N))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;set-counter
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;N x)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;N (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; N))
      (cons x y))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Add an egg at the end&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add-at-end
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? (cdr l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;consC&lt;/span&gt; (car l) (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;egg-end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;consC&lt;/span&gt; (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-at-end&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of add-at-end&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-at-end&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg-end)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;; 3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Add an egg at the end without making any new conses except for the last one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;add-at-end-too
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
              ((null? (cdr ls))
               (set-cdr! ls (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;egg-end2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; (cdr ls)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; l)
      l)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of add-at-end-too&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;set-counter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-at-end-too&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg-end2)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; 0&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; kons the magnificent&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kons
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt; kdr)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;)          &lt;span style=&#34;color:#75715e&#34;&gt;; returns lambda (selector)&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt; kar kdr))))     &lt;span style=&#34;color:#75715e&#34;&gt;; calls selector with kar and kdr arguments&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; kar&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kar
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; applies selector on (a d) and returns &amp;#39;a (car)&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; d) a))))

&lt;span style=&#34;color:#75715e&#34;&gt;; kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; applies selector on (a d) and returns d (cdr)&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; d) d))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of kons kar kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;kdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))) &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;b&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Another cons&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;bons
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;kar&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;kdr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;kdr x))
          kar
          kdr)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Another kar&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;bar
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; a d) a))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Another kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;bdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; a d) d))))

&lt;span style=&#34;color:#75715e&#34;&gt;; set-kdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;set-kdr
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; x)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; a d) s)) x)))

&lt;span style=&#34;color:#75715e&#34;&gt;; create kons using set-kdr and bons&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;kons2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; d)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bons&lt;/span&gt; a)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;set-kdr&lt;/span&gt; c d)
      c)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of kons2 bar and bdr&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;a&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;bdr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kons2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))       &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(1 2 3)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Now eggs again&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;dozen (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))

dozen           &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg egg)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;; used 12 conses&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;bakers-dozen (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-at-end&lt;/span&gt; dozen))

bakers-dozen    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg egg egg-end)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;; used 13 conses (25 total now)&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;bakers-dozen-too (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-at-end-too&lt;/span&gt; dozen))

bakers-dozen-too    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg egg egg-end egg-end2)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;; used 1 cons (26 total)&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;bakers-dozen-again (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-at-end&lt;/span&gt; dozen))

bakers-dozen-again  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg egg egg-end egg-end2 egg-end)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;; used 14 conses (40 total)&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;same?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt; c2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(null? c1) (null? c2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(null? c1) (null? c2)) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;t1&lt;/span&gt; (cdr c1))
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;t2&lt;/span&gt; (cdr c2)))
         (set-cdr! c1 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
         (set-cdr! c2 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; (= (cdr c1) (cdr c2))))
           (set-cdr! c1 t1)
           (set-cdr! c2 t2)
           v))))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;same?&lt;/span&gt; dozen dozen)                     &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;same?&lt;/span&gt; dozen bakers-dozen)              &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;same?&lt;/span&gt; dozen bakers-dozen-too)          &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;same?&lt;/span&gt; dozen bakers-dozen-again)        &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;same?&lt;/span&gt; bakers-dozen bakers-dozen-too)   &lt;span style=&#34;color:#75715e&#34;&gt;; #f   ;;; the book says #t???&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The last-kons function returns the last cons in a non-empty kons-list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;last-kons
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ls&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? (cdr ls)) ls)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;last-kons&lt;/span&gt; (cdr ls))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;long (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg egg)&lt;/span&gt;

(set-cdr! (&lt;span style=&#34;color:#a6e22e&#34;&gt;last-kons&lt;/span&gt; long) long)        &lt;span style=&#34;color:#75715e&#34;&gt;; #0 = &amp;#39;(egg egg egg egg egg egg egg egg egg egg egg . #0#) &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The finite-lenkth function returns length of a list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; or #f if it&amp;#39;s an infinite list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;finite-lenkth
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;infinite&lt;/span&gt;)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
          ((&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; q)
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                  ((&lt;span style=&#34;color:#a6e22e&#34;&gt;same?&lt;/span&gt; p q) (&lt;span style=&#34;color:#a6e22e&#34;&gt;infinite&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))
                  ((null? q) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                  ((null? (cdr q)) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
                    (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sl&lt;/span&gt; p) (&lt;span style=&#34;color:#a6e22e&#34;&gt;qk&lt;/span&gt; q)) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;qk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (cdr (cdr x))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;sl&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (cdr x))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((null? p) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; p (cdr p))))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of finite-lenkth&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;not-so-long (&lt;span style=&#34;color:#a6e22e&#34;&gt;lots&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(egg egg egg egg egg)&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;finite-lenkth&lt;/span&gt; not-so-long)           &lt;span style=&#34;color:#75715e&#34;&gt;; 5&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;finite-lenkth&lt;/span&gt; long)                  &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Guy&amp;#39;s Favorite Pie&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;mongo
  (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pie&lt;/span&gt;
   (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt;
    (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;la&lt;/span&gt;
     (cons &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))
(set-cdr! (cdr (cdr (cdr mongo))) (cdr mongo))

&lt;span style=&#34;color:#75715e&#34;&gt;; mongo&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Chapter 19 of The Seasoned Schemer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Absconding with the Jewels&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Code examples assemled by Peteris Krumins (peter@catonmat.net).&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; His blog is at http://www.catonmat.net  --  good coders code, great reuse.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; Get yourself this wonderful book at Amazon: http://bit.ly/8cyjgw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The atom? primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))  

&lt;span style=&#34;color:#75715e&#34;&gt;; The sub1 primitive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;sub1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
    (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;; Our friend deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of deep&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Six layers creates six layered pizza&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;six-layers
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (cons (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;
    (cons (cons (cons p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of six-layers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;six-layers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Four layers makes a four layered pizza&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;four-layers
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (cons (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;
    (cons p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of four-layers&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;four-layers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; The deepB function does layering&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;toppings &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deepB
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;jump&lt;/span&gt;)
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;toppings jump)
           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;deepB&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of deepB&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deepB&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza)))))), but what does jump do?&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Six layers again&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;six-layers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mozzarella&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((mozarella))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Now the toppings&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mozzarella&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((mozarella))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((cake))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; What about his&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()) &lt;span style=&#34;color:#75715e&#34;&gt;; it&amp;#39;s still &amp;#39;((((((cake)))))) and not &amp;#39;(((((((cake)))))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; The twentieth commandment                                                  ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; When thinking about a value created with (letcc ...), write down the       ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; function that is equivalent but does not forget. Then, when you use it,    ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;; remember to forget.                                                        ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;                                                                            ;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Deep&amp;amp;co&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep&amp;amp;co
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;co&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cons x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deep&amp;amp;co&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;co&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;pizza&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;co&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;co&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))          &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((pizza))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Deep&amp;amp;coB&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;deep&amp;amp;coB
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; k)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((zero? m)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;()
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;toppings k)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pizza&lt;/span&gt;)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;coB&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; m)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; (cons x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;()))))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of deep&amp;amp;coB&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;coB&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((((pizza))))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep&amp;amp;coB&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))         &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((pizza))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; toppings is now four-layers&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt;)                    &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;((((cake))))&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;toppings&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cake&lt;/span&gt;))                 &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;(((((cake)))) (((cake))))&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; Remember two-in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row?
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;nxt&lt;/span&gt; (car lat)))
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt;
                  (eq? nxt a)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; nxt (cdr lat)))))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lat&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? lat) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;W&lt;/span&gt; (car lat) (cdr lat)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of two-in-a-row?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(mozzarella cake mozzarella))      &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(mozzarella mozzarella cake))      &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; walk&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;leave &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;walk
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt; (car l)))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;walk&lt;/span&gt; (car l))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;walk&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; we need leave&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;start-it
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;here&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;leave here)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;walk&lt;/span&gt; l)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of start-it&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;start-it&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;potato&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;chips&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chips&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;with&lt;/span&gt;))) fish))  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;potato&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; waddle, just like walk but remembers where it left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fill &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;waddle
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt;)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;fill rest)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt; (car l))))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; (cdr l))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; (car l))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; (cdr l)))))))

&lt;span style=&#34;color:#75715e&#34;&gt;; A new start&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;start-it2
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;here&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;leave here)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; l)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Example of start-it2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;start-it2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;donuts&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cheerios&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cheerios&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;spaghettios&lt;/span&gt;))) donuts))
&lt;span style=&#34;color:#75715e&#34;&gt;; ===&amp;gt; &amp;#39;donuts&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; get-next gets the next atom&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;get-next
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;here-again&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;leave here-again)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of get-next&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;cheerios&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;cheerios&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;paghettios&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;donuts&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; get-first&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;get-first
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;here&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;leave here)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; l)
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of get-first and get-next&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-first&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(fish (&lt;span style=&#34;color:#a6e22e&#34;&gt;chips&lt;/span&gt;)))     &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;fish&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;chips&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)                  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#39;()&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;; And now the two-in-a-row*?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;two-in-a-row*?
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letrec&lt;/span&gt;
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;T?&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; n)
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(eq? n a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;T?&lt;/span&gt; n))
               &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;get-next&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;here-again&lt;/span&gt;)
             (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;leave here-again)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&lt;/span&gt;)))))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
           ((null? l) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())
           ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;begin &lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;; or (let() ...&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt;)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;fill rest)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt; (car l))))
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; (cdr l))))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; (car l))
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; (cdr l)))))))
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;fst&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;call-with-current-continuation&lt;/span&gt;
                   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;here&lt;/span&gt;)
                     (&lt;span style=&#34;color:#66d9ef&#34;&gt;set! &lt;/span&gt;leave here)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;waddle&lt;/span&gt; l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; fst) (&lt;span style=&#34;color:#a6e22e&#34;&gt;T?&lt;/span&gt; fst) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)))))

&lt;span style=&#34;color:#75715e&#34;&gt;; Examples of two-in-a-row*?&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row*?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;) ()) (((&lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;)))))      &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row*?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;))) () () (&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;)))     &lt;span style=&#34;color:#75715e&#34;&gt;; #t&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row*?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())                            &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;two-in-a-row*?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(((((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;))))))                   &lt;span style=&#34;color:#75715e&#34;&gt;; #f&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>从lambda到simple&#43;complex解释器再到树形抽象</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/17/cong-lambdadao-simple-plus-complexjie-shi-qi-zai-dao-shu-xing-chou-xiang/</link>
      <pubDate>Sun, 17 May 2015 11:32:07 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/17/cong-lambdadao-simple-plus-complexjie-shi-qi-zai-dao-shu-xing-chou-xiang/</guid>
      <description>&lt;h2 id=&#34;eternity&#34;&gt;定义一个eternity函数，并尝试是否可以执行&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;eternity
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;eternity&lt;/span&gt; x)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实eternity永远在执行着，无法退出&lt;/p&gt;
&lt;h3 id=&#34;10eternity&#34;&gt;1.下面式子只能计算列表的长度&amp;lt;=0的,且永远不会调用eternity&lt;/h3&gt;
&lt;p&gt;; Function to calculate length of just empty list.
;
((lambda (len)
(lambda (l)
(cond
((null? l) 0)
(else (+ 1 (len (cdr l)))))))
eternity)&lt;/p&gt;
&lt;h3 id=&#34;21eternity&#34;&gt;2.下面式子只能计算列表的长度&amp;lt;=1的,且永远不会调用eternity&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; For lists with length &amp;lt;= 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; eternity) (cdr l))))))))


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32eternity&#34;&gt;3.下面式子只能计算列表的长度&amp;lt;=2的,且永远不会调用eternity&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; For lists with length &amp;lt;= 2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l)))))))
 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l)))))))
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l)))))))
   eternity)))
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;如果我们进行一次变换&lt;/h2&gt;
&lt;h3 id=&#34;1eternitymk-length&#34;&gt;1.把eternity替换成mk-length&lt;/h3&gt;
&lt;p&gt;我们发现结果是它可以变成处理无限长度的列表了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(((lambda (mk-length)
  (mk-length mk-length))
 (lambda (mk-length)
   (lambda (l)
     (cond
       ((null? l) 0)
       (else (+ 1 ((mk-length mk-length) (cdr l))))))))
 &#39;(a b c 1 g))  ; 5

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heading-1&#34;&gt;然而我们对他进一步提取发现报错了&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l)))))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length)))) &lt;span style=&#34;color:#75715e&#34;&gt;; Aborting!: maximum recursion depth exceeded&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading-2&#34;&gt;为什么不行？&lt;/h3&gt;
&lt;p&gt;原因在于 我们需要的是lambda类型的procedure才可以，而函数调用形式则是不行。
然而有一种转换方式如下：&lt;/p&gt;
&lt;p&gt;(f x) ==&amp;gt; (lambda (arg) (f arg) x)&lt;/p&gt;
&lt;p&gt;于是我们得到新的升级版的mk-length&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
   ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l)))))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们发现还是不够满意，我们想把中间的一坨拿到后面去，于是再次抽象一层
也就是我们需要 把(lambda (len) &amp;hellip; (cdr l))部分 移到最外头&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x))))))
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而如果我们把后面的(lambda (len))部分去掉&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;mk-length&lt;/span&gt; mk-length) x))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;他其实就是下面的骨架：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
    ())
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;()
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (() x))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们使用f来填加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;他其实就是Y-lambda. 我们所谓的define，let,set!都可以从lambda 推出来。&lt;/p&gt;
&lt;h3 id=&#34;let&#34;&gt;let宏&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;define-syntax&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;syntax-rules &lt;/span&gt;()
        ((&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; expr) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) body &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) body &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) expr &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是我们以后完全可以用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x)))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y-lambda 执行一个 代表lambda的函数子f。&lt;/p&gt;
&lt;p&gt;比如,求最大值(&lt;em&gt;注意：(lambda (func-arg) func-arg是可以不存在的部分,永远不会被执行&lt;/em&gt;)):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; 求个数&lt;/span&gt;

((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; (cdr l))))))))  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;;; 求最大值&lt;/span&gt;
 ((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
            ((null? l) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no-list&lt;/span&gt;)
            ((null? (cdr l)) (car l))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(max (car l) (&lt;span style=&#34;color:#a6e22e&#34;&gt;func-arg&lt;/span&gt; (cdr l)))))))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;425&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外我们发现y-lambda可以写成更优雅、对称的形式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f))) &lt;span style=&#34;color:#75715e&#34;&gt;;;; &lt;/span&gt;
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x)))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add le()  is not necessay
But the code can be
More beautiful and symmetry&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;然而其实我的想法只不过是他的复制&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;Y1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt;)
    ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt; fun))  &lt;span style=&#34;color:#75715e&#34;&gt;;; 这是基于抽象的方式,也就是把后面的(lambda (f))  带入其中&lt;/span&gt;

     (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;le&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) ((&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; f) x)))))))

((&lt;span style=&#34;color:#a6e22e&#34;&gt;Y1&lt;/span&gt; 
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun-arg&lt;/span&gt;)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       ((null? l) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fun-arg&lt;/span&gt; (cdr l)))))))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-4&#34;&gt;简单计算器解释器&lt;/h2&gt;
&lt;p&gt;来自&lt;a href=&#34;http://pythoner.org/wiki/774/&#34;&gt;wangyin&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;; 以下三个定义 env0, ent-env, lookup 是对环境(environment)的基本操作:&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; 空环境&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;env0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())

&lt;span style=&#34;color:#75715e&#34;&gt;;; 扩展。对环境 env 进行扩展，把 x 映射到 v，得到一个新的环境&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;ext-env
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; v env)
    (cons &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;v) env)))

&lt;span style=&#34;color:#75715e&#34;&gt;;; 查找。在环境中 env 中查找 x 的值&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; env)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([p (assq x env)])
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       [(not p) x]
       [&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cdr p)]))))

&lt;span style=&#34;color:#75715e&#34;&gt;;; 闭包的数据结构定义，包含一个函数定义 f 和它定义时所在的环境&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;struct&lt;/span&gt; Closure (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; env))

&lt;span style=&#34;color:#75715e&#34;&gt;;; 解释器的递归定义（接受两个参数，表达式 exp 和环境 env）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 共 5 种情况（变量，函数，调用，数字，算术表达式）&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;interp1
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(exp env)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt; exp                                          &lt;span style=&#34;color:#75715e&#34;&gt;; 模式匹配 exp 的以下情况（分支）&lt;/span&gt;
      [(&lt;span style=&#34;color:#a6e22e&#34;&gt;?&lt;/span&gt; symbol? x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt; x env)]                    &lt;span style=&#34;color:#75715e&#34;&gt;; 变量&lt;/span&gt;
      [(&lt;span style=&#34;color:#a6e22e&#34;&gt;?&lt;/span&gt; number? x) x]                                 &lt;span style=&#34;color:#75715e&#34;&gt;; 数字&lt;/span&gt;
      [&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;e)                                &lt;span style=&#34;color:#75715e&#34;&gt;; 函数&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;Closure&lt;/span&gt; exp env)]
      [&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;e1 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;e2)                                       &lt;span style=&#34;color:#75715e&#34;&gt;; 调用&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([v1 (&lt;span style=&#34;color:#a6e22e&#34;&gt;interp1&lt;/span&gt; e1 env)]
             [v2 (&lt;span style=&#34;color:#a6e22e&#34;&gt;interp1&lt;/span&gt; e2 env)])
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt; v1
           [(&lt;span style=&#34;color:#a6e22e&#34;&gt;Closure&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;e) env1)
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;interp1&lt;/span&gt; e (&lt;span style=&#34;color:#a6e22e&#34;&gt;ext-env&lt;/span&gt; x v2 env1))]))]
      [&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;e1 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;e2)                                   &lt;span style=&#34;color:#75715e&#34;&gt;; 算术表达式&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;([v1 (&lt;span style=&#34;color:#a6e22e&#34;&gt;interp1&lt;/span&gt; e1 env)]
             [v2 (&lt;span style=&#34;color:#a6e22e&#34;&gt;interp1&lt;/span&gt; e2 env)])
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt; op
           [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&lt;/span&gt; (+ v1 v2)]
           [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&lt;/span&gt; (- v1 v2)]
           [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&lt;/span&gt; (* v1 v2)]
           [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&lt;/span&gt; (/ v1 v2)]))])))

&lt;span style=&#34;color:#75715e&#34;&gt;;; 解释器的“用户界面”函数。它把 interp1 包装起来，掩盖第二个参数，初始值为 env0&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;interp
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exp&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;interp1&lt;/span&gt; exp env0)))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;interp&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;interp&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;interp&lt;/span&gt; (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;))



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-5&#34;&gt;复杂解释器&lt;/h2&gt;
&lt;p&gt;分为五个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*const&lt;/li&gt;
&lt;li&gt;*cond&lt;/li&gt;
&lt;li&gt;*identifier(loop-up-evironment)&lt;/li&gt;
&lt;li&gt;*quote&lt;/li&gt;
&lt;li&gt;*lambda&lt;/li&gt;
&lt;li&gt;*Aplication(Not Promitive)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可以看&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket
&lt;span style=&#34;color:#75715e&#34;&gt;;;don&amp;#39;t look down on it, it is the full interpretor!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;Take care to read it!&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(not (pair? x)) (not (null? x)))))
  
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;build
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; s2)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons s1
                  (cons s2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))))))
((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nothing&lt;/span&gt;)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;nothing&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;something))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;nothing))))
   &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-entry
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; entry entry-f)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry-help&lt;/span&gt; name
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; entry)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; entry)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;entry-f&lt;/span&gt;))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-entry-help
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; names values entry-f)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? names) (&lt;span style=&#34;color:#a6e22e&#34;&gt;entry-f&lt;/span&gt; name))
      ((eq? (car names) name)
       (car values))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry-help&lt;/span&gt; name
                                  (cdr names)
                                  (cdr values)
                                  entry-f)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lookup-in-table
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; table table-f)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? table) (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt; name))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-entry&lt;/span&gt; name
                             (car table)
                             (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
                                                (cdr table)
                                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt;))))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; table table-f)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; name
                     (cdr table)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-f&lt;/span&gt;)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;expression-to-action
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; e) (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom-to-action&lt;/span&gt; e))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;list-to-action&lt;/span&gt; e)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*const
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((number? e) e)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive) e)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;atom-to-action
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((number? e) *const)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;) *const)
      ((eq? e &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cons)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;car)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;null?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;atom?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;zero?)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;add1)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;sub1)) *const)
      ((eq? e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;number?)) *const)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*identifier))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;list-to-action
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car e))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;quote))
          *quote)
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;lambda))
          *lambda)
         ((eq? (car e) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cond))
          *cond)
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;*application))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*quote
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;text-of&lt;/span&gt; e)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;first
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(car p)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;second
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;car (cdr p)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;third
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;car (cdr (cdr p))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;text-of second)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;table-of first)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;formals-of second)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;body-of third)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*identifier
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-in-table&lt;/span&gt; e table initial-table)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;initial-table
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
    (car (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*lambda
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive)
           (cons table (cdr e)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evcon
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt; table)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;else?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines)))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines))
                table))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;question-of&lt;/span&gt; (car lines))
                table)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;answer-of&lt;/span&gt; (car lines))
                table))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (cdr lines) table)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;else?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) (eq? x (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;else)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;question-of first)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;answer-of second)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*cond
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;evcon&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond-lines-of&lt;/span&gt; e) table)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;cond-lines-of cdr)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evlis
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? args) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (car args) table)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (cdr args) table))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;*application
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;function-of&lt;/span&gt; e) table)
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;evlis&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arguments-of&lt;/span&gt; e) table))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;function-of car)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;arguments-of cdr)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;primitive?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;non-primitive?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
    (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt; vals)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;primitive?&lt;/span&gt; fun)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-primitive&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; fun) vals))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;non-primitive?&lt;/span&gt; fun)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply-closure&lt;/span&gt;
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; fun) vals)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-primitive
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; vals)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cons))
       (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;car))
       (car (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;cdr))
       (cdr (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;null?))
       (null? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;eq?))
       (eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals) (&lt;span style=&#34;color:#a6e22e&#34;&gt;second&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;atom?))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;:atom?&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;zero?))
       (zero? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;add1))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;add1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;sub1))
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;sub1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals)))
      ((eq? name (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;number?))
       (number? (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; vals))))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;:atom?
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((null? x) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;)
      ((eq? (car x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;primitive))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      ((eq? (car x) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;non-primitive))
       &lt;span style=&#34;color:#66d9ef&#34;&gt;#t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt;))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;apply-closure
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;closure&lt;/span&gt; vals)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;body-of&lt;/span&gt; closure)
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;extend-table&lt;/span&gt;
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;new-entry&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;formals-of&lt;/span&gt; closure)
               vals)
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;table-of&lt;/span&gt; closure)))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;new-entry build)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;extend-table cons)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;value
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;meaning&lt;/span&gt; e (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;meaning
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; table)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;expression-to-action&lt;/span&gt; e) e table)))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading-6&#34;&gt;树形抽象&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一个lat 中的一个删除&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember3
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((equal? (car l) s) (cdr l))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember3&lt;/span&gt; s (cdr l)))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;一个list中的一个删除&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
         ((eq? (car lat) a)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; a (cdr lat)))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;一个list中的全部删除&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember*
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((eq? (car l) a)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l)))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l))))))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (car l))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember*&lt;/span&gt; a (cdr l)))))))


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4 1中的rember升级
加入谓词表达式的参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rember-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; a l)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; (car l) a) (cdr l))&lt;span style=&#34;color:#75715e&#34;&gt;;;I think here needs atom2function&lt;/span&gt;
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                     (&lt;span style=&#34;color:#a6e22e&#34;&gt;rember-f&lt;/span&gt; test? a 
                               (cdr l)))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;2中的multirember升级&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-f
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
        ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((&lt;span style=&#34;color:#a6e22e&#34;&gt;test?&lt;/span&gt; a (car lat))
         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-f&lt;/span&gt; test?) a
                               (cdr lat)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car lat)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember&lt;/span&gt; test?)  a 
                                          (cdr lat))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multirember-eq? (&lt;span style=&#34;color:#a6e22e&#34;&gt;multirember-f&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eq?&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;5中的multirember-f进一步升级&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加入了可以处理的col,作为一个后处理小程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiremberco
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; lat col)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((null? lat)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;())))
      ((eq? (car lat) a)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiremberco&lt;/span&gt; a 
                      (cdr lat)
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen) 
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; newlat (cons (car lat) seen)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiremberco&lt;/span&gt; a 
                      (cdr lat)
                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen)
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons (car lat) newlat)
                             seen)))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;a-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; y)
    (null? y)))
&lt;span style=&#34;color:#75715e&#34;&gt;;(multiremberco &amp;#39;tuna &amp;#39;(sfds tuna fsd jif) a-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;#f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (multiremberco &amp;#39;tuna &amp;#39;(sfds tuna1 fsd jif) a-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;#t&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;how can  you get another value in the col&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;new-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; seen)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;a-friend&lt;/span&gt; newlat
         (cons (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;tuna) seen))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;-insertleft-insertright-eventonlyrembercol&#34;&gt;额外话题 insertleft insertright eventonly比较上面的rember,理解col&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiinsertLR
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; oldL oldR lat)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
      ((eq? (car lat) oldL)
       (cons new 
             (cons oldL
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLR&lt;/span&gt; new oldL oldR
                                  (cdr lat)))))
      ((eq? (car lat) oldR)
       (cons oldR
             (cons new
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLR&lt;/span&gt; new oldL oldR
                                 (cdr lat))))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;multiinsertLRco
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; oldL oldR lat col)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? lat)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((eq? (car lat) oldL)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLRco&lt;/span&gt; new oldL oldR
                        (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; L R)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons new 
                                     (cons oldL newlat))
                               (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; L) R))))
      ((eq? (car lat) oldR)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLRco&lt;/span&gt; new oldL oldR
                        (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; L R)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons oldR
                                     (cons new newlat))
                               L (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; R)))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;multiinsertLRco&lt;/span&gt; new oldL oldR 
                        (cdr lat)
                        (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newlat&lt;/span&gt; L R)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons (car lat) newlat)
                               L R)))))))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;evens-only*co
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; col)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((null? l)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
      ((&lt;span style=&#34;color:#a6e22e&#34;&gt;atom?&lt;/span&gt; (car l))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
         ((even? (car l))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (cdr l)
                         (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newl&lt;/span&gt; p s)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons (car l) newl)&lt;span style=&#34;color:#75715e&#34;&gt;;if it is evens ,so cons it into the newl&lt;/span&gt;
                                (* (car l) p) s))))
         (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (cdr l)
                              (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newl&lt;/span&gt; p s)
                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; newl p (+ (car l) s)))))))
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (car l)
                            (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;al&lt;/span&gt; ap as)
                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;evens-only*co&lt;/span&gt; (cdr l)
                                             (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dl&lt;/span&gt; dp ds)
                                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; (cons al dl)
                                                    (* ap dp)
                                                    (+ as ds))))))))))
&lt;span style=&#34;color:#75715e&#34;&gt;;the fourth collector :: the last-last-friend&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;the-last-last-friend
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newl&lt;/span&gt; product sum)
    (cons sum 
          (cons product 
                newl))))
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (evens-only*co &amp;#39;(45389 63 45 6 4 234  6 4 23 52 43) the-last-last-friend)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;#39;(45563 7008768 6 4 234 6 4 52)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;进一步升级multirember 提取公共形式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;insert-g可以变幻出 rember
insert-r insert-l  subset等&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;rembern
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; l)
    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqrem) &lt;span style=&#34;color:#66d9ef&#34;&gt;#f&lt;/span&gt; a l)))&lt;span style=&#34;color:#75715e&#34;&gt;;;seqrem doesn&amp;#39;t need (seqrem solve my ?.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqrem
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l) 
    l))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;那么insert-g到底是什么?&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insert-g
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        ((null? l) (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote &lt;/span&gt;()))
        ((eq? (car l) old)
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt; new old (cdr l)))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(cons (car l)
                    ((&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seq) new old
                                    (cdr l))))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以现在我们可以定义subst&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqS
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
    (cons new l)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqL
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
     (cons new (cons old l))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;seqR
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; old l)
        (cons (&lt;span style=&#34;color:#a6e22e&#34;&gt;old&lt;/span&gt; (cons new l)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;subst1 (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqS))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertL (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqL))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;insertR (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-g&lt;/span&gt; seqR))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过这四个级别的抽象我们得到一般的具备公共模式的insert-g
当然该函数还可以继续抽象。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>语言抽象</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/14/yu-yan-chou-xiang/</link>
      <pubDate>Thu, 14 May 2015 10:21:48 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/14/yu-yan-chou-xiang/</guid>
      <description>&lt;p&gt;我们每天都在做的事情
1.打开电脑，找到我们要做的事情，保存我们做完的事情，提交,我们可能挨训，也可能加班
2.我们可能去打球，我们可能跟朋友、亲人聊天
3.我们可能在周末的时候，跟女朋友、家人去看电影，去郊游
4.我们可能去参加一些团体活动……&lt;/p&gt;
&lt;p&gt;我们把我们要在电脑、生活上做的事情可以抽象化，虽然我们不知不觉的做着这些事情，
但是这是第一步叫做事件抽象（过程抽象）。随着发展，我们可以进行逻辑抽象，并最终达到&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html#%25_chap_4&#34;&gt;语言抽象&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;我们会发现我们所使用的计算机语言包含着主要的东西是
1. 变量
2. 函数
3. 调用&lt;/p&gt;
&lt;p&gt;可以参看&lt;a href=&#34;http://developer.51cto.com/art/201208/352423_2.htm&#34;&gt;王垠的计算器&lt;/a&gt;,里面第三节中提到Lambda Calculus是什么
1. 变量: x
2. 函数: (lambda (x) e)
3. 调用: (e1 e2)&lt;/p&gt;
&lt;p&gt;这是任何一门语言不可缺少的逻辑语言抽象部件，就好像数学家很早就认识到序列求和中的&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_sec_1.3.1&#34;&gt;抽象模式&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;语言本身其实就是一个&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html#%25_chap_4&#34;&gt;求值器&lt;/a&gt;
&amp;gt; The evaluator, which determines the meaning of expressions in a programming language, is just another program.
所以事实上，可以几乎把任何程序看作是某个语言的求值器，它本身不过就是另一个程序而已。&lt;/p&gt;
&lt;p&gt;而为了更好地操作这些语言的元素，进行大型的系统模块化设计，我们还需要引进&lt;a href=&#34;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%25_chap_3&#34;&gt;两种模式&lt;/a&gt;
1.对象实现(以不变的世界坐标系来说，其实对象是不断变化的，比如位置；此时坐标系是全局的)
2.流实现(以变化固体的角度来说，其实他是不变的；此时坐标系是局部的)&lt;/p&gt;
&lt;p&gt;关于scheme的部分以后再补上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>尾递归</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/13/wei-di-gui/</link>
      <pubDate>Wed, 13 May 2015 20:56:12 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/13/wei-di-gui/</guid>
      <description>&lt;p&gt;尾递归的好处就是快速计算，尾递归实际上是在递归计算的过程中，
（印象中递归过程[表示语法形式-调用自己]和递归计算过程[表正线性方式 和非线性方式]是不一样的）, 加入了迭代的思想，不断的修改了product和counter的值，
不需要树形展开。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt; n)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
    ((= n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(* n (&lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt; (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact1&lt;/span&gt; n)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; product counter)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      ((= counter &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) product)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; (* product counter) (- counter &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;fact-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; n))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;Solve 4!&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fact1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;;;; 求幂&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; b n)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= n &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
     (* b (expt b (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;iter form&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expr1&lt;/span&gt; b n)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expr-iter&lt;/span&gt; b counter product)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(= counter &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
       product
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr-iter&lt;/span&gt; b (- counter &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (* b product))))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;expr-iter&lt;/span&gt; b  n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;expr1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;===&amp;gt;另外还有一种更快速的方法
;; b^n =(b^(n/2))^2, n is even
;; b^n =(b*b^(n-1)) , n is odd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fast-iter&lt;/span&gt; b n)
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
  ((= n &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  ((even? n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fast&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(* b (&lt;span style=&#34;color:#a6e22e&#34;&gt;fast-iter&lt;/span&gt; b (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;====&amp;gt;并最终得到尾递归的一般形式
结合&lt;a href=&#34;jueqingsizhe66.github.io/2015/05/13/qiu-ding-ji-fen/&#34;&gt;求定积分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;===&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; term a  next b)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-iter&lt;/span&gt; a result)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;&amp;lt;???&amp;gt;
       &amp;lt;???&amp;gt; 
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;iter&lt;/span&gt; &amp;lt;???&amp;gt; &amp;lt;???&amp;gt;)))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-iter&lt;/span&gt; &amp;lt;???&amp;gt; &amp;lt;???&amp;gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>求定积分</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/13/qiu-ding-ji-fen/</link>
      <pubDate>Wed, 13 May 2015 19:27:40 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/13/qiu-ding-ji-fen/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/dingjifen.jpg&#34; alt=&#34;定积分&#34;&gt;
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/dingjifen3.jpg&#34; alt=&#34;定积分的数值计算&#34;&gt;
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/dingjifen2.jpg&#34; alt=&#34;定积分的图形示意&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cube&lt;/span&gt;  x) (* x  x x))
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;累加&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ a (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer&lt;/span&gt; (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) b))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;;;立方累加&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;cube&lt;/span&gt; a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube&lt;/span&gt; (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  b))))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;;; 求Pi 值 分数累加&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; (* a (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) b))))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;观察上面的积分过程
##最终提取出公共的形式 Sum&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (define (&amp;lt;name&amp;gt; a b)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  (if (&amp;gt; a b)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  (+ (&amp;lt;term&amp;gt; a) (&amp;lt;name&amp;gt; (&amp;lt;next&amp;gt;a) b))))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;于是我们可以得到&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; term a next b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt;  a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt; a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; term (&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; a)  next b))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;and-apply-the-sum--to-get-the-sum-integer2-sum-cube2-sum-pi2&#34;&gt;And Apply the sum  to get the sum-integer2 sum-cube2 sum-pi2&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer2&lt;/span&gt; a b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) x) ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) a) (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) b)) &lt;span style=&#34;color:#75715e&#34;&gt;;;;--&amp;gt;There is some problems&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (sum-integer2 1 10)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;54  ------------------------&amp;gt;Why&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (sum-integer 1 10)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;55&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt; x) x)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; x) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer3&lt;/span&gt; a b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; identity a inc b))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube2&lt;/span&gt; a b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; cube a inc b))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi2&lt;/span&gt; a b) 
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pi-term&lt;/span&gt; x)
    (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; (* x (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pi-next&lt;/span&gt; x)
    (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; pi-term a pi-next b))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
(* &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是我们现在可以计算积分了！
我们的问题是求解下面的定积分：
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/integral.png&#34; alt=&#34;定积分&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;;; So now we can do the integrate computing&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;Because integrate will have the same function but different next function&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;a-b 之间关于f函数的定积分的求法&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integral&lt;/span&gt; f a b dx)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-dx&lt;/span&gt; x) (+ x dx))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;update-a&lt;/span&gt; a dx) (+ a (/ dx &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)))
  (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (&lt;span style=&#34;color:#a6e22e&#34;&gt;update-a&lt;/span&gt; a dx) add-dx b) dx))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0001&lt;/span&gt;)
(/ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;)
(/ (* &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cube&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;)


&lt;span style=&#34;color:#75715e&#34;&gt;;result:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.24998750000000042&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.249999875000001&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.24999999874993412&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.25&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.25&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了更精确的求解积分，我们使用更为精妙的辛普森积分
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/xinpusen1.jpg&#34; alt=&#34;辛普森的抛物线积分方法&#34;&gt;
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/xinpusen2.jpg&#34; alt=&#34;辛普森的数学公式&#34;&gt;
&lt;img src=&#34;https://jueqingsizhe66.github.io/images/maths/xinpusen3.jpg&#34; alt=&#34;最终简化&#34;&gt;
###包含奇数的两倍 和偶数的四倍，两边不加倍&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;h = (b-a)/n&lt;/li&gt;
&lt;li&gt;yk= f(a+kh) &amp;mdash;&amp;gt; next&lt;/li&gt;
&lt;li&gt;(even? k)  (odd? k)&lt;/li&gt;
&lt;li&gt;y0 =a  yn= b&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a. 设计的过程遇到的问题是 参数的问题 需要设置k？
b. 中间过程的问题，如何划分三种情况
b.1  k为0和n的情况
b.2  k为奇数的情况
b.3  k为偶数的情况&lt;/p&gt;
&lt;p&gt;最终, 利用Fact的思想 进行求积分&lt;/p&gt;
&lt;p&gt;;;; 下面是一个较为混乱的设计，且没有考虑使用sum&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-integral&lt;/span&gt; f a b n)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; (/ (- b a) n))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;inc (+ a (* k h)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;inc2 (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; f(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;)))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;inc4 (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; f(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;)))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
    ((= k &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a))
    ((= k n) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; b))
    ((even? k) (+ (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; f((+ a (* k h))))  
)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;补充，好思想:保证最后一个为偶数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; x)
 (+ x (remainder x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是有了下面较好的版本，思考，之前的Sum其实是已经提供了inc递增的a
以及范围，我们主要的目的就是写好term即可！而
term其实就是涉及到你需要思考的三种情况
之前你之所以回想不清楚，因为你没有斩断念头，term只接受一个参数，
这个参数其实就是你一直想的k，所以simpson-term的一个参数就是k，利用它
开始做文章即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-integral&lt;/span&gt; f a b n)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; x)  (+ x (remainder x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fixed-n (&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; n))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) fixed-n))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-term&lt;/span&gt; k) 
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;y (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* k h))))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
          ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(= k &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (= k fixed-n))
            (* &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; y))
          ((even? k) (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; y))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; y))))
    (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; simpson-term &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; inc fixed-n))
 ))

&lt;span style=&#34;color:#75715e&#34;&gt;;(simpson-integral cube 0 1 10)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;1/4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外还有几种变体，只不过总体思路都在上面类似。&lt;/p&gt;
&lt;p&gt;a1:breaking the problem into four parts: (f y0), (f yn) and two sums,one over even k and another over odd k&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;another-simpson-integral&lt;/span&gt; f a b n) 
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) n))  
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2h&lt;/span&gt; x) (+ x (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; h))) 
   (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a)  
                   (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (+ a h) add-2h (- b h)))  
                   (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2h&lt;/span&gt; a) add-2h (- b h)))  
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* h n)))))) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;a2:Here&#39;s a version that sums over pairs of terms (2 y_k + 4 y_k+1). No conditionals or special cases are needed anywhere, but there&#39;s an extra term [f(b) - f(a)] to be added to the final count.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson&lt;/span&gt; f a b n) 
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) n)) 
    
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k) 
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* k h)))) 
    
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ypair&lt;/span&gt; k) 
     (+ (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k)) 
        (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; (+ k &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))) 
    
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2&lt;/span&gt; k) 
     (+ k &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) 
    
   (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; ypair &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; add-2 (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) 
                 (- (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a))))) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然也可以写成下面的格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sim-integral&lt;/span&gt; f a b n) 
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- a b) n)) 
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* k h)))) 
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coeff&lt;/span&gt; k) (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;is-even?&lt;/span&gt; k) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) 
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;part-term&lt;/span&gt; k) (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;coeff&lt;/span&gt; k) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k))) 
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;part-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; part-term &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; inc (- n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))) 
     (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; n) part-value))) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;##下面是我重新写的一遍，包含一些计算问题的修正&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加入了n的修正&lt;/li&gt;
&lt;li&gt;重新认识了simpson算法的，当然还有些问题没有理解，比如f(b)-f(a),
在simpson-anthother-integrate中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;新的源码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;; (let &amp;lt;var&amp;gt; &amp;lt;bindings&amp;gt; &amp;lt;body&amp;gt;)&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cube&lt;/span&gt; x) (* x  x  x))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ a (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer&lt;/span&gt; (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) b))))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;cube&lt;/span&gt; a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube&lt;/span&gt; (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) b))))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
     (+ (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; (* a (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; (+ a &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) b))))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; term a next b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&amp;gt; a b)
     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt; a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; term  (&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; a) next b))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer2&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt; x) x)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; x) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; identity a inc b))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-integer2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube2&lt;/span&gt;  a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cube&lt;/span&gt; x) (* x x x))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; x) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; cube a inc b))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-cube2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi2&lt;/span&gt; a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pi-term&lt;/span&gt; x) (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; (* x (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pi-next&lt;/span&gt; x) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; pi-term a pi-next b))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum-pi2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;integral&lt;/span&gt; f a b dx)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;const_a (+ a (/ dx &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add_dx&lt;/span&gt; x) (+ x dx))
  (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f const_a add_dx b) dx))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-integral&lt;/span&gt; f a b n)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; x) (+ x (remainder x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fixed-n (&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; n))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; x) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) fixed-n))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-term&lt;/span&gt; k)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;y (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* h k))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;
      ((&lt;span style=&#34;color:#66d9ef&#34;&gt;or &lt;/span&gt;(= k &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (= k fixed-n))
       (*  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  y))
      ((even? k)
       (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  y))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; y))))
 &lt;span style=&#34;color:#75715e&#34;&gt;; (* (/ h 3) (sum simpson-term 0 inc b))) ;;; 0的意思表示从k=0开始,不能写成b，如果写成b表示你没有理解，因为0 fixed-n都代表的是K&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;;;这是次数的说法，而不是代表着a-b之间的求值范围，而是指求职的次数！&lt;/span&gt;
 (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; simpson-term &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; inc fixed-n)))
(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)


&lt;span style=&#34;color:#75715e&#34;&gt;;;一种变体 思路同上&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 比较有趣的地方是分为四个节点出&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 1  f(a)  ----》 y0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 2  f(a+h) 奇数的开始地方   add-2h方式累加都是奇数 同时终点是b-h  为什么？因为b在下面被暂用--》把它看待是一个奇数累加的过程 y1 y3 y5&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 3  f(a+2h) 偶数的开始地方 add-2h方式累加都是偶数 同时终点是b-h--》把它看待是一个偶数累加的过程 y2 y4 y6..&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; 4  f(b)    最后一部分  yn&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-another-integral&lt;/span&gt; f  a b n)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) n))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2h&lt;/span&gt; x) (+  x (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt; h)))  &lt;span style=&#34;color:#75715e&#34;&gt;;;; &lt;/span&gt;
  (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a)
                          (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (+ a h) add-2h (- b h)))  &lt;span style=&#34;color:#75715e&#34;&gt;;;; (+a h)表示起始点  (- b h) 表示的是终点&lt;/span&gt;
                          (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2h&lt;/span&gt; a) add-2h (- b h))) &lt;span style=&#34;color:#75715e&#34;&gt;;; 注意这边的(add2h a)表示的是起始点&lt;/span&gt;
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* h n))))))  &lt;span style=&#34;color:#75715e&#34;&gt;;; 也可以是(f b) &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (simpson-another-integral cube 0 1 11)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.1782892789654623&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&amp;gt; (simpson-another-integral cube 0 1 12)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;0.2499999999999999&amp;#39;&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-another-integral-improve&lt;/span&gt; f  a b n)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; x) (+ x (remainder x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fixed-n  (&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; n))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) fixed-n))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2h&lt;/span&gt; x) (+  x (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt; h)))  &lt;span style=&#34;color:#75715e&#34;&gt;;;; &lt;/span&gt;
  (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a)
                          (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (+ a h) add-2h (- b h)))  &lt;span style=&#34;color:#75715e&#34;&gt;;;; (+a h)表示起始点  (- b h) 表示的是终点&lt;/span&gt;
                          (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; f (&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2h&lt;/span&gt; a) add-2h (- b h))) &lt;span style=&#34;color:#75715e&#34;&gt;;; 注意这边的(add2h a)表示的是起始点&lt;/span&gt;
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* h fixed-n)))))) &lt;span style=&#34;color:#75715e&#34;&gt;;;; (f b)的效果是一样  但是不正确！ 现在&lt;/span&gt;
  
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-another-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-another-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-another-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;;;; 如果是奇数的话，现在解决的办法就是多增加一些计算！&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;;;;;;过程没错！！！ 不知道哪边多加了！&lt;/span&gt;
   
    
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-pair-integral&lt;/span&gt; f a b n)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; x) (+ x (remainder x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fixed-n  (&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; n))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) fixed-n))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k) ( f  (+ a (* k h))))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ypair&lt;/span&gt; k)
     (+ (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k))
          (* &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; (+ k &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;add-2&lt;/span&gt; k)
     (+ k &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
   (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; ypair &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; add-2 (- fixed-n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))  
                (- (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a)))))  &lt;span style=&#34;color:#75715e&#34;&gt;;;; 为什么是减号  你可以看到这边的思想是抽出中间的偶数对的数据（奇数加上偶数 理当是加起来的)&lt;/span&gt;
                                          &lt;span style=&#34;color:#75715e&#34;&gt;;;;因为最后一个  为什么要计算 [f(b) - f(a)] &lt;/span&gt;
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-pair-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;simpson-pair-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
 
 &lt;span style=&#34;color:#75715e&#34;&gt;;;;sim-integral 提高版  加入了 round-to-next-even使得计算准确，先前的sim-integral有问题&lt;/span&gt;
 (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sim-integral&lt;/span&gt; f a b n)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; x) (+ x (remainder x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;;;;得加上这个 才可以算准！！&lt;/span&gt;
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;fixed-n  (&lt;span style=&#34;color:#a6e22e&#34;&gt;round-to-next-even&lt;/span&gt; n))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;h (/ (- b a) fixed-n))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k) (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; (+ a (* k h))))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coeff&lt;/span&gt; k) (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(even? k) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;part-term&lt;/span&gt; k) (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;coeff&lt;/span&gt; k) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; k)))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; x) (+ x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;part-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; part-term &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; inc (- fixed-n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
   (* (/ h &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; n) part-value)))
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;sim-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;;; 有问题 已解决&lt;/span&gt;
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;sim-integral&lt;/span&gt; cube &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;;; 有问题  已解决&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>找出函数的不动点--Navier-Stokes方程</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/12/zhao-chu-han-shu-de-bu-dong-dian-navier-stokesfang-cheng/</link>
      <pubDate>Tue, 12 May 2015 03:13:50 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/12/zhao-chu-han-shu-de-bu-dong-dian-navier-stokesfang-cheng/</guid>
      <description>&lt;p&gt;##Beautiful code!&lt;/p&gt;
&lt;p&gt;数x为函数的f的不动点（f可以代表N-S方程），如果满足f(x)=x,则称x
为函数f的不动点。
性质 f(x),f(f(x)),f(f(f(x)))&amp;hellip;., change the x&#39;s value if f(x)=x,then
you found!&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;tolerance &lt;span style=&#34;color:#ae81ff&#34;&gt;0.000001&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed-point&lt;/span&gt; f first-guess)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;close-enough?&lt;/span&gt; v1 v2)
    (&amp;lt; (abs (-  v1 v2)) tolerance))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; guess)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; guess)))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;close-enough?&lt;/span&gt; guess next)
         next
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; next))))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; first-guess))

&lt;span style=&#34;color:#75715e&#34;&gt;;;;solve cos(x)=x&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed-point&lt;/span&gt; cos &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;)


&lt;span style=&#34;color:#75715e&#34;&gt;;;(cos 0.7390855263619245)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;0.7390848683867142&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;(abs (-  (cos 0.7390855263619245) 0.7390855263619245))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;6.579752103164083e-07&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;;;solve y=siny+cosy   x=f(x) ====&amp;gt; Navier Stokes equation&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed-point&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) (+ (sin y) (cos y))) &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;It is what we want!!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;(abs (- ((lambda (y) (+ (sin y) (cos y))) 1.2587277968014188) 1.2587277968014188)) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;6.26112570678572e-07&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;;;;;One method to calculate the square value&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;because x^2 = y  so x = y/x (x =f (x) next we  will use the fixed-point thinking) we should continue change the x&amp;#39;s value!&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; guess x)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; guess x)
     guess
     (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess x)
               x)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; x)
  (* x x))
&lt;span style=&#34;color:#75715e&#34;&gt;;;;good-enough? is similar to close-enough？&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;good-enough?&lt;/span&gt; x y)
  (&amp;lt; (abs (- (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; x) y)) &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00001&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;;x^2=y   x=y/x   x+x=y/x+x  x=(y/x+x)/2&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;improve&lt;/span&gt; guess x)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; guess (/ x guess)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqrt&lt;/span&gt; x)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt-iter&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; x))


&lt;span style=&#34;color:#75715e&#34;&gt;;;(mysqrt 4)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;2.0000000929222947&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;;Use fixed-point thinking &lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqrt_death_fixed&lt;/span&gt; x)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed-point&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) (/ x y))
              &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;;(mysqrt_death_fixed 4)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;wrong !!!  can not convenge!!!! why?&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;;because   y2= x/y1  y3=x/y2=x/(x/y1)=y1 ====&amp;gt;death recycle===&amp;gt; so we use average&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqrt_fixed&lt;/span&gt; x)
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;fixed-point&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; y (/  x y)))
              &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqrt_fixed&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;;ok fine&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;2.000000000000002====&amp;gt;这也叫做平均阻尼定义！常用于数值计算当中&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;在不动点的搜寻中，作为帮助收敛的手段！！！！&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>折半查找有条件</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/12/zhe-ban-chao-zhao-you-tiao-jian/</link>
      <pubDate>Tue, 12 May 2015 02:46:03 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/12/zhe-ban-chao-zhao-you-tiao-jian/</guid>
      <description>&lt;p&gt;You want to solve F(x)=0,
if f(a)&amp;lt;0&amp;lt;f(b), so the value must be inside the [a,b].&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;lang racket
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;close-enough?&lt;/span&gt; x  y)
  (&amp;lt; (abs (-  x y)) &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00001&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; a b)
  (/ (+  a b) &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; f neg-point pos-point)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;midpoint&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;average&lt;/span&gt; neg-point pos-point)))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;close-enough?&lt;/span&gt; neg-point pos-point)
        midpoint
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;test-value&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; midpoint)))
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((positive? test-value)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; f neg-point midpoint))
               ((negative? test-value) 
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; f midpoint pos-point))
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;midpoint))))))

&lt;span style=&#34;color:#75715e&#34;&gt;;;必须判断一下，如果同号则无法使用折半查找&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;half-interval-method&lt;/span&gt; f a b)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a-value&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; a))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;b-value&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; b)))
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(negative? a-value) (positive? b-value))
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; f a b))
          ((&lt;span style=&#34;color:#66d9ef&#34;&gt;and &lt;/span&gt;(negative? b-value) (positive? a-value))
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; f  a b))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;else&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values are not of opposite sign&amp;#34;&lt;/span&gt; a b)))))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;half-interval-method&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) (- (* x x x) (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; x) &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
                       &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
                       &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>So beautiful code</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/12/so-beautiful-code/</link>
      <pubDate>Tue, 12 May 2015 02:29:11 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/12/so-beautiful-code/</guid>
      <description>&lt;p&gt;So beautiful&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x y)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f-helper&lt;/span&gt; a b)
  (+ (* (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; a))
      (* y b)
      (* a b)))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;f-helper&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (* x y))
            (- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; y)))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;====&amp;gt; f(x,y)=x(1+xy)^2 + y(1-y)+(1+xy)(1-y)
==&amp;gt;  a= 1+xy
b= (1-y)
f(x,y)=xa^2+yb+ab&lt;/p&gt;
&lt;p&gt;====&amp;gt;Continue&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x y)
  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; b)
       (+ (* x (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; a))
          (* y b)
          (* a b)))
    (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (* x y))
    (- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; y)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;====&amp;gt;Use let to define the local variables&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x y)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (* x y)))
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; (- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; y)))
       (+ (* x (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; a))
          (* y b)
          (* a b))))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;let is just the coat of the ((lambda (a b))&lt;/p&gt;
&lt;p&gt;Of course we can use define&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x y)
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;a (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (* x y)))
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;b (- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; y))
 (+ (* x (&lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt; a))
    (* y b)
    (* a b)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SICP_P42&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
