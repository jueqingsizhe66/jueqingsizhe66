<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp | 志不达者智不坚 言不信者行不果</title>
    <link>https://jueqingsizhe66.github.io/tag/lisp/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tag/lisp/index.xml" rel="self" type="application/rss+xml" />
    <description>Lisp</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2024</copyright><lastBuildDate>Sun, 01 Nov 2015 17:26:23 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Lisp</title>
      <link>https://jueqingsizhe66.github.io/tag/lisp/</link>
    </image>
    
    <item>
      <title>Think in the variable and macro in the common lisp</title>
      <link>https://jueqingsizhe66.github.io/archives/think-in-the-variable-and-macro-in-the-common-lisp/</link>
      <pubDate>Sun, 01 Nov 2015 17:26:23 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/archives/think-in-the-variable-and-macro-in-the-common-lisp/</guid>
      <description>&lt;p&gt;As you all know we can use defun to define a function in the common lisp,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;
(defun add (x)
    (+ x 1))
(defun foo (a b c)
    (list  a b c))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Definition above is the most essential method to create a function. Due to the&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;convience&lt;/strong&gt; we will have to think about the variables and functions again.&lt;/p&gt;
&lt;p&gt;Writing thinking path: from thinking the variables to functions and get the knowledge of the common lisp.&lt;/p&gt;
&lt;h2 id=&#34;i-variables&#34;&gt;I. Variables&lt;/h2&gt;
&lt;p&gt;We we execute one function ,we should let the interpreter know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;call the Mac first? or call the compiler first?&lt;/li&gt;
&lt;li&gt;Mac will not get the value of the variables ,but change the expression to  another forms&lt;/li&gt;
&lt;li&gt;But compiler will directly get the value of the variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Variables can be shown with &amp;amp;key,&amp;amp;optional,&amp;amp;rest,&amp;amp;body forms etc.&lt;/p&gt;
&lt;h3 id=&#34;keyword-variables&#34;&gt;keyword variables&lt;/h3&gt;
&lt;p&gt;The variables start with colon( it means :) is the keyword variables, but there are exception,&lt;/p&gt;
&lt;p&gt;such as in the defsystem(asdf grammer), you can depends on other system (depends on :macro-utilities)&lt;/p&gt;
&lt;p&gt;here macro-utilities is called as a system,not the keyword variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;
(defun foo (&amp;amp;key a (b 20) (c 30 c-p)) 
    (list  a b c c-p))

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;optional-variables&#34;&gt;optional variables&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;
(defun foo (a &amp;amp;optional (b 20) (c 30 c-p))  ;;c-supplied-p

    (list  a b c c-p))

;; it means the variables b and c is optional ,if b is not written in the
;; the parameter list, the interpreter will set b = 20,similary  c.

(defun make-rectangle (width &amp;amp;optional (height width)) ...)

;;; the rectangle will set height =width when height is not supplied.

(defun foo (a &amp;amp;optional (b 20) (c 30 c-supplied-p)) 

    (list  a b c c-supplied-p))


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rest-variables&#34;&gt;rest variables&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;
(defun format (stream string &amp;amp;rest values) ...)

(defun + (&amp;amp;rest numbers) ...)

(defmacro when (condition &amp;amp;rest body)
    `(if (not ,condition) (progn ,@body) ;; The difference between , and ,@ in the `() is ,@ will delete the brace more than once 

    ;; (if condition then-part [else-part])
)

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;body--variables&#34;&gt;body  variables&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;macro-definition&#34;&gt;macro definition&lt;/h3&gt;
&lt;p&gt;I think Mac(Macro-&amp;gt; defmacro) is a form to change the input of the variables.Actually it is&lt;/p&gt;
&lt;p&gt;most powerful tool in the lisp programming&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;
(format t &amp;quot;hello world&amp;quot;)

(defun backwords (str) 
    (reverse str))

(backwords (&amp;quot;hello world&amp;quot; t format))  ;; take care not (backwords &#39;(&amp;quot;hello world&amp;quot; t format))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So when you execute the backwords macro, the interpreter will tell the Mac to do the works.&lt;/p&gt;
&lt;p&gt;When  he finished his work. The compiler will continue execute the result of the Mac. That&lt;/p&gt;
&lt;p&gt;is the process of the macro function.&lt;/p&gt;
&lt;h2 id=&#34;ii-functions&#34;&gt;II. Functions&lt;/h2&gt;
&lt;p&gt;Orient Object Programming&amp;rsquo;s CLOS is  to tell you how to rearrange the functions and variables into one class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iii-format-function&#34;&gt;III. Format function&lt;/h2&gt;
&lt;p&gt;format is a most powerful decorate function to output in the common lisp.&lt;/p&gt;
&lt;p&gt;so every field in the format function , you should take note &lt;em&gt;~&lt;/em&gt; ,such as &lt;em&gt;~a&lt;/em&gt;, &lt;em&gt;~{~}&lt;/em&gt;, &lt;em&gt;~%&lt;/em&gt;, &lt;em&gt;~:a&lt;/em&gt;, &lt;em&gt;~r&lt;/em&gt;,&lt;em&gt;~d&lt;/em&gt; etc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;added-later&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
