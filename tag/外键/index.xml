<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>外键 | 30年磨一剑</title>
    <link>https://jueqingsizhe66.github.io/tag/%E5%A4%96%E9%94%AE/</link>
      <atom:link href="https://jueqingsizhe66.github.io/tag/%E5%A4%96%E9%94%AE/index.xml" rel="self" type="application/rss+xml" />
    <description>外键</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Mon, 11 May 2015 14:58:41 +0800</lastBuildDate>
    <image>
      <url>https://jueqingsizhe66.github.io/images/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>外键</title>
      <link>https://jueqingsizhe66.github.io/tag/%E5%A4%96%E9%94%AE/</link>
    </image>
    
    <item>
      <title>2月27日Java周末班试题</title>
      <link>https://jueqingsizhe66.github.io/blog/2015/05/11/2yue-27ri-javazhou-mo-ban-shi-ti/</link>
      <pubDate>Mon, 11 May 2015 14:58:41 +0800</pubDate>
      <guid>https://jueqingsizhe66.github.io/blog/2015/05/11/2yue-27ri-javazhou-mo-ban-shi-ti/</guid>
      <description>&lt;p&gt;0105班Java周末班试题（JDBC 9-16）
阶段性考试（考试6个小时，讲评+重写6个小时）：
记录完成每个题所需要的时长。
第一题、SQL题
表格见图片附件
题目：编写SQL语句完成下面的功能：
条件查询：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在GRADE表中查找80-90份的学生学号和分数&lt;/li&gt;
&lt;li&gt;在GRADE 表中查找课程编号为003学生的平均分&lt;/li&gt;
&lt;li&gt;在GRADE 表中查询学习各门课程的人数&lt;/li&gt;
&lt;li&gt;查询所有姓张的学生的学号和姓名&lt;/li&gt;
&lt;li&gt;查询分数在80-90分的学生的学号、姓名、分数&lt;/li&gt;
&lt;li&gt;查询学习了’C语言’课程的学生学号、姓名和分数
第二题
不参考、不对照任何老师、同学的代码编写JDBCUtils。并记录写完需要的时间。
第三题
编写手机号码查询归属地案例。并记录写完需要的时间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;%E7%AC%AC%E4%B8%80%E9%A2%98%E8%A1%A8%E6%A0%BC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;考试未通过，中途出去，fail;&lt;/p&gt;
&lt;p&gt;第一题：
费时：4个小时左右
表设计阶段：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;;;;创建一个考试数据库
create database exam;  
use exam;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;错误分析：
curriculum是一个基础表！ 连接grade表！Grade表连接student_info表 ，认为student_info存在外键
经过折腾：认为student_info没有外键，而grade表存在两个外键&lt;/p&gt;
&lt;p&gt;Curriculum 表的设计：
curriculum_no 课程编号 :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;    varchar(20)not null auto_increment primary key, 
    ;;后来思考 int改变为varchar(20)因为也许会出现非数字
corriculum_name课程名称   varchar(20) not null default ‘’
Credit学分 ： real(5,2) not null default 0.0     
    ;;;(real默认是double类型)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其间遇到无法显示汉字的情况：
1：数据库级别修改
修改数据库级别，命令如下：use edu(换成你要修改的数据库名，在这里我的数据库为edu),，然后执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;alter database exam character set utf-8;
或者
SET NAMES &#39;utf8&#39;; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2：数据表级别的修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;ALTER TABLE table_name DEFAULT CHARSET utf8;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3: 发现经过这两个大小修改还是不行,于是也对字段进行修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;alter table curriculum modify curriculum_no varchar(20) character set utf8
alter table curriculum modify curriculum_name varchar(20) character set utf8;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是依然不行！！说明之前插入的只好清空，再插入一遍， 然后就可以了&lt;/p&gt;
&lt;p&gt;grade表的设计：&lt;/p&gt;
&lt;p&gt;此表的设计一波三折，在添加外键的时候多次出现错误，下面先给出错误的，再列出正确的添加方式&lt;/p&gt;
&lt;p&gt;错误分析表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;stu_no 学号：  varchar(20) not null auto_increment primary key,
  ;;后来思考 int改变为varchar(20)因为也许会出现非数字
课程编号  curriculum_no : int not null, foreign key(curriculum_no) references Curriculum


(Curriculum_no) on delete restrict on update cascade
Score 分数 :    real(5,2) not null default 0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;外键知识：
1.MYSQL在建外键后,会自动建一个同名的索引,引入外键的缺点是会使速度和性能下降&lt;/p&gt;
&lt;p&gt;在创建表的时候添加外键：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table grade(
   stu_no varchar(20) not null default &#39;&#39;,
    curriculum varchar(20) not null default &#39;&#39;,constraint hello foreign key
     (curriculum) references curriculum(curriculum_no) on delete restrict
     on update cascade,
    stu_score real(5,2) not null default 0.00);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在创建表后天添加外键：
添加一个叫hello的外键：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;alter table grade add constraint hello foreign key(stu_curriculum_no) ref
erences curriculum(curriculum_no) on delete restrict on update cascade;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看grade表信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;| grade | CREATE TABLE `grade` (
  `stu_no` varchar(20) NOT NULL,
  `stu_curriculum_no` varchar(20) NOT NULL DEFAULT &#39;&#39;,
  `stu_score` double(5,2) NOT NULL DEFAULT &#39;0.00&#39;,
  PRIMARY KEY (`stu_no`),
  KEY `hello` (`stu_curriculum_no`),
  CONSTRAINT `hello` FOREIGN KEY (`stu_curriculum_no`) REFERENCES `curriculum` (
`curriculum_no`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中Key hello (stu_curriculum_no) 就是所谓的索引，一般可以这样
查看表索引  show index from grade;
删除表索引  alter table grade drop index hello&lt;/p&gt;
&lt;p&gt;删除表中的外键：
ALTER TABLE grade DROP FOREIGN KEY fk_member;
当然一般在删除的时候需要
show create table grade 这样可以查看 CONSTRAINT后的名字  比如fk_memeber在本例中就是hello&lt;/p&gt;
&lt;p&gt;后来再次思考，grade表不可能有主键，因为学号可能多次出现在不同记录中！于是删除主键
alter table grade drop primary key;
（添加主键的方式：alter table table_test add primary key(id);）&lt;/p&gt;
&lt;p&gt;我再次新建一张表grade1目的是测试，在同一个库中的确不能存在两个相同的外键名，否则报错，
下面我用hello1则是通过。（应该是此原因）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table grade1(
     stuno varchar(20) not null default &#39;&#39;,
    curi varchar(20) not null default &#39;&#39;,constraint hello1 foreign key
     (curi) references curriculum(curriculum_no),
     score real(5,2) not null default 0.00);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ERROR 1022 (23000): Can&amp;rsquo;t write; duplicate key in table &amp;lsquo;grade&amp;rsquo;的解决方案：外键名字改成没用过的就可以（整个数据库exam范围内）
下面再次新建一张表grade2 ,目的是测试不同表是不是可以使用字段名字相同的充当外键，当然是没问题啦！
因为在设计表的时候，曾经怕如果curi改为curriculum_no会不会报错的问题。所以就一起尝试了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table grade2(
     stu_no varchar(20) not null default &#39;&#39;,
    curi varchar(20) not null default &#39;&#39;,constraint hello2 foreign key
     (curi) references curriculum(curriculum_no) on delete restrict on update
    cascade,
     score real(5,2) not null default 0.00);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在先把grade表放在一边 ，待会设计完student_info表之后再聊grade表的事情。&lt;/p&gt;
&lt;p&gt;Student_info表的设计&lt;/p&gt;
&lt;p&gt;不合理的设计（主键同时是外键，不好）：
学号 student_no : int  not null auto_increment primary key, foreign key(student_no) references&lt;/p&gt;
&lt;p&gt;grade on grade(student_no) on delete restrict on update cascade,（后来修改为 主键！因为一个表即为&lt;/p&gt;
&lt;p&gt;主键和外键叠加不好！！ 同时让grade的stu_no 也增加一个外键  连接到student_info表）
姓名  stu_name  : varchar(20) not null default ‘’,
性别  stu_sex    : char(2)  not null default ‘男‘，
出生年月 stu_date (stu_birth): date not null default ‘1990-01-04’
家庭住址 stu_family (stu_addr): varchar(20) not null default ‘’,
备注     stu_note : varchar(30) not null default ‘’,&lt;/p&gt;
&lt;p&gt;然后再次回到grade表，添加外键，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;alter table grade add constraint fuck foreign key(stu_no) references stud
ent_info(stu_no) ;
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint f
ails (`exam`.`#sql-167c_1`, CONSTRAINT `fuck` FOREIGN KEY (`stu_no`) REFERENCES
`student_info` (`stu_no`))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;报错了！！！为什么？
原来在非空表的情况不能添加外键
于是： delete from grade;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;alter table grade add constraint pig foreign key(stu_no) references
    student_info(stu_no) on delete restrict on update cascade;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最终我的grade表的结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;| grade | CREATE TABLE `grade` (
  `stu_no` varchar(20) NOT NULL DEFAULT &#39;&#39;,
  `curriculum` varchar(20) NOT NULL DEFAULT &#39;&#39;,
  `stu_score` double(5,2) NOT NULL DEFAULT &#39;0.00&#39;,
  KEY `hello` (`curriculum`),
  KEY `pig` (`stu_no`),
  CONSTRAINT `hello` FOREIGN KEY (`curriculum`) REFERENCES `curriculum` (`curric
ulum_no`) ON UPDATE CASCADE,
  CONSTRAINT `pig` FOREIGN KEY (`stu_no`) REFERENCES `student_info` (`stu_no`) O
N UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实经过前面n过程的之后，你会发现这几张表在你的脑海中特别清晰：
1.学生的
2.成绩的
3.课程的&lt;/p&gt;
&lt;p&gt;最终的结果是：&lt;/p&gt;
&lt;p&gt;curriculum表的设计：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table curriculum(
    curriculum_no int not null auto_increment primary key,
    curriculum_name varchar(20) not null default &#39;&#39;,
    curriculum_credit real(5,2) not null  default 0.0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;curriculum表的数据添加：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;insert into curriculum(curriculum_no,curriculum_name,curriculum_credit) v
alues(&#39;0002&#39;,&#39;C语言&#39;,3.0);

insert into curriculum &amp;lt;curriculum_no,curriculum_name,curriculum_credit)
values (&#39;0001&#39;,&#39;计算机基础&#39;,2.2);
insert into curriculum (curriculum_no,curriculum_name,curriculum_credit) values(&#39;0003&#39;,&#39;编译原理&#39;,2.5);
insert into curriculum (curriculum_no,curriculum_name,curriculum_credit) values(&#39;0004&#39;,&#39;错做系统&#39;,3.5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;student_info表的设计：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table student_info(
     stu_no varchar(20) not null default &#39;&#39; primary key,
     stu_name varchar(20) not  null default &#39;&#39;,
    stu_sex char(4) not null default &#39;男&#39;,
     stu_birth date not null default &#39;1990-01-07&#39;,
     stu_addr varchar(20) not null default &#39;&#39;,
     stu_note varchar(30));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;student_info表的数据添加：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;insert into student_info (stu_no,stu_name,stu_sex,stu_birth,stu_addr) val
ues(&#39;0001&#39;,&#39;张三&#39;,&#39;男&#39;,1989-05-17,&#39;北京&#39;);

insert into student_info (stu_no,stu_name,stu_sex,stu_birth,stu_addr,stu_
note) values(&#39;0002&#39;,&#39;李四&#39;,&#39;女&#39;,1990-06-22,&#39;内蒙古&#39;,&#39;此女子性格刁蛮&#39;);

insert into student_info(stu_no,stu_name,stu_sex,stu_birth,stu_addr) valu
es(&#39;0003&#39;,&#39;王五&#39;,&#39;男&#39;,1992-02-18,&#39;江西&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;grade表的设计&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table grade3(
    stu_no varchar(20) not null default &#39;&#39;,constraint pig34 foreign key(stu_n
o) references student_info(stu_no) on delete restrict on update cascade,
     curriculum varchar(20) not null default &#39;&#39;,constraint hellodff foreign ke
y(curriculum) references curriculum(curriculum_no) on delete restrict on update
cascade,
    stu_score real(5,2) not null default 0.00);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;grade表的数据添加（截取部分）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;insert into grade values(&#39;0002&#39;,&#39;0001&#39;,75),(&#39;0002&#39;,&#39;0002&#39;,60),(&#39;0002&#39;,&#39;00
03&#39;,79),(&#39;0002&#39;,&#39;0004&#39;,76);
insert into grade(stu_no,curriculum,stu_score) values(&#39;0003&#39;,&#39;0002&#39;,78);
注意了：如果外键表的0003没有的话，则无法添加0003，并报错！很正常，因为外键表student_info没有！！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;题目结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select * from grade;
+--------+------------+-----------+
| stu_no | curriculum | stu_score |
+--------+------------+-----------+
| 0001   | 0001       |     80.00 |
| 0001   | 0002       |     85.00 |
| 0001   | 0003       |     90.00 |
| 0001   | 0004       |     92.00 |
| 0002   | 0001       |     75.00 |
| 0002   | 0002       |     60.00 |
| 0002   | 0003       |     79.00 |
| 0002   | 0004       |     76.00 |
| 0003   | 0001       |     80.00 |
| 0003   | 0002       |     78.00 |
| 0003   | 0003       |     97.00 |
| 0003   | 0004       |     86.00 |
+--------+------------+-----------+
12 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;在GRADE表中查找80-90份的学生学号和分数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select stu_no as 学好 ,stu_score as 分数 from grade where stu_score&amp;gt;80.0
and stu_score&amp;lt;90.0;
+------+-------+
| 学好 | 分数  |
+------+-------+
| 0001 | 85.00 |
| 0003 | 86.00 |
+------+-------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在GRADE 表中查找课程编号为003学生的平均分&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select avg(stu_score) from grade where curriculum=&#39;0003&#39;;
+----------------+
| avg(stu_score) |
+----------------+
|      88.666667 |
+----------------+
1 row in set (0.04 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在GRADE 表中查询学习各门课程的人数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select count(*),curriculum from grade group by curriculum;
+----------+------------+
| count(*) | curriculum |
+----------+------------+
|        3 | 0001       |
|        3 | 0002       |
|        3 | 0003       |
|        3 | 0004       |
+----------+------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;查询所有姓张的学生的学号和姓名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select stu_no 学号,stu_name 姓名  from student_info where stu_name like &#39;
张%&#39;;
+------+------+
| 学号 | 姓名 |
+------+------+
| 0001 | 张三 |
+------+------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;查询分数在80-90分的学生的学号、姓名、分数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select s.stu_no 学号,s.stu_name 姓名,g.curriculum 课程,g.stu_score 分数 f
rom grade g
    -&amp;gt; left join student_info s on g.stu_no=s.stu_no;
+------+------+------+-------+
| 学号 | 姓名 | 课程 | 分数  |
+------+------+------+-------+
| 0001 | 张三 | 0001 | 80.00 |
| 0001 | 张三 | 0002 | 85.00 |
| 0001 | 张三 | 0003 | 90.00 |
| 0001 | 张三 | 0004 | 92.00 |
| 0002 | 李四 | 0001 | 75.00 |
| 0002 | 李四 | 0002 | 60.00 |
| 0002 | 李四 | 0003 | 79.00 |
| 0002 | 李四 | 0004 | 76.00 |
| 0003 | 王五 | 0001 | 80.00 |
| 0003 | 王五 | 0002 | 78.00 |
| 0003 | 王五 | 0003 | 97.00 |
| 0003 | 王五 | 0004 | 86.00 |
+------+------+------+-------+
12 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进一步求解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select s.stu_no 学号,s.stu_name 姓名,c.curriculum_name 课程名称,g.stu_sco
re 分数 from grade g
    -&amp;gt; left join student_info s on g.stu_no=s.stu_no
    -&amp;gt; left join curriculum c on g.curriculum=c.curriculum_no;
+------+------+------------+-------+
| 学号 | 姓名 | 课程名称   | 分数  |
+------+------+------------+-------+
| 0001 | 张三 | 计算机基础 | 80.00 |
| 0001 | 张三 | C语言      | 85.00 |
| 0001 | 张三 | 编译原理   | 90.00 |
| 0001 | 张三 | 操作系统   | 92.00 |
| 0002 | 李四 | 计算机基础 | 75.00 |
| 0002 | 李四 | C语言      | 60.00 |
| 0002 | 李四 | 编译原理   | 79.00 |
| 0002 | 李四 | 操作系统   | 76.00 |
| 0003 | 王五 | 计算机基础 | 80.00 |
| 0003 | 王五 | C语言      | 78.00 |
| 0003 | 王五 | 编译原理   | 97.00 |
| 0003 | 王五 | 操作系统   | 86.00 |
+------+------+------------+-------+
12 rows in set (0.00 sec)


mysql&amp;gt; select s.stu_no 学号,s.stu_name 姓名,c.curriculum_name 课程名称,g.stu_sco
re 分数 from grade g
    -&amp;gt; left join student_info s on g.stu_no=s.stu_no
    -&amp;gt; left join curriculum c on g.curriculum=c.curriculum_no
    -&amp;gt; where g.stu_score&amp;gt;80 and g.stu_score&amp;lt;90;
+------+------+----------+-------+
| 学号 | 姓名 | 课程名称 | 分数  |
+------+------+----------+-------+
| 0001 | 张三 | C语言    | 85.00 |
| 0003 | 王五 | 操作系统 | 86.00 |
+------+------+----------+-------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;查询学习了’C语言’课程的学生学号、姓名和分数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select s.stu_no 学号,s.stu_name 姓名,c.curriculum_name 课程名称,g.stu_sco
re 分数 from grade g
    -&amp;gt; left join curriculum c on g.curriculum=c.curriculum_no
    -&amp;gt; left join student_info s on g.stu_no=s.stu_no
    -&amp;gt; where c.curriculum_name=&#39;c语言&#39;;
+------+------+----------+-------+
| 学号 | 姓名 | 课程名称 | 分数  |
+------+------+----------+-------+
| 0001 | 张三 | C语言    | 85.00 |
| 0002 | 李四 | C语言    | 60.00 |
| 0003 | 王五 | C语言    | 78.00 |
+------+------+----------+-------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;查询学习了’C语言’课程的学生学号、姓名和分数 并排序&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; select s.stu_no 学号,s.stu_name 姓名,c.curriculum_name 课程名称,g.stu_sco
re 分数 from grade g
    -&amp;gt; left join curriculum c on g.curriculum=c.curriculum_no
    -&amp;gt; left join student_info s on g.stu_no=s.stu_no
    -&amp;gt; where c.curriculum_name=&#39;c语言&#39;
    -&amp;gt; order by g.stu_score;
+------+------+----------+-------+
| 学号 | 姓名 | 课程名称 | 分数  |
+------+------+----------+-------+
| 0002 | 李四 | C语言    | 60.00 |
| 0003 | 王五 | C语言    | 78.00 |
| 0001 | 张三 | C语言    | 85.00 |
+------+------+----------+-------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二题：
费时：3个小时（重写5遍）
&lt;a href=&#34;http://www.rupeng.com/forum/thread-44516-1-1.html&#34;&gt;http://www.rupeng.com/forum/thread-44516-1-1.html&lt;/a&gt;
sql_properties：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqlDriver=com.mysql.jdbc.Driver
connectDatabase=jdbc:mysql://localhost/study?seUnicode=true&amp;amp;characterEncoding=UTF8
userName=root
Password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JDBCUtils:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.jdbc.test;

/**
* @author    叶昭良
* @time      2015年2月19日下午10:41:37
*                        10:55     14min
* @version   com.jdbc.testrewrite4 V1.0
*/
import java.util.*;
import java.sql.*;
import java.io.*;
public class rewrite4
{
        private final static String mysqlDriver;
        private final static String connectDatabase;
        private final static String userName;
        private final static String Password;
        
        static
        {
                Properties prop = new Properties();
                InputStream in = rewrite4.class.getResourceAsStream(&amp;quot;sql.properties&amp;quot;);
                try
                {
                        prop.load(in);
                        mysqlDriver = prop.getProperty(&amp;quot;mysqlDriver&amp;quot;);
                        connectDatabase = prop.getProperty(&amp;quot;connectDatabase&amp;quot;);
                        userName = prop.getProperty(&amp;quot;userName&amp;quot;);
                        Password = prop.getProperty(&amp;quot;Password&amp;quot;);
                } catch (IOException e)
                {
                        // TODO Auto-generated catch block
                        throw new RuntimeException(&amp;quot;配置文件加载失败&amp;quot;);
                }
                try
                {
                        Class.forName(mysqlDriver);
                } catch (ClassNotFoundException e)
                {
                        // TODO Auto-generated catch block
                        throw new RuntimeException(&amp;quot;mysql驱动加载失败&amp;quot;);
                }
        }
        public static Connection createConnection()
        {
                Connection conn = null;
                try
                {
                        conn = DriverManager.getConnection(connectDatabase);
                } catch (SQLException e)
                {
                        // TODO Auto-generated catch block
                        throw new RuntimeException(&amp;quot;未能正确创建连接&amp;quot;);
                }
                return conn;
                
        }
        public static int executeUpdate(String sql,Object... param) throws SQLException
        {
                Connection conn = rewrite4.createConnection();
                return rewrite4.executeUpdate(conn,sql, param);
        }
        public static int executeUpdate(Connection conn,String sql,Object... param) throws SQLException
        {
                PreparedStatement ps = null;
                int row = 1;
                try
                {
                        ps = conn.prepareStatement(sql);
                        for(Object par:param)
                        {
                                ps.setObject(row, par);
                                row++;
                        }                
                        return ps.executeUpdate();
                }finally
                {
                        rewrite4.closeQuietly(ps);
                }

        }
        
        public static ResultSet executeQuery(String sql,Object... param) throws SQLException
        {
                Connection conn = rewrite4.createConnection();
                return rewrite4.executeQuery(conn, sql, param);
        }
        public static ResultSet executeQuery(Connection conn,String sql,Object... param) throws SQLException
        {
                ResultSet  rs = null;
                PreparedStatement ps = null;
                
                ps = conn.prepareStatement(sql);
                int row =1;
                for(Object par:param)
                {
                        ps.setObject(row, par);
                        row++;
                }
                rs = ps.executeQuery();
                return rs;
                
        }
        public static void closeQuietly(Connection conn)
        {
                if(conn != null)
                {
                        try
                        {
                                conn.close();
                        } catch (SQLException e)
                        {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                }
        }
        public static void closeQuietly(Statement stmt)
        {
                if(stmt != null)
                {
                        try
                        {
                                stmt.close();
                        } catch (SQLException e)
                        {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                }
        }
        public static void closeQuietly(ResultSet rs)
        {
                if(rs != null)
                {
                        try
                        {
                                rs.close();
                        } catch (SQLException e)
                        {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                }
        }
        public static void closeAll(ResultSet rs)
        {
                if(rs != null)
                {
                        try
                        {
                                rs.close();
                        } catch (SQLException e)
                        {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                }
        }
        
        public static void rollback(Connection conn)
        {
                if(conn != null)
                {
                        try
                        {
                                conn.rollback();
                        } catch (SQLException e)
                        {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第三题：
费时1个小时左右&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
* 
*/
package com.jdbc.test;

/**
* @author    叶昭良
* @time      2015年2月18日下午3:49:22
*                        下午5:00左右
* @version   com.jdbc.testphoneCheck V1.0
*/
import java.io.*;
import java.sql.*;
import java.util.Scanner;


public class phoneCheck
{

        /**
         * @param args
         */
/**
* ID,MobileNumber,MobileArea,MobileType,AreaCode,PostCode,0
        连接成功
        总共添加了300105条数据.耗时：64712
*/
        private static void load()
        {
                //导入csv数据，利用BufferedInputStream
          InputStream is = null;
          InputStreamReader isr = null;
          BufferedReader bis = null; //一行一行读入数据
          
          Connection conn = null;
          PreparedStatement ps = null;
                int len = 0;
                int i = 0;
                long startms = System.currentTimeMillis();
                try
                {
                        is = new FileInputStream(&amp;quot;e://phone.csv&amp;quot;);
                    isr = new InputStreamReader(is);
                        bis = new BufferedReader(isr);
                        
                        System.out.println(bis.readLine());
                        //第一行字段舍去
                        String apple=  null;
                        String[] applePiles = null;
                        //第一次测试  字符串的行读入
/*                        System.out.println(bis.readLine());
                        System.out.println(bis.readLine());*/
                        /*apple =bis.readLine();
                        //字符串的一次失误！！ 导致插入失败！！＂＂是默认存在的　必须删掉
                        apple = apple.replaceAll(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);
                        //第二次测试 字符串分隔
                        String[] splitArray = apple.split(&amp;quot;,&amp;quot;);
                        for(String apple1 :splitArray)
                        {
                                System.out.println(apple1);
                        }*/
                        conn = JDBCUtils.createConnection();
                        conn.setAutoCommit(false);
                        
                        String sql = &amp;quot;insert into phone(MobileNumber,MobileArea,MobileType,Area&amp;quot;
                                        + &amp;quot;Code,PostCode) values(?,?,?,?,?);&amp;quot;;
                        ps = conn.prepareStatement(sql);
                        /**
                         * 370中国电信
                                371中国电信
                                之后 报错 ，可能是为空的原因 
                         */
                        while((apple=bis.readLine()) != null)
                        {
                                apple = apple.replaceAll(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);
                                applePiles = apple.split(&amp;quot;,&amp;quot;);
                                
                                ps.clearParameters();
                                //ps.setInt(1, Integer.parseInt(applePiles[1].equalsIgnoreCase(&amp;quot;&amp;quot;)?&amp;quot;1111&amp;quot;:applePiles[4]));
                                //ps.setInt(1, Integer.parseInt(applePiles[1]));
                                ps.setString(1, applePiles[1]);
                                ps.setString(2, applePiles[2]);
                                //System.out.println(i+applePiles[3]+applePiles[4]);
                                ps.setString(3, applePiles[3]);
//                                ps.setInt(4, Integer.parseInt(applePiles[4]));//.equalsIgnoreCase(&amp;quot;&amp;quot;)?&amp;quot;1111&amp;quot;:applePiles[4]));
//                                ps.setInt(5, Integer.parseInt(applePiles[5]));//.equalsIgnoreCase(&amp;quot;&amp;quot;)?&amp;quot;1111&amp;quot;:applePiles[4]));
                                ps.setString(4, applePiles[4]);
                                ps.setString(5, applePiles[5]);
                                ps.addBatch();

                                i++;
                                //每个2000步之后进行提交一次 到数据库
                                if(i%2000==0)
                                {
                                        ps.executeBatch();
                                }
                        }
                        //提交 最后的几百步
                        ps.executeBatch();
                        conn.commit();
                        long endMs = System.currentTimeMillis();
                        System.out.println(&amp;quot;总共添加了&amp;quot;+i+&amp;quot;条数据&amp;quot;+&amp;quot;.耗时：&amp;quot;+(endMs-startms));
                }catch(IOException e)
                {
                        throw new RuntimeException(&amp;quot;读取文件异常&amp;quot;);
                }catch(SQLException e)
                {
                        try
                        {
                                conn.rollback();
                        } catch (SQLException e1)
                        {
                                // TODO Auto-generated catch block
                                e1.printStackTrace();
                        } //又忘记了
                        throw new RuntimeException(&amp;quot;数据库插入异常！&amp;quot;);
                        
                }finally
                {
                        //用完之后记得差屁股
                        JDBCUtils.closeQuietly(ps);
                        JDBCUtils.closeQuietly(conn);
                }
        }
        
        public static void checkPhoneNumber(String PhoneNumber)
        {

                
                PhoneNumber = &amp;quot;%&amp;quot;+PhoneNumber+&amp;quot;%&amp;quot;;
                String sql = &amp;quot;select * from phone where MobileNumber like ?&amp;quot;;
                ResultSet rs  = null;
                try
                {
                        rs = JDBCUtils.executeQuery(sql, PhoneNumber);
                        if(!rs.next())
                        {
                                System.out.println(&amp;quot;当前版本没有&amp;quot;+PhoneNumber+&amp;quot;的信息&amp;quot;);
//                                return;
                        }
                        //rs.next();
                        System.out.println(PhoneNumber+&amp;quot;手机号来自&amp;quot;+rs.getString(&amp;quot;MobileArea&amp;quot;)+rs.getString(&amp;quot;MobileType&amp;quot;));
                } catch (SQLException e)
                {
                        // TODO Auto-generated catch block
                        return;
                }finally
                {
                        //用完之后就差屁股
                        JDBCUtils.closeAll(rs);
                }
                
        }
        public static void main(String[] args)
        {
                // TODO Auto-generated method stub
                //导入一次即可
                //load();
                while(true)
                {
                        System.out.println(&amp;quot;请输入手机号(至少7位)&amp;quot;);
                        Scanner sc = new Scanner(System.in);
                        String PhoneNumber = sc.nextLine();
                        
                        if(PhoneNumber.equalsIgnoreCase(&amp;quot;exit&amp;quot;)||PhoneNumber.equalsIgnoreCase(&amp;quot;quit&amp;quot;))
                        {
                                return;
                        }
                        PhoneNumber = PhoneNumber.substring(0,7);
                        checkPhoneNumber(PhoneNumber);
                }
                
        }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加上对话框的设计：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
* 
*/
package com.jdbc.test;

import java.sql.ResultSet;
import java.sql.SQLException;



import com.rupeng.gtk4j.GTK;
import com.rupeng.gtk4j.IGCallBack;



/**
* @author    叶昭良
* @time      2015年2月22日下午7:48:03
* @version   com.jdbc.testPhoneCheckUpdate V1.0
*/
import GTKEncapsulate.*;
public class PhoneCheckUpdate
{

        /**
         * @param args
         */
        private static  OOLabel olLabel;
        private static  OOEntry oeCerti;
        private static OOButton obClick;
        private static OOBox obBox;
        private static OOWindow owPig;
        public PhoneCheckUpdate()
        {
                olLabel = new  OOLabel(&amp;quot;请输入电话的前六位：&amp;quot;);
                oeCerti = new OOEntry();
                oeCerti.setTextMaxLength(6);
                oeCerti.setText(&amp;quot;151010&amp;quot;);
                
                obBox = new OOBox();
                obClick = new OOButton(&amp;quot;查询&amp;quot;);
                owPig = new OOWindow();
                owPig.setWidgetSize(200, 50);
                //show
                owPig.show();
                owPig.setExitAfterDestroy(true);
                olLabel.show();
                oeCerti.show();
                obBox.show();
                obClick.show();
                
                //contains
                owPig.add(obBox);        
                obBox.add(olLabel);
                obBox.add(oeCerti);
                obBox.add(obClick);
                
                //添加事件
                obClick.addClickedListener(new IGCallBack()
                {
                        
                        @Override
                        public void execute(int instance, int eventData, Object object)
                        {
                                // TODO Auto-generated method stub
                                String text= oeCerti.getText();
                                OOMessageDialog omd = new OOMessageDialog(checkPhoneNumber(text));
                                omd.run();
                                omd.destroy();
                                
                        }
                });
        }
        private static String checkPhoneNumber(String PhoneNumber)
        {

                
                PhoneNumber = &amp;quot;%&amp;quot;+PhoneNumber+&amp;quot;%&amp;quot;;
                String sql = &amp;quot;select * from phone where MobileNumber like ?&amp;quot;;
                ResultSet rs  = null;
                try
                {
                        rs = JDBCUtils.executeQuery(sql, PhoneNumber);
                        if(!rs.next())
                        {
                                System.out.println(&amp;quot;当前版本没有&amp;quot;+PhoneNumber+&amp;quot;的信息&amp;quot;);
                                return &amp;quot;当前版本没有&amp;quot;+PhoneNumber+&amp;quot;的信息&amp;quot;;
                                
//                                return;
                        }
                        //rs.next();
                        System.out.println(PhoneNumber+&amp;quot;手机号来自&amp;quot;+rs.getString(&amp;quot;MobileArea&amp;quot;)+rs.getString(&amp;quot;MobileType&amp;quot;));
                        return PhoneNumber+&amp;quot;手机号来自&amp;quot;+rs.getString(&amp;quot;MobileArea&amp;quot;)+rs.getString(&amp;quot;MobileType&amp;quot;);
                        
                } catch (SQLException e)
                {
                        // TODO Auto-generated catch block
                        return null;
                }finally
                {
                        JDBCUtils.closeAll(rs);
                }
                
        }
        public static void main(String[] args)
        {
                // TODO Auto-generated method stub
                GTK.gtk_init();
                PhoneCheckUpdate pcu = new PhoneCheckUpdate();
                
                GTK.gtk_main();
        }

}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
